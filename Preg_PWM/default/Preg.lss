
Preg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001656  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00001656  0000170a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  00800168  00800168  00001812  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  00001812  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000001a0  00000000  00000000  00001815  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000040a  00000000  00000000  000019b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000291f  00000000  00000000  00001dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001450  00000000  00000000  000046de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001983  00000000  00000000  00005b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000300  00000000  00000000  000074b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d3  00000000  00000000  000077b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cbd  00000000  00000000  00007c87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00008944  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a7 39       	cpi	r26, 0x97	; 151
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e5       	ldi	r30, 0x56	; 86
      78:	f6 e1       	ldi	r31, 0x16	; 22
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 be 02 	call	0x57c	; 0x57c <main>
      8a:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <uart_init>:
//------------------------------------------------------------------------------------
//UART

void uart_init(void)
{
	UBRRH = UART_BAUDRATE_H;		// Init UART baudrate
      92:	10 bc       	out	0x20, r1	; 32
	UBRRL = UART_BAUDRATE_L;
      94:	83 e3       	ldi	r24, 0x33	; 51
      96:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1<<RXEN)|(1<<TXEN)|(1 << RXCIE);	// TX, RX enable, RX interrupt enable
      98:	88 e9       	ldi	r24, 0x98	; 152
      9a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
      9c:	86 e8       	ldi	r24, 0x86	; 134
      9e:	80 bd       	out	0x20, r24	; 32
	return;
}
      a0:	08 95       	ret

000000a2 <uart_transmit_byte>:

//Send byte thought UART
void uart_transmit_byte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
      a2:	5d 9b       	sbis	0x0b, 5	; 11
      a4:	fe cf       	rjmp	.-4      	; 0xa2 <uart_transmit_byte>
	UDR = data;
      a6:	8c b9       	out	0x0c, r24	; 12
	return;
}
      a8:	08 95       	ret

000000aa <uart_receive>:

//Receive byte thought UART
unsigned char uart_receive (void)
{

	while ( !(UCSRA & (1<<RXC)) )
      aa:	5f 9b       	sbis	0x0b, 7	; 11
      ac:	fe cf       	rjmp	.-4      	; 0xaa <uart_receive>
	;
	return UDR;
      ae:	8c b1       	in	r24, 0x0c	; 12
}
      b0:	08 95       	ret

000000b2 <uart_transmit_message>:

//Transmit string to UART
void uart_transmit_message(char* msg)
{ unsigned char i;
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	04 c0       	rjmp	.+8      	; 0xbe <uart_transmit_message+0xc>
}

//Send byte thought UART
void uart_transmit_byte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
      b6:	5d 9b       	sbis	0x0b, 5	; 11
      b8:	fe cf       	rjmp	.-4      	; 0xb6 <uart_transmit_message+0x4>
	UDR = data;
      ba:	ec b9       	out	0x0c, r30	; 12
	i=0;

	while ((i<256)&(msg[i]!=0x00) )
	{
		uart_transmit_byte(msg[i]);
		i++;
      bc:	2f 5f       	subi	r18, 0xFF	; 255
//Transmit string to UART
void uart_transmit_message(char* msg)
{ unsigned char i;
	i=0;

	while ((i<256)&(msg[i]!=0x00) )
      be:	fc 01       	movw	r30, r24
      c0:	e2 0f       	add	r30, r18
      c2:	f1 1d       	adc	r31, r1
      c4:	e0 81       	ld	r30, Z
      c6:	ee 23       	and	r30, r30
      c8:	b1 f7       	brne	.-20     	; 0xb6 <uart_transmit_message+0x4>
	{
		uart_transmit_byte(msg[i]);
		i++;
	}
	return;
}
      ca:	08 95       	ret

000000cc <init_pwm>:
//------------------------------------------------------------------------------------
//PWM

void init_pwm (void)
{
	PWM_PORT&=~(1<<PWM_PIN);
      cc:	95 98       	cbi	0x12, 5	; 18
	PWM_DDR|=(1<<PWM_PIN);
      ce:	8d 9a       	sbi	0x11, 5	; 17

	TCCR1A|=(1<<WGM10);
      d0:	8f b5       	in	r24, 0x2f	; 47
      d2:	81 60       	ori	r24, 0x01	; 1
      d4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM12)|(1<<CS10);
      d6:	8e b5       	in	r24, 0x2e	; 46
      d8:	89 60       	ori	r24, 0x09	; 9
      da:	8e bd       	out	0x2e, r24	; 46

	OCR1AL=0x00;
      dc:	1a bc       	out	0x2a, r1	; 42
	OCR1BL=0x00;
      de:	18 bc       	out	0x28, r1	; 40
	return;
}
      e0:	08 95       	ret

000000e2 <off_pwm>:

void off_pwm()
{
	TCCR1A&=~(1<<COM1A1);
      e2:	8f b5       	in	r24, 0x2f	; 47
      e4:	8f 77       	andi	r24, 0x7F	; 127
      e6:	8f bd       	out	0x2f, r24	; 47
	return;
}
      e8:	08 95       	ret

000000ea <on_pwm>:

void on_pwm()
{
	TCCR1A|=(1<<COM1A1);
      ea:	8f b5       	in	r24, 0x2f	; 47
      ec:	80 68       	ori	r24, 0x80	; 128
      ee:	8f bd       	out	0x2f, r24	; 47
	return;
}
      f0:	08 95       	ret

000000f2 <set_pwm>:

void set_pwm (uint8_t data)
{
	OCR1AL=data;
      f2:	8a bd       	out	0x2a, r24	; 42
	if (data==0) off_pwm();
      f4:	88 23       	and	r24, r24
      f6:	19 f4       	brne	.+6      	; 0xfe <set_pwm+0xc>
	return;
}

void off_pwm()
{
	TCCR1A&=~(1<<COM1A1);
      f8:	8f b5       	in	r24, 0x2f	; 47
      fa:	8f 77       	andi	r24, 0x7F	; 127
      fc:	02 c0       	rjmp	.+4      	; 0x102 <set_pwm+0x10>
	return;
}

void on_pwm()
{
	TCCR1A|=(1<<COM1A1);
      fe:	8f b5       	in	r24, 0x2f	; 47
     100:	80 68       	ori	r24, 0x80	; 128
     102:	8f bd       	out	0x2f, r24	; 47
     104:	08 95       	ret

00000106 <get_pwm>:
	return;
}

uint8_t get_pwm (void)
{
	return OCR1AL;
     106:	8a b5       	in	r24, 0x2a	; 42
}
     108:	08 95       	ret

0000010a <clear_rx_buf>:

//------------------------------------------------------------------------------------
//Packets
void clear_rx_buf (void)
{
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rx_buf[i]=0;
     10e:	fc 01       	movw	r30, r24
     110:	ef 58       	subi	r30, 0x8F	; 143
     112:	fe 4f       	sbci	r31, 0xFE	; 254
     114:	10 82       	st	Z, r1
     116:	01 96       	adiw	r24, 0x01	; 1
//------------------------------------------------------------------------------------
//Packets
void clear_rx_buf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     118:	8b 30       	cpi	r24, 0x0B	; 11
     11a:	91 05       	cpc	r25, r1
     11c:	c1 f7       	brne	.-16     	; 0x10e <clear_rx_buf+0x4>
	rx_buf[i]=0;
	current_rx_packet_len=0;
     11e:	10 92 69 01 	sts	0x0169, r1
	return;
}
     122:	08 95       	ret

00000124 <clear_tx_buf>:

void clear_tx_buf (void)
{
     124:	80 e0       	ldi	r24, 0x00	; 0
     126:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	tx_buf[i]=0;
     128:	fc 01       	movw	r30, r24
     12a:	e3 58       	subi	r30, 0x83	; 131
     12c:	fe 4f       	sbci	r31, 0xFE	; 254
     12e:	10 82       	st	Z, r1
     130:	01 96       	adiw	r24, 0x01	; 1
}

void clear_tx_buf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     132:	8b 30       	cpi	r24, 0x0B	; 11
     134:	91 05       	cpc	r25, r1
     136:	c1 f7       	brne	.-16     	; 0x128 <clear_tx_buf+0x4>
	tx_buf[i]=0;
	return;
}
     138:	08 95       	ret

0000013a <clear_buf>:

void clear_buf (void)
{
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rx_buf[i]=tx_buf[i]=0;
     13e:	f9 01       	movw	r30, r18
     140:	e3 58       	subi	r30, 0x83	; 131
     142:	fe 4f       	sbci	r31, 0xFE	; 254
     144:	10 82       	st	Z, r1
     146:	80 81       	ld	r24, Z
     148:	f9 01       	movw	r30, r18
     14a:	ef 58       	subi	r30, 0x8F	; 143
     14c:	fe 4f       	sbci	r31, 0xFE	; 254
     14e:	80 83       	st	Z, r24
     150:	2f 5f       	subi	r18, 0xFF	; 255
     152:	3f 4f       	sbci	r19, 0xFF	; 255
}

void clear_buf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     154:	2b 30       	cpi	r18, 0x0B	; 11
     156:	31 05       	cpc	r19, r1
     158:	91 f7       	brne	.-28     	; 0x13e <clear_buf+0x4>
	rx_buf[i]=tx_buf[i]=0;
	return;
}
     15a:	08 95       	ret

0000015c <__vector_11>:

//receive packet to RX buffer
ISR(USART_RXC_vect)
{
     15c:	1f 92       	push	r1
     15e:	0f 92       	push	r0
     160:	0f b6       	in	r0, 0x3f	; 63
     162:	0f 92       	push	r0
     164:	11 24       	eor	r1, r1
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	8f 93       	push	r24
     170:	9f 93       	push	r25
     172:	ef 93       	push	r30
     174:	ff 93       	push	r31
	uint16_t i=0;

	if (packet_received!=0)
     176:	80 91 68 01 	lds	r24, 0x0168
     17a:	88 23       	and	r24, r24
     17c:	11 f0       	breq	.+4      	; 0x182 <__vector_11+0x26>
	{
		i=UDR;
     17e:	8c b1       	in	r24, 0x0c	; 12
     180:	29 c0       	rjmp	.+82     	; 0x1d4 <__vector_11+0x78>
		return;
	}

	rx_buf[0]=UDR;
     182:	8c b1       	in	r24, 0x0c	; 12
     184:	80 93 71 01 	sts	0x0171, r24
	current_rx_packet_len=1;
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	80 93 69 01 	sts	0x0169, r24
     18e:	20 e0       	ldi	r18, 0x00	; 0
     190:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     192:	41 e0       	ldi	r20, 0x01	; 1
     194:	50 e0       	ldi	r21, 0x00	; 0
     196:	09 c0       	rjmp	.+18     	; 0x1aa <__vector_11+0x4e>

	while (1)
	{
		while ( !(UCSRA & (1<<RXC)) )
		{
			if (i==10000)
     198:	87 e2       	ldi	r24, 0x27	; 39
     19a:	20 31       	cpi	r18, 0x10	; 16
     19c:	38 07       	cpc	r19, r24
     19e:	b9 f0       	breq	.+46     	; 0x1ce <__vector_11+0x72>
			{
				packet_received=1;
				return;
			}
			i++;
     1a0:	2f 5f       	subi	r18, 0xFF	; 255
     1a2:	3f 4f       	sbci	r19, 0xFF	; 255
     1a4:	ca 01       	movw	r24, r20
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <__vector_11+0x4a>
	rx_buf[0]=UDR;
	current_rx_packet_len=1;

	while (1)
	{
		while ( !(UCSRA & (1<<RXC)) )
     1aa:	5f 9b       	sbis	0x0b, 7	; 11
     1ac:	f5 cf       	rjmp	.-22     	; 0x198 <__vector_11+0x3c>
				return;
			}
			i++;
			_delay_loop_2(1);
		}
		rx_buf[current_rx_packet_len]=UDR;
     1ae:	e0 91 69 01 	lds	r30, 0x0169
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	8c b1       	in	r24, 0x0c	; 12
     1b6:	ef 58       	subi	r30, 0x8F	; 143
     1b8:	fe 4f       	sbci	r31, 0xFE	; 254
     1ba:	80 83       	st	Z, r24
		current_rx_packet_len++;
     1bc:	80 91 69 01 	lds	r24, 0x0169
     1c0:	8f 5f       	subi	r24, 0xFF	; 255
     1c2:	80 93 69 01 	sts	0x0169, r24

		if (current_rx_packet_len>=BUFF_SIZE)
     1c6:	80 91 69 01 	lds	r24, 0x0169
     1ca:	8b 30       	cpi	r24, 0x0B	; 11
     1cc:	70 f3       	brcs	.-36     	; 0x1aa <__vector_11+0x4e>
		{
			packet_received=1;
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	80 93 68 01 	sts	0x0168, r24
			return;
		}
	}
}
     1d4:	ff 91       	pop	r31
     1d6:	ef 91       	pop	r30
     1d8:	9f 91       	pop	r25
     1da:	8f 91       	pop	r24
     1dc:	5f 91       	pop	r21
     1de:	4f 91       	pop	r20
     1e0:	3f 91       	pop	r19
     1e2:	2f 91       	pop	r18
     1e4:	0f 90       	pop	r0
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	0f 90       	pop	r0
     1ea:	1f 90       	pop	r1
     1ec:	18 95       	reti

000001ee <uart_send_packet>:

//send packet to host
void uart_send_packet(uint8_t *data, uint8_t length)
{
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	08 c0       	rjmp	.+16     	; 0x204 <uart_send_packet+0x16>
	uint8_t i;
	for (i=0;i<length;i++)
	uart_transmit_byte(tx_buf[i]);
     1f4:	fc 01       	movw	r30, r24
     1f6:	e3 58       	subi	r30, 0x83	; 131
     1f8:	fe 4f       	sbci	r31, 0xFE	; 254
     1fa:	e0 81       	ld	r30, Z
}

//Send byte thought UART
void uart_transmit_byte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     1fc:	5d 9b       	sbis	0x0b, 5	; 11
     1fe:	fe cf       	rjmp	.-4      	; 0x1fc <uart_send_packet+0xe>
	UDR = data;
     200:	ec b9       	out	0x0c, r30	; 12
     202:	01 96       	adiw	r24, 0x01	; 1

//send packet to host
void uart_send_packet(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     204:	86 17       	cp	r24, r22
     206:	b0 f3       	brcs	.-20     	; 0x1f4 <uart_send_packet+0x6>
	uart_transmit_byte(tx_buf[i]);
	return;
}
     208:	08 95       	ret

0000020a <crc8_block>:

//crc calculating function
uint8_t crc8_block(uint8_t *pcBlock, uint8_t len)
{
     20a:	fc 01       	movw	r30, r24
     20c:	9f ef       	ldi	r25, 0xFF	; 255
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     20e:	21 e3       	ldi	r18, 0x31	; 49
     210:	0e c0       	rjmp	.+28     	; 0x22e <crc8_block+0x24>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     212:	80 81       	ld	r24, Z
     214:	98 27       	eor	r25, r24
     216:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     218:	97 ff       	sbrs	r25, 7
     21a:	03 c0       	rjmp	.+6      	; 0x222 <crc8_block+0x18>
     21c:	99 0f       	add	r25, r25
     21e:	92 27       	eor	r25, r18
     220:	01 c0       	rjmp	.+2      	; 0x224 <crc8_block+0x1a>
     222:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     224:	8f 5f       	subi	r24, 0xFF	; 255
     226:	88 30       	cpi	r24, 0x08	; 8
     228:	b9 f7       	brne	.-18     	; 0x218 <crc8_block+0xe>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     22a:	31 96       	adiw	r30, 0x01	; 1
     22c:	61 50       	subi	r22, 0x01	; 1
uint8_t crc8_block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     22e:	66 23       	and	r22, r22
     230:	81 f7       	brne	.-32     	; 0x212 <crc8_block+0x8>
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
	}	
	return crc;
}
     232:	89 2f       	mov	r24, r25
     234:	08 95       	ret

00000236 <prepare_system_status>:

//prepare TX buffer
void prepare_system_status (void)
{
	tx_buf[0]='d';
     236:	84 e6       	ldi	r24, 0x64	; 100
     238:	80 93 7d 01 	sts	0x017D, r24
	tx_buf[1]= sensor_data[0]>>8;
     23c:	80 91 6c 01 	lds	r24, 0x016C
     240:	90 91 6d 01 	lds	r25, 0x016D
     244:	90 93 7e 01 	sts	0x017E, r25
	tx_buf[2]= sensor_data[0]&0x00ff;
     248:	80 91 6c 01 	lds	r24, 0x016C
     24c:	90 91 6d 01 	lds	r25, 0x016D
     250:	80 93 7f 01 	sts	0x017F, r24
	tx_buf[3]= sensor_data[1]>>8;
     254:	80 91 6e 01 	lds	r24, 0x016E
     258:	90 91 6f 01 	lds	r25, 0x016F
     25c:	90 93 80 01 	sts	0x0180, r25
	tx_buf[4]= sensor_data[1]&0x00ff;
     260:	80 91 6e 01 	lds	r24, 0x016E
     264:	90 91 6f 01 	lds	r25, 0x016F
     268:	80 93 81 01 	sts	0x0181, r24
	tx_buf[5]= value_data[0]>>8;
     26c:	80 91 95 01 	lds	r24, 0x0195
     270:	90 91 96 01 	lds	r25, 0x0196
     274:	90 93 82 01 	sts	0x0182, r25
	tx_buf[6]= value_data[0]&0x00ff;
     278:	80 91 95 01 	lds	r24, 0x0195
     27c:	90 91 96 01 	lds	r25, 0x0196
     280:	80 93 83 01 	sts	0x0183, r24
	return;
}

uint8_t get_pwm (void)
{
	return OCR1AL;
     284:	8a b5       	in	r24, 0x2a	; 42
	tx_buf[2]= sensor_data[0]&0x00ff;
	tx_buf[3]= sensor_data[1]>>8;
	tx_buf[4]= sensor_data[1]&0x00ff;
	tx_buf[5]= value_data[0]>>8;
	tx_buf[6]= value_data[0]&0x00ff;
	tx_buf[7]= get_pwm();
     286:	80 93 84 01 	sts	0x0184, r24
	tx_buf[8]= error_code;
     28a:	80 91 6a 01 	lds	r24, 0x016A
     28e:	80 93 85 01 	sts	0x0185, r24
	tx_buf[9]= pwm_state;
     292:	80 91 70 01 	lds	r24, 0x0170
     296:	80 93 86 01 	sts	0x0186, r24
	tx_buf[10]=crc8_block(tx_buf,10);
     29a:	8d e7       	ldi	r24, 0x7D	; 125
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	6a e0       	ldi	r22, 0x0A	; 10
     2a0:	0e 94 05 01 	call	0x20a	; 0x20a <crc8_block>
     2a4:	80 93 87 01 	sts	0x0187, r24
}
     2a8:	08 95       	ret

000002aa <present_ds18b20>:
//DS18B20

uint8_t present_ds18b20(uint8_t sensor_num)
{	uint8_t res, sensor_pin;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     2aa:	88 23       	and	r24, r24
     2ac:	11 f0       	breq	.+4      	; 0x2b2 <present_ds18b20+0x8>
     2ae:	43 e0       	ldi	r20, 0x03	; 3
     2b0:	01 c0       	rjmp	.+2      	; 0x2b4 <present_ds18b20+0xa>
     2b2:	42 e0       	ldi	r20, 0x02	; 2
	else sensor_pin=SENSOR1_PIN;
	
	SENSOR_DDR|=(1<<sensor_pin);
     2b4:	84 b3       	in	r24, 0x14	; 20
     2b6:	21 e0       	ldi	r18, 0x01	; 1
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	92 2f       	mov	r25, r18
     2bc:	04 2e       	mov	r0, r20
     2be:	01 c0       	rjmp	.+2      	; 0x2c2 <present_ds18b20+0x18>
     2c0:	99 0f       	add	r25, r25
     2c2:	0a 94       	dec	r0
     2c4:	ea f7       	brpl	.-6      	; 0x2c0 <present_ds18b20+0x16>
     2c6:	89 2b       	or	r24, r25
     2c8:	84 bb       	out	0x14, r24	; 20
     2ca:	e6 eb       	ldi	r30, 0xB6	; 182
     2cc:	f3 e0       	ldi	r31, 0x03	; 3
     2ce:	31 97       	sbiw	r30, 0x01	; 1
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <present_ds18b20+0x24>
	_delay_loop_2(950);         //Pause 480mks

	SENSOR_DDR&=~(1<<sensor_pin);
     2d2:	84 b3       	in	r24, 0x14	; 20
     2d4:	90 95       	com	r25
     2d6:	98 23       	and	r25, r24
     2d8:	94 bb       	out	0x14, r25	; 20
     2da:	82 e8       	ldi	r24, 0x82	; 130
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <present_ds18b20+0x34>
	_delay_loop_2(130);          //Pause 70mks

	if ((SENSOR_PIN&(1<<sensor_pin)) == 0x00) res=1;  //if present, res=1
     2e2:	83 b3       	in	r24, 0x13	; 19
     2e4:	e4 e3       	ldi	r30, 0x34	; 52
     2e6:	f3 e0       	ldi	r31, 0x03	; 3
     2e8:	31 97       	sbiw	r30, 0x01	; 1
     2ea:	f1 f7       	brne	.-4      	; 0x2e8 <present_ds18b20+0x3e>
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <present_ds18b20+0x4a>
     2f0:	95 95       	asr	r25
     2f2:	87 95       	ror	r24
     2f4:	4a 95       	dec	r20
     2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <present_ds18b20+0x46>
     2f8:	82 27       	eor	r24, r18
     2fa:	93 27       	eor	r25, r19
	else res=0;  // else 0
	
	_delay_loop_2(820);          //pause 410mks
	return res;
}
     2fc:	81 70       	andi	r24, 0x01	; 1
     2fe:	08 95       	ret

00000300 <send_ds18b20>:

void send_ds18b20(uint8_t command, uint8_t sensor_num)
{	uint8_t i, data, sensor_pin;
     300:	38 2f       	mov	r19, r24

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     302:	66 23       	and	r22, r22
     304:	11 f0       	breq	.+4      	; 0x30a <send_ds18b20+0xa>
     306:	23 e0       	ldi	r18, 0x03	; 3
     308:	01 c0       	rjmp	.+2      	; 0x30c <send_ds18b20+0xc>
     30a:	22 e0       	ldi	r18, 0x02	; 2
	data=command;

	for(i=0;i<8;i++)
	{
		if ((data&0x01)==0x01) {    //Send 1 on SDA
			SENSOR_DDR|=(1<<sensor_pin);
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	48 2f       	mov	r20, r24
     312:	01 c0       	rjmp	.+2      	; 0x316 <send_ds18b20+0x16>
     314:	44 0f       	add	r20, r20
     316:	2a 95       	dec	r18
     318:	ea f7       	brpl	.-6      	; 0x314 <send_ds18b20+0x14>
			_delay_loop_2(4);		//pause 6mks
			SENSOR_DDR&=~(1<<sensor_pin);
     31a:	54 2f       	mov	r21, r20
     31c:	50 95       	com	r21
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	ae e6       	ldi	r26, 0x6E	; 110
     322:	b0 e0       	ldi	r27, 0x00	; 0
	else sensor_pin=SENSOR1_PIN;
	data=command;

	for(i=0;i<8;i++)
	{
		if ((data&0x01)==0x01) {    //Send 1 on SDA
     324:	64 e0       	ldi	r22, 0x04	; 4
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	e8 e7       	ldi	r30, 0x78	; 120
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	30 ff       	sbrs	r19, 0
     32e:	0b c0       	rjmp	.+22     	; 0x346 <send_ds18b20+0x46>
			SENSOR_DDR|=(1<<sensor_pin);
     330:	84 b3       	in	r24, 0x14	; 20
     332:	84 2b       	or	r24, r20
     334:	84 bb       	out	0x14, r24	; 20
     336:	cb 01       	movw	r24, r22
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	f1 f7       	brne	.-4      	; 0x338 <send_ds18b20+0x38>
			_delay_loop_2(4);		//pause 6mks
			SENSOR_DDR&=~(1<<sensor_pin);
     33c:	84 b3       	in	r24, 0x14	; 20
     33e:	85 23       	and	r24, r21
     340:	84 bb       	out	0x14, r24	; 20
     342:	cf 01       	movw	r24, r30
     344:	0a c0       	rjmp	.+20     	; 0x35a <send_ds18b20+0x5a>
			_delay_loop_2(120);	//pause 64mks
		}
		else {                   	//Send 0 on SDA
			SENSOR_DDR|=(1<<sensor_pin);
     346:	84 b3       	in	r24, 0x14	; 20
     348:	84 2b       	or	r24, r20
     34a:	84 bb       	out	0x14, r24	; 20
     34c:	cd 01       	movw	r24, r26
     34e:	01 97       	sbiw	r24, 0x01	; 1
     350:	f1 f7       	brne	.-4      	; 0x34e <send_ds18b20+0x4e>
			_delay_loop_2(110);    //pause 60mks
			SENSOR_DDR&=~(1<<sensor_pin);
     352:	84 b3       	in	r24, 0x14	; 20
     354:	85 23       	and	r24, r21
     356:	84 bb       	out	0x14, r24	; 20
     358:	cb 01       	movw	r24, r22
     35a:	01 97       	sbiw	r24, 0x01	; 1
     35c:	f1 f7       	brne	.-4      	; 0x35a <send_ds18b20+0x5a>

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;
	data=command;

	for(i=0;i<8;i++)
     35e:	2f 5f       	subi	r18, 0xFF	; 255
     360:	28 30       	cpi	r18, 0x08	; 8
     362:	11 f0       	breq	.+4      	; 0x368 <send_ds18b20+0x68>
			SENSOR_DDR|=(1<<sensor_pin);
			_delay_loop_2(110);    //pause 60mks
			SENSOR_DDR&=~(1<<sensor_pin);
			_delay_loop_2(4);		//pause 10mks
		}
		data=data>>1;
     364:	36 95       	lsr	r19
     366:	e2 cf       	rjmp	.-60     	; 0x32c <send_ds18b20+0x2c>
     368:	08 95       	ret

0000036a <receive_ds18b20>:
	}
	return;
}

uint16_t receive_ds18b20(uint8_t sensor_num)
{	uint8_t i, sensor_pin;
     36a:	ff 92       	push	r15
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
	uint16_t res=0;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     374:	88 23       	and	r24, r24
     376:	11 f0       	breq	.+4      	; 0x37c <receive_ds18b20+0x12>
     378:	83 e0       	ldi	r24, 0x03	; 3
     37a:	01 c0       	rjmp	.+2      	; 0x37e <receive_ds18b20+0x14>
     37c:	82 e0       	ldi	r24, 0x02	; 2
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
	{
		SENSOR_DDR|=(1<<sensor_pin);
     37e:	61 e0       	ldi	r22, 0x01	; 1
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	02 c0       	rjmp	.+4      	; 0x388 <receive_ds18b20+0x1e>
     384:	66 0f       	add	r22, r22
     386:	77 1f       	adc	r23, r23
     388:	8a 95       	dec	r24
     38a:	e2 f7       	brpl	.-8      	; 0x384 <receive_ds18b20+0x1a>
     38c:	a6 2f       	mov	r26, r22
		_delay_loop_2(4);       		//Pause 6mks
		SENSOR_DDR&=~(1<<sensor_pin);
     38e:	b6 2f       	mov	r27, r22
     390:	b0 95       	com	r27
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	04 e0       	ldi	r16, 0x04	; 4
     39c:	10 e0       	ldi	r17, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     39e:	8c e0       	ldi	r24, 0x0C	; 12
     3a0:	f8 2e       	mov	r15, r24
		_delay_loop_1(12);           	//Pause 9mks

		if ((SENSOR_PIN & (1<<sensor_pin))==0x00) res&=~_BV(i);	//If 0 on SDA
		else 	res|=_BV(i);	    //IF 1 on SDA
     3a2:	e1 e0       	ldi	r30, 0x01	; 1
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3a6:	c4 e6       	ldi	r28, 0x64	; 100
     3a8:	d0 e0       	ldi	r29, 0x00	; 0
	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
	{
		SENSOR_DDR|=(1<<sensor_pin);
     3aa:	84 b3       	in	r24, 0x14	; 20
     3ac:	8a 2b       	or	r24, r26
     3ae:	84 bb       	out	0x14, r24	; 20
     3b0:	c8 01       	movw	r24, r16
     3b2:	01 97       	sbiw	r24, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <receive_ds18b20+0x48>
		_delay_loop_2(4);       		//Pause 6mks
		SENSOR_DDR&=~(1<<sensor_pin);
     3b6:	84 b3       	in	r24, 0x14	; 20
     3b8:	8b 23       	and	r24, r27
     3ba:	84 bb       	out	0x14, r24	; 20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3bc:	8f 2d       	mov	r24, r15
     3be:	8a 95       	dec	r24
     3c0:	f1 f7       	brne	.-4      	; 0x3be <receive_ds18b20+0x54>
		_delay_loop_1(12);           	//Pause 9mks

		if ((SENSOR_PIN & (1<<sensor_pin))==0x00) res&=~_BV(i);	//If 0 on SDA
     3c2:	83 b3       	in	r24, 0x13	; 19
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	86 23       	and	r24, r22
     3c8:	97 23       	and	r25, r23
     3ca:	89 2b       	or	r24, r25
     3cc:	61 f4       	brne	.+24     	; 0x3e6 <receive_ds18b20+0x7c>
     3ce:	cf 01       	movw	r24, r30
     3d0:	04 2e       	mov	r0, r20
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <receive_ds18b20+0x6e>
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	0a 94       	dec	r0
     3da:	e2 f7       	brpl	.-8      	; 0x3d4 <receive_ds18b20+0x6a>
     3dc:	80 95       	com	r24
     3de:	90 95       	com	r25
     3e0:	28 23       	and	r18, r24
     3e2:	39 23       	and	r19, r25
     3e4:	09 c0       	rjmp	.+18     	; 0x3f8 <receive_ds18b20+0x8e>
		else 	res|=_BV(i);	    //IF 1 on SDA
     3e6:	cf 01       	movw	r24, r30
     3e8:	04 2e       	mov	r0, r20
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <receive_ds18b20+0x86>
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	0a 94       	dec	r0
     3f2:	e2 f7       	brpl	.-8      	; 0x3ec <receive_ds18b20+0x82>
     3f4:	28 2b       	or	r18, r24
     3f6:	39 2b       	or	r19, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3f8:	ce 01       	movw	r24, r28
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <receive_ds18b20+0x90>
     3fe:	4f 5f       	subi	r20, 0xFF	; 255
     400:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t res=0;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
     402:	40 31       	cpi	r20, 0x10	; 16
     404:	51 05       	cpc	r21, r1
     406:	89 f6       	brne	.-94     	; 0x3aa <receive_ds18b20+0x40>
		else 	res|=_BV(i);	    //IF 1 on SDA
		
		_delay_loop_2(100);      		//Pause 55mks
	}
	return res;
}
     408:	c9 01       	movw	r24, r18
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	1f 91       	pop	r17
     410:	0f 91       	pop	r16
     412:	ff 90       	pop	r15
     414:	08 95       	ret

00000416 <process_packet>:
}

//process received packet
void process_packet(void)
{
	cli();
     416:	f8 94       	cli
	//check CRC
	if (crc8_block(rx_buf,current_rx_packet_len-1)!=rx_buf[current_rx_packet_len-1])
     418:	60 91 69 01 	lds	r22, 0x0169
     41c:	61 50       	subi	r22, 0x01	; 1
     41e:	81 e7       	ldi	r24, 0x71	; 113
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	0e 94 05 01 	call	0x20a	; 0x20a <crc8_block>
     426:	e0 91 69 01 	lds	r30, 0x0169
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	e0 59       	subi	r30, 0x90	; 144
     42e:	fe 4f       	sbci	r31, 0xFE	; 254
     430:	90 81       	ld	r25, Z
     432:	89 17       	cp	r24, r25
     434:	81 f0       	breq	.+32     	; 0x456 <process_packet+0x40>
	{
		packet_received=0;
     436:	10 92 68 01 	sts	0x0168, r1
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
//Packets
void clear_rx_buf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rx_buf[i]=0;
     43e:	fc 01       	movw	r30, r24
     440:	ef 58       	subi	r30, 0x8F	; 143
     442:	fe 4f       	sbci	r31, 0xFE	; 254
     444:	10 82       	st	Z, r1
     446:	01 96       	adiw	r24, 0x01	; 1
//------------------------------------------------------------------------------------
//Packets
void clear_rx_buf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     448:	8b 30       	cpi	r24, 0x0B	; 11
     44a:	91 05       	cpc	r25, r1
     44c:	c1 f7       	brne	.-16     	; 0x43e <process_packet+0x28>
	rx_buf[i]=0;
	current_rx_packet_len=0;
     44e:	10 92 69 01 	sts	0x0169, r1
	//check CRC
	if (crc8_block(rx_buf,current_rx_packet_len-1)!=rx_buf[current_rx_packet_len-1])
	{
		packet_received=0;
		clear_rx_buf();
		sei();
     452:	78 94       	sei
     454:	08 95       	ret
		return;
	}
	//differentiate and process packet
	switch (rx_buf[0]) {
     456:	80 91 71 01 	lds	r24, 0x0171
     45a:	89 36       	cpi	r24, 0x69	; 105
     45c:	09 f4       	brne	.+2      	; 0x460 <__stack+0x1>
     45e:	42 c0       	rjmp	.+132    	; 0x4e4 <__stack+0x85>
     460:	8a 36       	cpi	r24, 0x6A	; 106
     462:	20 f4       	brcc	.+8      	; 0x46c <__stack+0xd>
     464:	87 36       	cpi	r24, 0x67	; 103
     466:	09 f0       	breq	.+2      	; 0x46a <__stack+0xb>
     468:	79 c0       	rjmp	.+242    	; 0x55c <__stack+0xfd>
     46a:	07 c0       	rjmp	.+14     	; 0x47a <__stack+0x1b>
     46c:	80 37       	cpi	r24, 0x70	; 112
     46e:	09 f4       	brne	.+2      	; 0x472 <__stack+0x13>
     470:	5e c0       	rjmp	.+188    	; 0x52e <__stack+0xcf>
     472:	83 37       	cpi	r24, 0x73	; 115
     474:	09 f0       	breq	.+2      	; 0x478 <__stack+0x19>
     476:	72 c0       	rjmp	.+228    	; 0x55c <__stack+0xfd>
     478:	15 c0       	rjmp	.+42     	; 0x4a4 <__stack+0x45>
		//if get command
		case 'g' : 	{
			if (current_rx_packet_len==2)
     47a:	80 91 69 01 	lds	r24, 0x0169
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	09 f0       	breq	.+2      	; 0x484 <__stack+0x25>
     482:	6c c0       	rjmp	.+216    	; 0x55c <__stack+0xfd>
			{
				prepare_system_status();
     484:	0e 94 1b 01 	call	0x236	; 0x236 <prepare_system_status>
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	90 e0       	ldi	r25, 0x00	; 0
//send packet to host
void uart_send_packet(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
	uart_transmit_byte(tx_buf[i]);
     48c:	fc 01       	movw	r30, r24
     48e:	e3 58       	subi	r30, 0x83	; 131
     490:	fe 4f       	sbci	r31, 0xFE	; 254
     492:	e0 81       	ld	r30, Z
}

//Send byte thought UART
void uart_transmit_byte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     494:	5d 9b       	sbis	0x0b, 5	; 11
     496:	fe cf       	rjmp	.-4      	; 0x494 <__stack+0x35>
	UDR = data;
     498:	ec b9       	out	0x0c, r30	; 12
     49a:	01 96       	adiw	r24, 0x01	; 1

//send packet to host
void uart_send_packet(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     49c:	8b 30       	cpi	r24, 0x0B	; 11
     49e:	91 05       	cpc	r25, r1
     4a0:	a9 f7       	brne	.-22     	; 0x48c <__stack+0x2d>
     4a2:	5c c0       	rjmp	.+184    	; 0x55c <__stack+0xfd>
			}			
			break;
		}
		//if set command
		case 's' : 	{
			if (current_rx_packet_len==4)
     4a4:	80 91 69 01 	lds	r24, 0x0169
     4a8:	84 30       	cpi	r24, 0x04	; 4
     4aa:	09 f0       	breq	.+2      	; 0x4ae <__stack+0x4f>
     4ac:	57 c0       	rjmp	.+174    	; 0x55c <__stack+0xfd>
			{
				uint16_t val;

				val=(rx_buf[1]<<8)|(rx_buf[2]);
     4ae:	20 91 72 01 	lds	r18, 0x0172
     4b2:	30 91 73 01 	lds	r19, 0x0173
     4b6:	92 2f       	mov	r25, r18
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	23 2f       	mov	r18, r19
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	28 2b       	or	r18, r24
     4c0:	39 2b       	or	r19, r25
				if ((val<=1780)&&(val>=780)) value_data[0]=val;
     4c2:	c9 01       	movw	r24, r18
     4c4:	8c 50       	subi	r24, 0x0C	; 12
     4c6:	93 40       	sbci	r25, 0x03	; 3
     4c8:	89 5e       	subi	r24, 0xE9	; 233
     4ca:	93 40       	sbci	r25, 0x03	; 3
     4cc:	20 f4       	brcc	.+8      	; 0x4d6 <__stack+0x77>
     4ce:	30 93 96 01 	sts	0x0196, r19
     4d2:	20 93 95 01 	sts	0x0195, r18
				eeprom_write_word (&saved_value, value_data[0]);
     4d6:	60 91 95 01 	lds	r22, 0x0195
     4da:	70 91 96 01 	lds	r23, 0x0196
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	3a c0       	rjmp	.+116    	; 0x558 <__stack+0xf9>
			
			break;
		}
		//if info command
		case 'i' :	{
			if (current_rx_packet_len==2)
     4e4:	90 91 69 01 	lds	r25, 0x0169
     4e8:	92 30       	cpi	r25, 0x02	; 2
     4ea:	c1 f5       	brne	.+112    	; 0x55c <__stack+0xfd>
			{
				tx_buf[0]='v';
     4ec:	86 e7       	ldi	r24, 0x76	; 118
     4ee:	80 93 7d 01 	sts	0x017D, r24
				tx_buf[1]=HW_REVISION;
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	80 93 7e 01 	sts	0x017E, r24
				tx_buf[2]=SW_REVISION;
     4f8:	80 93 7f 01 	sts	0x017F, r24
				tx_buf[3]=SENSOR_COUNT;
     4fc:	90 93 80 01 	sts	0x0180, r25
				tx_buf[4]=VALUE_COUNT;
     500:	80 93 81 01 	sts	0x0181, r24
				tx_buf[5]=crc8_block(tx_buf,5);
     504:	8d e7       	ldi	r24, 0x7D	; 125
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	65 e0       	ldi	r22, 0x05	; 5
     50a:	0e 94 05 01 	call	0x20a	; 0x20a <crc8_block>
     50e:	80 93 82 01 	sts	0x0182, r24
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
//send packet to host
void uart_send_packet(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
	uart_transmit_byte(tx_buf[i]);
     516:	fc 01       	movw	r30, r24
     518:	e3 58       	subi	r30, 0x83	; 131
     51a:	fe 4f       	sbci	r31, 0xFE	; 254
     51c:	e0 81       	ld	r30, Z
}

//Send byte thought UART
void uart_transmit_byte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     51e:	5d 9b       	sbis	0x0b, 5	; 11
     520:	fe cf       	rjmp	.-4      	; 0x51e <__stack+0xbf>
	UDR = data;
     522:	ec b9       	out	0x0c, r30	; 12
     524:	01 96       	adiw	r24, 0x01	; 1

//send packet to host
void uart_send_packet(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     526:	86 30       	cpi	r24, 0x06	; 6
     528:	91 05       	cpc	r25, r1
     52a:	a9 f7       	brne	.-22     	; 0x516 <__stack+0xb7>
     52c:	17 c0       	rjmp	.+46     	; 0x55c <__stack+0xfd>

			break;
		}
		//if powern ON/OFF PWM
		case 'p' : 	{
		if (current_rx_packet_len==3)
     52e:	80 91 69 01 	lds	r24, 0x0169
     532:	83 30       	cpi	r24, 0x03	; 3
     534:	99 f4       	brne	.+38     	; 0x55c <__stack+0xfd>
		{
			if ((rx_buf[1]==PWM_OFF)||(rx_buf[1]==PWM_ON))
     536:	80 91 72 01 	lds	r24, 0x0172
     53a:	88 23       	and	r24, r24
     53c:	21 f0       	breq	.+8      	; 0x546 <__stack+0xe7>
     53e:	80 91 72 01 	lds	r24, 0x0172
     542:	81 30       	cpi	r24, 0x01	; 1
     544:	59 f4       	brne	.+22     	; 0x55c <__stack+0xfd>
			{
				pwm_state=rx_buf[1];
     546:	80 91 72 01 	lds	r24, 0x0172
     54a:	80 93 70 01 	sts	0x0170, r24
				eeprom_write_word (&saved_pwm_state, pwm_state);
     54e:	60 91 70 01 	lds	r22, 0x0170
     552:	82 e0       	ldi	r24, 0x02	; 2
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	0e 94 07 0b 	call	0x160e	; 0x160e <__eewr_word_m16>
		{
			;
		}
	}

	packet_received=0;
     55c:	10 92 68 01 	sts	0x0168, r1
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
//Packets
void clear_rx_buf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rx_buf[i]=0;
     564:	fc 01       	movw	r30, r24
     566:	ef 58       	subi	r30, 0x8F	; 143
     568:	fe 4f       	sbci	r31, 0xFE	; 254
     56a:	10 82       	st	Z, r1
     56c:	01 96       	adiw	r24, 0x01	; 1
//------------------------------------------------------------------------------------
//Packets
void clear_rx_buf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     56e:	8b 30       	cpi	r24, 0x0B	; 11
     570:	91 05       	cpc	r25, r1
     572:	c1 f7       	brne	.-16     	; 0x564 <__stack+0x105>
	rx_buf[i]=0;
	current_rx_packet_len=0;
     574:	10 92 69 01 	sts	0x0169, r1
		}
	}

	packet_received=0;
	clear_rx_buf();
	sei();
     578:	78 94       	sei
     57a:	08 95       	ret

0000057c <main>:
	return res;
}
//------------------------------------------------------------------------------------

int main(void)
{
     57c:	4f 92       	push	r4
     57e:	5f 92       	push	r5
     580:	6f 92       	push	r6
     582:	7f 92       	push	r7
     584:	8f 92       	push	r8
     586:	9f 92       	push	r9
     588:	af 92       	push	r10
     58a:	bf 92       	push	r11
     58c:	cf 92       	push	r12
     58e:	df 92       	push	r13
     590:	ef 92       	push	r14
     592:	ff 92       	push	r15
     594:	0f 93       	push	r16
     596:	1f 93       	push	r17
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
	uint8_t i, sign, first_conv=_YES;
	uint16_t val, fract;
	
	//read from EEPROM saved value & PWM state
	value_data[0]= eeprom_read_word (&saved_value);
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 01 0b 	call	0x1602	; 0x1602 <__eerd_word_m16>
     5a4:	90 93 96 01 	sts	0x0196, r25
     5a8:	80 93 95 01 	sts	0x0195, r24
	pwm_state = eeprom_read_byte(&saved_pwm_state);
     5ac:	82 e0       	ldi	r24, 0x02	; 2
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__eerd_byte_m16>
     5b4:	80 93 70 01 	sts	0x0170, r24

	//init variables
	for (i=0;i<SENSOR_COUNT;i++)
	sensor_data[i]=0;
     5b8:	10 92 6d 01 	sts	0x016D, r1
     5bc:	10 92 6c 01 	sts	0x016C, r1
     5c0:	10 92 6f 01 	sts	0x016F, r1
     5c4:	10 92 6e 01 	sts	0x016E, r1
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0

void clear_buf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rx_buf[i]=tx_buf[i]=0;
     5cc:	f9 01       	movw	r30, r18
     5ce:	e3 58       	subi	r30, 0x83	; 131
     5d0:	fe 4f       	sbci	r31, 0xFE	; 254
     5d2:	10 82       	st	Z, r1
     5d4:	80 81       	ld	r24, Z
     5d6:	f9 01       	movw	r30, r18
     5d8:	ef 58       	subi	r30, 0x8F	; 143
     5da:	fe 4f       	sbci	r31, 0xFE	; 254
     5dc:	80 83       	st	Z, r24
     5de:	2f 5f       	subi	r18, 0xFF	; 255
     5e0:	3f 4f       	sbci	r19, 0xFF	; 255
}

void clear_buf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     5e2:	2b 30       	cpi	r18, 0x0B	; 11
     5e4:	31 05       	cpc	r19, r1
     5e6:	91 f7       	brne	.-28     	; 0x5cc <main+0x50>
	for (i=0;i<SENSOR_COUNT;i++)
	sensor_data[i]=0;

	clear_buf ();

	U=0.0;
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	40 e0       	ldi	r20, 0x00	; 0
     5ee:	50 e0       	ldi	r21, 0x00	; 0
     5f0:	20 93 91 01 	sts	0x0191, r18
     5f4:	30 93 92 01 	sts	0x0192, r19
     5f8:	40 93 93 01 	sts	0x0193, r20
     5fc:	50 93 94 01 	sts	0x0194, r21
	Kp=Kp_INIT;
     600:	8a e0       	ldi	r24, 0x0A	; 10
     602:	97 ed       	ldi	r25, 0xD7	; 215
     604:	a3 ea       	ldi	r26, 0xA3	; 163
     606:	bc e3       	ldi	r27, 0x3C	; 60
     608:	80 93 8d 01 	sts	0x018D, r24
     60c:	90 93 8e 01 	sts	0x018E, r25
     610:	a0 93 8f 01 	sts	0x018F, r26
     614:	b0 93 90 01 	sts	0x0190, r27
	E=0;
     618:	20 93 89 01 	sts	0x0189, r18
     61c:	30 93 8a 01 	sts	0x018A, r19
     620:	40 93 8b 01 	sts	0x018B, r20
     624:	50 93 8c 01 	sts	0x018C, r21

	//Init ports, UART, PWM
	SENSOR_PORT&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));     	
     628:	85 b3       	in	r24, 0x15	; 21
     62a:	83 7f       	andi	r24, 0xF3	; 243
     62c:	85 bb       	out	0x15, r24	; 21
	SENSOR_DDR&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));
     62e:	84 b3       	in	r24, 0x14	; 20
     630:	83 7f       	andi	r24, 0xF3	; 243
     632:	84 bb       	out	0x14, r24	; 20
	init_pwm();
     634:	0e 94 66 00 	call	0xcc	; 0xcc <init_pwm>
//------------------------------------------------------------------------------------
//UART

void uart_init(void)
{
	UBRRH = UART_BAUDRATE_H;		// Init UART baudrate
     638:	10 bc       	out	0x20, r1	; 32
	UBRRL = UART_BAUDRATE_L;
     63a:	83 e3       	ldi	r24, 0x33	; 51
     63c:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1<<RXEN)|(1<<TXEN)|(1 << RXCIE);	// TX, RX enable, RX interrupt enable
     63e:	88 e9       	ldi	r24, 0x98	; 152
     640:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
     642:	86 e8       	ldi	r24, 0x86	; 134
     644:	80 bd       	out	0x20, r24	; 32
	SENSOR_PORT&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));     	
	SENSOR_DDR&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));
	init_pwm();
	uart_init();
	
	sei();
     646:	78 94       	sei
     648:	01 e0       	ldi	r16, 0x01	; 1
     64a:	44 24       	eor	r4, r4
     64c:	4a 94       	dec	r4
     64e:	54 2c       	mov	r5, r4
				{
					send_ds18b20(SKIP_ROM,i);
					send_ds18b20(START_CONVERSION,i);
					error_code=0;
				}
				else error_code|=(1<<i);
     650:	b1 e0       	ldi	r27, 0x01	; 1
     652:	8b 2e       	mov	r8, r27
     654:	91 2c       	mov	r9, r1
						if ((val&0x04)!=0x00) fract=fract+250;
						if ((val&0x08)!=0x00) fract=fract+500;

						val=(val>>4)*10+fract/100;

						if (sign==1) val=OFFSET-val;
     656:	61 2c       	mov	r6, r1
     658:	a5 e0       	ldi	r26, 0x05	; 5
     65a:	7a 2e       	mov	r7, r26
     65c:	01 c0       	rjmp	.+2      	; 0x660 <main+0xe4>
	SENSOR_PORT&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));     	
	SENSOR_DDR&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));
	init_pwm();
	uart_init();
	
	sei();
     65e:	00 e0       	ldi	r16, 0x00	; 0
     660:	12 e0       	ldi	r17, 0x02	; 2
     662:	c2 01       	movw	r24, r4
     664:	01 97       	sbiw	r24, 0x01	; 1
     666:	f1 f7       	brne	.-4      	; 0x664 <main+0xe8>

		_delay_loop_2(0xffff);

		//delay 10ms
		//_delay_ms(10);
		i++;
     668:	1f 5f       	subi	r17, 0xFF	; 255

		if (packet_received!=0) process_packet();
     66a:	80 91 68 01 	lds	r24, 0x0168
     66e:	88 23       	and	r24, r24
     670:	11 f0       	breq	.+4      	; 0x676 <main+0xfa>
     672:	0e 94 0b 02 	call	0x416	; 0x416 <process_packet>

		if (i>=35)
     676:	13 32       	cpi	r17, 0x23	; 35
     678:	a1 f7       	brne	.-24     	; 0x662 <main+0xe6>
		{
			i=0;

			//send command from start measurement to sensors
			error_code=0;
     67a:	10 92 6a 01 	sts	0x016A, r1
     67e:	c0 e0       	ldi	r28, 0x00	; 0
     680:	d0 e0       	ldi	r29, 0x00	; 0
			for (i=0;i<SENSOR_COUNT;i++)
			{
				if (present_ds18b20(i)==1)
     682:	8c 2f       	mov	r24, r28
     684:	0e 94 55 01 	call	0x2aa	; 0x2aa <present_ds18b20>
     688:	81 30       	cpi	r24, 0x01	; 1
     68a:	59 f4       	brne	.+22     	; 0x6a2 <main+0x126>
				{
					send_ds18b20(SKIP_ROM,i);
     68c:	8c ec       	ldi	r24, 0xCC	; 204
     68e:	6c 2f       	mov	r22, r28
     690:	0e 94 80 01 	call	0x300	; 0x300 <send_ds18b20>
					send_ds18b20(START_CONVERSION,i);
     694:	84 e4       	ldi	r24, 0x44	; 68
     696:	6c 2f       	mov	r22, r28
     698:	0e 94 80 01 	call	0x300	; 0x300 <send_ds18b20>
					error_code=0;
     69c:	10 92 6a 01 	sts	0x016A, r1
     6a0:	0c c0       	rjmp	.+24     	; 0x6ba <main+0x13e>
				}
				else error_code|=(1<<i);
     6a2:	20 91 6a 01 	lds	r18, 0x016A
     6a6:	c4 01       	movw	r24, r8
     6a8:	0c 2e       	mov	r0, r28
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <main+0x134>
     6ac:	88 0f       	add	r24, r24
     6ae:	99 1f       	adc	r25, r25
     6b0:	0a 94       	dec	r0
     6b2:	e2 f7       	brpl	.-8      	; 0x6ac <main+0x130>
     6b4:	28 2b       	or	r18, r24
     6b6:	20 93 6a 01 	sts	0x016A, r18
     6ba:	21 96       	adiw	r28, 0x01	; 1
		{
			i=0;

			//send command from start measurement to sensors
			error_code=0;
			for (i=0;i<SENSOR_COUNT;i++)
     6bc:	c2 30       	cpi	r28, 0x02	; 2
     6be:	d1 05       	cpc	r29, r1
     6c0:	01 f7       	brne	.-64     	; 0x682 <main+0x106>
					error_code=0;
				}
				else error_code|=(1<<i);
			}

			if (first_conv==_YES) first_conv=_NO;
     6c2:	01 30       	cpi	r16, 0x01	; 1
     6c4:	61 f2       	breq	.-104    	; 0x65e <main+0xe2>
     6c6:	c0 e0       	ldi	r28, 0x00	; 0
     6c8:	d0 e0       	ldi	r29, 0x00	; 0
			{
		 
				//receive measured data from sensors
				for (i=0;i<SENSOR_COUNT;i++)
				{
					if (present_ds18b20(i)==1)
     6ca:	8c 2f       	mov	r24, r28
     6cc:	0e 94 55 01 	call	0x2aa	; 0x2aa <present_ds18b20>
     6d0:	81 30       	cpi	r24, 0x01	; 1
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <main+0x15a>
     6d4:	4d c0       	rjmp	.+154    	; 0x770 <main+0x1f4>
					{
						send_ds18b20(SKIP_ROM,i);
     6d6:	8c ec       	ldi	r24, 0xCC	; 204
     6d8:	6c 2f       	mov	r22, r28
     6da:	0e 94 80 01 	call	0x300	; 0x300 <send_ds18b20>
						send_ds18b20(GET_DATA,i);
     6de:	8e eb       	ldi	r24, 0xBE	; 190
     6e0:	6c 2f       	mov	r22, r28
     6e2:	0e 94 80 01 	call	0x300	; 0x300 <send_ds18b20>
						val=receive_ds18b20(i);
     6e6:	8c 2f       	mov	r24, r28
     6e8:	0e 94 b5 01 	call	0x36a	; 0x36a <receive_ds18b20>

						if ((val&0x8000)!=0x00)
     6ec:	97 fd       	sbrc	r25, 7
     6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <main+0x178>
     6f0:	e0 e0       	ldi	r30, 0x00	; 0
     6f2:	04 c0       	rjmp	.+8      	; 0x6fc <main+0x180>
						{
							sign=1;
							val=0xffff-val+1;
     6f4:	90 95       	com	r25
     6f6:	81 95       	neg	r24
     6f8:	9f 4f       	sbci	r25, 0xFF	; 255
     6fa:	e1 e0       	ldi	r30, 0x01	; 1
						}
						else sign=0;

						fract=0;
						if ((val&0x01)!=0x00) fract=fract+65;
     6fc:	80 fd       	sbrc	r24, 0
     6fe:	03 c0       	rjmp	.+6      	; 0x706 <main+0x18a>
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	02 c0       	rjmp	.+4      	; 0x70a <main+0x18e>
     706:	41 e4       	ldi	r20, 0x41	; 65
     708:	50 e0       	ldi	r21, 0x00	; 0
						if ((val&0x02)!=0x00) fract=fract+125;
     70a:	81 ff       	sbrs	r24, 1
     70c:	02 c0       	rjmp	.+4      	; 0x712 <main+0x196>
     70e:	43 58       	subi	r20, 0x83	; 131
     710:	5f 4f       	sbci	r21, 0xFF	; 255
						if ((val&0x04)!=0x00) fract=fract+250;
     712:	82 ff       	sbrs	r24, 2
     714:	02 c0       	rjmp	.+4      	; 0x71a <main+0x19e>
     716:	46 50       	subi	r20, 0x06	; 6
     718:	5f 4f       	sbci	r21, 0xFF	; 255
						if ((val&0x08)!=0x00) fract=fract+500;
     71a:	83 ff       	sbrs	r24, 3
     71c:	02 c0       	rjmp	.+4      	; 0x722 <main+0x1a6>
     71e:	4c 50       	subi	r20, 0x0C	; 12
     720:	5e 4f       	sbci	r21, 0xFE	; 254

						val=(val>>4)*10+fract/100;
     722:	f4 e0       	ldi	r31, 0x04	; 4
     724:	96 95       	lsr	r25
     726:	87 95       	ror	r24
     728:	fa 95       	dec	r31
     72a:	e1 f7       	brne	.-8      	; 0x724 <main+0x1a8>
     72c:	9c 01       	movw	r18, r24
     72e:	73 e0       	ldi	r23, 0x03	; 3
     730:	22 0f       	add	r18, r18
     732:	33 1f       	adc	r19, r19
     734:	7a 95       	dec	r23
     736:	e1 f7       	brne	.-8      	; 0x730 <main+0x1b4>
     738:	88 0f       	add	r24, r24
     73a:	99 1f       	adc	r25, r25
     73c:	28 0f       	add	r18, r24
     73e:	39 1f       	adc	r19, r25
     740:	ca 01       	movw	r24, r20
     742:	64 e6       	ldi	r22, 0x64	; 100
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	0e 94 ae 0a 	call	0x155c	; 0x155c <__udivmodhi4>
     74a:	62 0f       	add	r22, r18
     74c:	73 1f       	adc	r23, r19

						if (sign==1) val=OFFSET-val;
     74e:	e1 30       	cpi	r30, 0x01	; 1
     750:	29 f4       	brne	.+10     	; 0x75c <main+0x1e0>
     752:	c3 01       	movw	r24, r6
     754:	86 1b       	sub	r24, r22
     756:	97 0b       	sbc	r25, r23
     758:	bc 01       	movw	r22, r24
     75a:	02 c0       	rjmp	.+4      	; 0x760 <main+0x1e4>
						else val=val+OFFSET;
     75c:	60 50       	subi	r22, 0x00	; 0
     75e:	7b 4f       	sbci	r23, 0xFB	; 251

						sensor_data[i]=val;
     760:	fe 01       	movw	r30, r28
     762:	ee 0f       	add	r30, r30
     764:	ff 1f       	adc	r31, r31
     766:	e4 59       	subi	r30, 0x94	; 148
     768:	fe 4f       	sbci	r31, 0xFE	; 254
     76a:	71 83       	std	Z+1, r23	; 0x01
     76c:	60 83       	st	Z, r22
     76e:	0c c0       	rjmp	.+24     	; 0x788 <main+0x20c>
					}
					else error_code|=(1<<i);
     770:	20 91 6a 01 	lds	r18, 0x016A
     774:	c4 01       	movw	r24, r8
     776:	0c 2e       	mov	r0, r28
     778:	02 c0       	rjmp	.+4      	; 0x77e <main+0x202>
     77a:	88 0f       	add	r24, r24
     77c:	99 1f       	adc	r25, r25
     77e:	0a 94       	dec	r0
     780:	e2 f7       	brpl	.-8      	; 0x77a <main+0x1fe>
     782:	28 2b       	or	r18, r24
     784:	20 93 6a 01 	sts	0x016A, r18
     788:	21 96       	adiw	r28, 0x01	; 1
			if (first_conv==_YES) first_conv=_NO;
			else
			{
		 
				//receive measured data from sensors
				for (i=0;i<SENSOR_COUNT;i++)
     78a:	c2 30       	cpi	r28, 0x02	; 2
     78c:	d1 05       	cpc	r29, r1
     78e:	09 f0       	breq	.+2      	; 0x792 <main+0x216>
     790:	9c cf       	rjmp	.-200    	; 0x6ca <main+0x14e>
					}
					else error_code|=(1<<i);
				}

				//if PWM if OFF - clear all variables and off PWM
				if (pwm_state==PWM_OFF)
     792:	80 91 70 01 	lds	r24, 0x0170
     796:	88 23       	and	r24, r24
     798:	e9 f4       	brne	.+58     	; 0x7d4 <main+0x258>
	return;
}

void off_pwm()
{
	TCCR1A&=~(1<<COM1A1);
     79a:	8f b5       	in	r24, 0x2f	; 47
     79c:	8f 77       	andi	r24, 0x7F	; 127
     79e:	8f bd       	out	0x2f, r24	; 47

				//if PWM if OFF - clear all variables and off PWM
				if (pwm_state==PWM_OFF)
				{
					off_pwm();
					set_pwm(0x00);
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	0e 94 79 00 	call	0xf2	; 0xf2 <set_pwm>
					U=0.0;
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	a0 e0       	ldi	r26, 0x00	; 0
     7ac:	b0 e0       	ldi	r27, 0x00	; 0
     7ae:	80 93 91 01 	sts	0x0191, r24
     7b2:	90 93 92 01 	sts	0x0192, r25
     7b6:	a0 93 93 01 	sts	0x0193, r26
     7ba:	b0 93 94 01 	sts	0x0194, r27
					E=0.0;
     7be:	80 93 89 01 	sts	0x0189, r24
     7c2:	90 93 8a 01 	sts	0x018A, r25
     7c6:	a0 93 8b 01 	sts	0x018B, r26
     7ca:	b0 93 8c 01 	sts	0x018C, r27
					correction=0;
     7ce:	10 92 6b 01 	sts	0x016B, r1
     7d2:	06 c0       	rjmp	.+12     	; 0x7e0 <main+0x264>
	return;
}

uint8_t get_pwm (void)
{
	return OCR1AL;
     7d4:	8a b5       	in	r24, 0x2a	; 42
					set_pwm(0x00);
					U=0.0;
					E=0.0;
					correction=0;
				}
				else if (get_pwm()!=0) on_pwm();
     7d6:	88 23       	and	r24, r24
     7d8:	19 f0       	breq	.+6      	; 0x7e0 <main+0x264>
	return;
}

void on_pwm()
{
	TCCR1A|=(1<<COM1A1);
     7da:	8f b5       	in	r24, 0x2f	; 47
     7dc:	80 68       	ori	r24, 0x80	; 128
     7de:	8f bd       	out	0x2f, r24	; 47
					correction=0;
				}
				else if (get_pwm()!=0) on_pwm();

				//If no errors at sensor[0] and PWM is ON - calculate and set correction
				if (((error_code & 0x01)==0)&&(pwm_state==PWM_ON))
     7e0:	80 91 6a 01 	lds	r24, 0x016A
     7e4:	80 fd       	sbrc	r24, 0
     7e6:	3b cf       	rjmp	.-394    	; 0x65e <main+0xe2>
     7e8:	80 91 70 01 	lds	r24, 0x0170
     7ec:	81 30       	cpi	r24, 0x01	; 1
     7ee:	09 f0       	breq	.+2      	; 0x7f2 <main+0x276>
     7f0:	36 cf       	rjmp	.-404    	; 0x65e <main+0xe2>
				{
					E=(double) sensor_data[0]-value_data[0];
     7f2:	60 91 6c 01 	lds	r22, 0x016C
     7f6:	70 91 6d 01 	lds	r23, 0x016D
     7fa:	e0 90 95 01 	lds	r14, 0x0195
     7fe:	f0 90 96 01 	lds	r15, 0x0196
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 40 08 	call	0x1080	; 0x1080 <__floatunsisf>
     80a:	5b 01       	movw	r10, r22
     80c:	6c 01       	movw	r12, r24
     80e:	00 e0       	ldi	r16, 0x00	; 0
     810:	10 e0       	ldi	r17, 0x00	; 0
     812:	c8 01       	movw	r24, r16
     814:	b7 01       	movw	r22, r14
     816:	0e 94 40 08 	call	0x1080	; 0x1080 <__floatunsisf>
     81a:	9b 01       	movw	r18, r22
     81c:	ac 01       	movw	r20, r24
     81e:	c6 01       	movw	r24, r12
     820:	b5 01       	movw	r22, r10
     822:	0e 94 04 06 	call	0xc08	; 0xc08 <__subsf3>
     826:	60 93 89 01 	sts	0x0189, r22
     82a:	70 93 8a 01 	sts	0x018A, r23
     82e:	80 93 8b 01 	sts	0x018B, r24
     832:	90 93 8c 01 	sts	0x018C, r25

					U=U+Kp*E;
     836:	e0 90 91 01 	lds	r14, 0x0191
     83a:	f0 90 92 01 	lds	r15, 0x0192
     83e:	00 91 93 01 	lds	r16, 0x0193
     842:	10 91 94 01 	lds	r17, 0x0194
     846:	60 91 8d 01 	lds	r22, 0x018D
     84a:	70 91 8e 01 	lds	r23, 0x018E
     84e:	80 91 8f 01 	lds	r24, 0x018F
     852:	90 91 90 01 	lds	r25, 0x0190
     856:	20 91 89 01 	lds	r18, 0x0189
     85a:	30 91 8a 01 	lds	r19, 0x018A
     85e:	40 91 8b 01 	lds	r20, 0x018B
     862:	50 91 8c 01 	lds	r21, 0x018C
     866:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__mulsf3>
     86a:	9b 01       	movw	r18, r22
     86c:	ac 01       	movw	r20, r24
     86e:	c8 01       	movw	r24, r16
     870:	b7 01       	movw	r22, r14
     872:	0e 94 35 06 	call	0xc6a	; 0xc6a <__addsf3>
     876:	60 93 91 01 	sts	0x0191, r22
     87a:	70 93 92 01 	sts	0x0192, r23
     87e:	80 93 93 01 	sts	0x0193, r24
     882:	90 93 94 01 	sts	0x0194, r25

					if (U>255.0) 	U=255.0;
     886:	60 91 91 01 	lds	r22, 0x0191
     88a:	70 91 92 01 	lds	r23, 0x0192
     88e:	80 91 93 01 	lds	r24, 0x0193
     892:	90 91 94 01 	lds	r25, 0x0194
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	4f e7       	ldi	r20, 0x7F	; 127
     89c:	53 e4       	ldi	r21, 0x43	; 67
     89e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__gtsf2>
     8a2:	18 16       	cp	r1, r24
     8a4:	64 f4       	brge	.+24     	; 0x8be <main+0x342>
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	af e7       	ldi	r26, 0x7F	; 127
     8ac:	b3 e4       	ldi	r27, 0x43	; 67
     8ae:	80 93 91 01 	sts	0x0191, r24
     8b2:	90 93 92 01 	sts	0x0192, r25
     8b6:	a0 93 93 01 	sts	0x0193, r26
     8ba:	b0 93 94 01 	sts	0x0194, r27
					if (U<=0.0) 	U=0.0;
     8be:	60 91 91 01 	lds	r22, 0x0191
     8c2:	70 91 92 01 	lds	r23, 0x0192
     8c6:	80 91 93 01 	lds	r24, 0x0193
     8ca:	90 91 94 01 	lds	r25, 0x0194
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	0e 94 bc 07 	call	0xf78	; 0xf78 <__lesf2>
     8da:	18 16       	cp	r1, r24
     8dc:	64 f0       	brlt	.+24     	; 0x8f6 <main+0x37a>
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	a0 e0       	ldi	r26, 0x00	; 0
     8e4:	b0 e0       	ldi	r27, 0x00	; 0
     8e6:	80 93 91 01 	sts	0x0191, r24
     8ea:	90 93 92 01 	sts	0x0192, r25
     8ee:	a0 93 93 01 	sts	0x0193, r26
     8f2:	b0 93 94 01 	sts	0x0194, r27
		
					correction=(uint8_t) U;
     8f6:	60 91 91 01 	lds	r22, 0x0191
     8fa:	70 91 92 01 	lds	r23, 0x0192
     8fe:	80 91 93 01 	lds	r24, 0x0193
     902:	90 91 94 01 	lds	r25, 0x0194
     906:	0e 94 8c 04 	call	0x918	; 0x918 <__fixunssfsi>
     90a:	60 93 6b 01 	sts	0x016B, r22
					set_pwm(correction); 				
     90e:	80 91 6b 01 	lds	r24, 0x016B
     912:	0e 94 79 00 	call	0xf2	; 0xf2 <set_pwm>
     916:	a3 ce       	rjmp	.-698    	; 0x65e <main+0xe2>

00000918 <__fixunssfsi>:
     918:	ef 92       	push	r14
     91a:	ff 92       	push	r15
     91c:	0f 93       	push	r16
     91e:	1f 93       	push	r17
     920:	7b 01       	movw	r14, r22
     922:	8c 01       	movw	r16, r24
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	40 e0       	ldi	r20, 0x00	; 0
     92a:	5f e4       	ldi	r21, 0x4F	; 79
     92c:	0e 94 8c 07 	call	0xf18	; 0xf18 <__gesf2>
     930:	88 23       	and	r24, r24
     932:	8c f0       	brlt	.+34     	; 0x956 <__fixunssfsi+0x3e>
     934:	c8 01       	movw	r24, r16
     936:	b7 01       	movw	r22, r14
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	40 e0       	ldi	r20, 0x00	; 0
     93e:	5f e4       	ldi	r21, 0x4F	; 79
     940:	0e 94 04 06 	call	0xc08	; 0xc08 <__subsf3>
     944:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__fixsfsi>
     948:	9b 01       	movw	r18, r22
     94a:	ac 01       	movw	r20, r24
     94c:	20 50       	subi	r18, 0x00	; 0
     94e:	30 40       	sbci	r19, 0x00	; 0
     950:	40 40       	sbci	r20, 0x00	; 0
     952:	50 48       	sbci	r21, 0x80	; 128
     954:	06 c0       	rjmp	.+12     	; 0x962 <__fixunssfsi+0x4a>
     956:	c8 01       	movw	r24, r16
     958:	b7 01       	movw	r22, r14
     95a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__fixsfsi>
     95e:	9b 01       	movw	r18, r22
     960:	ac 01       	movw	r20, r24
     962:	b9 01       	movw	r22, r18
     964:	ca 01       	movw	r24, r20
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	ef 90       	pop	r14
     96e:	08 95       	ret

00000970 <_fpadd_parts>:
     970:	a0 e0       	ldi	r26, 0x00	; 0
     972:	b0 e0       	ldi	r27, 0x00	; 0
     974:	ee eb       	ldi	r30, 0xBE	; 190
     976:	f4 e0       	ldi	r31, 0x04	; 4
     978:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__prologue_saves__>
     97c:	dc 01       	movw	r26, r24
     97e:	2b 01       	movw	r4, r22
     980:	fa 01       	movw	r30, r20
     982:	9c 91       	ld	r25, X
     984:	92 30       	cpi	r25, 0x02	; 2
     986:	08 f4       	brcc	.+2      	; 0x98a <_fpadd_parts+0x1a>
     988:	39 c1       	rjmp	.+626    	; 0xbfc <_fpadd_parts+0x28c>
     98a:	eb 01       	movw	r28, r22
     98c:	88 81       	ld	r24, Y
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	08 f4       	brcc	.+2      	; 0x994 <_fpadd_parts+0x24>
     992:	33 c1       	rjmp	.+614    	; 0xbfa <_fpadd_parts+0x28a>
     994:	94 30       	cpi	r25, 0x04	; 4
     996:	69 f4       	brne	.+26     	; 0x9b2 <_fpadd_parts+0x42>
     998:	84 30       	cpi	r24, 0x04	; 4
     99a:	09 f0       	breq	.+2      	; 0x99e <_fpadd_parts+0x2e>
     99c:	2f c1       	rjmp	.+606    	; 0xbfc <_fpadd_parts+0x28c>
     99e:	11 96       	adiw	r26, 0x01	; 1
     9a0:	9c 91       	ld	r25, X
     9a2:	11 97       	sbiw	r26, 0x01	; 1
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	98 17       	cp	r25, r24
     9a8:	09 f4       	brne	.+2      	; 0x9ac <_fpadd_parts+0x3c>
     9aa:	28 c1       	rjmp	.+592    	; 0xbfc <_fpadd_parts+0x28c>
     9ac:	a0 e6       	ldi	r26, 0x60	; 96
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	25 c1       	rjmp	.+586    	; 0xbfc <_fpadd_parts+0x28c>
     9b2:	84 30       	cpi	r24, 0x04	; 4
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <_fpadd_parts+0x48>
     9b6:	21 c1       	rjmp	.+578    	; 0xbfa <_fpadd_parts+0x28a>
     9b8:	82 30       	cpi	r24, 0x02	; 2
     9ba:	a9 f4       	brne	.+42     	; 0x9e6 <_fpadd_parts+0x76>
     9bc:	92 30       	cpi	r25, 0x02	; 2
     9be:	09 f0       	breq	.+2      	; 0x9c2 <_fpadd_parts+0x52>
     9c0:	1d c1       	rjmp	.+570    	; 0xbfc <_fpadd_parts+0x28c>
     9c2:	9a 01       	movw	r18, r20
     9c4:	ad 01       	movw	r20, r26
     9c6:	88 e0       	ldi	r24, 0x08	; 8
     9c8:	ea 01       	movw	r28, r20
     9ca:	09 90       	ld	r0, Y+
     9cc:	ae 01       	movw	r20, r28
     9ce:	e9 01       	movw	r28, r18
     9d0:	09 92       	st	Y+, r0
     9d2:	9e 01       	movw	r18, r28
     9d4:	81 50       	subi	r24, 0x01	; 1
     9d6:	c1 f7       	brne	.-16     	; 0x9c8 <_fpadd_parts+0x58>
     9d8:	e2 01       	movw	r28, r4
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	11 96       	adiw	r26, 0x01	; 1
     9de:	9c 91       	ld	r25, X
     9e0:	89 23       	and	r24, r25
     9e2:	81 83       	std	Z+1, r24	; 0x01
     9e4:	08 c1       	rjmp	.+528    	; 0xbf6 <_fpadd_parts+0x286>
     9e6:	92 30       	cpi	r25, 0x02	; 2
     9e8:	09 f4       	brne	.+2      	; 0x9ec <_fpadd_parts+0x7c>
     9ea:	07 c1       	rjmp	.+526    	; 0xbfa <_fpadd_parts+0x28a>
     9ec:	12 96       	adiw	r26, 0x02	; 2
     9ee:	2d 90       	ld	r2, X+
     9f0:	3c 90       	ld	r3, X
     9f2:	13 97       	sbiw	r26, 0x03	; 3
     9f4:	eb 01       	movw	r28, r22
     9f6:	8a 81       	ldd	r24, Y+2	; 0x02
     9f8:	9b 81       	ldd	r25, Y+3	; 0x03
     9fa:	14 96       	adiw	r26, 0x04	; 4
     9fc:	ad 90       	ld	r10, X+
     9fe:	bd 90       	ld	r11, X+
     a00:	cd 90       	ld	r12, X+
     a02:	dc 90       	ld	r13, X
     a04:	17 97       	sbiw	r26, 0x07	; 7
     a06:	ec 80       	ldd	r14, Y+4	; 0x04
     a08:	fd 80       	ldd	r15, Y+5	; 0x05
     a0a:	0e 81       	ldd	r16, Y+6	; 0x06
     a0c:	1f 81       	ldd	r17, Y+7	; 0x07
     a0e:	91 01       	movw	r18, r2
     a10:	28 1b       	sub	r18, r24
     a12:	39 0b       	sbc	r19, r25
     a14:	b9 01       	movw	r22, r18
     a16:	37 ff       	sbrs	r19, 7
     a18:	04 c0       	rjmp	.+8      	; 0xa22 <_fpadd_parts+0xb2>
     a1a:	66 27       	eor	r22, r22
     a1c:	77 27       	eor	r23, r23
     a1e:	62 1b       	sub	r22, r18
     a20:	73 0b       	sbc	r23, r19
     a22:	60 32       	cpi	r22, 0x20	; 32
     a24:	71 05       	cpc	r23, r1
     a26:	0c f0       	brlt	.+2      	; 0xa2a <_fpadd_parts+0xba>
     a28:	61 c0       	rjmp	.+194    	; 0xaec <_fpadd_parts+0x17c>
     a2a:	12 16       	cp	r1, r18
     a2c:	13 06       	cpc	r1, r19
     a2e:	6c f5       	brge	.+90     	; 0xa8a <_fpadd_parts+0x11a>
     a30:	37 01       	movw	r6, r14
     a32:	48 01       	movw	r8, r16
     a34:	06 2e       	mov	r0, r22
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <_fpadd_parts+0xd0>
     a38:	96 94       	lsr	r9
     a3a:	87 94       	ror	r8
     a3c:	77 94       	ror	r7
     a3e:	67 94       	ror	r6
     a40:	0a 94       	dec	r0
     a42:	d2 f7       	brpl	.-12     	; 0xa38 <_fpadd_parts+0xc8>
     a44:	21 e0       	ldi	r18, 0x01	; 1
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	04 c0       	rjmp	.+8      	; 0xa56 <_fpadd_parts+0xe6>
     a4e:	22 0f       	add	r18, r18
     a50:	33 1f       	adc	r19, r19
     a52:	44 1f       	adc	r20, r20
     a54:	55 1f       	adc	r21, r21
     a56:	6a 95       	dec	r22
     a58:	d2 f7       	brpl	.-12     	; 0xa4e <_fpadd_parts+0xde>
     a5a:	21 50       	subi	r18, 0x01	; 1
     a5c:	30 40       	sbci	r19, 0x00	; 0
     a5e:	40 40       	sbci	r20, 0x00	; 0
     a60:	50 40       	sbci	r21, 0x00	; 0
     a62:	2e 21       	and	r18, r14
     a64:	3f 21       	and	r19, r15
     a66:	40 23       	and	r20, r16
     a68:	51 23       	and	r21, r17
     a6a:	21 15       	cp	r18, r1
     a6c:	31 05       	cpc	r19, r1
     a6e:	41 05       	cpc	r20, r1
     a70:	51 05       	cpc	r21, r1
     a72:	21 f0       	breq	.+8      	; 0xa7c <_fpadd_parts+0x10c>
     a74:	21 e0       	ldi	r18, 0x01	; 1
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	40 e0       	ldi	r20, 0x00	; 0
     a7a:	50 e0       	ldi	r21, 0x00	; 0
     a7c:	79 01       	movw	r14, r18
     a7e:	8a 01       	movw	r16, r20
     a80:	e6 28       	or	r14, r6
     a82:	f7 28       	or	r15, r7
     a84:	08 29       	or	r16, r8
     a86:	19 29       	or	r17, r9
     a88:	3c c0       	rjmp	.+120    	; 0xb02 <_fpadd_parts+0x192>
     a8a:	23 2b       	or	r18, r19
     a8c:	d1 f1       	breq	.+116    	; 0xb02 <_fpadd_parts+0x192>
     a8e:	26 0e       	add	r2, r22
     a90:	37 1e       	adc	r3, r23
     a92:	35 01       	movw	r6, r10
     a94:	46 01       	movw	r8, r12
     a96:	06 2e       	mov	r0, r22
     a98:	04 c0       	rjmp	.+8      	; 0xaa2 <_fpadd_parts+0x132>
     a9a:	96 94       	lsr	r9
     a9c:	87 94       	ror	r8
     a9e:	77 94       	ror	r7
     aa0:	67 94       	ror	r6
     aa2:	0a 94       	dec	r0
     aa4:	d2 f7       	brpl	.-12     	; 0xa9a <_fpadd_parts+0x12a>
     aa6:	21 e0       	ldi	r18, 0x01	; 1
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	04 c0       	rjmp	.+8      	; 0xab8 <_fpadd_parts+0x148>
     ab0:	22 0f       	add	r18, r18
     ab2:	33 1f       	adc	r19, r19
     ab4:	44 1f       	adc	r20, r20
     ab6:	55 1f       	adc	r21, r21
     ab8:	6a 95       	dec	r22
     aba:	d2 f7       	brpl	.-12     	; 0xab0 <_fpadd_parts+0x140>
     abc:	21 50       	subi	r18, 0x01	; 1
     abe:	30 40       	sbci	r19, 0x00	; 0
     ac0:	40 40       	sbci	r20, 0x00	; 0
     ac2:	50 40       	sbci	r21, 0x00	; 0
     ac4:	2a 21       	and	r18, r10
     ac6:	3b 21       	and	r19, r11
     ac8:	4c 21       	and	r20, r12
     aca:	5d 21       	and	r21, r13
     acc:	21 15       	cp	r18, r1
     ace:	31 05       	cpc	r19, r1
     ad0:	41 05       	cpc	r20, r1
     ad2:	51 05       	cpc	r21, r1
     ad4:	21 f0       	breq	.+8      	; 0xade <_fpadd_parts+0x16e>
     ad6:	21 e0       	ldi	r18, 0x01	; 1
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	40 e0       	ldi	r20, 0x00	; 0
     adc:	50 e0       	ldi	r21, 0x00	; 0
     ade:	59 01       	movw	r10, r18
     ae0:	6a 01       	movw	r12, r20
     ae2:	a6 28       	or	r10, r6
     ae4:	b7 28       	or	r11, r7
     ae6:	c8 28       	or	r12, r8
     ae8:	d9 28       	or	r13, r9
     aea:	0b c0       	rjmp	.+22     	; 0xb02 <_fpadd_parts+0x192>
     aec:	82 15       	cp	r24, r2
     aee:	93 05       	cpc	r25, r3
     af0:	2c f0       	brlt	.+10     	; 0xafc <_fpadd_parts+0x18c>
     af2:	1c 01       	movw	r2, r24
     af4:	aa 24       	eor	r10, r10
     af6:	bb 24       	eor	r11, r11
     af8:	65 01       	movw	r12, r10
     afa:	03 c0       	rjmp	.+6      	; 0xb02 <_fpadd_parts+0x192>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	11 96       	adiw	r26, 0x01	; 1
     b04:	9c 91       	ld	r25, X
     b06:	d2 01       	movw	r26, r4
     b08:	11 96       	adiw	r26, 0x01	; 1
     b0a:	8c 91       	ld	r24, X
     b0c:	98 17       	cp	r25, r24
     b0e:	09 f4       	brne	.+2      	; 0xb12 <_fpadd_parts+0x1a2>
     b10:	45 c0       	rjmp	.+138    	; 0xb9c <_fpadd_parts+0x22c>
     b12:	99 23       	and	r25, r25
     b14:	39 f0       	breq	.+14     	; 0xb24 <_fpadd_parts+0x1b4>
     b16:	a8 01       	movw	r20, r16
     b18:	97 01       	movw	r18, r14
     b1a:	2a 19       	sub	r18, r10
     b1c:	3b 09       	sbc	r19, r11
     b1e:	4c 09       	sbc	r20, r12
     b20:	5d 09       	sbc	r21, r13
     b22:	06 c0       	rjmp	.+12     	; 0xb30 <_fpadd_parts+0x1c0>
     b24:	a6 01       	movw	r20, r12
     b26:	95 01       	movw	r18, r10
     b28:	2e 19       	sub	r18, r14
     b2a:	3f 09       	sbc	r19, r15
     b2c:	40 0b       	sbc	r20, r16
     b2e:	51 0b       	sbc	r21, r17
     b30:	57 fd       	sbrc	r21, 7
     b32:	08 c0       	rjmp	.+16     	; 0xb44 <_fpadd_parts+0x1d4>
     b34:	11 82       	std	Z+1, r1	; 0x01
     b36:	33 82       	std	Z+3, r3	; 0x03
     b38:	22 82       	std	Z+2, r2	; 0x02
     b3a:	24 83       	std	Z+4, r18	; 0x04
     b3c:	35 83       	std	Z+5, r19	; 0x05
     b3e:	46 83       	std	Z+6, r20	; 0x06
     b40:	57 83       	std	Z+7, r21	; 0x07
     b42:	1d c0       	rjmp	.+58     	; 0xb7e <_fpadd_parts+0x20e>
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	81 83       	std	Z+1, r24	; 0x01
     b48:	33 82       	std	Z+3, r3	; 0x03
     b4a:	22 82       	std	Z+2, r2	; 0x02
     b4c:	88 27       	eor	r24, r24
     b4e:	99 27       	eor	r25, r25
     b50:	dc 01       	movw	r26, r24
     b52:	82 1b       	sub	r24, r18
     b54:	93 0b       	sbc	r25, r19
     b56:	a4 0b       	sbc	r26, r20
     b58:	b5 0b       	sbc	r27, r21
     b5a:	84 83       	std	Z+4, r24	; 0x04
     b5c:	95 83       	std	Z+5, r25	; 0x05
     b5e:	a6 83       	std	Z+6, r26	; 0x06
     b60:	b7 83       	std	Z+7, r27	; 0x07
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <_fpadd_parts+0x20e>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	24 83       	std	Z+4, r18	; 0x04
     b6e:	35 83       	std	Z+5, r19	; 0x05
     b70:	46 83       	std	Z+6, r20	; 0x06
     b72:	57 83       	std	Z+7, r21	; 0x07
     b74:	82 81       	ldd	r24, Z+2	; 0x02
     b76:	93 81       	ldd	r25, Z+3	; 0x03
     b78:	01 97       	sbiw	r24, 0x01	; 1
     b7a:	93 83       	std	Z+3, r25	; 0x03
     b7c:	82 83       	std	Z+2, r24	; 0x02
     b7e:	24 81       	ldd	r18, Z+4	; 0x04
     b80:	35 81       	ldd	r19, Z+5	; 0x05
     b82:	46 81       	ldd	r20, Z+6	; 0x06
     b84:	57 81       	ldd	r21, Z+7	; 0x07
     b86:	da 01       	movw	r26, r20
     b88:	c9 01       	movw	r24, r18
     b8a:	01 97       	sbiw	r24, 0x01	; 1
     b8c:	a1 09       	sbc	r26, r1
     b8e:	b1 09       	sbc	r27, r1
     b90:	8f 5f       	subi	r24, 0xFF	; 255
     b92:	9f 4f       	sbci	r25, 0xFF	; 255
     b94:	af 4f       	sbci	r26, 0xFF	; 255
     b96:	bf 43       	sbci	r27, 0x3F	; 63
     b98:	28 f3       	brcs	.-54     	; 0xb64 <_fpadd_parts+0x1f4>
     b9a:	0b c0       	rjmp	.+22     	; 0xbb2 <_fpadd_parts+0x242>
     b9c:	91 83       	std	Z+1, r25	; 0x01
     b9e:	33 82       	std	Z+3, r3	; 0x03
     ba0:	22 82       	std	Z+2, r2	; 0x02
     ba2:	ea 0c       	add	r14, r10
     ba4:	fb 1c       	adc	r15, r11
     ba6:	0c 1d       	adc	r16, r12
     ba8:	1d 1d       	adc	r17, r13
     baa:	e4 82       	std	Z+4, r14	; 0x04
     bac:	f5 82       	std	Z+5, r15	; 0x05
     bae:	06 83       	std	Z+6, r16	; 0x06
     bb0:	17 83       	std	Z+7, r17	; 0x07
     bb2:	83 e0       	ldi	r24, 0x03	; 3
     bb4:	80 83       	st	Z, r24
     bb6:	24 81       	ldd	r18, Z+4	; 0x04
     bb8:	35 81       	ldd	r19, Z+5	; 0x05
     bba:	46 81       	ldd	r20, Z+6	; 0x06
     bbc:	57 81       	ldd	r21, Z+7	; 0x07
     bbe:	57 ff       	sbrs	r21, 7
     bc0:	1a c0       	rjmp	.+52     	; 0xbf6 <_fpadd_parts+0x286>
     bc2:	c9 01       	movw	r24, r18
     bc4:	aa 27       	eor	r26, r26
     bc6:	97 fd       	sbrc	r25, 7
     bc8:	a0 95       	com	r26
     bca:	ba 2f       	mov	r27, r26
     bcc:	81 70       	andi	r24, 0x01	; 1
     bce:	90 70       	andi	r25, 0x00	; 0
     bd0:	a0 70       	andi	r26, 0x00	; 0
     bd2:	b0 70       	andi	r27, 0x00	; 0
     bd4:	56 95       	lsr	r21
     bd6:	47 95       	ror	r20
     bd8:	37 95       	ror	r19
     bda:	27 95       	ror	r18
     bdc:	82 2b       	or	r24, r18
     bde:	93 2b       	or	r25, r19
     be0:	a4 2b       	or	r26, r20
     be2:	b5 2b       	or	r27, r21
     be4:	84 83       	std	Z+4, r24	; 0x04
     be6:	95 83       	std	Z+5, r25	; 0x05
     be8:	a6 83       	std	Z+6, r26	; 0x06
     bea:	b7 83       	std	Z+7, r27	; 0x07
     bec:	82 81       	ldd	r24, Z+2	; 0x02
     bee:	93 81       	ldd	r25, Z+3	; 0x03
     bf0:	01 96       	adiw	r24, 0x01	; 1
     bf2:	93 83       	std	Z+3, r25	; 0x03
     bf4:	82 83       	std	Z+2, r24	; 0x02
     bf6:	df 01       	movw	r26, r30
     bf8:	01 c0       	rjmp	.+2      	; 0xbfc <_fpadd_parts+0x28c>
     bfa:	d2 01       	movw	r26, r4
     bfc:	cd 01       	movw	r24, r26
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	e2 e1       	ldi	r30, 0x12	; 18
     c04:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__epilogue_restores__>

00000c08 <__subsf3>:
     c08:	a0 e2       	ldi	r26, 0x20	; 32
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	ea e0       	ldi	r30, 0x0A	; 10
     c0e:	f6 e0       	ldi	r31, 0x06	; 6
     c10:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <__prologue_saves__+0x18>
     c14:	69 83       	std	Y+1, r22	; 0x01
     c16:	7a 83       	std	Y+2, r23	; 0x02
     c18:	8b 83       	std	Y+3, r24	; 0x03
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	2d 83       	std	Y+5, r18	; 0x05
     c1e:	3e 83       	std	Y+6, r19	; 0x06
     c20:	4f 83       	std	Y+7, r20	; 0x07
     c22:	58 87       	std	Y+8, r21	; 0x08
     c24:	e9 e0       	ldi	r30, 0x09	; 9
     c26:	ee 2e       	mov	r14, r30
     c28:	f1 2c       	mov	r15, r1
     c2a:	ec 0e       	add	r14, r28
     c2c:	fd 1e       	adc	r15, r29
     c2e:	ce 01       	movw	r24, r28
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	b7 01       	movw	r22, r14
     c34:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__unpack_f>
     c38:	8e 01       	movw	r16, r28
     c3a:	0f 5e       	subi	r16, 0xEF	; 239
     c3c:	1f 4f       	sbci	r17, 0xFF	; 255
     c3e:	ce 01       	movw	r24, r28
     c40:	05 96       	adiw	r24, 0x05	; 5
     c42:	b8 01       	movw	r22, r16
     c44:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__unpack_f>
     c48:	8a 89       	ldd	r24, Y+18	; 0x12
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	89 27       	eor	r24, r25
     c4e:	8a 8b       	std	Y+18, r24	; 0x12
     c50:	c7 01       	movw	r24, r14
     c52:	b8 01       	movw	r22, r16
     c54:	ae 01       	movw	r20, r28
     c56:	47 5e       	subi	r20, 0xE7	; 231
     c58:	5f 4f       	sbci	r21, 0xFF	; 255
     c5a:	0e 94 b8 04 	call	0x970	; 0x970 <_fpadd_parts>
     c5e:	0e 94 08 09 	call	0x1210	; 0x1210 <__pack_f>
     c62:	a0 96       	adiw	r28, 0x20	; 32
     c64:	e6 e0       	ldi	r30, 0x06	; 6
     c66:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__epilogue_restores__+0x18>

00000c6a <__addsf3>:
     c6a:	a0 e2       	ldi	r26, 0x20	; 32
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	eb e3       	ldi	r30, 0x3B	; 59
     c70:	f6 e0       	ldi	r31, 0x06	; 6
     c72:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <__prologue_saves__+0x18>
     c76:	69 83       	std	Y+1, r22	; 0x01
     c78:	7a 83       	std	Y+2, r23	; 0x02
     c7a:	8b 83       	std	Y+3, r24	; 0x03
     c7c:	9c 83       	std	Y+4, r25	; 0x04
     c7e:	2d 83       	std	Y+5, r18	; 0x05
     c80:	3e 83       	std	Y+6, r19	; 0x06
     c82:	4f 83       	std	Y+7, r20	; 0x07
     c84:	58 87       	std	Y+8, r21	; 0x08
     c86:	f9 e0       	ldi	r31, 0x09	; 9
     c88:	ef 2e       	mov	r14, r31
     c8a:	f1 2c       	mov	r15, r1
     c8c:	ec 0e       	add	r14, r28
     c8e:	fd 1e       	adc	r15, r29
     c90:	ce 01       	movw	r24, r28
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	b7 01       	movw	r22, r14
     c96:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__unpack_f>
     c9a:	8e 01       	movw	r16, r28
     c9c:	0f 5e       	subi	r16, 0xEF	; 239
     c9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ca0:	ce 01       	movw	r24, r28
     ca2:	05 96       	adiw	r24, 0x05	; 5
     ca4:	b8 01       	movw	r22, r16
     ca6:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__unpack_f>
     caa:	c7 01       	movw	r24, r14
     cac:	b8 01       	movw	r22, r16
     cae:	ae 01       	movw	r20, r28
     cb0:	47 5e       	subi	r20, 0xE7	; 231
     cb2:	5f 4f       	sbci	r21, 0xFF	; 255
     cb4:	0e 94 b8 04 	call	0x970	; 0x970 <_fpadd_parts>
     cb8:	0e 94 08 09 	call	0x1210	; 0x1210 <__pack_f>
     cbc:	a0 96       	adiw	r28, 0x20	; 32
     cbe:	e6 e0       	ldi	r30, 0x06	; 6
     cc0:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__epilogue_restores__+0x18>

00000cc4 <__mulsf3>:
     cc4:	a0 e2       	ldi	r26, 0x20	; 32
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e8 e6       	ldi	r30, 0x68	; 104
     cca:	f6 e0       	ldi	r31, 0x06	; 6
     ccc:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__prologue_saves__>
     cd0:	69 83       	std	Y+1, r22	; 0x01
     cd2:	7a 83       	std	Y+2, r23	; 0x02
     cd4:	8b 83       	std	Y+3, r24	; 0x03
     cd6:	9c 83       	std	Y+4, r25	; 0x04
     cd8:	2d 83       	std	Y+5, r18	; 0x05
     cda:	3e 83       	std	Y+6, r19	; 0x06
     cdc:	4f 83       	std	Y+7, r20	; 0x07
     cde:	58 87       	std	Y+8, r21	; 0x08
     ce0:	ce 01       	movw	r24, r28
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	be 01       	movw	r22, r28
     ce6:	67 5f       	subi	r22, 0xF7	; 247
     ce8:	7f 4f       	sbci	r23, 0xFF	; 255
     cea:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__unpack_f>
     cee:	ce 01       	movw	r24, r28
     cf0:	05 96       	adiw	r24, 0x05	; 5
     cf2:	be 01       	movw	r22, r28
     cf4:	6f 5e       	subi	r22, 0xEF	; 239
     cf6:	7f 4f       	sbci	r23, 0xFF	; 255
     cf8:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__unpack_f>
     cfc:	99 85       	ldd	r25, Y+9	; 0x09
     cfe:	92 30       	cpi	r25, 0x02	; 2
     d00:	88 f0       	brcs	.+34     	; 0xd24 <__mulsf3+0x60>
     d02:	89 89       	ldd	r24, Y+17	; 0x11
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	c8 f0       	brcs	.+50     	; 0xd3a <__mulsf3+0x76>
     d08:	94 30       	cpi	r25, 0x04	; 4
     d0a:	19 f4       	brne	.+6      	; 0xd12 <__mulsf3+0x4e>
     d0c:	82 30       	cpi	r24, 0x02	; 2
     d0e:	51 f4       	brne	.+20     	; 0xd24 <__mulsf3+0x60>
     d10:	04 c0       	rjmp	.+8      	; 0xd1a <__mulsf3+0x56>
     d12:	84 30       	cpi	r24, 0x04	; 4
     d14:	29 f4       	brne	.+10     	; 0xd20 <__mulsf3+0x5c>
     d16:	92 30       	cpi	r25, 0x02	; 2
     d18:	81 f4       	brne	.+32     	; 0xd3a <__mulsf3+0x76>
     d1a:	80 e6       	ldi	r24, 0x60	; 96
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	c6 c0       	rjmp	.+396    	; 0xeac <__mulsf3+0x1e8>
     d20:	92 30       	cpi	r25, 0x02	; 2
     d22:	49 f4       	brne	.+18     	; 0xd36 <__mulsf3+0x72>
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	9a 85       	ldd	r25, Y+10	; 0x0a
     d28:	8a 89       	ldd	r24, Y+18	; 0x12
     d2a:	98 13       	cpse	r25, r24
     d2c:	21 e0       	ldi	r18, 0x01	; 1
     d2e:	2a 87       	std	Y+10, r18	; 0x0a
     d30:	ce 01       	movw	r24, r28
     d32:	09 96       	adiw	r24, 0x09	; 9
     d34:	bb c0       	rjmp	.+374    	; 0xeac <__mulsf3+0x1e8>
     d36:	82 30       	cpi	r24, 0x02	; 2
     d38:	49 f4       	brne	.+18     	; 0xd4c <__mulsf3+0x88>
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d3e:	8a 89       	ldd	r24, Y+18	; 0x12
     d40:	98 13       	cpse	r25, r24
     d42:	21 e0       	ldi	r18, 0x01	; 1
     d44:	2a 8b       	std	Y+18, r18	; 0x12
     d46:	ce 01       	movw	r24, r28
     d48:	41 96       	adiw	r24, 0x11	; 17
     d4a:	b0 c0       	rjmp	.+352    	; 0xeac <__mulsf3+0x1e8>
     d4c:	2d 84       	ldd	r2, Y+13	; 0x0d
     d4e:	3e 84       	ldd	r3, Y+14	; 0x0e
     d50:	4f 84       	ldd	r4, Y+15	; 0x0f
     d52:	58 88       	ldd	r5, Y+16	; 0x10
     d54:	6d 88       	ldd	r6, Y+21	; 0x15
     d56:	7e 88       	ldd	r7, Y+22	; 0x16
     d58:	8f 88       	ldd	r8, Y+23	; 0x17
     d5a:	98 8c       	ldd	r9, Y+24	; 0x18
     d5c:	ee 24       	eor	r14, r14
     d5e:	ff 24       	eor	r15, r15
     d60:	87 01       	movw	r16, r14
     d62:	aa 24       	eor	r10, r10
     d64:	bb 24       	eor	r11, r11
     d66:	65 01       	movw	r12, r10
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	e0 e0       	ldi	r30, 0x00	; 0
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	c1 01       	movw	r24, r2
     d76:	81 70       	andi	r24, 0x01	; 1
     d78:	90 70       	andi	r25, 0x00	; 0
     d7a:	89 2b       	or	r24, r25
     d7c:	e9 f0       	breq	.+58     	; 0xdb8 <__mulsf3+0xf4>
     d7e:	e6 0c       	add	r14, r6
     d80:	f7 1c       	adc	r15, r7
     d82:	08 1d       	adc	r16, r8
     d84:	19 1d       	adc	r17, r9
     d86:	9a 01       	movw	r18, r20
     d88:	ab 01       	movw	r20, r22
     d8a:	2a 0d       	add	r18, r10
     d8c:	3b 1d       	adc	r19, r11
     d8e:	4c 1d       	adc	r20, r12
     d90:	5d 1d       	adc	r21, r13
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	a0 e0       	ldi	r26, 0x00	; 0
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e6 14       	cp	r14, r6
     d9c:	f7 04       	cpc	r15, r7
     d9e:	08 05       	cpc	r16, r8
     da0:	19 05       	cpc	r17, r9
     da2:	20 f4       	brcc	.+8      	; 0xdac <__mulsf3+0xe8>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	a0 e0       	ldi	r26, 0x00	; 0
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ba 01       	movw	r22, r20
     dae:	a9 01       	movw	r20, r18
     db0:	48 0f       	add	r20, r24
     db2:	59 1f       	adc	r21, r25
     db4:	6a 1f       	adc	r22, r26
     db6:	7b 1f       	adc	r23, r27
     db8:	aa 0c       	add	r10, r10
     dba:	bb 1c       	adc	r11, r11
     dbc:	cc 1c       	adc	r12, r12
     dbe:	dd 1c       	adc	r13, r13
     dc0:	97 fe       	sbrs	r9, 7
     dc2:	08 c0       	rjmp	.+16     	; 0xdd4 <__mulsf3+0x110>
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	a0 e0       	ldi	r26, 0x00	; 0
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	a8 2a       	or	r10, r24
     dce:	b9 2a       	or	r11, r25
     dd0:	ca 2a       	or	r12, r26
     dd2:	db 2a       	or	r13, r27
     dd4:	31 96       	adiw	r30, 0x01	; 1
     dd6:	e0 32       	cpi	r30, 0x20	; 32
     dd8:	f1 05       	cpc	r31, r1
     dda:	49 f0       	breq	.+18     	; 0xdee <__mulsf3+0x12a>
     ddc:	66 0c       	add	r6, r6
     dde:	77 1c       	adc	r7, r7
     de0:	88 1c       	adc	r8, r8
     de2:	99 1c       	adc	r9, r9
     de4:	56 94       	lsr	r5
     de6:	47 94       	ror	r4
     de8:	37 94       	ror	r3
     dea:	27 94       	ror	r2
     dec:	c3 cf       	rjmp	.-122    	; 0xd74 <__mulsf3+0xb0>
     dee:	fa 85       	ldd	r31, Y+10	; 0x0a
     df0:	ea 89       	ldd	r30, Y+18	; 0x12
     df2:	2b 89       	ldd	r18, Y+19	; 0x13
     df4:	3c 89       	ldd	r19, Y+20	; 0x14
     df6:	8b 85       	ldd	r24, Y+11	; 0x0b
     df8:	9c 85       	ldd	r25, Y+12	; 0x0c
     dfa:	28 0f       	add	r18, r24
     dfc:	39 1f       	adc	r19, r25
     dfe:	2e 5f       	subi	r18, 0xFE	; 254
     e00:	3f 4f       	sbci	r19, 0xFF	; 255
     e02:	17 c0       	rjmp	.+46     	; 0xe32 <__mulsf3+0x16e>
     e04:	ca 01       	movw	r24, r20
     e06:	81 70       	andi	r24, 0x01	; 1
     e08:	90 70       	andi	r25, 0x00	; 0
     e0a:	89 2b       	or	r24, r25
     e0c:	61 f0       	breq	.+24     	; 0xe26 <__mulsf3+0x162>
     e0e:	16 95       	lsr	r17
     e10:	07 95       	ror	r16
     e12:	f7 94       	ror	r15
     e14:	e7 94       	ror	r14
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	a0 e0       	ldi	r26, 0x00	; 0
     e1c:	b0 e8       	ldi	r27, 0x80	; 128
     e1e:	e8 2a       	or	r14, r24
     e20:	f9 2a       	or	r15, r25
     e22:	0a 2b       	or	r16, r26
     e24:	1b 2b       	or	r17, r27
     e26:	76 95       	lsr	r23
     e28:	67 95       	ror	r22
     e2a:	57 95       	ror	r21
     e2c:	47 95       	ror	r20
     e2e:	2f 5f       	subi	r18, 0xFF	; 255
     e30:	3f 4f       	sbci	r19, 0xFF	; 255
     e32:	77 fd       	sbrc	r23, 7
     e34:	e7 cf       	rjmp	.-50     	; 0xe04 <__mulsf3+0x140>
     e36:	0c c0       	rjmp	.+24     	; 0xe50 <__mulsf3+0x18c>
     e38:	44 0f       	add	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	66 1f       	adc	r22, r22
     e3e:	77 1f       	adc	r23, r23
     e40:	17 fd       	sbrc	r17, 7
     e42:	41 60       	ori	r20, 0x01	; 1
     e44:	ee 0c       	add	r14, r14
     e46:	ff 1c       	adc	r15, r15
     e48:	00 1f       	adc	r16, r16
     e4a:	11 1f       	adc	r17, r17
     e4c:	21 50       	subi	r18, 0x01	; 1
     e4e:	30 40       	sbci	r19, 0x00	; 0
     e50:	40 30       	cpi	r20, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	59 07       	cpc	r21, r25
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	69 07       	cpc	r22, r25
     e5a:	90 e4       	ldi	r25, 0x40	; 64
     e5c:	79 07       	cpc	r23, r25
     e5e:	60 f3       	brcs	.-40     	; 0xe38 <__mulsf3+0x174>
     e60:	2b 8f       	std	Y+27, r18	; 0x1b
     e62:	3c 8f       	std	Y+28, r19	; 0x1c
     e64:	db 01       	movw	r26, r22
     e66:	ca 01       	movw	r24, r20
     e68:	8f 77       	andi	r24, 0x7F	; 127
     e6a:	90 70       	andi	r25, 0x00	; 0
     e6c:	a0 70       	andi	r26, 0x00	; 0
     e6e:	b0 70       	andi	r27, 0x00	; 0
     e70:	80 34       	cpi	r24, 0x40	; 64
     e72:	91 05       	cpc	r25, r1
     e74:	a1 05       	cpc	r26, r1
     e76:	b1 05       	cpc	r27, r1
     e78:	61 f4       	brne	.+24     	; 0xe92 <__mulsf3+0x1ce>
     e7a:	47 fd       	sbrc	r20, 7
     e7c:	0a c0       	rjmp	.+20     	; 0xe92 <__mulsf3+0x1ce>
     e7e:	e1 14       	cp	r14, r1
     e80:	f1 04       	cpc	r15, r1
     e82:	01 05       	cpc	r16, r1
     e84:	11 05       	cpc	r17, r1
     e86:	29 f0       	breq	.+10     	; 0xe92 <__mulsf3+0x1ce>
     e88:	40 5c       	subi	r20, 0xC0	; 192
     e8a:	5f 4f       	sbci	r21, 0xFF	; 255
     e8c:	6f 4f       	sbci	r22, 0xFF	; 255
     e8e:	7f 4f       	sbci	r23, 0xFF	; 255
     e90:	40 78       	andi	r20, 0x80	; 128
     e92:	1a 8e       	std	Y+26, r1	; 0x1a
     e94:	fe 17       	cp	r31, r30
     e96:	11 f0       	breq	.+4      	; 0xe9c <__mulsf3+0x1d8>
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	8a 8f       	std	Y+26, r24	; 0x1a
     e9c:	4d 8f       	std	Y+29, r20	; 0x1d
     e9e:	5e 8f       	std	Y+30, r21	; 0x1e
     ea0:	6f 8f       	std	Y+31, r22	; 0x1f
     ea2:	78 a3       	std	Y+32, r23	; 0x20
     ea4:	83 e0       	ldi	r24, 0x03	; 3
     ea6:	89 8f       	std	Y+25, r24	; 0x19
     ea8:	ce 01       	movw	r24, r28
     eaa:	49 96       	adiw	r24, 0x19	; 25
     eac:	0e 94 08 09 	call	0x1210	; 0x1210 <__pack_f>
     eb0:	a0 96       	adiw	r28, 0x20	; 32
     eb2:	e2 e1       	ldi	r30, 0x12	; 18
     eb4:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__epilogue_restores__>

00000eb8 <__gtsf2>:
     eb8:	a8 e1       	ldi	r26, 0x18	; 24
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e2 e6       	ldi	r30, 0x62	; 98
     ebe:	f7 e0       	ldi	r31, 0x07	; 7
     ec0:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <__prologue_saves__+0x18>
     ec4:	69 83       	std	Y+1, r22	; 0x01
     ec6:	7a 83       	std	Y+2, r23	; 0x02
     ec8:	8b 83       	std	Y+3, r24	; 0x03
     eca:	9c 83       	std	Y+4, r25	; 0x04
     ecc:	2d 83       	std	Y+5, r18	; 0x05
     ece:	3e 83       	std	Y+6, r19	; 0x06
     ed0:	4f 83       	std	Y+7, r20	; 0x07
     ed2:	58 87       	std	Y+8, r21	; 0x08
     ed4:	89 e0       	ldi	r24, 0x09	; 9
     ed6:	e8 2e       	mov	r14, r24
     ed8:	f1 2c       	mov	r15, r1
     eda:	ec 0e       	add	r14, r28
     edc:	fd 1e       	adc	r15, r29
     ede:	ce 01       	movw	r24, r28
     ee0:	01 96       	adiw	r24, 0x01	; 1
     ee2:	b7 01       	movw	r22, r14
     ee4:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__unpack_f>
     ee8:	8e 01       	movw	r16, r28
     eea:	0f 5e       	subi	r16, 0xEF	; 239
     eec:	1f 4f       	sbci	r17, 0xFF	; 255
     eee:	ce 01       	movw	r24, r28
     ef0:	05 96       	adiw	r24, 0x05	; 5
     ef2:	b8 01       	movw	r22, r16
     ef4:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__unpack_f>
     ef8:	89 85       	ldd	r24, Y+9	; 0x09
     efa:	82 30       	cpi	r24, 0x02	; 2
     efc:	40 f0       	brcs	.+16     	; 0xf0e <__gtsf2+0x56>
     efe:	89 89       	ldd	r24, Y+17	; 0x11
     f00:	82 30       	cpi	r24, 0x02	; 2
     f02:	28 f0       	brcs	.+10     	; 0xf0e <__gtsf2+0x56>
     f04:	c7 01       	movw	r24, r14
     f06:	b8 01       	movw	r22, r16
     f08:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__fpcmp_parts_f>
     f0c:	01 c0       	rjmp	.+2      	; 0xf10 <__gtsf2+0x58>
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
     f10:	68 96       	adiw	r28, 0x18	; 24
     f12:	e6 e0       	ldi	r30, 0x06	; 6
     f14:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__epilogue_restores__+0x18>

00000f18 <__gesf2>:
     f18:	a8 e1       	ldi	r26, 0x18	; 24
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e2 e9       	ldi	r30, 0x92	; 146
     f1e:	f7 e0       	ldi	r31, 0x07	; 7
     f20:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <__prologue_saves__+0x18>
     f24:	69 83       	std	Y+1, r22	; 0x01
     f26:	7a 83       	std	Y+2, r23	; 0x02
     f28:	8b 83       	std	Y+3, r24	; 0x03
     f2a:	9c 83       	std	Y+4, r25	; 0x04
     f2c:	2d 83       	std	Y+5, r18	; 0x05
     f2e:	3e 83       	std	Y+6, r19	; 0x06
     f30:	4f 83       	std	Y+7, r20	; 0x07
     f32:	58 87       	std	Y+8, r21	; 0x08
     f34:	89 e0       	ldi	r24, 0x09	; 9
     f36:	e8 2e       	mov	r14, r24
     f38:	f1 2c       	mov	r15, r1
     f3a:	ec 0e       	add	r14, r28
     f3c:	fd 1e       	adc	r15, r29
     f3e:	ce 01       	movw	r24, r28
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	b7 01       	movw	r22, r14
     f44:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__unpack_f>
     f48:	8e 01       	movw	r16, r28
     f4a:	0f 5e       	subi	r16, 0xEF	; 239
     f4c:	1f 4f       	sbci	r17, 0xFF	; 255
     f4e:	ce 01       	movw	r24, r28
     f50:	05 96       	adiw	r24, 0x05	; 5
     f52:	b8 01       	movw	r22, r16
     f54:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__unpack_f>
     f58:	89 85       	ldd	r24, Y+9	; 0x09
     f5a:	82 30       	cpi	r24, 0x02	; 2
     f5c:	40 f0       	brcs	.+16     	; 0xf6e <__gesf2+0x56>
     f5e:	89 89       	ldd	r24, Y+17	; 0x11
     f60:	82 30       	cpi	r24, 0x02	; 2
     f62:	28 f0       	brcs	.+10     	; 0xf6e <__gesf2+0x56>
     f64:	c7 01       	movw	r24, r14
     f66:	b8 01       	movw	r22, r16
     f68:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__fpcmp_parts_f>
     f6c:	01 c0       	rjmp	.+2      	; 0xf70 <__gesf2+0x58>
     f6e:	8f ef       	ldi	r24, 0xFF	; 255
     f70:	68 96       	adiw	r28, 0x18	; 24
     f72:	e6 e0       	ldi	r30, 0x06	; 6
     f74:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__epilogue_restores__+0x18>

00000f78 <__lesf2>:
     f78:	a8 e1       	ldi	r26, 0x18	; 24
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e2 ec       	ldi	r30, 0xC2	; 194
     f7e:	f7 e0       	ldi	r31, 0x07	; 7
     f80:	0c 94 ce 0a 	jmp	0x159c	; 0x159c <__prologue_saves__+0x18>
     f84:	69 83       	std	Y+1, r22	; 0x01
     f86:	7a 83       	std	Y+2, r23	; 0x02
     f88:	8b 83       	std	Y+3, r24	; 0x03
     f8a:	9c 83       	std	Y+4, r25	; 0x04
     f8c:	2d 83       	std	Y+5, r18	; 0x05
     f8e:	3e 83       	std	Y+6, r19	; 0x06
     f90:	4f 83       	std	Y+7, r20	; 0x07
     f92:	58 87       	std	Y+8, r21	; 0x08
     f94:	89 e0       	ldi	r24, 0x09	; 9
     f96:	e8 2e       	mov	r14, r24
     f98:	f1 2c       	mov	r15, r1
     f9a:	ec 0e       	add	r14, r28
     f9c:	fd 1e       	adc	r15, r29
     f9e:	ce 01       	movw	r24, r28
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	b7 01       	movw	r22, r14
     fa4:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__unpack_f>
     fa8:	8e 01       	movw	r16, r28
     faa:	0f 5e       	subi	r16, 0xEF	; 239
     fac:	1f 4f       	sbci	r17, 0xFF	; 255
     fae:	ce 01       	movw	r24, r28
     fb0:	05 96       	adiw	r24, 0x05	; 5
     fb2:	b8 01       	movw	r22, r16
     fb4:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__unpack_f>
     fb8:	89 85       	ldd	r24, Y+9	; 0x09
     fba:	82 30       	cpi	r24, 0x02	; 2
     fbc:	40 f0       	brcs	.+16     	; 0xfce <__lesf2+0x56>
     fbe:	89 89       	ldd	r24, Y+17	; 0x11
     fc0:	82 30       	cpi	r24, 0x02	; 2
     fc2:	28 f0       	brcs	.+10     	; 0xfce <__lesf2+0x56>
     fc4:	c7 01       	movw	r24, r14
     fc6:	b8 01       	movw	r22, r16
     fc8:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__fpcmp_parts_f>
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <__lesf2+0x58>
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	68 96       	adiw	r28, 0x18	; 24
     fd2:	e6 e0       	ldi	r30, 0x06	; 6
     fd4:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__epilogue_restores__+0x18>

00000fd8 <__fixsfsi>:
     fd8:	ac e0       	ldi	r26, 0x0C	; 12
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e2 ef       	ldi	r30, 0xF2	; 242
     fde:	f7 e0       	ldi	r31, 0x07	; 7
     fe0:	0c 94 d2 0a 	jmp	0x15a4	; 0x15a4 <__prologue_saves__+0x20>
     fe4:	69 83       	std	Y+1, r22	; 0x01
     fe6:	7a 83       	std	Y+2, r23	; 0x02
     fe8:	8b 83       	std	Y+3, r24	; 0x03
     fea:	9c 83       	std	Y+4, r25	; 0x04
     fec:	ce 01       	movw	r24, r28
     fee:	01 96       	adiw	r24, 0x01	; 1
     ff0:	be 01       	movw	r22, r28
     ff2:	6b 5f       	subi	r22, 0xFB	; 251
     ff4:	7f 4f       	sbci	r23, 0xFF	; 255
     ff6:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__unpack_f>
     ffa:	8d 81       	ldd	r24, Y+5	; 0x05
     ffc:	82 30       	cpi	r24, 0x02	; 2
     ffe:	61 f1       	breq	.+88     	; 0x1058 <__fixsfsi+0x80>
    1000:	82 30       	cpi	r24, 0x02	; 2
    1002:	50 f1       	brcs	.+84     	; 0x1058 <__fixsfsi+0x80>
    1004:	84 30       	cpi	r24, 0x04	; 4
    1006:	21 f4       	brne	.+8      	; 0x1010 <__fixsfsi+0x38>
    1008:	8e 81       	ldd	r24, Y+6	; 0x06
    100a:	88 23       	and	r24, r24
    100c:	51 f1       	breq	.+84     	; 0x1062 <__fixsfsi+0x8a>
    100e:	2e c0       	rjmp	.+92     	; 0x106c <__fixsfsi+0x94>
    1010:	2f 81       	ldd	r18, Y+7	; 0x07
    1012:	38 85       	ldd	r19, Y+8	; 0x08
    1014:	37 fd       	sbrc	r19, 7
    1016:	20 c0       	rjmp	.+64     	; 0x1058 <__fixsfsi+0x80>
    1018:	6e 81       	ldd	r22, Y+6	; 0x06
    101a:	2f 31       	cpi	r18, 0x1F	; 31
    101c:	31 05       	cpc	r19, r1
    101e:	1c f0       	brlt	.+6      	; 0x1026 <__fixsfsi+0x4e>
    1020:	66 23       	and	r22, r22
    1022:	f9 f0       	breq	.+62     	; 0x1062 <__fixsfsi+0x8a>
    1024:	23 c0       	rjmp	.+70     	; 0x106c <__fixsfsi+0x94>
    1026:	8e e1       	ldi	r24, 0x1E	; 30
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	82 1b       	sub	r24, r18
    102c:	93 0b       	sbc	r25, r19
    102e:	29 85       	ldd	r18, Y+9	; 0x09
    1030:	3a 85       	ldd	r19, Y+10	; 0x0a
    1032:	4b 85       	ldd	r20, Y+11	; 0x0b
    1034:	5c 85       	ldd	r21, Y+12	; 0x0c
    1036:	04 c0       	rjmp	.+8      	; 0x1040 <__fixsfsi+0x68>
    1038:	56 95       	lsr	r21
    103a:	47 95       	ror	r20
    103c:	37 95       	ror	r19
    103e:	27 95       	ror	r18
    1040:	8a 95       	dec	r24
    1042:	d2 f7       	brpl	.-12     	; 0x1038 <__fixsfsi+0x60>
    1044:	66 23       	and	r22, r22
    1046:	b1 f0       	breq	.+44     	; 0x1074 <__fixsfsi+0x9c>
    1048:	50 95       	com	r21
    104a:	40 95       	com	r20
    104c:	30 95       	com	r19
    104e:	21 95       	neg	r18
    1050:	3f 4f       	sbci	r19, 0xFF	; 255
    1052:	4f 4f       	sbci	r20, 0xFF	; 255
    1054:	5f 4f       	sbci	r21, 0xFF	; 255
    1056:	0e c0       	rjmp	.+28     	; 0x1074 <__fixsfsi+0x9c>
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	09 c0       	rjmp	.+18     	; 0x1074 <__fixsfsi+0x9c>
    1062:	2f ef       	ldi	r18, 0xFF	; 255
    1064:	3f ef       	ldi	r19, 0xFF	; 255
    1066:	4f ef       	ldi	r20, 0xFF	; 255
    1068:	5f e7       	ldi	r21, 0x7F	; 127
    106a:	04 c0       	rjmp	.+8      	; 0x1074 <__fixsfsi+0x9c>
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	50 e8       	ldi	r21, 0x80	; 128
    1074:	b9 01       	movw	r22, r18
    1076:	ca 01       	movw	r24, r20
    1078:	2c 96       	adiw	r28, 0x0c	; 12
    107a:	e2 e0       	ldi	r30, 0x02	; 2
    107c:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__epilogue_restores__+0x20>

00001080 <__floatunsisf>:
    1080:	a8 e0       	ldi	r26, 0x08	; 8
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e6 e4       	ldi	r30, 0x46	; 70
    1086:	f8 e0       	ldi	r31, 0x08	; 8
    1088:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <__prologue_saves__+0x10>
    108c:	7b 01       	movw	r14, r22
    108e:	8c 01       	movw	r16, r24
    1090:	61 15       	cp	r22, r1
    1092:	71 05       	cpc	r23, r1
    1094:	81 05       	cpc	r24, r1
    1096:	91 05       	cpc	r25, r1
    1098:	19 f4       	brne	.+6      	; 0x10a0 <__floatunsisf+0x20>
    109a:	82 e0       	ldi	r24, 0x02	; 2
    109c:	89 83       	std	Y+1, r24	; 0x01
    109e:	60 c0       	rjmp	.+192    	; 0x1160 <__floatunsisf+0xe0>
    10a0:	83 e0       	ldi	r24, 0x03	; 3
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	8e e1       	ldi	r24, 0x1E	; 30
    10a6:	c8 2e       	mov	r12, r24
    10a8:	d1 2c       	mov	r13, r1
    10aa:	dc 82       	std	Y+4, r13	; 0x04
    10ac:	cb 82       	std	Y+3, r12	; 0x03
    10ae:	ed 82       	std	Y+5, r14	; 0x05
    10b0:	fe 82       	std	Y+6, r15	; 0x06
    10b2:	0f 83       	std	Y+7, r16	; 0x07
    10b4:	18 87       	std	Y+8, r17	; 0x08
    10b6:	c8 01       	movw	r24, r16
    10b8:	b7 01       	movw	r22, r14
    10ba:	0e 94 b9 08 	call	0x1172	; 0x1172 <__clzsi2>
    10be:	fc 01       	movw	r30, r24
    10c0:	31 97       	sbiw	r30, 0x01	; 1
    10c2:	f7 ff       	sbrs	r31, 7
    10c4:	3b c0       	rjmp	.+118    	; 0x113c <__floatunsisf+0xbc>
    10c6:	22 27       	eor	r18, r18
    10c8:	33 27       	eor	r19, r19
    10ca:	2e 1b       	sub	r18, r30
    10cc:	3f 0b       	sbc	r19, r31
    10ce:	57 01       	movw	r10, r14
    10d0:	68 01       	movw	r12, r16
    10d2:	02 2e       	mov	r0, r18
    10d4:	04 c0       	rjmp	.+8      	; 0x10de <__floatunsisf+0x5e>
    10d6:	d6 94       	lsr	r13
    10d8:	c7 94       	ror	r12
    10da:	b7 94       	ror	r11
    10dc:	a7 94       	ror	r10
    10de:	0a 94       	dec	r0
    10e0:	d2 f7       	brpl	.-12     	; 0x10d6 <__floatunsisf+0x56>
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	50 e0       	ldi	r21, 0x00	; 0
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	70 e0       	ldi	r23, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	a0 e0       	ldi	r26, 0x00	; 0
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	04 c0       	rjmp	.+8      	; 0x10fc <__floatunsisf+0x7c>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	aa 1f       	adc	r26, r26
    10fa:	bb 1f       	adc	r27, r27
    10fc:	2a 95       	dec	r18
    10fe:	d2 f7       	brpl	.-12     	; 0x10f4 <__floatunsisf+0x74>
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	a1 09       	sbc	r26, r1
    1104:	b1 09       	sbc	r27, r1
    1106:	8e 21       	and	r24, r14
    1108:	9f 21       	and	r25, r15
    110a:	a0 23       	and	r26, r16
    110c:	b1 23       	and	r27, r17
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	a1 05       	cpc	r26, r1
    1112:	b1 05       	cpc	r27, r1
    1114:	21 f0       	breq	.+8      	; 0x111e <__floatunsisf+0x9e>
    1116:	41 e0       	ldi	r20, 0x01	; 1
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	4a 29       	or	r20, r10
    1120:	5b 29       	or	r21, r11
    1122:	6c 29       	or	r22, r12
    1124:	7d 29       	or	r23, r13
    1126:	4d 83       	std	Y+5, r20	; 0x05
    1128:	5e 83       	std	Y+6, r21	; 0x06
    112a:	6f 83       	std	Y+7, r22	; 0x07
    112c:	78 87       	std	Y+8, r23	; 0x08
    112e:	8e e1       	ldi	r24, 0x1E	; 30
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	8e 1b       	sub	r24, r30
    1134:	9f 0b       	sbc	r25, r31
    1136:	9c 83       	std	Y+4, r25	; 0x04
    1138:	8b 83       	std	Y+3, r24	; 0x03
    113a:	12 c0       	rjmp	.+36     	; 0x1160 <__floatunsisf+0xe0>
    113c:	30 97       	sbiw	r30, 0x00	; 0
    113e:	81 f0       	breq	.+32     	; 0x1160 <__floatunsisf+0xe0>
    1140:	0e 2e       	mov	r0, r30
    1142:	04 c0       	rjmp	.+8      	; 0x114c <__floatunsisf+0xcc>
    1144:	ee 0c       	add	r14, r14
    1146:	ff 1c       	adc	r15, r15
    1148:	00 1f       	adc	r16, r16
    114a:	11 1f       	adc	r17, r17
    114c:	0a 94       	dec	r0
    114e:	d2 f7       	brpl	.-12     	; 0x1144 <__floatunsisf+0xc4>
    1150:	ed 82       	std	Y+5, r14	; 0x05
    1152:	fe 82       	std	Y+6, r15	; 0x06
    1154:	0f 83       	std	Y+7, r16	; 0x07
    1156:	18 87       	std	Y+8, r17	; 0x08
    1158:	ce 1a       	sub	r12, r30
    115a:	df 0a       	sbc	r13, r31
    115c:	dc 82       	std	Y+4, r13	; 0x04
    115e:	cb 82       	std	Y+3, r12	; 0x03
    1160:	1a 82       	std	Y+2, r1	; 0x02
    1162:	ce 01       	movw	r24, r28
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	0e 94 08 09 	call	0x1210	; 0x1210 <__pack_f>
    116a:	28 96       	adiw	r28, 0x08	; 8
    116c:	ea e0       	ldi	r30, 0x0A	; 10
    116e:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__epilogue_restores__+0x10>

00001172 <__clzsi2>:
    1172:	ef 92       	push	r14
    1174:	ff 92       	push	r15
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	7b 01       	movw	r14, r22
    117c:	8c 01       	movw	r16, r24
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	e8 16       	cp	r14, r24
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	f8 06       	cpc	r15, r24
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	08 07       	cpc	r16, r24
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	18 07       	cpc	r17, r24
    118e:	88 f4       	brcc	.+34     	; 0x11b2 <__clzsi2+0x40>
    1190:	8f ef       	ldi	r24, 0xFF	; 255
    1192:	e8 16       	cp	r14, r24
    1194:	f1 04       	cpc	r15, r1
    1196:	01 05       	cpc	r16, r1
    1198:	11 05       	cpc	r17, r1
    119a:	31 f0       	breq	.+12     	; 0x11a8 <__clzsi2+0x36>
    119c:	28 f0       	brcs	.+10     	; 0x11a8 <__clzsi2+0x36>
    119e:	88 e0       	ldi	r24, 0x08	; 8
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	a0 e0       	ldi	r26, 0x00	; 0
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	17 c0       	rjmp	.+46     	; 0x11d6 <__clzsi2+0x64>
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	a0 e0       	ldi	r26, 0x00	; 0
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	12 c0       	rjmp	.+36     	; 0x11d6 <__clzsi2+0x64>
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	e8 16       	cp	r14, r24
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	f8 06       	cpc	r15, r24
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	08 07       	cpc	r16, r24
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	18 07       	cpc	r17, r24
    11c2:	28 f0       	brcs	.+10     	; 0x11ce <__clzsi2+0x5c>
    11c4:	88 e1       	ldi	r24, 0x18	; 24
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	a0 e0       	ldi	r26, 0x00	; 0
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	04 c0       	rjmp	.+8      	; 0x11d6 <__clzsi2+0x64>
    11ce:	80 e1       	ldi	r24, 0x10	; 16
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	a0 e0       	ldi	r26, 0x00	; 0
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	20 e2       	ldi	r18, 0x20	; 32
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	28 1b       	sub	r18, r24
    11e0:	39 0b       	sbc	r19, r25
    11e2:	4a 0b       	sbc	r20, r26
    11e4:	5b 0b       	sbc	r21, r27
    11e6:	04 c0       	rjmp	.+8      	; 0x11f0 <__clzsi2+0x7e>
    11e8:	16 95       	lsr	r17
    11ea:	07 95       	ror	r16
    11ec:	f7 94       	ror	r15
    11ee:	e7 94       	ror	r14
    11f0:	8a 95       	dec	r24
    11f2:	d2 f7       	brpl	.-12     	; 0x11e8 <__clzsi2+0x76>
    11f4:	f7 01       	movw	r30, r14
    11f6:	e8 59       	subi	r30, 0x98	; 152
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	80 81       	ld	r24, Z
    11fc:	28 1b       	sub	r18, r24
    11fe:	31 09       	sbc	r19, r1
    1200:	41 09       	sbc	r20, r1
    1202:	51 09       	sbc	r21, r1
    1204:	c9 01       	movw	r24, r18
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	ff 90       	pop	r15
    120c:	ef 90       	pop	r14
    120e:	08 95       	ret

00001210 <__pack_f>:
    1210:	df 92       	push	r13
    1212:	ef 92       	push	r14
    1214:	ff 92       	push	r15
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	fc 01       	movw	r30, r24
    121c:	e4 80       	ldd	r14, Z+4	; 0x04
    121e:	f5 80       	ldd	r15, Z+5	; 0x05
    1220:	06 81       	ldd	r16, Z+6	; 0x06
    1222:	17 81       	ldd	r17, Z+7	; 0x07
    1224:	d1 80       	ldd	r13, Z+1	; 0x01
    1226:	80 81       	ld	r24, Z
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	48 f4       	brcc	.+18     	; 0x123e <__pack_f+0x2e>
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	a0 e1       	ldi	r26, 0x10	; 16
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e8 2a       	or	r14, r24
    1236:	f9 2a       	or	r15, r25
    1238:	0a 2b       	or	r16, r26
    123a:	1b 2b       	or	r17, r27
    123c:	a5 c0       	rjmp	.+330    	; 0x1388 <__pack_f+0x178>
    123e:	84 30       	cpi	r24, 0x04	; 4
    1240:	09 f4       	brne	.+2      	; 0x1244 <__pack_f+0x34>
    1242:	9f c0       	rjmp	.+318    	; 0x1382 <__pack_f+0x172>
    1244:	82 30       	cpi	r24, 0x02	; 2
    1246:	21 f4       	brne	.+8      	; 0x1250 <__pack_f+0x40>
    1248:	ee 24       	eor	r14, r14
    124a:	ff 24       	eor	r15, r15
    124c:	87 01       	movw	r16, r14
    124e:	05 c0       	rjmp	.+10     	; 0x125a <__pack_f+0x4a>
    1250:	e1 14       	cp	r14, r1
    1252:	f1 04       	cpc	r15, r1
    1254:	01 05       	cpc	r16, r1
    1256:	11 05       	cpc	r17, r1
    1258:	19 f4       	brne	.+6      	; 0x1260 <__pack_f+0x50>
    125a:	e0 e0       	ldi	r30, 0x00	; 0
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	96 c0       	rjmp	.+300    	; 0x138c <__pack_f+0x17c>
    1260:	62 81       	ldd	r22, Z+2	; 0x02
    1262:	73 81       	ldd	r23, Z+3	; 0x03
    1264:	9f ef       	ldi	r25, 0xFF	; 255
    1266:	62 38       	cpi	r22, 0x82	; 130
    1268:	79 07       	cpc	r23, r25
    126a:	0c f0       	brlt	.+2      	; 0x126e <__pack_f+0x5e>
    126c:	5b c0       	rjmp	.+182    	; 0x1324 <__pack_f+0x114>
    126e:	22 e8       	ldi	r18, 0x82	; 130
    1270:	3f ef       	ldi	r19, 0xFF	; 255
    1272:	26 1b       	sub	r18, r22
    1274:	37 0b       	sbc	r19, r23
    1276:	2a 31       	cpi	r18, 0x1A	; 26
    1278:	31 05       	cpc	r19, r1
    127a:	2c f0       	brlt	.+10     	; 0x1286 <__pack_f+0x76>
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e0       	ldi	r20, 0x00	; 0
    1282:	50 e0       	ldi	r21, 0x00	; 0
    1284:	2a c0       	rjmp	.+84     	; 0x12da <__pack_f+0xca>
    1286:	b8 01       	movw	r22, r16
    1288:	a7 01       	movw	r20, r14
    128a:	02 2e       	mov	r0, r18
    128c:	04 c0       	rjmp	.+8      	; 0x1296 <__pack_f+0x86>
    128e:	76 95       	lsr	r23
    1290:	67 95       	ror	r22
    1292:	57 95       	ror	r21
    1294:	47 95       	ror	r20
    1296:	0a 94       	dec	r0
    1298:	d2 f7       	brpl	.-12     	; 0x128e <__pack_f+0x7e>
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	a0 e0       	ldi	r26, 0x00	; 0
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <__pack_f+0x9c>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	aa 1f       	adc	r26, r26
    12aa:	bb 1f       	adc	r27, r27
    12ac:	2a 95       	dec	r18
    12ae:	d2 f7       	brpl	.-12     	; 0x12a4 <__pack_f+0x94>
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	a1 09       	sbc	r26, r1
    12b4:	b1 09       	sbc	r27, r1
    12b6:	8e 21       	and	r24, r14
    12b8:	9f 21       	and	r25, r15
    12ba:	a0 23       	and	r26, r16
    12bc:	b1 23       	and	r27, r17
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	a1 05       	cpc	r26, r1
    12c2:	b1 05       	cpc	r27, r1
    12c4:	21 f0       	breq	.+8      	; 0x12ce <__pack_f+0xbe>
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	a0 e0       	ldi	r26, 0x00	; 0
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	9a 01       	movw	r18, r20
    12d0:	ab 01       	movw	r20, r22
    12d2:	28 2b       	or	r18, r24
    12d4:	39 2b       	or	r19, r25
    12d6:	4a 2b       	or	r20, r26
    12d8:	5b 2b       	or	r21, r27
    12da:	da 01       	movw	r26, r20
    12dc:	c9 01       	movw	r24, r18
    12de:	8f 77       	andi	r24, 0x7F	; 127
    12e0:	90 70       	andi	r25, 0x00	; 0
    12e2:	a0 70       	andi	r26, 0x00	; 0
    12e4:	b0 70       	andi	r27, 0x00	; 0
    12e6:	80 34       	cpi	r24, 0x40	; 64
    12e8:	91 05       	cpc	r25, r1
    12ea:	a1 05       	cpc	r26, r1
    12ec:	b1 05       	cpc	r27, r1
    12ee:	39 f4       	brne	.+14     	; 0x12fe <__pack_f+0xee>
    12f0:	27 ff       	sbrs	r18, 7
    12f2:	09 c0       	rjmp	.+18     	; 0x1306 <__pack_f+0xf6>
    12f4:	20 5c       	subi	r18, 0xC0	; 192
    12f6:	3f 4f       	sbci	r19, 0xFF	; 255
    12f8:	4f 4f       	sbci	r20, 0xFF	; 255
    12fa:	5f 4f       	sbci	r21, 0xFF	; 255
    12fc:	04 c0       	rjmp	.+8      	; 0x1306 <__pack_f+0xf6>
    12fe:	21 5c       	subi	r18, 0xC1	; 193
    1300:	3f 4f       	sbci	r19, 0xFF	; 255
    1302:	4f 4f       	sbci	r20, 0xFF	; 255
    1304:	5f 4f       	sbci	r21, 0xFF	; 255
    1306:	e0 e0       	ldi	r30, 0x00	; 0
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	20 30       	cpi	r18, 0x00	; 0
    130c:	a0 e0       	ldi	r26, 0x00	; 0
    130e:	3a 07       	cpc	r19, r26
    1310:	a0 e0       	ldi	r26, 0x00	; 0
    1312:	4a 07       	cpc	r20, r26
    1314:	a0 e4       	ldi	r26, 0x40	; 64
    1316:	5a 07       	cpc	r21, r26
    1318:	10 f0       	brcs	.+4      	; 0x131e <__pack_f+0x10e>
    131a:	e1 e0       	ldi	r30, 0x01	; 1
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	79 01       	movw	r14, r18
    1320:	8a 01       	movw	r16, r20
    1322:	27 c0       	rjmp	.+78     	; 0x1372 <__pack_f+0x162>
    1324:	60 38       	cpi	r22, 0x80	; 128
    1326:	71 05       	cpc	r23, r1
    1328:	64 f5       	brge	.+88     	; 0x1382 <__pack_f+0x172>
    132a:	fb 01       	movw	r30, r22
    132c:	e1 58       	subi	r30, 0x81	; 129
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	d8 01       	movw	r26, r16
    1332:	c7 01       	movw	r24, r14
    1334:	8f 77       	andi	r24, 0x7F	; 127
    1336:	90 70       	andi	r25, 0x00	; 0
    1338:	a0 70       	andi	r26, 0x00	; 0
    133a:	b0 70       	andi	r27, 0x00	; 0
    133c:	80 34       	cpi	r24, 0x40	; 64
    133e:	91 05       	cpc	r25, r1
    1340:	a1 05       	cpc	r26, r1
    1342:	b1 05       	cpc	r27, r1
    1344:	39 f4       	brne	.+14     	; 0x1354 <__pack_f+0x144>
    1346:	e7 fe       	sbrs	r14, 7
    1348:	0d c0       	rjmp	.+26     	; 0x1364 <__pack_f+0x154>
    134a:	80 e4       	ldi	r24, 0x40	; 64
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	a0 e0       	ldi	r26, 0x00	; 0
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	04 c0       	rjmp	.+8      	; 0x135c <__pack_f+0x14c>
    1354:	8f e3       	ldi	r24, 0x3F	; 63
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	a0 e0       	ldi	r26, 0x00	; 0
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e8 0e       	add	r14, r24
    135e:	f9 1e       	adc	r15, r25
    1360:	0a 1f       	adc	r16, r26
    1362:	1b 1f       	adc	r17, r27
    1364:	17 ff       	sbrs	r17, 7
    1366:	05 c0       	rjmp	.+10     	; 0x1372 <__pack_f+0x162>
    1368:	16 95       	lsr	r17
    136a:	07 95       	ror	r16
    136c:	f7 94       	ror	r15
    136e:	e7 94       	ror	r14
    1370:	31 96       	adiw	r30, 0x01	; 1
    1372:	87 e0       	ldi	r24, 0x07	; 7
    1374:	16 95       	lsr	r17
    1376:	07 95       	ror	r16
    1378:	f7 94       	ror	r15
    137a:	e7 94       	ror	r14
    137c:	8a 95       	dec	r24
    137e:	d1 f7       	brne	.-12     	; 0x1374 <__pack_f+0x164>
    1380:	05 c0       	rjmp	.+10     	; 0x138c <__pack_f+0x17c>
    1382:	ee 24       	eor	r14, r14
    1384:	ff 24       	eor	r15, r15
    1386:	87 01       	movw	r16, r14
    1388:	ef ef       	ldi	r30, 0xFF	; 255
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	6e 2f       	mov	r22, r30
    138e:	67 95       	ror	r22
    1390:	66 27       	eor	r22, r22
    1392:	67 95       	ror	r22
    1394:	90 2f       	mov	r25, r16
    1396:	9f 77       	andi	r25, 0x7F	; 127
    1398:	d7 94       	ror	r13
    139a:	dd 24       	eor	r13, r13
    139c:	d7 94       	ror	r13
    139e:	8e 2f       	mov	r24, r30
    13a0:	86 95       	lsr	r24
    13a2:	49 2f       	mov	r20, r25
    13a4:	46 2b       	or	r20, r22
    13a6:	58 2f       	mov	r21, r24
    13a8:	5d 29       	or	r21, r13
    13aa:	b7 01       	movw	r22, r14
    13ac:	ca 01       	movw	r24, r20
    13ae:	1f 91       	pop	r17
    13b0:	0f 91       	pop	r16
    13b2:	ff 90       	pop	r15
    13b4:	ef 90       	pop	r14
    13b6:	df 90       	pop	r13
    13b8:	08 95       	ret

000013ba <__unpack_f>:
    13ba:	fc 01       	movw	r30, r24
    13bc:	db 01       	movw	r26, r22
    13be:	40 81       	ld	r20, Z
    13c0:	51 81       	ldd	r21, Z+1	; 0x01
    13c2:	22 81       	ldd	r18, Z+2	; 0x02
    13c4:	62 2f       	mov	r22, r18
    13c6:	6f 77       	andi	r22, 0x7F	; 127
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	22 1f       	adc	r18, r18
    13cc:	22 27       	eor	r18, r18
    13ce:	22 1f       	adc	r18, r18
    13d0:	93 81       	ldd	r25, Z+3	; 0x03
    13d2:	89 2f       	mov	r24, r25
    13d4:	88 0f       	add	r24, r24
    13d6:	82 2b       	or	r24, r18
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	99 1f       	adc	r25, r25
    13de:	99 27       	eor	r25, r25
    13e0:	99 1f       	adc	r25, r25
    13e2:	11 96       	adiw	r26, 0x01	; 1
    13e4:	9c 93       	st	X, r25
    13e6:	11 97       	sbiw	r26, 0x01	; 1
    13e8:	21 15       	cp	r18, r1
    13ea:	31 05       	cpc	r19, r1
    13ec:	a9 f5       	brne	.+106    	; 0x1458 <__unpack_f+0x9e>
    13ee:	41 15       	cp	r20, r1
    13f0:	51 05       	cpc	r21, r1
    13f2:	61 05       	cpc	r22, r1
    13f4:	71 05       	cpc	r23, r1
    13f6:	11 f4       	brne	.+4      	; 0x13fc <__unpack_f+0x42>
    13f8:	82 e0       	ldi	r24, 0x02	; 2
    13fa:	37 c0       	rjmp	.+110    	; 0x146a <__unpack_f+0xb0>
    13fc:	82 e8       	ldi	r24, 0x82	; 130
    13fe:	9f ef       	ldi	r25, 0xFF	; 255
    1400:	13 96       	adiw	r26, 0x03	; 3
    1402:	9c 93       	st	X, r25
    1404:	8e 93       	st	-X, r24
    1406:	12 97       	sbiw	r26, 0x02	; 2
    1408:	9a 01       	movw	r18, r20
    140a:	ab 01       	movw	r20, r22
    140c:	67 e0       	ldi	r22, 0x07	; 7
    140e:	22 0f       	add	r18, r18
    1410:	33 1f       	adc	r19, r19
    1412:	44 1f       	adc	r20, r20
    1414:	55 1f       	adc	r21, r21
    1416:	6a 95       	dec	r22
    1418:	d1 f7       	brne	.-12     	; 0x140e <__unpack_f+0x54>
    141a:	83 e0       	ldi	r24, 0x03	; 3
    141c:	8c 93       	st	X, r24
    141e:	0d c0       	rjmp	.+26     	; 0x143a <__unpack_f+0x80>
    1420:	22 0f       	add	r18, r18
    1422:	33 1f       	adc	r19, r19
    1424:	44 1f       	adc	r20, r20
    1426:	55 1f       	adc	r21, r21
    1428:	12 96       	adiw	r26, 0x02	; 2
    142a:	8d 91       	ld	r24, X+
    142c:	9c 91       	ld	r25, X
    142e:	13 97       	sbiw	r26, 0x03	; 3
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	13 96       	adiw	r26, 0x03	; 3
    1434:	9c 93       	st	X, r25
    1436:	8e 93       	st	-X, r24
    1438:	12 97       	sbiw	r26, 0x02	; 2
    143a:	20 30       	cpi	r18, 0x00	; 0
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	38 07       	cpc	r19, r24
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	48 07       	cpc	r20, r24
    1444:	80 e4       	ldi	r24, 0x40	; 64
    1446:	58 07       	cpc	r21, r24
    1448:	58 f3       	brcs	.-42     	; 0x1420 <__unpack_f+0x66>
    144a:	14 96       	adiw	r26, 0x04	; 4
    144c:	2d 93       	st	X+, r18
    144e:	3d 93       	st	X+, r19
    1450:	4d 93       	st	X+, r20
    1452:	5c 93       	st	X, r21
    1454:	17 97       	sbiw	r26, 0x07	; 7
    1456:	08 95       	ret
    1458:	2f 3f       	cpi	r18, 0xFF	; 255
    145a:	31 05       	cpc	r19, r1
    145c:	79 f4       	brne	.+30     	; 0x147c <__unpack_f+0xc2>
    145e:	41 15       	cp	r20, r1
    1460:	51 05       	cpc	r21, r1
    1462:	61 05       	cpc	r22, r1
    1464:	71 05       	cpc	r23, r1
    1466:	19 f4       	brne	.+6      	; 0x146e <__unpack_f+0xb4>
    1468:	84 e0       	ldi	r24, 0x04	; 4
    146a:	8c 93       	st	X, r24
    146c:	08 95       	ret
    146e:	64 ff       	sbrs	r22, 4
    1470:	03 c0       	rjmp	.+6      	; 0x1478 <__unpack_f+0xbe>
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	8c 93       	st	X, r24
    1476:	12 c0       	rjmp	.+36     	; 0x149c <__unpack_f+0xe2>
    1478:	1c 92       	st	X, r1
    147a:	10 c0       	rjmp	.+32     	; 0x149c <__unpack_f+0xe2>
    147c:	2f 57       	subi	r18, 0x7F	; 127
    147e:	30 40       	sbci	r19, 0x00	; 0
    1480:	13 96       	adiw	r26, 0x03	; 3
    1482:	3c 93       	st	X, r19
    1484:	2e 93       	st	-X, r18
    1486:	12 97       	sbiw	r26, 0x02	; 2
    1488:	83 e0       	ldi	r24, 0x03	; 3
    148a:	8c 93       	st	X, r24
    148c:	87 e0       	ldi	r24, 0x07	; 7
    148e:	44 0f       	add	r20, r20
    1490:	55 1f       	adc	r21, r21
    1492:	66 1f       	adc	r22, r22
    1494:	77 1f       	adc	r23, r23
    1496:	8a 95       	dec	r24
    1498:	d1 f7       	brne	.-12     	; 0x148e <__unpack_f+0xd4>
    149a:	70 64       	ori	r23, 0x40	; 64
    149c:	14 96       	adiw	r26, 0x04	; 4
    149e:	4d 93       	st	X+, r20
    14a0:	5d 93       	st	X+, r21
    14a2:	6d 93       	st	X+, r22
    14a4:	7c 93       	st	X, r23
    14a6:	17 97       	sbiw	r26, 0x07	; 7
    14a8:	08 95       	ret

000014aa <__fpcmp_parts_f>:
    14aa:	1f 93       	push	r17
    14ac:	dc 01       	movw	r26, r24
    14ae:	fb 01       	movw	r30, r22
    14b0:	9c 91       	ld	r25, X
    14b2:	92 30       	cpi	r25, 0x02	; 2
    14b4:	08 f4       	brcc	.+2      	; 0x14b8 <__fpcmp_parts_f+0xe>
    14b6:	47 c0       	rjmp	.+142    	; 0x1546 <__fpcmp_parts_f+0x9c>
    14b8:	80 81       	ld	r24, Z
    14ba:	82 30       	cpi	r24, 0x02	; 2
    14bc:	08 f4       	brcc	.+2      	; 0x14c0 <__fpcmp_parts_f+0x16>
    14be:	43 c0       	rjmp	.+134    	; 0x1546 <__fpcmp_parts_f+0x9c>
    14c0:	94 30       	cpi	r25, 0x04	; 4
    14c2:	51 f4       	brne	.+20     	; 0x14d8 <__fpcmp_parts_f+0x2e>
    14c4:	11 96       	adiw	r26, 0x01	; 1
    14c6:	1c 91       	ld	r17, X
    14c8:	84 30       	cpi	r24, 0x04	; 4
    14ca:	99 f5       	brne	.+102    	; 0x1532 <__fpcmp_parts_f+0x88>
    14cc:	81 81       	ldd	r24, Z+1	; 0x01
    14ce:	68 2f       	mov	r22, r24
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	61 1b       	sub	r22, r17
    14d4:	71 09       	sbc	r23, r1
    14d6:	3f c0       	rjmp	.+126    	; 0x1556 <__fpcmp_parts_f+0xac>
    14d8:	84 30       	cpi	r24, 0x04	; 4
    14da:	21 f0       	breq	.+8      	; 0x14e4 <__fpcmp_parts_f+0x3a>
    14dc:	92 30       	cpi	r25, 0x02	; 2
    14de:	31 f4       	brne	.+12     	; 0x14ec <__fpcmp_parts_f+0x42>
    14e0:	82 30       	cpi	r24, 0x02	; 2
    14e2:	b9 f1       	breq	.+110    	; 0x1552 <__fpcmp_parts_f+0xa8>
    14e4:	81 81       	ldd	r24, Z+1	; 0x01
    14e6:	88 23       	and	r24, r24
    14e8:	89 f1       	breq	.+98     	; 0x154c <__fpcmp_parts_f+0xa2>
    14ea:	2d c0       	rjmp	.+90     	; 0x1546 <__fpcmp_parts_f+0x9c>
    14ec:	11 96       	adiw	r26, 0x01	; 1
    14ee:	1c 91       	ld	r17, X
    14f0:	11 97       	sbiw	r26, 0x01	; 1
    14f2:	82 30       	cpi	r24, 0x02	; 2
    14f4:	f1 f0       	breq	.+60     	; 0x1532 <__fpcmp_parts_f+0x88>
    14f6:	81 81       	ldd	r24, Z+1	; 0x01
    14f8:	18 17       	cp	r17, r24
    14fa:	d9 f4       	brne	.+54     	; 0x1532 <__fpcmp_parts_f+0x88>
    14fc:	12 96       	adiw	r26, 0x02	; 2
    14fe:	2d 91       	ld	r18, X+
    1500:	3c 91       	ld	r19, X
    1502:	13 97       	sbiw	r26, 0x03	; 3
    1504:	82 81       	ldd	r24, Z+2	; 0x02
    1506:	93 81       	ldd	r25, Z+3	; 0x03
    1508:	82 17       	cp	r24, r18
    150a:	93 07       	cpc	r25, r19
    150c:	94 f0       	brlt	.+36     	; 0x1532 <__fpcmp_parts_f+0x88>
    150e:	28 17       	cp	r18, r24
    1510:	39 07       	cpc	r19, r25
    1512:	bc f0       	brlt	.+46     	; 0x1542 <__fpcmp_parts_f+0x98>
    1514:	14 96       	adiw	r26, 0x04	; 4
    1516:	8d 91       	ld	r24, X+
    1518:	9d 91       	ld	r25, X+
    151a:	0d 90       	ld	r0, X+
    151c:	bc 91       	ld	r27, X
    151e:	a0 2d       	mov	r26, r0
    1520:	24 81       	ldd	r18, Z+4	; 0x04
    1522:	35 81       	ldd	r19, Z+5	; 0x05
    1524:	46 81       	ldd	r20, Z+6	; 0x06
    1526:	57 81       	ldd	r21, Z+7	; 0x07
    1528:	28 17       	cp	r18, r24
    152a:	39 07       	cpc	r19, r25
    152c:	4a 07       	cpc	r20, r26
    152e:	5b 07       	cpc	r21, r27
    1530:	18 f4       	brcc	.+6      	; 0x1538 <__fpcmp_parts_f+0x8e>
    1532:	11 23       	and	r17, r17
    1534:	41 f0       	breq	.+16     	; 0x1546 <__fpcmp_parts_f+0x9c>
    1536:	0a c0       	rjmp	.+20     	; 0x154c <__fpcmp_parts_f+0xa2>
    1538:	82 17       	cp	r24, r18
    153a:	93 07       	cpc	r25, r19
    153c:	a4 07       	cpc	r26, r20
    153e:	b5 07       	cpc	r27, r21
    1540:	40 f4       	brcc	.+16     	; 0x1552 <__fpcmp_parts_f+0xa8>
    1542:	11 23       	and	r17, r17
    1544:	19 f0       	breq	.+6      	; 0x154c <__fpcmp_parts_f+0xa2>
    1546:	61 e0       	ldi	r22, 0x01	; 1
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	05 c0       	rjmp	.+10     	; 0x1556 <__fpcmp_parts_f+0xac>
    154c:	6f ef       	ldi	r22, 0xFF	; 255
    154e:	7f ef       	ldi	r23, 0xFF	; 255
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <__fpcmp_parts_f+0xac>
    1552:	60 e0       	ldi	r22, 0x00	; 0
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	cb 01       	movw	r24, r22
    1558:	1f 91       	pop	r17
    155a:	08 95       	ret

0000155c <__udivmodhi4>:
    155c:	aa 1b       	sub	r26, r26
    155e:	bb 1b       	sub	r27, r27
    1560:	51 e1       	ldi	r21, 0x11	; 17
    1562:	07 c0       	rjmp	.+14     	; 0x1572 <__udivmodhi4_ep>

00001564 <__udivmodhi4_loop>:
    1564:	aa 1f       	adc	r26, r26
    1566:	bb 1f       	adc	r27, r27
    1568:	a6 17       	cp	r26, r22
    156a:	b7 07       	cpc	r27, r23
    156c:	10 f0       	brcs	.+4      	; 0x1572 <__udivmodhi4_ep>
    156e:	a6 1b       	sub	r26, r22
    1570:	b7 0b       	sbc	r27, r23

00001572 <__udivmodhi4_ep>:
    1572:	88 1f       	adc	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	5a 95       	dec	r21
    1578:	a9 f7       	brne	.-22     	; 0x1564 <__udivmodhi4_loop>
    157a:	80 95       	com	r24
    157c:	90 95       	com	r25
    157e:	bc 01       	movw	r22, r24
    1580:	cd 01       	movw	r24, r26
    1582:	08 95       	ret

00001584 <__prologue_saves__>:
    1584:	2f 92       	push	r2
    1586:	3f 92       	push	r3
    1588:	4f 92       	push	r4
    158a:	5f 92       	push	r5
    158c:	6f 92       	push	r6
    158e:	7f 92       	push	r7
    1590:	8f 92       	push	r8
    1592:	9f 92       	push	r9
    1594:	af 92       	push	r10
    1596:	bf 92       	push	r11
    1598:	cf 92       	push	r12
    159a:	df 92       	push	r13
    159c:	ef 92       	push	r14
    159e:	ff 92       	push	r15
    15a0:	0f 93       	push	r16
    15a2:	1f 93       	push	r17
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	ca 1b       	sub	r28, r26
    15ae:	db 0b       	sbc	r29, r27
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
    15ba:	09 94       	ijmp

000015bc <__epilogue_restores__>:
    15bc:	2a 88       	ldd	r2, Y+18	; 0x12
    15be:	39 88       	ldd	r3, Y+17	; 0x11
    15c0:	48 88       	ldd	r4, Y+16	; 0x10
    15c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    15c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    15c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    15c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    15ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    15cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    15ce:	b9 84       	ldd	r11, Y+9	; 0x09
    15d0:	c8 84       	ldd	r12, Y+8	; 0x08
    15d2:	df 80       	ldd	r13, Y+7	; 0x07
    15d4:	ee 80       	ldd	r14, Y+6	; 0x06
    15d6:	fd 80       	ldd	r15, Y+5	; 0x05
    15d8:	0c 81       	ldd	r16, Y+4	; 0x04
    15da:	1b 81       	ldd	r17, Y+3	; 0x03
    15dc:	aa 81       	ldd	r26, Y+2	; 0x02
    15de:	b9 81       	ldd	r27, Y+1	; 0x01
    15e0:	ce 0f       	add	r28, r30
    15e2:	d1 1d       	adc	r29, r1
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	ed 01       	movw	r28, r26
    15f0:	08 95       	ret

000015f2 <__eerd_byte_m16>:
    15f2:	e1 99       	sbic	0x1c, 1	; 28
    15f4:	fe cf       	rjmp	.-4      	; 0x15f2 <__eerd_byte_m16>
    15f6:	9f bb       	out	0x1f, r25	; 31
    15f8:	8e bb       	out	0x1e, r24	; 30
    15fa:	e0 9a       	sbi	0x1c, 0	; 28
    15fc:	99 27       	eor	r25, r25
    15fe:	8d b3       	in	r24, 0x1d	; 29
    1600:	08 95       	ret

00001602 <__eerd_word_m16>:
    1602:	a8 e1       	ldi	r26, 0x18	; 24
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	42 e0       	ldi	r20, 0x02	; 2
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	0c 94 0e 0b 	jmp	0x161c	; 0x161c <__eerd_blraw_m16>

0000160e <__eewr_word_m16>:
    160e:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__eewr_byte_m16>
    1612:	27 2f       	mov	r18, r23
    1614:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__eewr_r18_m16>

00001618 <__eerd_block_m16>:
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22

0000161c <__eerd_blraw_m16>:
    161c:	fc 01       	movw	r30, r24
    161e:	e1 99       	sbic	0x1c, 1	; 28
    1620:	fe cf       	rjmp	.-4      	; 0x161e <__eerd_blraw_m16+0x2>
    1622:	06 c0       	rjmp	.+12     	; 0x1630 <__eerd_blraw_m16+0x14>
    1624:	ff bb       	out	0x1f, r31	; 31
    1626:	ee bb       	out	0x1e, r30	; 30
    1628:	e0 9a       	sbi	0x1c, 0	; 28
    162a:	31 96       	adiw	r30, 0x01	; 1
    162c:	0d b2       	in	r0, 0x1d	; 29
    162e:	0d 92       	st	X+, r0
    1630:	41 50       	subi	r20, 0x01	; 1
    1632:	50 40       	sbci	r21, 0x00	; 0
    1634:	b8 f7       	brcc	.-18     	; 0x1624 <__eerd_blraw_m16+0x8>
    1636:	08 95       	ret

00001638 <__eewr_byte_m16>:
    1638:	26 2f       	mov	r18, r22

0000163a <__eewr_r18_m16>:
    163a:	e1 99       	sbic	0x1c, 1	; 28
    163c:	fe cf       	rjmp	.-4      	; 0x163a <__eewr_r18_m16>
    163e:	9f bb       	out	0x1f, r25	; 31
    1640:	8e bb       	out	0x1e, r24	; 30
    1642:	2d bb       	out	0x1d, r18	; 29
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	e2 9a       	sbi	0x1c, 2	; 28
    164a:	e1 9a       	sbi	0x1c, 1	; 28
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	01 96       	adiw	r24, 0x01	; 1
    1650:	08 95       	ret

00001652 <_exit>:
    1652:	f8 94       	cli

00001654 <__stop_program>:
    1654:	ff cf       	rjmp	.-2      	; 0x1654 <__stop_program>
