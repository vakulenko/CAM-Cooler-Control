
Preg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015ce  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000015ce  00001682  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  00800168  00800168  0000178a  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  0000178a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000001a0  00000000  00000000  0000178d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000040a  00000000  00000000  0000192d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002920  00000000  00000000  00001d37  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001450  00000000  00000000  00004657  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001970  00000000  00000000  00005aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000300  00000000  00000000  00007418  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d3  00000000  00000000  00007718  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cbd  00000000  00000000  00007beb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000088a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a7 39       	cpi	r26, 0x97	; 151
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee ec       	ldi	r30, 0xCE	; 206
      78:	f5 e1       	ldi	r31, 0x15	; 21
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 b0 02 	call	0x560	; 0x560 <main>
      8a:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <uart_init>:
//------------------------------------------------------------------------------------
//UART

void uart_init(void)
{
	UBRRH = UART_BAUDRATE_H;		// Init UART baudrate
      92:	10 bc       	out	0x20, r1	; 32
	UBRRL = UART_BAUDRATE_L;
      94:	83 e3       	ldi	r24, 0x33	; 51
      96:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1<<RXEN)|(1<<TXEN)|(1 << RXCIE);	// TX, RX enable, RX interrupt enable
      98:	88 e9       	ldi	r24, 0x98	; 152
      9a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
      9c:	86 e8       	ldi	r24, 0x86	; 134
      9e:	80 bd       	out	0x20, r24	; 32
	return;
}
      a0:	08 95       	ret

000000a2 <uart_transmit_byte>:

//Send byte thought UART
void uart_transmit_byte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
      a2:	5d 9b       	sbis	0x0b, 5	; 11
      a4:	fe cf       	rjmp	.-4      	; 0xa2 <uart_transmit_byte>
	UDR = data;
      a6:	8c b9       	out	0x0c, r24	; 12
	return;
}
      a8:	08 95       	ret

000000aa <uart_receive>:

//Receive byte thought UART
unsigned char uart_receive (void)
{

	while ( !(UCSRA & (1<<RXC)) )
      aa:	5f 9b       	sbis	0x0b, 7	; 11
      ac:	fe cf       	rjmp	.-4      	; 0xaa <uart_receive>
	;
	return UDR;
      ae:	8c b1       	in	r24, 0x0c	; 12
}
      b0:	08 95       	ret

000000b2 <uart_transmit_message>:

//Transmit string to UART
void uart_transmit_message(char* msg)
{ unsigned char i;
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	04 c0       	rjmp	.+8      	; 0xbe <uart_transmit_message+0xc>
}

//Send byte thought UART
void uart_transmit_byte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
      b6:	5d 9b       	sbis	0x0b, 5	; 11
      b8:	fe cf       	rjmp	.-4      	; 0xb6 <uart_transmit_message+0x4>
	UDR = data;
      ba:	ec b9       	out	0x0c, r30	; 12
	i=0;

	while ((i<256)&(msg[i]!=0x00) )
	{
		uart_transmit_byte(msg[i]);
		i++;
      bc:	2f 5f       	subi	r18, 0xFF	; 255
//Transmit string to UART
void uart_transmit_message(char* msg)
{ unsigned char i;
	i=0;

	while ((i<256)&(msg[i]!=0x00) )
      be:	fc 01       	movw	r30, r24
      c0:	e2 0f       	add	r30, r18
      c2:	f1 1d       	adc	r31, r1
      c4:	e0 81       	ld	r30, Z
      c6:	ee 23       	and	r30, r30
      c8:	b1 f7       	brne	.-20     	; 0xb6 <uart_transmit_message+0x4>
	{
		uart_transmit_byte(msg[i]);
		i++;
	}
	return;
}
      ca:	08 95       	ret

000000cc <init_pwm>:
//------------------------------------------------------------------------------------
//PWM

void init_pwm (void)
{
	PWM_PORT&=~(1<<PWM_PIN);
      cc:	95 98       	cbi	0x12, 5	; 18
	PWM_DDR|=(1<<PWM_PIN);
      ce:	8d 9a       	sbi	0x11, 5	; 17

	TCCR1A|=(1<<WGM10);
      d0:	8f b5       	in	r24, 0x2f	; 47
      d2:	81 60       	ori	r24, 0x01	; 1
      d4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM12)|(1<<CS10);
      d6:	8e b5       	in	r24, 0x2e	; 46
      d8:	89 60       	ori	r24, 0x09	; 9
      da:	8e bd       	out	0x2e, r24	; 46

	OCR1AL=0x00;
      dc:	1a bc       	out	0x2a, r1	; 42
	OCR1BL=0x00;
      de:	18 bc       	out	0x28, r1	; 40
	return;
}
      e0:	08 95       	ret

000000e2 <off_pwm>:

void off_pwm()
{
	TCCR1A&=~(1<<COM1A1);
      e2:	8f b5       	in	r24, 0x2f	; 47
      e4:	8f 77       	andi	r24, 0x7F	; 127
      e6:	8f bd       	out	0x2f, r24	; 47
	return;
}
      e8:	08 95       	ret

000000ea <on_pwm>:

void on_pwm()
{
	TCCR1A|=(1<<COM1A1);
      ea:	8f b5       	in	r24, 0x2f	; 47
      ec:	80 68       	ori	r24, 0x80	; 128
      ee:	8f bd       	out	0x2f, r24	; 47
	return;
}
      f0:	08 95       	ret

000000f2 <set_pwm>:

void set_pwm (uint8_t data)
{
	OCR1AL=data;
      f2:	8a bd       	out	0x2a, r24	; 42
	if (data==0) off_pwm();
      f4:	88 23       	and	r24, r24
      f6:	19 f4       	brne	.+6      	; 0xfe <set_pwm+0xc>
	return;
}

void off_pwm()
{
	TCCR1A&=~(1<<COM1A1);
      f8:	8f b5       	in	r24, 0x2f	; 47
      fa:	8f 77       	andi	r24, 0x7F	; 127
      fc:	02 c0       	rjmp	.+4      	; 0x102 <set_pwm+0x10>
	return;
}

void on_pwm()
{
	TCCR1A|=(1<<COM1A1);
      fe:	8f b5       	in	r24, 0x2f	; 47
     100:	80 68       	ori	r24, 0x80	; 128
     102:	8f bd       	out	0x2f, r24	; 47
     104:	08 95       	ret

00000106 <get_pwm>:
	return;
}

uint8_t get_pwm (void)
{
	return OCR1AL;
     106:	8a b5       	in	r24, 0x2a	; 42
}
     108:	08 95       	ret

0000010a <clear_rx_buf>:

//------------------------------------------------------------------------------------
//Packets
void clear_rx_buf (void)
{
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rx_buf[i]=0;
     10e:	fc 01       	movw	r30, r24
     110:	ef 58       	subi	r30, 0x8F	; 143
     112:	fe 4f       	sbci	r31, 0xFE	; 254
     114:	10 82       	st	Z, r1
     116:	01 96       	adiw	r24, 0x01	; 1
//------------------------------------------------------------------------------------
//Packets
void clear_rx_buf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     118:	8b 30       	cpi	r24, 0x0B	; 11
     11a:	91 05       	cpc	r25, r1
     11c:	c1 f7       	brne	.-16     	; 0x10e <clear_rx_buf+0x4>
	rx_buf[i]=0;
	current_rx_packet_len=0;
     11e:	10 92 69 01 	sts	0x0169, r1
	return;
}
     122:	08 95       	ret

00000124 <clear_tx_buf>:

void clear_tx_buf (void)
{
     124:	80 e0       	ldi	r24, 0x00	; 0
     126:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	tx_buf[i]=0;
     128:	fc 01       	movw	r30, r24
     12a:	e3 58       	subi	r30, 0x83	; 131
     12c:	fe 4f       	sbci	r31, 0xFE	; 254
     12e:	10 82       	st	Z, r1
     130:	01 96       	adiw	r24, 0x01	; 1
}

void clear_tx_buf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     132:	8b 30       	cpi	r24, 0x0B	; 11
     134:	91 05       	cpc	r25, r1
     136:	c1 f7       	brne	.-16     	; 0x128 <clear_tx_buf+0x4>
	tx_buf[i]=0;
	return;
}
     138:	08 95       	ret

0000013a <clear_buf>:

void clear_buf (void)
{
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rx_buf[i]=tx_buf[i]=0;
     13e:	f9 01       	movw	r30, r18
     140:	e3 58       	subi	r30, 0x83	; 131
     142:	fe 4f       	sbci	r31, 0xFE	; 254
     144:	10 82       	st	Z, r1
     146:	80 81       	ld	r24, Z
     148:	f9 01       	movw	r30, r18
     14a:	ef 58       	subi	r30, 0x8F	; 143
     14c:	fe 4f       	sbci	r31, 0xFE	; 254
     14e:	80 83       	st	Z, r24
     150:	2f 5f       	subi	r18, 0xFF	; 255
     152:	3f 4f       	sbci	r19, 0xFF	; 255
}

void clear_buf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     154:	2b 30       	cpi	r18, 0x0B	; 11
     156:	31 05       	cpc	r19, r1
     158:	91 f7       	brne	.-28     	; 0x13e <clear_buf+0x4>
	rx_buf[i]=tx_buf[i]=0;
	return;
}
     15a:	08 95       	ret

0000015c <__vector_11>:

//receive packet to RX buffer
ISR(USART_RXC_vect)
{
     15c:	1f 92       	push	r1
     15e:	0f 92       	push	r0
     160:	0f b6       	in	r0, 0x3f	; 63
     162:	0f 92       	push	r0
     164:	11 24       	eor	r1, r1
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	8f 93       	push	r24
     170:	9f 93       	push	r25
     172:	ef 93       	push	r30
     174:	ff 93       	push	r31
	uint16_t i=0;

	if (packet_received!=0)
     176:	80 91 68 01 	lds	r24, 0x0168
     17a:	88 23       	and	r24, r24
     17c:	11 f0       	breq	.+4      	; 0x182 <__vector_11+0x26>
	{
		i=UDR;
     17e:	8c b1       	in	r24, 0x0c	; 12
     180:	29 c0       	rjmp	.+82     	; 0x1d4 <__vector_11+0x78>
		return;
	}

	rx_buf[0]=UDR;
     182:	8c b1       	in	r24, 0x0c	; 12
     184:	80 93 71 01 	sts	0x0171, r24
	current_rx_packet_len=1;
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	80 93 69 01 	sts	0x0169, r24
     18e:	20 e0       	ldi	r18, 0x00	; 0
     190:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     192:	41 e0       	ldi	r20, 0x01	; 1
     194:	50 e0       	ldi	r21, 0x00	; 0
     196:	09 c0       	rjmp	.+18     	; 0x1aa <__vector_11+0x4e>

	while (1)
	{
		while ( !(UCSRA & (1<<RXC)) )
		{
			if (i==10000)
     198:	87 e2       	ldi	r24, 0x27	; 39
     19a:	20 31       	cpi	r18, 0x10	; 16
     19c:	38 07       	cpc	r19, r24
     19e:	b9 f0       	breq	.+46     	; 0x1ce <__vector_11+0x72>
			{
				packet_received=1;
				return;
			}
			i++;
     1a0:	2f 5f       	subi	r18, 0xFF	; 255
     1a2:	3f 4f       	sbci	r19, 0xFF	; 255
     1a4:	ca 01       	movw	r24, r20
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <__vector_11+0x4a>
	rx_buf[0]=UDR;
	current_rx_packet_len=1;

	while (1)
	{
		while ( !(UCSRA & (1<<RXC)) )
     1aa:	5f 9b       	sbis	0x0b, 7	; 11
     1ac:	f5 cf       	rjmp	.-22     	; 0x198 <__vector_11+0x3c>
				return;
			}
			i++;
			_delay_loop_2(1);
		}
		rx_buf[current_rx_packet_len]=UDR;
     1ae:	e0 91 69 01 	lds	r30, 0x0169
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	8c b1       	in	r24, 0x0c	; 12
     1b6:	ef 58       	subi	r30, 0x8F	; 143
     1b8:	fe 4f       	sbci	r31, 0xFE	; 254
     1ba:	80 83       	st	Z, r24
		current_rx_packet_len++;
     1bc:	80 91 69 01 	lds	r24, 0x0169
     1c0:	8f 5f       	subi	r24, 0xFF	; 255
     1c2:	80 93 69 01 	sts	0x0169, r24

		if (current_rx_packet_len>=BUFF_SIZE)
     1c6:	80 91 69 01 	lds	r24, 0x0169
     1ca:	8b 30       	cpi	r24, 0x0B	; 11
     1cc:	70 f3       	brcs	.-36     	; 0x1aa <__vector_11+0x4e>
		{
			packet_received=1;
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	80 93 68 01 	sts	0x0168, r24
			return;
		}
	}
}
     1d4:	ff 91       	pop	r31
     1d6:	ef 91       	pop	r30
     1d8:	9f 91       	pop	r25
     1da:	8f 91       	pop	r24
     1dc:	5f 91       	pop	r21
     1de:	4f 91       	pop	r20
     1e0:	3f 91       	pop	r19
     1e2:	2f 91       	pop	r18
     1e4:	0f 90       	pop	r0
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	0f 90       	pop	r0
     1ea:	1f 90       	pop	r1
     1ec:	18 95       	reti

000001ee <uart_send_packet>:

//send packet to host
void uart_send_packet(uint8_t *data, uint8_t length)
{
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	08 c0       	rjmp	.+16     	; 0x204 <uart_send_packet+0x16>
	uint8_t i;
	for (i=0;i<length;i++)
	uart_transmit_byte(tx_buf[i]);
     1f4:	fc 01       	movw	r30, r24
     1f6:	e3 58       	subi	r30, 0x83	; 131
     1f8:	fe 4f       	sbci	r31, 0xFE	; 254
     1fa:	e0 81       	ld	r30, Z
}

//Send byte thought UART
void uart_transmit_byte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     1fc:	5d 9b       	sbis	0x0b, 5	; 11
     1fe:	fe cf       	rjmp	.-4      	; 0x1fc <uart_send_packet+0xe>
	UDR = data;
     200:	ec b9       	out	0x0c, r30	; 12
     202:	01 96       	adiw	r24, 0x01	; 1

//send packet to host
void uart_send_packet(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     204:	86 17       	cp	r24, r22
     206:	b0 f3       	brcs	.-20     	; 0x1f4 <uart_send_packet+0x6>
	uart_transmit_byte(tx_buf[i]);
	return;
}
     208:	08 95       	ret

0000020a <crc8_block>:

//crc calculating function
uint8_t crc8_block(uint8_t *pcBlock, uint8_t len)
{
     20a:	fc 01       	movw	r30, r24
     20c:	9f ef       	ldi	r25, 0xFF	; 255
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     20e:	21 e3       	ldi	r18, 0x31	; 49
     210:	0e c0       	rjmp	.+28     	; 0x22e <crc8_block+0x24>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     212:	80 81       	ld	r24, Z
     214:	98 27       	eor	r25, r24
     216:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     218:	97 ff       	sbrs	r25, 7
     21a:	03 c0       	rjmp	.+6      	; 0x222 <crc8_block+0x18>
     21c:	99 0f       	add	r25, r25
     21e:	92 27       	eor	r25, r18
     220:	01 c0       	rjmp	.+2      	; 0x224 <crc8_block+0x1a>
     222:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     224:	8f 5f       	subi	r24, 0xFF	; 255
     226:	88 30       	cpi	r24, 0x08	; 8
     228:	b9 f7       	brne	.-18     	; 0x218 <crc8_block+0xe>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     22a:	31 96       	adiw	r30, 0x01	; 1
     22c:	61 50       	subi	r22, 0x01	; 1
uint8_t crc8_block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     22e:	66 23       	and	r22, r22
     230:	81 f7       	brne	.-32     	; 0x212 <crc8_block+0x8>
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
	}	
	return crc;
}
     232:	89 2f       	mov	r24, r25
     234:	08 95       	ret

00000236 <prepare_system_status>:

//prepare TX buffer
void prepare_system_status (void)
{
	tx_buf[0]='d';
     236:	84 e6       	ldi	r24, 0x64	; 100
     238:	80 93 7d 01 	sts	0x017D, r24
	tx_buf[1]= sensor_data[0]>>8;
     23c:	80 91 6c 01 	lds	r24, 0x016C
     240:	90 91 6d 01 	lds	r25, 0x016D
     244:	90 93 7e 01 	sts	0x017E, r25
	tx_buf[2]= sensor_data[0]&0x00ff;
     248:	80 91 6c 01 	lds	r24, 0x016C
     24c:	90 91 6d 01 	lds	r25, 0x016D
     250:	80 93 7f 01 	sts	0x017F, r24
	tx_buf[3]= sensor_data[1]>>8;
     254:	80 91 6e 01 	lds	r24, 0x016E
     258:	90 91 6f 01 	lds	r25, 0x016F
     25c:	90 93 80 01 	sts	0x0180, r25
	tx_buf[4]= sensor_data[1]&0x00ff;
     260:	80 91 6e 01 	lds	r24, 0x016E
     264:	90 91 6f 01 	lds	r25, 0x016F
     268:	80 93 81 01 	sts	0x0181, r24
	tx_buf[5]= value_data[0]>>8;
     26c:	80 91 95 01 	lds	r24, 0x0195
     270:	90 91 96 01 	lds	r25, 0x0196
     274:	90 93 82 01 	sts	0x0182, r25
	tx_buf[6]= value_data[0]&0x00ff;
     278:	80 91 95 01 	lds	r24, 0x0195
     27c:	90 91 96 01 	lds	r25, 0x0196
     280:	80 93 83 01 	sts	0x0183, r24
	return;
}

uint8_t get_pwm (void)
{
	return OCR1AL;
     284:	8a b5       	in	r24, 0x2a	; 42
	tx_buf[2]= sensor_data[0]&0x00ff;
	tx_buf[3]= sensor_data[1]>>8;
	tx_buf[4]= sensor_data[1]&0x00ff;
	tx_buf[5]= value_data[0]>>8;
	tx_buf[6]= value_data[0]&0x00ff;
	tx_buf[7]= get_pwm();
     286:	80 93 84 01 	sts	0x0184, r24
	tx_buf[8]= error_code;
     28a:	80 91 6a 01 	lds	r24, 0x016A
     28e:	80 93 85 01 	sts	0x0185, r24
	tx_buf[9]= pwm_state;
     292:	80 91 70 01 	lds	r24, 0x0170
     296:	80 93 86 01 	sts	0x0186, r24
	tx_buf[10]=crc8_block(tx_buf,10);
     29a:	8d e7       	ldi	r24, 0x7D	; 125
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	6a e0       	ldi	r22, 0x0A	; 10
     2a0:	0e 94 05 01 	call	0x20a	; 0x20a <crc8_block>
     2a4:	80 93 87 01 	sts	0x0187, r24
}
     2a8:	08 95       	ret

000002aa <process_packet>:

//process received packet
void process_packet(void)
{
	cli();
     2aa:	f8 94       	cli
	//check CRC
	if (crc8_block(rx_buf,current_rx_packet_len-1)!=rx_buf[current_rx_packet_len-1])
     2ac:	60 91 69 01 	lds	r22, 0x0169
     2b0:	61 50       	subi	r22, 0x01	; 1
     2b2:	81 e7       	ldi	r24, 0x71	; 113
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	0e 94 05 01 	call	0x20a	; 0x20a <crc8_block>
     2ba:	e0 91 69 01 	lds	r30, 0x0169
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	e0 59       	subi	r30, 0x90	; 144
     2c2:	fe 4f       	sbci	r31, 0xFE	; 254
     2c4:	90 81       	ld	r25, Z
     2c6:	89 17       	cp	r24, r25
     2c8:	81 f0       	breq	.+32     	; 0x2ea <process_packet+0x40>
	{
		packet_received=0;
     2ca:	10 92 68 01 	sts	0x0168, r1
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
//Packets
void clear_rx_buf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rx_buf[i]=0;
     2d2:	fc 01       	movw	r30, r24
     2d4:	ef 58       	subi	r30, 0x8F	; 143
     2d6:	fe 4f       	sbci	r31, 0xFE	; 254
     2d8:	10 82       	st	Z, r1
     2da:	01 96       	adiw	r24, 0x01	; 1
//------------------------------------------------------------------------------------
//Packets
void clear_rx_buf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     2dc:	8b 30       	cpi	r24, 0x0B	; 11
     2de:	91 05       	cpc	r25, r1
     2e0:	c1 f7       	brne	.-16     	; 0x2d2 <process_packet+0x28>
	rx_buf[i]=0;
	current_rx_packet_len=0;
     2e2:	10 92 69 01 	sts	0x0169, r1
	//check CRC
	if (crc8_block(rx_buf,current_rx_packet_len-1)!=rx_buf[current_rx_packet_len-1])
	{
		packet_received=0;
		clear_rx_buf();
		sei();
     2e6:	78 94       	sei
     2e8:	08 95       	ret
		return;
	}
	//differentiate and process packet
	switch (rx_buf[0]) {
     2ea:	80 91 71 01 	lds	r24, 0x0171
     2ee:	89 36       	cpi	r24, 0x69	; 105
     2f0:	e1 f1       	breq	.+120    	; 0x36a <process_packet+0xc0>
     2f2:	8a 36       	cpi	r24, 0x6A	; 106
     2f4:	20 f4       	brcc	.+8      	; 0x2fe <process_packet+0x54>
     2f6:	87 36       	cpi	r24, 0x67	; 103
     2f8:	09 f0       	breq	.+2      	; 0x2fc <process_packet+0x52>
     2fa:	6c c0       	rjmp	.+216    	; 0x3d4 <process_packet+0x12a>
     2fc:	07 c0       	rjmp	.+14     	; 0x30c <process_packet+0x62>
     2fe:	80 37       	cpi	r24, 0x70	; 112
     300:	09 f4       	brne	.+2      	; 0x304 <process_packet+0x5a>
     302:	58 c0       	rjmp	.+176    	; 0x3b4 <process_packet+0x10a>
     304:	83 37       	cpi	r24, 0x73	; 115
     306:	09 f0       	breq	.+2      	; 0x30a <process_packet+0x60>
     308:	65 c0       	rjmp	.+202    	; 0x3d4 <process_packet+0x12a>
     30a:	15 c0       	rjmp	.+42     	; 0x336 <process_packet+0x8c>
		//if get command
		case 'g' : 	{
			if (current_rx_packet_len==2)
     30c:	80 91 69 01 	lds	r24, 0x0169
     310:	82 30       	cpi	r24, 0x02	; 2
     312:	09 f0       	breq	.+2      	; 0x316 <process_packet+0x6c>
     314:	5f c0       	rjmp	.+190    	; 0x3d4 <process_packet+0x12a>
			{
				prepare_system_status();
     316:	0e 94 1b 01 	call	0x236	; 0x236 <prepare_system_status>
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	90 e0       	ldi	r25, 0x00	; 0
//send packet to host
void uart_send_packet(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
	uart_transmit_byte(tx_buf[i]);
     31e:	fc 01       	movw	r30, r24
     320:	e3 58       	subi	r30, 0x83	; 131
     322:	fe 4f       	sbci	r31, 0xFE	; 254
     324:	e0 81       	ld	r30, Z
}

//Send byte thought UART
void uart_transmit_byte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     326:	5d 9b       	sbis	0x0b, 5	; 11
     328:	fe cf       	rjmp	.-4      	; 0x326 <process_packet+0x7c>
	UDR = data;
     32a:	ec b9       	out	0x0c, r30	; 12
     32c:	01 96       	adiw	r24, 0x01	; 1

//send packet to host
void uart_send_packet(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     32e:	8b 30       	cpi	r24, 0x0B	; 11
     330:	91 05       	cpc	r25, r1
     332:	a9 f7       	brne	.-22     	; 0x31e <process_packet+0x74>
     334:	4f c0       	rjmp	.+158    	; 0x3d4 <process_packet+0x12a>
			}			
			break;
		}
		//if set command
		case 's' : 	{
			if (current_rx_packet_len==4)
     336:	80 91 69 01 	lds	r24, 0x0169
     33a:	84 30       	cpi	r24, 0x04	; 4
     33c:	09 f0       	breq	.+2      	; 0x340 <process_packet+0x96>
     33e:	4a c0       	rjmp	.+148    	; 0x3d4 <process_packet+0x12a>
			{
				uint16_t val;

				val=(rx_buf[1]<<8)|(rx_buf[2]);
     340:	20 91 72 01 	lds	r18, 0x0172
     344:	30 91 73 01 	lds	r19, 0x0173
     348:	92 2f       	mov	r25, r18
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	23 2f       	mov	r18, r19
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	28 2b       	or	r18, r24
     352:	39 2b       	or	r19, r25
				if ((val<=1780)&&(val>=780)) value_data[0]=val;
     354:	c9 01       	movw	r24, r18
     356:	8c 50       	subi	r24, 0x0C	; 12
     358:	93 40       	sbci	r25, 0x03	; 3
     35a:	89 5e       	subi	r24, 0xE9	; 233
     35c:	93 40       	sbci	r25, 0x03	; 3
     35e:	d0 f5       	brcc	.+116    	; 0x3d4 <process_packet+0x12a>
     360:	30 93 96 01 	sts	0x0196, r19
     364:	20 93 95 01 	sts	0x0195, r18
     368:	35 c0       	rjmp	.+106    	; 0x3d4 <process_packet+0x12a>
			
			break;
		}
		//if info command
		case 'i' :	{
			if (current_rx_packet_len==2)
     36a:	90 91 69 01 	lds	r25, 0x0169
     36e:	92 30       	cpi	r25, 0x02	; 2
     370:	89 f5       	brne	.+98     	; 0x3d4 <process_packet+0x12a>
			{
				tx_buf[0]='v';
     372:	86 e7       	ldi	r24, 0x76	; 118
     374:	80 93 7d 01 	sts	0x017D, r24
				tx_buf[1]=HW_REVISION;
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	80 93 7e 01 	sts	0x017E, r24
				tx_buf[2]=SW_REVISION;
     37e:	80 93 7f 01 	sts	0x017F, r24
				tx_buf[3]=SENSOR_COUNT;
     382:	90 93 80 01 	sts	0x0180, r25
				tx_buf[4]=VALUE_COUNT;
     386:	80 93 81 01 	sts	0x0181, r24
				tx_buf[5]=crc8_block(tx_buf,5);
     38a:	8d e7       	ldi	r24, 0x7D	; 125
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	65 e0       	ldi	r22, 0x05	; 5
     390:	0e 94 05 01 	call	0x20a	; 0x20a <crc8_block>
     394:	80 93 82 01 	sts	0x0182, r24
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	90 e0       	ldi	r25, 0x00	; 0
//send packet to host
void uart_send_packet(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
	uart_transmit_byte(tx_buf[i]);
     39c:	fc 01       	movw	r30, r24
     39e:	e3 58       	subi	r30, 0x83	; 131
     3a0:	fe 4f       	sbci	r31, 0xFE	; 254
     3a2:	e0 81       	ld	r30, Z
}

//Send byte thought UART
void uart_transmit_byte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     3a4:	5d 9b       	sbis	0x0b, 5	; 11
     3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <process_packet+0xfa>
	UDR = data;
     3a8:	ec b9       	out	0x0c, r30	; 12
     3aa:	01 96       	adiw	r24, 0x01	; 1

//send packet to host
void uart_send_packet(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     3ac:	86 30       	cpi	r24, 0x06	; 6
     3ae:	91 05       	cpc	r25, r1
     3b0:	a9 f7       	brne	.-22     	; 0x39c <process_packet+0xf2>
     3b2:	10 c0       	rjmp	.+32     	; 0x3d4 <process_packet+0x12a>

			break;
		}
		//if powern ON/OFF PWM
		case 'p' : 	{
		if (current_rx_packet_len==3)
     3b4:	80 91 69 01 	lds	r24, 0x0169
     3b8:	83 30       	cpi	r24, 0x03	; 3
     3ba:	61 f4       	brne	.+24     	; 0x3d4 <process_packet+0x12a>
		{
			if ((rx_buf[1]==PWM_OFF)||(rx_buf[1]==PWM_ON))
     3bc:	80 91 72 01 	lds	r24, 0x0172
     3c0:	88 23       	and	r24, r24
     3c2:	21 f0       	breq	.+8      	; 0x3cc <process_packet+0x122>
     3c4:	80 91 72 01 	lds	r24, 0x0172
     3c8:	81 30       	cpi	r24, 0x01	; 1
     3ca:	21 f4       	brne	.+8      	; 0x3d4 <process_packet+0x12a>
			{
				pwm_state=rx_buf[1];
     3cc:	80 91 72 01 	lds	r24, 0x0172
     3d0:	80 93 70 01 	sts	0x0170, r24
		{
			;
		}
	}

	packet_received=0;
     3d4:	10 92 68 01 	sts	0x0168, r1
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
//Packets
void clear_rx_buf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rx_buf[i]=0;
     3dc:	fc 01       	movw	r30, r24
     3de:	ef 58       	subi	r30, 0x8F	; 143
     3e0:	fe 4f       	sbci	r31, 0xFE	; 254
     3e2:	10 82       	st	Z, r1
     3e4:	01 96       	adiw	r24, 0x01	; 1
//------------------------------------------------------------------------------------
//Packets
void clear_rx_buf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     3e6:	8b 30       	cpi	r24, 0x0B	; 11
     3e8:	91 05       	cpc	r25, r1
     3ea:	c1 f7       	brne	.-16     	; 0x3dc <process_packet+0x132>
	rx_buf[i]=0;
	current_rx_packet_len=0;
     3ec:	10 92 69 01 	sts	0x0169, r1
		}
	}

	packet_received=0;
	clear_rx_buf();
	sei();
     3f0:	78 94       	sei
     3f2:	08 95       	ret

000003f4 <present_ds18b20>:
//DS18B20

uint8_t present_ds18b20(uint8_t sensor_num)
{	uint8_t res, sensor_pin;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     3f4:	88 23       	and	r24, r24
     3f6:	11 f0       	breq	.+4      	; 0x3fc <present_ds18b20+0x8>
     3f8:	43 e0       	ldi	r20, 0x03	; 3
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <present_ds18b20+0xa>
     3fc:	42 e0       	ldi	r20, 0x02	; 2
	else sensor_pin=SENSOR1_PIN;
	
	SENSOR_DDR|=(1<<sensor_pin);
     3fe:	84 b3       	in	r24, 0x14	; 20
     400:	21 e0       	ldi	r18, 0x01	; 1
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	92 2f       	mov	r25, r18
     406:	04 2e       	mov	r0, r20
     408:	01 c0       	rjmp	.+2      	; 0x40c <present_ds18b20+0x18>
     40a:	99 0f       	add	r25, r25
     40c:	0a 94       	dec	r0
     40e:	ea f7       	brpl	.-6      	; 0x40a <present_ds18b20+0x16>
     410:	89 2b       	or	r24, r25
     412:	84 bb       	out	0x14, r24	; 20
     414:	e6 eb       	ldi	r30, 0xB6	; 182
     416:	f3 e0       	ldi	r31, 0x03	; 3
     418:	31 97       	sbiw	r30, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <present_ds18b20+0x24>
	_delay_loop_2(950);         //Pause 480mks

	SENSOR_DDR&=~(1<<sensor_pin);
     41c:	84 b3       	in	r24, 0x14	; 20
     41e:	90 95       	com	r25
     420:	98 23       	and	r25, r24
     422:	94 bb       	out	0x14, r25	; 20
     424:	82 e8       	ldi	r24, 0x82	; 130
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	01 97       	sbiw	r24, 0x01	; 1
     42a:	f1 f7       	brne	.-4      	; 0x428 <present_ds18b20+0x34>
	_delay_loop_2(130);          //Pause 70mks

	if ((SENSOR_PIN&(1<<sensor_pin)) == 0x00) res=1;  //if present, res=1
     42c:	83 b3       	in	r24, 0x13	; 19
     42e:	e4 e3       	ldi	r30, 0x34	; 52
     430:	f3 e0       	ldi	r31, 0x03	; 3
     432:	31 97       	sbiw	r30, 0x01	; 1
     434:	f1 f7       	brne	.-4      	; 0x432 <present_ds18b20+0x3e>
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	02 c0       	rjmp	.+4      	; 0x43e <present_ds18b20+0x4a>
     43a:	95 95       	asr	r25
     43c:	87 95       	ror	r24
     43e:	4a 95       	dec	r20
     440:	e2 f7       	brpl	.-8      	; 0x43a <present_ds18b20+0x46>
     442:	82 27       	eor	r24, r18
     444:	93 27       	eor	r25, r19
	else res=0;  // else 0
	
	_delay_loop_2(820);          //pause 410mks
	return res;
}
     446:	81 70       	andi	r24, 0x01	; 1
     448:	08 95       	ret

0000044a <send_ds18b20>:

void send_ds18b20(uint8_t command, uint8_t sensor_num)
{	uint8_t i, data, sensor_pin;
     44a:	38 2f       	mov	r19, r24

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     44c:	66 23       	and	r22, r22
     44e:	11 f0       	breq	.+4      	; 0x454 <send_ds18b20+0xa>
     450:	23 e0       	ldi	r18, 0x03	; 3
     452:	01 c0       	rjmp	.+2      	; 0x456 <send_ds18b20+0xc>
     454:	22 e0       	ldi	r18, 0x02	; 2
	data=command;

	for(i=0;i<8;i++)
	{
		if ((data&0x01)==0x01) {    //Send 1 on SDA
			SENSOR_DDR|=(1<<sensor_pin);
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	48 2f       	mov	r20, r24
     45c:	01 c0       	rjmp	.+2      	; 0x460 <__stack+0x1>
     45e:	44 0f       	add	r20, r20
     460:	2a 95       	dec	r18
     462:	ea f7       	brpl	.-6      	; 0x45e <send_ds18b20+0x14>
			_delay_loop_2(4);		//pause 6mks
			SENSOR_DDR&=~(1<<sensor_pin);
     464:	54 2f       	mov	r21, r20
     466:	50 95       	com	r21
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	ae e6       	ldi	r26, 0x6E	; 110
     46c:	b0 e0       	ldi	r27, 0x00	; 0
	else sensor_pin=SENSOR1_PIN;
	data=command;

	for(i=0;i<8;i++)
	{
		if ((data&0x01)==0x01) {    //Send 1 on SDA
     46e:	64 e0       	ldi	r22, 0x04	; 4
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	e8 e7       	ldi	r30, 0x78	; 120
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	30 ff       	sbrs	r19, 0
     478:	0b c0       	rjmp	.+22     	; 0x490 <__stack+0x31>
			SENSOR_DDR|=(1<<sensor_pin);
     47a:	84 b3       	in	r24, 0x14	; 20
     47c:	84 2b       	or	r24, r20
     47e:	84 bb       	out	0x14, r24	; 20
     480:	cb 01       	movw	r24, r22
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	f1 f7       	brne	.-4      	; 0x482 <__stack+0x23>
			_delay_loop_2(4);		//pause 6mks
			SENSOR_DDR&=~(1<<sensor_pin);
     486:	84 b3       	in	r24, 0x14	; 20
     488:	85 23       	and	r24, r21
     48a:	84 bb       	out	0x14, r24	; 20
     48c:	cf 01       	movw	r24, r30
     48e:	0a c0       	rjmp	.+20     	; 0x4a4 <__stack+0x45>
			_delay_loop_2(120);	//pause 64mks
		}
		else {                   	//Send 0 on SDA
			SENSOR_DDR|=(1<<sensor_pin);
     490:	84 b3       	in	r24, 0x14	; 20
     492:	84 2b       	or	r24, r20
     494:	84 bb       	out	0x14, r24	; 20
     496:	cd 01       	movw	r24, r26
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <__stack+0x39>
			_delay_loop_2(110);    //pause 60mks
			SENSOR_DDR&=~(1<<sensor_pin);
     49c:	84 b3       	in	r24, 0x14	; 20
     49e:	85 23       	and	r24, r21
     4a0:	84 bb       	out	0x14, r24	; 20
     4a2:	cb 01       	movw	r24, r22
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	f1 f7       	brne	.-4      	; 0x4a4 <__stack+0x45>

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;
	data=command;

	for(i=0;i<8;i++)
     4a8:	2f 5f       	subi	r18, 0xFF	; 255
     4aa:	28 30       	cpi	r18, 0x08	; 8
     4ac:	11 f0       	breq	.+4      	; 0x4b2 <__stack+0x53>
			SENSOR_DDR|=(1<<sensor_pin);
			_delay_loop_2(110);    //pause 60mks
			SENSOR_DDR&=~(1<<sensor_pin);
			_delay_loop_2(4);		//pause 10mks
		}
		data=data>>1;
     4ae:	36 95       	lsr	r19
     4b0:	e2 cf       	rjmp	.-60     	; 0x476 <__stack+0x17>
     4b2:	08 95       	ret

000004b4 <receive_ds18b20>:
	}
	return;
}

uint16_t receive_ds18b20(uint8_t sensor_num)
{	uint8_t i, sensor_pin;
     4b4:	ff 92       	push	r15
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
	uint16_t res=0;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     4be:	88 23       	and	r24, r24
     4c0:	11 f0       	breq	.+4      	; 0x4c6 <receive_ds18b20+0x12>
     4c2:	83 e0       	ldi	r24, 0x03	; 3
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <receive_ds18b20+0x14>
     4c6:	82 e0       	ldi	r24, 0x02	; 2
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
	{
		SENSOR_DDR|=(1<<sensor_pin);
     4c8:	61 e0       	ldi	r22, 0x01	; 1
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <receive_ds18b20+0x1e>
     4ce:	66 0f       	add	r22, r22
     4d0:	77 1f       	adc	r23, r23
     4d2:	8a 95       	dec	r24
     4d4:	e2 f7       	brpl	.-8      	; 0x4ce <receive_ds18b20+0x1a>
     4d6:	a6 2f       	mov	r26, r22
		_delay_loop_2(4);       		//Pause 6mks
		SENSOR_DDR&=~(1<<sensor_pin);
     4d8:	b6 2f       	mov	r27, r22
     4da:	b0 95       	com	r27
     4dc:	20 e0       	ldi	r18, 0x00	; 0
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	40 e0       	ldi	r20, 0x00	; 0
     4e2:	50 e0       	ldi	r21, 0x00	; 0
     4e4:	04 e0       	ldi	r16, 0x04	; 4
     4e6:	10 e0       	ldi	r17, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4e8:	8c e0       	ldi	r24, 0x0C	; 12
     4ea:	f8 2e       	mov	r15, r24
		_delay_loop_1(12);           	//Pause 9mks

		if ((SENSOR_PIN & (1<<sensor_pin))==0x00) res&=~_BV(i);	//If 0 on SDA
		else 	res|=_BV(i);	    //IF 1 on SDA
     4ec:	e1 e0       	ldi	r30, 0x01	; 1
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4f0:	c4 e6       	ldi	r28, 0x64	; 100
     4f2:	d0 e0       	ldi	r29, 0x00	; 0
	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
	{
		SENSOR_DDR|=(1<<sensor_pin);
     4f4:	84 b3       	in	r24, 0x14	; 20
     4f6:	8a 2b       	or	r24, r26
     4f8:	84 bb       	out	0x14, r24	; 20
     4fa:	c8 01       	movw	r24, r16
     4fc:	01 97       	sbiw	r24, 0x01	; 1
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <receive_ds18b20+0x48>
		_delay_loop_2(4);       		//Pause 6mks
		SENSOR_DDR&=~(1<<sensor_pin);
     500:	84 b3       	in	r24, 0x14	; 20
     502:	8b 23       	and	r24, r27
     504:	84 bb       	out	0x14, r24	; 20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     506:	8f 2d       	mov	r24, r15
     508:	8a 95       	dec	r24
     50a:	f1 f7       	brne	.-4      	; 0x508 <receive_ds18b20+0x54>
		_delay_loop_1(12);           	//Pause 9mks

		if ((SENSOR_PIN & (1<<sensor_pin))==0x00) res&=~_BV(i);	//If 0 on SDA
     50c:	83 b3       	in	r24, 0x13	; 19
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	86 23       	and	r24, r22
     512:	97 23       	and	r25, r23
     514:	89 2b       	or	r24, r25
     516:	61 f4       	brne	.+24     	; 0x530 <receive_ds18b20+0x7c>
     518:	cf 01       	movw	r24, r30
     51a:	04 2e       	mov	r0, r20
     51c:	02 c0       	rjmp	.+4      	; 0x522 <receive_ds18b20+0x6e>
     51e:	88 0f       	add	r24, r24
     520:	99 1f       	adc	r25, r25
     522:	0a 94       	dec	r0
     524:	e2 f7       	brpl	.-8      	; 0x51e <receive_ds18b20+0x6a>
     526:	80 95       	com	r24
     528:	90 95       	com	r25
     52a:	28 23       	and	r18, r24
     52c:	39 23       	and	r19, r25
     52e:	09 c0       	rjmp	.+18     	; 0x542 <receive_ds18b20+0x8e>
		else 	res|=_BV(i);	    //IF 1 on SDA
     530:	cf 01       	movw	r24, r30
     532:	04 2e       	mov	r0, r20
     534:	02 c0       	rjmp	.+4      	; 0x53a <receive_ds18b20+0x86>
     536:	88 0f       	add	r24, r24
     538:	99 1f       	adc	r25, r25
     53a:	0a 94       	dec	r0
     53c:	e2 f7       	brpl	.-8      	; 0x536 <receive_ds18b20+0x82>
     53e:	28 2b       	or	r18, r24
     540:	39 2b       	or	r19, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     542:	ce 01       	movw	r24, r28
     544:	01 97       	sbiw	r24, 0x01	; 1
     546:	f1 f7       	brne	.-4      	; 0x544 <receive_ds18b20+0x90>
     548:	4f 5f       	subi	r20, 0xFF	; 255
     54a:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t res=0;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
     54c:	40 31       	cpi	r20, 0x10	; 16
     54e:	51 05       	cpc	r21, r1
     550:	89 f6       	brne	.-94     	; 0x4f4 <receive_ds18b20+0x40>
		else 	res|=_BV(i);	    //IF 1 on SDA
		
		_delay_loop_2(100);      		//Pause 55mks
	}
	return res;
}
     552:	c9 01       	movw	r24, r18
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	1f 91       	pop	r17
     55a:	0f 91       	pop	r16
     55c:	ff 90       	pop	r15
     55e:	08 95       	ret

00000560 <main>:
//------------------------------------------------------------------------------------

int main(void)
{
     560:	4f 92       	push	r4
     562:	5f 92       	push	r5
     564:	6f 92       	push	r6
     566:	7f 92       	push	r7
     568:	8f 92       	push	r8
     56a:	9f 92       	push	r9
     56c:	af 92       	push	r10
     56e:	bf 92       	push	r11
     570:	cf 92       	push	r12
     572:	df 92       	push	r13
     574:	ef 92       	push	r14
     576:	ff 92       	push	r15
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
		value_data[0]= eeprom_read_word (&saved_value);
		pwm_state = eeprom_read_byte(&saved_pwm_state);
	}
	else
	{
		value_data[0]=1730;
     580:	82 ec       	ldi	r24, 0xC2	; 194
     582:	96 e0       	ldi	r25, 0x06	; 6
     584:	90 93 96 01 	sts	0x0196, r25
     588:	80 93 95 01 	sts	0x0195, r24
		pwm_state=PWM_OFF;
     58c:	10 92 70 01 	sts	0x0170, r1

	}
	//init variables
	for (i=0;i<SENSOR_COUNT;i++)
	sensor_data[i]=0;
     590:	10 92 6d 01 	sts	0x016D, r1
     594:	10 92 6c 01 	sts	0x016C, r1
     598:	10 92 6f 01 	sts	0x016F, r1
     59c:	10 92 6e 01 	sts	0x016E, r1
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	30 e0       	ldi	r19, 0x00	; 0

void clear_buf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rx_buf[i]=tx_buf[i]=0;
     5a4:	f9 01       	movw	r30, r18
     5a6:	e3 58       	subi	r30, 0x83	; 131
     5a8:	fe 4f       	sbci	r31, 0xFE	; 254
     5aa:	10 82       	st	Z, r1
     5ac:	80 81       	ld	r24, Z
     5ae:	f9 01       	movw	r30, r18
     5b0:	ef 58       	subi	r30, 0x8F	; 143
     5b2:	fe 4f       	sbci	r31, 0xFE	; 254
     5b4:	80 83       	st	Z, r24
     5b6:	2f 5f       	subi	r18, 0xFF	; 255
     5b8:	3f 4f       	sbci	r19, 0xFF	; 255
}

void clear_buf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     5ba:	2b 30       	cpi	r18, 0x0B	; 11
     5bc:	31 05       	cpc	r19, r1
     5be:	91 f7       	brne	.-28     	; 0x5a4 <main+0x44>
	for (i=0;i<SENSOR_COUNT;i++)
	sensor_data[i]=0;

	clear_buf ();

	U=0.0;
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	50 e0       	ldi	r21, 0x00	; 0
     5c8:	20 93 91 01 	sts	0x0191, r18
     5cc:	30 93 92 01 	sts	0x0192, r19
     5d0:	40 93 93 01 	sts	0x0193, r20
     5d4:	50 93 94 01 	sts	0x0194, r21
	Kp=Kp_INIT;
     5d8:	8f e6       	ldi	r24, 0x6F	; 111
     5da:	92 e1       	ldi	r25, 0x12	; 18
     5dc:	a3 e0       	ldi	r26, 0x03	; 3
     5de:	bb e3       	ldi	r27, 0x3B	; 59
     5e0:	80 93 8d 01 	sts	0x018D, r24
     5e4:	90 93 8e 01 	sts	0x018E, r25
     5e8:	a0 93 8f 01 	sts	0x018F, r26
     5ec:	b0 93 90 01 	sts	0x0190, r27
	E=0;
     5f0:	20 93 89 01 	sts	0x0189, r18
     5f4:	30 93 8a 01 	sts	0x018A, r19
     5f8:	40 93 8b 01 	sts	0x018B, r20
     5fc:	50 93 8c 01 	sts	0x018C, r21

	//Init ports, UART, PWM
	SENSOR_PORT&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));     	
     600:	85 b3       	in	r24, 0x15	; 21
     602:	83 7f       	andi	r24, 0xF3	; 243
     604:	85 bb       	out	0x15, r24	; 21
	SENSOR_DDR&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));
     606:	84 b3       	in	r24, 0x14	; 20
     608:	83 7f       	andi	r24, 0xF3	; 243
     60a:	84 bb       	out	0x14, r24	; 20
	init_pwm();
     60c:	0e 94 66 00 	call	0xcc	; 0xcc <init_pwm>
//------------------------------------------------------------------------------------
//UART

void uart_init(void)
{
	UBRRH = UART_BAUDRATE_H;		// Init UART baudrate
     610:	10 bc       	out	0x20, r1	; 32
	UBRRL = UART_BAUDRATE_L;
     612:	83 e3       	ldi	r24, 0x33	; 51
     614:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1<<RXEN)|(1<<TXEN)|(1 << RXCIE);	// TX, RX enable, RX interrupt enable
     616:	88 e9       	ldi	r24, 0x98	; 152
     618:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
     61a:	86 e8       	ldi	r24, 0x86	; 134
     61c:	80 bd       	out	0x20, r24	; 32
	SENSOR_PORT&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));     	
	SENSOR_DDR&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));
	init_pwm();
	uart_init();
	
	sei();
     61e:	78 94       	sei
     620:	01 e0       	ldi	r16, 0x01	; 1
     622:	44 24       	eor	r4, r4
     624:	4a 94       	dec	r4
     626:	54 2c       	mov	r5, r4
				{
					send_ds18b20(SKIP_ROM,i);
					send_ds18b20(START_CONVERSION,i);
					error_code=0;
				}
				else error_code|=(1<<i);
     628:	b1 e0       	ldi	r27, 0x01	; 1
     62a:	8b 2e       	mov	r8, r27
     62c:	91 2c       	mov	r9, r1
						if ((val&0x04)!=0x00) fract=fract+250;
						if ((val&0x08)!=0x00) fract=fract+500;

						val=(val>>4)*10+fract/100;

						if (sign==1) val=OFFSET-val;
     62e:	61 2c       	mov	r6, r1
     630:	a5 e0       	ldi	r26, 0x05	; 5
     632:	7a 2e       	mov	r7, r26
     634:	01 c0       	rjmp	.+2      	; 0x638 <main+0xd8>
	SENSOR_PORT&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));     	
	SENSOR_DDR&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));
	init_pwm();
	uart_init();
	
	sei();
     636:	00 e0       	ldi	r16, 0x00	; 0
     638:	12 e0       	ldi	r17, 0x02	; 2
     63a:	c2 01       	movw	r24, r4
     63c:	01 97       	sbiw	r24, 0x01	; 1
     63e:	f1 f7       	brne	.-4      	; 0x63c <main+0xdc>

		_delay_loop_2(0xffff);

		//delay 10ms
		//_delay_ms(10);
		i++;
     640:	1f 5f       	subi	r17, 0xFF	; 255

		if (packet_received!=0) process_packet();
     642:	80 91 68 01 	lds	r24, 0x0168
     646:	88 23       	and	r24, r24
     648:	11 f0       	breq	.+4      	; 0x64e <main+0xee>
     64a:	0e 94 55 01 	call	0x2aa	; 0x2aa <process_packet>

		if (i>=35)
     64e:	13 32       	cpi	r17, 0x23	; 35
     650:	a1 f7       	brne	.-24     	; 0x63a <main+0xda>
		{
			i=0;

			//send command from start measurement to sensors
			error_code=0;
     652:	10 92 6a 01 	sts	0x016A, r1
     656:	c0 e0       	ldi	r28, 0x00	; 0
     658:	d0 e0       	ldi	r29, 0x00	; 0
			for (i=0;i<SENSOR_COUNT;i++)
			{
				if (present_ds18b20(i)==1)
     65a:	8c 2f       	mov	r24, r28
     65c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <present_ds18b20>
     660:	81 30       	cpi	r24, 0x01	; 1
     662:	59 f4       	brne	.+22     	; 0x67a <main+0x11a>
				{
					send_ds18b20(SKIP_ROM,i);
     664:	8c ec       	ldi	r24, 0xCC	; 204
     666:	6c 2f       	mov	r22, r28
     668:	0e 94 25 02 	call	0x44a	; 0x44a <send_ds18b20>
					send_ds18b20(START_CONVERSION,i);
     66c:	84 e4       	ldi	r24, 0x44	; 68
     66e:	6c 2f       	mov	r22, r28
     670:	0e 94 25 02 	call	0x44a	; 0x44a <send_ds18b20>
					error_code=0;
     674:	10 92 6a 01 	sts	0x016A, r1
     678:	0c c0       	rjmp	.+24     	; 0x692 <main+0x132>
				}
				else error_code|=(1<<i);
     67a:	20 91 6a 01 	lds	r18, 0x016A
     67e:	c4 01       	movw	r24, r8
     680:	0c 2e       	mov	r0, r28
     682:	02 c0       	rjmp	.+4      	; 0x688 <main+0x128>
     684:	88 0f       	add	r24, r24
     686:	99 1f       	adc	r25, r25
     688:	0a 94       	dec	r0
     68a:	e2 f7       	brpl	.-8      	; 0x684 <main+0x124>
     68c:	28 2b       	or	r18, r24
     68e:	20 93 6a 01 	sts	0x016A, r18
     692:	21 96       	adiw	r28, 0x01	; 1
		{
			i=0;

			//send command from start measurement to sensors
			error_code=0;
			for (i=0;i<SENSOR_COUNT;i++)
     694:	c2 30       	cpi	r28, 0x02	; 2
     696:	d1 05       	cpc	r29, r1
     698:	01 f7       	brne	.-64     	; 0x65a <main+0xfa>
					error_code=0;
				}
				else error_code|=(1<<i);
			}

			if (first_conv==_YES) first_conv=_NO;
     69a:	01 30       	cpi	r16, 0x01	; 1
     69c:	61 f2       	breq	.-104    	; 0x636 <main+0xd6>
     69e:	c0 e0       	ldi	r28, 0x00	; 0
     6a0:	d0 e0       	ldi	r29, 0x00	; 0
			{
		 
				//receive measured data from sensors
				for (i=0;i<SENSOR_COUNT;i++)
				{
					if (present_ds18b20(i)==1)
     6a2:	8c 2f       	mov	r24, r28
     6a4:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <present_ds18b20>
     6a8:	81 30       	cpi	r24, 0x01	; 1
     6aa:	09 f0       	breq	.+2      	; 0x6ae <main+0x14e>
     6ac:	4d c0       	rjmp	.+154    	; 0x748 <main+0x1e8>
					{
						send_ds18b20(SKIP_ROM,i);
     6ae:	8c ec       	ldi	r24, 0xCC	; 204
     6b0:	6c 2f       	mov	r22, r28
     6b2:	0e 94 25 02 	call	0x44a	; 0x44a <send_ds18b20>
						send_ds18b20(GET_DATA,i);
     6b6:	8e eb       	ldi	r24, 0xBE	; 190
     6b8:	6c 2f       	mov	r22, r28
     6ba:	0e 94 25 02 	call	0x44a	; 0x44a <send_ds18b20>
						val=receive_ds18b20(i);
     6be:	8c 2f       	mov	r24, r28
     6c0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <receive_ds18b20>

						if ((val&0x8000)!=0x00)
     6c4:	97 fd       	sbrc	r25, 7
     6c6:	02 c0       	rjmp	.+4      	; 0x6cc <main+0x16c>
     6c8:	e0 e0       	ldi	r30, 0x00	; 0
     6ca:	04 c0       	rjmp	.+8      	; 0x6d4 <main+0x174>
						{
							sign=1;
							val=0xffff-val+1;
     6cc:	90 95       	com	r25
     6ce:	81 95       	neg	r24
     6d0:	9f 4f       	sbci	r25, 0xFF	; 255
     6d2:	e1 e0       	ldi	r30, 0x01	; 1
						}
						else sign=0;

						fract=0;
						if ((val&0x01)!=0x00) fract=fract+65;
     6d4:	80 fd       	sbrc	r24, 0
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <main+0x17e>
     6d8:	40 e0       	ldi	r20, 0x00	; 0
     6da:	50 e0       	ldi	r21, 0x00	; 0
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <main+0x182>
     6de:	41 e4       	ldi	r20, 0x41	; 65
     6e0:	50 e0       	ldi	r21, 0x00	; 0
						if ((val&0x02)!=0x00) fract=fract+125;
     6e2:	81 ff       	sbrs	r24, 1
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <main+0x18a>
     6e6:	43 58       	subi	r20, 0x83	; 131
     6e8:	5f 4f       	sbci	r21, 0xFF	; 255
						if ((val&0x04)!=0x00) fract=fract+250;
     6ea:	82 ff       	sbrs	r24, 2
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <main+0x192>
     6ee:	46 50       	subi	r20, 0x06	; 6
     6f0:	5f 4f       	sbci	r21, 0xFF	; 255
						if ((val&0x08)!=0x00) fract=fract+500;
     6f2:	83 ff       	sbrs	r24, 3
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <main+0x19a>
     6f6:	4c 50       	subi	r20, 0x0C	; 12
     6f8:	5e 4f       	sbci	r21, 0xFE	; 254

						val=(val>>4)*10+fract/100;
     6fa:	f4 e0       	ldi	r31, 0x04	; 4
     6fc:	96 95       	lsr	r25
     6fe:	87 95       	ror	r24
     700:	fa 95       	dec	r31
     702:	e1 f7       	brne	.-8      	; 0x6fc <main+0x19c>
     704:	9c 01       	movw	r18, r24
     706:	73 e0       	ldi	r23, 0x03	; 3
     708:	22 0f       	add	r18, r18
     70a:	33 1f       	adc	r19, r19
     70c:	7a 95       	dec	r23
     70e:	e1 f7       	brne	.-8      	; 0x708 <main+0x1a8>
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	28 0f       	add	r18, r24
     716:	39 1f       	adc	r19, r25
     718:	ca 01       	movw	r24, r20
     71a:	64 e6       	ldi	r22, 0x64	; 100
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__udivmodhi4>
     722:	62 0f       	add	r22, r18
     724:	73 1f       	adc	r23, r19

						if (sign==1) val=OFFSET-val;
     726:	e1 30       	cpi	r30, 0x01	; 1
     728:	29 f4       	brne	.+10     	; 0x734 <main+0x1d4>
     72a:	c3 01       	movw	r24, r6
     72c:	86 1b       	sub	r24, r22
     72e:	97 0b       	sbc	r25, r23
     730:	bc 01       	movw	r22, r24
     732:	02 c0       	rjmp	.+4      	; 0x738 <main+0x1d8>
						else val=val+OFFSET;
     734:	60 50       	subi	r22, 0x00	; 0
     736:	7b 4f       	sbci	r23, 0xFB	; 251

						sensor_data[i]=val;
     738:	fe 01       	movw	r30, r28
     73a:	ee 0f       	add	r30, r30
     73c:	ff 1f       	adc	r31, r31
     73e:	e4 59       	subi	r30, 0x94	; 148
     740:	fe 4f       	sbci	r31, 0xFE	; 254
     742:	71 83       	std	Z+1, r23	; 0x01
     744:	60 83       	st	Z, r22
     746:	0c c0       	rjmp	.+24     	; 0x760 <main+0x200>
					}
					else error_code|=(1<<i);
     748:	20 91 6a 01 	lds	r18, 0x016A
     74c:	c4 01       	movw	r24, r8
     74e:	0c 2e       	mov	r0, r28
     750:	02 c0       	rjmp	.+4      	; 0x756 <main+0x1f6>
     752:	88 0f       	add	r24, r24
     754:	99 1f       	adc	r25, r25
     756:	0a 94       	dec	r0
     758:	e2 f7       	brpl	.-8      	; 0x752 <main+0x1f2>
     75a:	28 2b       	or	r18, r24
     75c:	20 93 6a 01 	sts	0x016A, r18
     760:	21 96       	adiw	r28, 0x01	; 1
			if (first_conv==_YES) first_conv=_NO;
			else
			{
		 
				//receive measured data from sensors
				for (i=0;i<SENSOR_COUNT;i++)
     762:	c2 30       	cpi	r28, 0x02	; 2
     764:	d1 05       	cpc	r29, r1
     766:	09 f0       	breq	.+2      	; 0x76a <main+0x20a>
     768:	9c cf       	rjmp	.-200    	; 0x6a2 <main+0x142>
					}
					else error_code|=(1<<i);
				}

				//if PWM if OFF - clear all variables and off PWM
				if (pwm_state==PWM_OFF)
     76a:	80 91 70 01 	lds	r24, 0x0170
     76e:	88 23       	and	r24, r24
     770:	e9 f4       	brne	.+58     	; 0x7ac <main+0x24c>
	return;
}

void off_pwm()
{
	TCCR1A&=~(1<<COM1A1);
     772:	8f b5       	in	r24, 0x2f	; 47
     774:	8f 77       	andi	r24, 0x7F	; 127
     776:	8f bd       	out	0x2f, r24	; 47

				//if PWM if OFF - clear all variables and off PWM
				if (pwm_state==PWM_OFF)
				{
					off_pwm();
					set_pwm(0x00);
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	0e 94 79 00 	call	0xf2	; 0xf2 <set_pwm>
					U=0.0;
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	a0 e0       	ldi	r26, 0x00	; 0
     784:	b0 e0       	ldi	r27, 0x00	; 0
     786:	80 93 91 01 	sts	0x0191, r24
     78a:	90 93 92 01 	sts	0x0192, r25
     78e:	a0 93 93 01 	sts	0x0193, r26
     792:	b0 93 94 01 	sts	0x0194, r27
					E=0.0;
     796:	80 93 89 01 	sts	0x0189, r24
     79a:	90 93 8a 01 	sts	0x018A, r25
     79e:	a0 93 8b 01 	sts	0x018B, r26
     7a2:	b0 93 8c 01 	sts	0x018C, r27
					correction=0;
     7a6:	10 92 6b 01 	sts	0x016B, r1
     7aa:	06 c0       	rjmp	.+12     	; 0x7b8 <main+0x258>
	return;
}

uint8_t get_pwm (void)
{
	return OCR1AL;
     7ac:	8a b5       	in	r24, 0x2a	; 42
					set_pwm(0x00);
					U=0.0;
					E=0.0;
					correction=0;
				}
				else if (get_pwm()!=0) on_pwm();
     7ae:	88 23       	and	r24, r24
     7b0:	19 f0       	breq	.+6      	; 0x7b8 <main+0x258>
	return;
}

void on_pwm()
{
	TCCR1A|=(1<<COM1A1);
     7b2:	8f b5       	in	r24, 0x2f	; 47
     7b4:	80 68       	ori	r24, 0x80	; 128
     7b6:	8f bd       	out	0x2f, r24	; 47
					correction=0;
				}
				else if (get_pwm()!=0) on_pwm();

				//If no errors at sensor[0] and PWM is ON - calculate and set correction
				if (((error_code & 0x01)==0)&&(pwm_state==PWM_ON))
     7b8:	80 91 6a 01 	lds	r24, 0x016A
     7bc:	80 fd       	sbrc	r24, 0
     7be:	3b cf       	rjmp	.-394    	; 0x636 <main+0xd6>
     7c0:	80 91 70 01 	lds	r24, 0x0170
     7c4:	81 30       	cpi	r24, 0x01	; 1
     7c6:	09 f0       	breq	.+2      	; 0x7ca <main+0x26a>
     7c8:	36 cf       	rjmp	.-404    	; 0x636 <main+0xd6>
				{
					E=(double) sensor_data[0]-value_data[0];
     7ca:	60 91 6c 01 	lds	r22, 0x016C
     7ce:	70 91 6d 01 	lds	r23, 0x016D
     7d2:	e0 90 95 01 	lds	r14, 0x0195
     7d6:	f0 90 96 01 	lds	r15, 0x0196
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 2c 08 	call	0x1058	; 0x1058 <__floatunsisf>
     7e2:	5b 01       	movw	r10, r22
     7e4:	6c 01       	movw	r12, r24
     7e6:	00 e0       	ldi	r16, 0x00	; 0
     7e8:	10 e0       	ldi	r17, 0x00	; 0
     7ea:	c8 01       	movw	r24, r16
     7ec:	b7 01       	movw	r22, r14
     7ee:	0e 94 2c 08 	call	0x1058	; 0x1058 <__floatunsisf>
     7f2:	9b 01       	movw	r18, r22
     7f4:	ac 01       	movw	r20, r24
     7f6:	c6 01       	movw	r24, r12
     7f8:	b5 01       	movw	r22, r10
     7fa:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__subsf3>
     7fe:	60 93 89 01 	sts	0x0189, r22
     802:	70 93 8a 01 	sts	0x018A, r23
     806:	80 93 8b 01 	sts	0x018B, r24
     80a:	90 93 8c 01 	sts	0x018C, r25

					U=U+Kp*E;
     80e:	e0 90 91 01 	lds	r14, 0x0191
     812:	f0 90 92 01 	lds	r15, 0x0192
     816:	00 91 93 01 	lds	r16, 0x0193
     81a:	10 91 94 01 	lds	r17, 0x0194
     81e:	60 91 8d 01 	lds	r22, 0x018D
     822:	70 91 8e 01 	lds	r23, 0x018E
     826:	80 91 8f 01 	lds	r24, 0x018F
     82a:	90 91 90 01 	lds	r25, 0x0190
     82e:	20 91 89 01 	lds	r18, 0x0189
     832:	30 91 8a 01 	lds	r19, 0x018A
     836:	40 91 8b 01 	lds	r20, 0x018B
     83a:	50 91 8c 01 	lds	r21, 0x018C
     83e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__mulsf3>
     842:	9b 01       	movw	r18, r22
     844:	ac 01       	movw	r20, r24
     846:	c8 01       	movw	r24, r16
     848:	b7 01       	movw	r22, r14
     84a:	0e 94 21 06 	call	0xc42	; 0xc42 <__addsf3>
     84e:	60 93 91 01 	sts	0x0191, r22
     852:	70 93 92 01 	sts	0x0192, r23
     856:	80 93 93 01 	sts	0x0193, r24
     85a:	90 93 94 01 	sts	0x0194, r25

					if (U>255.0) 	U=255.0;
     85e:	60 91 91 01 	lds	r22, 0x0191
     862:	70 91 92 01 	lds	r23, 0x0192
     866:	80 91 93 01 	lds	r24, 0x0193
     86a:	90 91 94 01 	lds	r25, 0x0194
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	4f e7       	ldi	r20, 0x7F	; 127
     874:	53 e4       	ldi	r21, 0x43	; 67
     876:	0e 94 48 07 	call	0xe90	; 0xe90 <__gtsf2>
     87a:	18 16       	cp	r1, r24
     87c:	64 f4       	brge	.+24     	; 0x896 <main+0x336>
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	af e7       	ldi	r26, 0x7F	; 127
     884:	b3 e4       	ldi	r27, 0x43	; 67
     886:	80 93 91 01 	sts	0x0191, r24
     88a:	90 93 92 01 	sts	0x0192, r25
     88e:	a0 93 93 01 	sts	0x0193, r26
     892:	b0 93 94 01 	sts	0x0194, r27
					if (U<=0.0) 	U=0.0;
     896:	60 91 91 01 	lds	r22, 0x0191
     89a:	70 91 92 01 	lds	r23, 0x0192
     89e:	80 91 93 01 	lds	r24, 0x0193
     8a2:	90 91 94 01 	lds	r25, 0x0194
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	40 e0       	ldi	r20, 0x00	; 0
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	0e 94 a8 07 	call	0xf50	; 0xf50 <__lesf2>
     8b2:	18 16       	cp	r1, r24
     8b4:	64 f0       	brlt	.+24     	; 0x8ce <main+0x36e>
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	a0 e0       	ldi	r26, 0x00	; 0
     8bc:	b0 e0       	ldi	r27, 0x00	; 0
     8be:	80 93 91 01 	sts	0x0191, r24
     8c2:	90 93 92 01 	sts	0x0192, r25
     8c6:	a0 93 93 01 	sts	0x0193, r26
     8ca:	b0 93 94 01 	sts	0x0194, r27
		
					correction=(uint8_t) U;
     8ce:	60 91 91 01 	lds	r22, 0x0191
     8d2:	70 91 92 01 	lds	r23, 0x0192
     8d6:	80 91 93 01 	lds	r24, 0x0193
     8da:	90 91 94 01 	lds	r25, 0x0194
     8de:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__fixunssfsi>
     8e2:	60 93 6b 01 	sts	0x016B, r22
					set_pwm(correction); 				
     8e6:	80 91 6b 01 	lds	r24, 0x016B
     8ea:	0e 94 79 00 	call	0xf2	; 0xf2 <set_pwm>
     8ee:	a3 ce       	rjmp	.-698    	; 0x636 <main+0xd6>

000008f0 <__fixunssfsi>:
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
     8f8:	7b 01       	movw	r14, r22
     8fa:	8c 01       	movw	r16, r24
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	40 e0       	ldi	r20, 0x00	; 0
     902:	5f e4       	ldi	r21, 0x4F	; 79
     904:	0e 94 78 07 	call	0xef0	; 0xef0 <__gesf2>
     908:	88 23       	and	r24, r24
     90a:	8c f0       	brlt	.+34     	; 0x92e <__fixunssfsi+0x3e>
     90c:	c8 01       	movw	r24, r16
     90e:	b7 01       	movw	r22, r14
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	5f e4       	ldi	r21, 0x4F	; 79
     918:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__subsf3>
     91c:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__fixsfsi>
     920:	9b 01       	movw	r18, r22
     922:	ac 01       	movw	r20, r24
     924:	20 50       	subi	r18, 0x00	; 0
     926:	30 40       	sbci	r19, 0x00	; 0
     928:	40 40       	sbci	r20, 0x00	; 0
     92a:	50 48       	sbci	r21, 0x80	; 128
     92c:	06 c0       	rjmp	.+12     	; 0x93a <__fixunssfsi+0x4a>
     92e:	c8 01       	movw	r24, r16
     930:	b7 01       	movw	r22, r14
     932:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__fixsfsi>
     936:	9b 01       	movw	r18, r22
     938:	ac 01       	movw	r20, r24
     93a:	b9 01       	movw	r22, r18
     93c:	ca 01       	movw	r24, r20
     93e:	1f 91       	pop	r17
     940:	0f 91       	pop	r16
     942:	ff 90       	pop	r15
     944:	ef 90       	pop	r14
     946:	08 95       	ret

00000948 <_fpadd_parts>:
     948:	a0 e0       	ldi	r26, 0x00	; 0
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	ea ea       	ldi	r30, 0xAA	; 170
     94e:	f4 e0       	ldi	r31, 0x04	; 4
     950:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__prologue_saves__>
     954:	dc 01       	movw	r26, r24
     956:	2b 01       	movw	r4, r22
     958:	fa 01       	movw	r30, r20
     95a:	9c 91       	ld	r25, X
     95c:	92 30       	cpi	r25, 0x02	; 2
     95e:	08 f4       	brcc	.+2      	; 0x962 <_fpadd_parts+0x1a>
     960:	39 c1       	rjmp	.+626    	; 0xbd4 <_fpadd_parts+0x28c>
     962:	eb 01       	movw	r28, r22
     964:	88 81       	ld	r24, Y
     966:	82 30       	cpi	r24, 0x02	; 2
     968:	08 f4       	brcc	.+2      	; 0x96c <_fpadd_parts+0x24>
     96a:	33 c1       	rjmp	.+614    	; 0xbd2 <_fpadd_parts+0x28a>
     96c:	94 30       	cpi	r25, 0x04	; 4
     96e:	69 f4       	brne	.+26     	; 0x98a <_fpadd_parts+0x42>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f0       	breq	.+2      	; 0x976 <_fpadd_parts+0x2e>
     974:	2f c1       	rjmp	.+606    	; 0xbd4 <_fpadd_parts+0x28c>
     976:	11 96       	adiw	r26, 0x01	; 1
     978:	9c 91       	ld	r25, X
     97a:	11 97       	sbiw	r26, 0x01	; 1
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	98 17       	cp	r25, r24
     980:	09 f4       	brne	.+2      	; 0x984 <_fpadd_parts+0x3c>
     982:	28 c1       	rjmp	.+592    	; 0xbd4 <_fpadd_parts+0x28c>
     984:	a0 e6       	ldi	r26, 0x60	; 96
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	25 c1       	rjmp	.+586    	; 0xbd4 <_fpadd_parts+0x28c>
     98a:	84 30       	cpi	r24, 0x04	; 4
     98c:	09 f4       	brne	.+2      	; 0x990 <_fpadd_parts+0x48>
     98e:	21 c1       	rjmp	.+578    	; 0xbd2 <_fpadd_parts+0x28a>
     990:	82 30       	cpi	r24, 0x02	; 2
     992:	a9 f4       	brne	.+42     	; 0x9be <_fpadd_parts+0x76>
     994:	92 30       	cpi	r25, 0x02	; 2
     996:	09 f0       	breq	.+2      	; 0x99a <_fpadd_parts+0x52>
     998:	1d c1       	rjmp	.+570    	; 0xbd4 <_fpadd_parts+0x28c>
     99a:	9a 01       	movw	r18, r20
     99c:	ad 01       	movw	r20, r26
     99e:	88 e0       	ldi	r24, 0x08	; 8
     9a0:	ea 01       	movw	r28, r20
     9a2:	09 90       	ld	r0, Y+
     9a4:	ae 01       	movw	r20, r28
     9a6:	e9 01       	movw	r28, r18
     9a8:	09 92       	st	Y+, r0
     9aa:	9e 01       	movw	r18, r28
     9ac:	81 50       	subi	r24, 0x01	; 1
     9ae:	c1 f7       	brne	.-16     	; 0x9a0 <_fpadd_parts+0x58>
     9b0:	e2 01       	movw	r28, r4
     9b2:	89 81       	ldd	r24, Y+1	; 0x01
     9b4:	11 96       	adiw	r26, 0x01	; 1
     9b6:	9c 91       	ld	r25, X
     9b8:	89 23       	and	r24, r25
     9ba:	81 83       	std	Z+1, r24	; 0x01
     9bc:	08 c1       	rjmp	.+528    	; 0xbce <_fpadd_parts+0x286>
     9be:	92 30       	cpi	r25, 0x02	; 2
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <_fpadd_parts+0x7c>
     9c2:	07 c1       	rjmp	.+526    	; 0xbd2 <_fpadd_parts+0x28a>
     9c4:	12 96       	adiw	r26, 0x02	; 2
     9c6:	2d 90       	ld	r2, X+
     9c8:	3c 90       	ld	r3, X
     9ca:	13 97       	sbiw	r26, 0x03	; 3
     9cc:	eb 01       	movw	r28, r22
     9ce:	8a 81       	ldd	r24, Y+2	; 0x02
     9d0:	9b 81       	ldd	r25, Y+3	; 0x03
     9d2:	14 96       	adiw	r26, 0x04	; 4
     9d4:	ad 90       	ld	r10, X+
     9d6:	bd 90       	ld	r11, X+
     9d8:	cd 90       	ld	r12, X+
     9da:	dc 90       	ld	r13, X
     9dc:	17 97       	sbiw	r26, 0x07	; 7
     9de:	ec 80       	ldd	r14, Y+4	; 0x04
     9e0:	fd 80       	ldd	r15, Y+5	; 0x05
     9e2:	0e 81       	ldd	r16, Y+6	; 0x06
     9e4:	1f 81       	ldd	r17, Y+7	; 0x07
     9e6:	91 01       	movw	r18, r2
     9e8:	28 1b       	sub	r18, r24
     9ea:	39 0b       	sbc	r19, r25
     9ec:	b9 01       	movw	r22, r18
     9ee:	37 ff       	sbrs	r19, 7
     9f0:	04 c0       	rjmp	.+8      	; 0x9fa <_fpadd_parts+0xb2>
     9f2:	66 27       	eor	r22, r22
     9f4:	77 27       	eor	r23, r23
     9f6:	62 1b       	sub	r22, r18
     9f8:	73 0b       	sbc	r23, r19
     9fa:	60 32       	cpi	r22, 0x20	; 32
     9fc:	71 05       	cpc	r23, r1
     9fe:	0c f0       	brlt	.+2      	; 0xa02 <_fpadd_parts+0xba>
     a00:	61 c0       	rjmp	.+194    	; 0xac4 <_fpadd_parts+0x17c>
     a02:	12 16       	cp	r1, r18
     a04:	13 06       	cpc	r1, r19
     a06:	6c f5       	brge	.+90     	; 0xa62 <_fpadd_parts+0x11a>
     a08:	37 01       	movw	r6, r14
     a0a:	48 01       	movw	r8, r16
     a0c:	06 2e       	mov	r0, r22
     a0e:	04 c0       	rjmp	.+8      	; 0xa18 <_fpadd_parts+0xd0>
     a10:	96 94       	lsr	r9
     a12:	87 94       	ror	r8
     a14:	77 94       	ror	r7
     a16:	67 94       	ror	r6
     a18:	0a 94       	dec	r0
     a1a:	d2 f7       	brpl	.-12     	; 0xa10 <_fpadd_parts+0xc8>
     a1c:	21 e0       	ldi	r18, 0x01	; 1
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <_fpadd_parts+0xe6>
     a26:	22 0f       	add	r18, r18
     a28:	33 1f       	adc	r19, r19
     a2a:	44 1f       	adc	r20, r20
     a2c:	55 1f       	adc	r21, r21
     a2e:	6a 95       	dec	r22
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <_fpadd_parts+0xde>
     a32:	21 50       	subi	r18, 0x01	; 1
     a34:	30 40       	sbci	r19, 0x00	; 0
     a36:	40 40       	sbci	r20, 0x00	; 0
     a38:	50 40       	sbci	r21, 0x00	; 0
     a3a:	2e 21       	and	r18, r14
     a3c:	3f 21       	and	r19, r15
     a3e:	40 23       	and	r20, r16
     a40:	51 23       	and	r21, r17
     a42:	21 15       	cp	r18, r1
     a44:	31 05       	cpc	r19, r1
     a46:	41 05       	cpc	r20, r1
     a48:	51 05       	cpc	r21, r1
     a4a:	21 f0       	breq	.+8      	; 0xa54 <_fpadd_parts+0x10c>
     a4c:	21 e0       	ldi	r18, 0x01	; 1
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	40 e0       	ldi	r20, 0x00	; 0
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	79 01       	movw	r14, r18
     a56:	8a 01       	movw	r16, r20
     a58:	e6 28       	or	r14, r6
     a5a:	f7 28       	or	r15, r7
     a5c:	08 29       	or	r16, r8
     a5e:	19 29       	or	r17, r9
     a60:	3c c0       	rjmp	.+120    	; 0xada <_fpadd_parts+0x192>
     a62:	23 2b       	or	r18, r19
     a64:	d1 f1       	breq	.+116    	; 0xada <_fpadd_parts+0x192>
     a66:	26 0e       	add	r2, r22
     a68:	37 1e       	adc	r3, r23
     a6a:	35 01       	movw	r6, r10
     a6c:	46 01       	movw	r8, r12
     a6e:	06 2e       	mov	r0, r22
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <_fpadd_parts+0x132>
     a72:	96 94       	lsr	r9
     a74:	87 94       	ror	r8
     a76:	77 94       	ror	r7
     a78:	67 94       	ror	r6
     a7a:	0a 94       	dec	r0
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <_fpadd_parts+0x12a>
     a7e:	21 e0       	ldi	r18, 0x01	; 1
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <_fpadd_parts+0x148>
     a88:	22 0f       	add	r18, r18
     a8a:	33 1f       	adc	r19, r19
     a8c:	44 1f       	adc	r20, r20
     a8e:	55 1f       	adc	r21, r21
     a90:	6a 95       	dec	r22
     a92:	d2 f7       	brpl	.-12     	; 0xa88 <_fpadd_parts+0x140>
     a94:	21 50       	subi	r18, 0x01	; 1
     a96:	30 40       	sbci	r19, 0x00	; 0
     a98:	40 40       	sbci	r20, 0x00	; 0
     a9a:	50 40       	sbci	r21, 0x00	; 0
     a9c:	2a 21       	and	r18, r10
     a9e:	3b 21       	and	r19, r11
     aa0:	4c 21       	and	r20, r12
     aa2:	5d 21       	and	r21, r13
     aa4:	21 15       	cp	r18, r1
     aa6:	31 05       	cpc	r19, r1
     aa8:	41 05       	cpc	r20, r1
     aaa:	51 05       	cpc	r21, r1
     aac:	21 f0       	breq	.+8      	; 0xab6 <_fpadd_parts+0x16e>
     aae:	21 e0       	ldi	r18, 0x01	; 1
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	40 e0       	ldi	r20, 0x00	; 0
     ab4:	50 e0       	ldi	r21, 0x00	; 0
     ab6:	59 01       	movw	r10, r18
     ab8:	6a 01       	movw	r12, r20
     aba:	a6 28       	or	r10, r6
     abc:	b7 28       	or	r11, r7
     abe:	c8 28       	or	r12, r8
     ac0:	d9 28       	or	r13, r9
     ac2:	0b c0       	rjmp	.+22     	; 0xada <_fpadd_parts+0x192>
     ac4:	82 15       	cp	r24, r2
     ac6:	93 05       	cpc	r25, r3
     ac8:	2c f0       	brlt	.+10     	; 0xad4 <_fpadd_parts+0x18c>
     aca:	1c 01       	movw	r2, r24
     acc:	aa 24       	eor	r10, r10
     ace:	bb 24       	eor	r11, r11
     ad0:	65 01       	movw	r12, r10
     ad2:	03 c0       	rjmp	.+6      	; 0xada <_fpadd_parts+0x192>
     ad4:	ee 24       	eor	r14, r14
     ad6:	ff 24       	eor	r15, r15
     ad8:	87 01       	movw	r16, r14
     ada:	11 96       	adiw	r26, 0x01	; 1
     adc:	9c 91       	ld	r25, X
     ade:	d2 01       	movw	r26, r4
     ae0:	11 96       	adiw	r26, 0x01	; 1
     ae2:	8c 91       	ld	r24, X
     ae4:	98 17       	cp	r25, r24
     ae6:	09 f4       	brne	.+2      	; 0xaea <_fpadd_parts+0x1a2>
     ae8:	45 c0       	rjmp	.+138    	; 0xb74 <_fpadd_parts+0x22c>
     aea:	99 23       	and	r25, r25
     aec:	39 f0       	breq	.+14     	; 0xafc <_fpadd_parts+0x1b4>
     aee:	a8 01       	movw	r20, r16
     af0:	97 01       	movw	r18, r14
     af2:	2a 19       	sub	r18, r10
     af4:	3b 09       	sbc	r19, r11
     af6:	4c 09       	sbc	r20, r12
     af8:	5d 09       	sbc	r21, r13
     afa:	06 c0       	rjmp	.+12     	; 0xb08 <_fpadd_parts+0x1c0>
     afc:	a6 01       	movw	r20, r12
     afe:	95 01       	movw	r18, r10
     b00:	2e 19       	sub	r18, r14
     b02:	3f 09       	sbc	r19, r15
     b04:	40 0b       	sbc	r20, r16
     b06:	51 0b       	sbc	r21, r17
     b08:	57 fd       	sbrc	r21, 7
     b0a:	08 c0       	rjmp	.+16     	; 0xb1c <_fpadd_parts+0x1d4>
     b0c:	11 82       	std	Z+1, r1	; 0x01
     b0e:	33 82       	std	Z+3, r3	; 0x03
     b10:	22 82       	std	Z+2, r2	; 0x02
     b12:	24 83       	std	Z+4, r18	; 0x04
     b14:	35 83       	std	Z+5, r19	; 0x05
     b16:	46 83       	std	Z+6, r20	; 0x06
     b18:	57 83       	std	Z+7, r21	; 0x07
     b1a:	1d c0       	rjmp	.+58     	; 0xb56 <_fpadd_parts+0x20e>
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	81 83       	std	Z+1, r24	; 0x01
     b20:	33 82       	std	Z+3, r3	; 0x03
     b22:	22 82       	std	Z+2, r2	; 0x02
     b24:	88 27       	eor	r24, r24
     b26:	99 27       	eor	r25, r25
     b28:	dc 01       	movw	r26, r24
     b2a:	82 1b       	sub	r24, r18
     b2c:	93 0b       	sbc	r25, r19
     b2e:	a4 0b       	sbc	r26, r20
     b30:	b5 0b       	sbc	r27, r21
     b32:	84 83       	std	Z+4, r24	; 0x04
     b34:	95 83       	std	Z+5, r25	; 0x05
     b36:	a6 83       	std	Z+6, r26	; 0x06
     b38:	b7 83       	std	Z+7, r27	; 0x07
     b3a:	0d c0       	rjmp	.+26     	; 0xb56 <_fpadd_parts+0x20e>
     b3c:	22 0f       	add	r18, r18
     b3e:	33 1f       	adc	r19, r19
     b40:	44 1f       	adc	r20, r20
     b42:	55 1f       	adc	r21, r21
     b44:	24 83       	std	Z+4, r18	; 0x04
     b46:	35 83       	std	Z+5, r19	; 0x05
     b48:	46 83       	std	Z+6, r20	; 0x06
     b4a:	57 83       	std	Z+7, r21	; 0x07
     b4c:	82 81       	ldd	r24, Z+2	; 0x02
     b4e:	93 81       	ldd	r25, Z+3	; 0x03
     b50:	01 97       	sbiw	r24, 0x01	; 1
     b52:	93 83       	std	Z+3, r25	; 0x03
     b54:	82 83       	std	Z+2, r24	; 0x02
     b56:	24 81       	ldd	r18, Z+4	; 0x04
     b58:	35 81       	ldd	r19, Z+5	; 0x05
     b5a:	46 81       	ldd	r20, Z+6	; 0x06
     b5c:	57 81       	ldd	r21, Z+7	; 0x07
     b5e:	da 01       	movw	r26, r20
     b60:	c9 01       	movw	r24, r18
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	a1 09       	sbc	r26, r1
     b66:	b1 09       	sbc	r27, r1
     b68:	8f 5f       	subi	r24, 0xFF	; 255
     b6a:	9f 4f       	sbci	r25, 0xFF	; 255
     b6c:	af 4f       	sbci	r26, 0xFF	; 255
     b6e:	bf 43       	sbci	r27, 0x3F	; 63
     b70:	28 f3       	brcs	.-54     	; 0xb3c <_fpadd_parts+0x1f4>
     b72:	0b c0       	rjmp	.+22     	; 0xb8a <_fpadd_parts+0x242>
     b74:	91 83       	std	Z+1, r25	; 0x01
     b76:	33 82       	std	Z+3, r3	; 0x03
     b78:	22 82       	std	Z+2, r2	; 0x02
     b7a:	ea 0c       	add	r14, r10
     b7c:	fb 1c       	adc	r15, r11
     b7e:	0c 1d       	adc	r16, r12
     b80:	1d 1d       	adc	r17, r13
     b82:	e4 82       	std	Z+4, r14	; 0x04
     b84:	f5 82       	std	Z+5, r15	; 0x05
     b86:	06 83       	std	Z+6, r16	; 0x06
     b88:	17 83       	std	Z+7, r17	; 0x07
     b8a:	83 e0       	ldi	r24, 0x03	; 3
     b8c:	80 83       	st	Z, r24
     b8e:	24 81       	ldd	r18, Z+4	; 0x04
     b90:	35 81       	ldd	r19, Z+5	; 0x05
     b92:	46 81       	ldd	r20, Z+6	; 0x06
     b94:	57 81       	ldd	r21, Z+7	; 0x07
     b96:	57 ff       	sbrs	r21, 7
     b98:	1a c0       	rjmp	.+52     	; 0xbce <_fpadd_parts+0x286>
     b9a:	c9 01       	movw	r24, r18
     b9c:	aa 27       	eor	r26, r26
     b9e:	97 fd       	sbrc	r25, 7
     ba0:	a0 95       	com	r26
     ba2:	ba 2f       	mov	r27, r26
     ba4:	81 70       	andi	r24, 0x01	; 1
     ba6:	90 70       	andi	r25, 0x00	; 0
     ba8:	a0 70       	andi	r26, 0x00	; 0
     baa:	b0 70       	andi	r27, 0x00	; 0
     bac:	56 95       	lsr	r21
     bae:	47 95       	ror	r20
     bb0:	37 95       	ror	r19
     bb2:	27 95       	ror	r18
     bb4:	82 2b       	or	r24, r18
     bb6:	93 2b       	or	r25, r19
     bb8:	a4 2b       	or	r26, r20
     bba:	b5 2b       	or	r27, r21
     bbc:	84 83       	std	Z+4, r24	; 0x04
     bbe:	95 83       	std	Z+5, r25	; 0x05
     bc0:	a6 83       	std	Z+6, r26	; 0x06
     bc2:	b7 83       	std	Z+7, r27	; 0x07
     bc4:	82 81       	ldd	r24, Z+2	; 0x02
     bc6:	93 81       	ldd	r25, Z+3	; 0x03
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	93 83       	std	Z+3, r25	; 0x03
     bcc:	82 83       	std	Z+2, r24	; 0x02
     bce:	df 01       	movw	r26, r30
     bd0:	01 c0       	rjmp	.+2      	; 0xbd4 <_fpadd_parts+0x28c>
     bd2:	d2 01       	movw	r26, r4
     bd4:	cd 01       	movw	r24, r26
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	e2 e1       	ldi	r30, 0x12	; 18
     bdc:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <__epilogue_restores__>

00000be0 <__subsf3>:
     be0:	a0 e2       	ldi	r26, 0x20	; 32
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	e6 ef       	ldi	r30, 0xF6	; 246
     be6:	f5 e0       	ldi	r31, 0x05	; 5
     be8:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__prologue_saves__+0x18>
     bec:	69 83       	std	Y+1, r22	; 0x01
     bee:	7a 83       	std	Y+2, r23	; 0x02
     bf0:	8b 83       	std	Y+3, r24	; 0x03
     bf2:	9c 83       	std	Y+4, r25	; 0x04
     bf4:	2d 83       	std	Y+5, r18	; 0x05
     bf6:	3e 83       	std	Y+6, r19	; 0x06
     bf8:	4f 83       	std	Y+7, r20	; 0x07
     bfa:	58 87       	std	Y+8, r21	; 0x08
     bfc:	e9 e0       	ldi	r30, 0x09	; 9
     bfe:	ee 2e       	mov	r14, r30
     c00:	f1 2c       	mov	r15, r1
     c02:	ec 0e       	add	r14, r28
     c04:	fd 1e       	adc	r15, r29
     c06:	ce 01       	movw	r24, r28
     c08:	01 96       	adiw	r24, 0x01	; 1
     c0a:	b7 01       	movw	r22, r14
     c0c:	0e 94 c9 09 	call	0x1392	; 0x1392 <__unpack_f>
     c10:	8e 01       	movw	r16, r28
     c12:	0f 5e       	subi	r16, 0xEF	; 239
     c14:	1f 4f       	sbci	r17, 0xFF	; 255
     c16:	ce 01       	movw	r24, r28
     c18:	05 96       	adiw	r24, 0x05	; 5
     c1a:	b8 01       	movw	r22, r16
     c1c:	0e 94 c9 09 	call	0x1392	; 0x1392 <__unpack_f>
     c20:	8a 89       	ldd	r24, Y+18	; 0x12
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	89 27       	eor	r24, r25
     c26:	8a 8b       	std	Y+18, r24	; 0x12
     c28:	c7 01       	movw	r24, r14
     c2a:	b8 01       	movw	r22, r16
     c2c:	ae 01       	movw	r20, r28
     c2e:	47 5e       	subi	r20, 0xE7	; 231
     c30:	5f 4f       	sbci	r21, 0xFF	; 255
     c32:	0e 94 a4 04 	call	0x948	; 0x948 <_fpadd_parts>
     c36:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__pack_f>
     c3a:	a0 96       	adiw	r28, 0x20	; 32
     c3c:	e6 e0       	ldi	r30, 0x06	; 6
     c3e:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__epilogue_restores__+0x18>

00000c42 <__addsf3>:
     c42:	a0 e2       	ldi	r26, 0x20	; 32
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e7 e2       	ldi	r30, 0x27	; 39
     c48:	f6 e0       	ldi	r31, 0x06	; 6
     c4a:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__prologue_saves__+0x18>
     c4e:	69 83       	std	Y+1, r22	; 0x01
     c50:	7a 83       	std	Y+2, r23	; 0x02
     c52:	8b 83       	std	Y+3, r24	; 0x03
     c54:	9c 83       	std	Y+4, r25	; 0x04
     c56:	2d 83       	std	Y+5, r18	; 0x05
     c58:	3e 83       	std	Y+6, r19	; 0x06
     c5a:	4f 83       	std	Y+7, r20	; 0x07
     c5c:	58 87       	std	Y+8, r21	; 0x08
     c5e:	f9 e0       	ldi	r31, 0x09	; 9
     c60:	ef 2e       	mov	r14, r31
     c62:	f1 2c       	mov	r15, r1
     c64:	ec 0e       	add	r14, r28
     c66:	fd 1e       	adc	r15, r29
     c68:	ce 01       	movw	r24, r28
     c6a:	01 96       	adiw	r24, 0x01	; 1
     c6c:	b7 01       	movw	r22, r14
     c6e:	0e 94 c9 09 	call	0x1392	; 0x1392 <__unpack_f>
     c72:	8e 01       	movw	r16, r28
     c74:	0f 5e       	subi	r16, 0xEF	; 239
     c76:	1f 4f       	sbci	r17, 0xFF	; 255
     c78:	ce 01       	movw	r24, r28
     c7a:	05 96       	adiw	r24, 0x05	; 5
     c7c:	b8 01       	movw	r22, r16
     c7e:	0e 94 c9 09 	call	0x1392	; 0x1392 <__unpack_f>
     c82:	c7 01       	movw	r24, r14
     c84:	b8 01       	movw	r22, r16
     c86:	ae 01       	movw	r20, r28
     c88:	47 5e       	subi	r20, 0xE7	; 231
     c8a:	5f 4f       	sbci	r21, 0xFF	; 255
     c8c:	0e 94 a4 04 	call	0x948	; 0x948 <_fpadd_parts>
     c90:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__pack_f>
     c94:	a0 96       	adiw	r28, 0x20	; 32
     c96:	e6 e0       	ldi	r30, 0x06	; 6
     c98:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__epilogue_restores__+0x18>

00000c9c <__mulsf3>:
     c9c:	a0 e2       	ldi	r26, 0x20	; 32
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e4 e5       	ldi	r30, 0x54	; 84
     ca2:	f6 e0       	ldi	r31, 0x06	; 6
     ca4:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__prologue_saves__>
     ca8:	69 83       	std	Y+1, r22	; 0x01
     caa:	7a 83       	std	Y+2, r23	; 0x02
     cac:	8b 83       	std	Y+3, r24	; 0x03
     cae:	9c 83       	std	Y+4, r25	; 0x04
     cb0:	2d 83       	std	Y+5, r18	; 0x05
     cb2:	3e 83       	std	Y+6, r19	; 0x06
     cb4:	4f 83       	std	Y+7, r20	; 0x07
     cb6:	58 87       	std	Y+8, r21	; 0x08
     cb8:	ce 01       	movw	r24, r28
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	be 01       	movw	r22, r28
     cbe:	67 5f       	subi	r22, 0xF7	; 247
     cc0:	7f 4f       	sbci	r23, 0xFF	; 255
     cc2:	0e 94 c9 09 	call	0x1392	; 0x1392 <__unpack_f>
     cc6:	ce 01       	movw	r24, r28
     cc8:	05 96       	adiw	r24, 0x05	; 5
     cca:	be 01       	movw	r22, r28
     ccc:	6f 5e       	subi	r22, 0xEF	; 239
     cce:	7f 4f       	sbci	r23, 0xFF	; 255
     cd0:	0e 94 c9 09 	call	0x1392	; 0x1392 <__unpack_f>
     cd4:	99 85       	ldd	r25, Y+9	; 0x09
     cd6:	92 30       	cpi	r25, 0x02	; 2
     cd8:	88 f0       	brcs	.+34     	; 0xcfc <__mulsf3+0x60>
     cda:	89 89       	ldd	r24, Y+17	; 0x11
     cdc:	82 30       	cpi	r24, 0x02	; 2
     cde:	c8 f0       	brcs	.+50     	; 0xd12 <__mulsf3+0x76>
     ce0:	94 30       	cpi	r25, 0x04	; 4
     ce2:	19 f4       	brne	.+6      	; 0xcea <__mulsf3+0x4e>
     ce4:	82 30       	cpi	r24, 0x02	; 2
     ce6:	51 f4       	brne	.+20     	; 0xcfc <__mulsf3+0x60>
     ce8:	04 c0       	rjmp	.+8      	; 0xcf2 <__mulsf3+0x56>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	29 f4       	brne	.+10     	; 0xcf8 <__mulsf3+0x5c>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	81 f4       	brne	.+32     	; 0xd12 <__mulsf3+0x76>
     cf2:	80 e6       	ldi	r24, 0x60	; 96
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	c6 c0       	rjmp	.+396    	; 0xe84 <__mulsf3+0x1e8>
     cf8:	92 30       	cpi	r25, 0x02	; 2
     cfa:	49 f4       	brne	.+18     	; 0xd0e <__mulsf3+0x72>
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     d00:	8a 89       	ldd	r24, Y+18	; 0x12
     d02:	98 13       	cpse	r25, r24
     d04:	21 e0       	ldi	r18, 0x01	; 1
     d06:	2a 87       	std	Y+10, r18	; 0x0a
     d08:	ce 01       	movw	r24, r28
     d0a:	09 96       	adiw	r24, 0x09	; 9
     d0c:	bb c0       	rjmp	.+374    	; 0xe84 <__mulsf3+0x1e8>
     d0e:	82 30       	cpi	r24, 0x02	; 2
     d10:	49 f4       	brne	.+18     	; 0xd24 <__mulsf3+0x88>
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	9a 85       	ldd	r25, Y+10	; 0x0a
     d16:	8a 89       	ldd	r24, Y+18	; 0x12
     d18:	98 13       	cpse	r25, r24
     d1a:	21 e0       	ldi	r18, 0x01	; 1
     d1c:	2a 8b       	std	Y+18, r18	; 0x12
     d1e:	ce 01       	movw	r24, r28
     d20:	41 96       	adiw	r24, 0x11	; 17
     d22:	b0 c0       	rjmp	.+352    	; 0xe84 <__mulsf3+0x1e8>
     d24:	2d 84       	ldd	r2, Y+13	; 0x0d
     d26:	3e 84       	ldd	r3, Y+14	; 0x0e
     d28:	4f 84       	ldd	r4, Y+15	; 0x0f
     d2a:	58 88       	ldd	r5, Y+16	; 0x10
     d2c:	6d 88       	ldd	r6, Y+21	; 0x15
     d2e:	7e 88       	ldd	r7, Y+22	; 0x16
     d30:	8f 88       	ldd	r8, Y+23	; 0x17
     d32:	98 8c       	ldd	r9, Y+24	; 0x18
     d34:	ee 24       	eor	r14, r14
     d36:	ff 24       	eor	r15, r15
     d38:	87 01       	movw	r16, r14
     d3a:	aa 24       	eor	r10, r10
     d3c:	bb 24       	eor	r11, r11
     d3e:	65 01       	movw	r12, r10
     d40:	40 e0       	ldi	r20, 0x00	; 0
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	e0 e0       	ldi	r30, 0x00	; 0
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	c1 01       	movw	r24, r2
     d4e:	81 70       	andi	r24, 0x01	; 1
     d50:	90 70       	andi	r25, 0x00	; 0
     d52:	89 2b       	or	r24, r25
     d54:	e9 f0       	breq	.+58     	; 0xd90 <__mulsf3+0xf4>
     d56:	e6 0c       	add	r14, r6
     d58:	f7 1c       	adc	r15, r7
     d5a:	08 1d       	adc	r16, r8
     d5c:	19 1d       	adc	r17, r9
     d5e:	9a 01       	movw	r18, r20
     d60:	ab 01       	movw	r20, r22
     d62:	2a 0d       	add	r18, r10
     d64:	3b 1d       	adc	r19, r11
     d66:	4c 1d       	adc	r20, r12
     d68:	5d 1d       	adc	r21, r13
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	a0 e0       	ldi	r26, 0x00	; 0
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	e6 14       	cp	r14, r6
     d74:	f7 04       	cpc	r15, r7
     d76:	08 05       	cpc	r16, r8
     d78:	19 05       	cpc	r17, r9
     d7a:	20 f4       	brcc	.+8      	; 0xd84 <__mulsf3+0xe8>
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	a0 e0       	ldi	r26, 0x00	; 0
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	ba 01       	movw	r22, r20
     d86:	a9 01       	movw	r20, r18
     d88:	48 0f       	add	r20, r24
     d8a:	59 1f       	adc	r21, r25
     d8c:	6a 1f       	adc	r22, r26
     d8e:	7b 1f       	adc	r23, r27
     d90:	aa 0c       	add	r10, r10
     d92:	bb 1c       	adc	r11, r11
     d94:	cc 1c       	adc	r12, r12
     d96:	dd 1c       	adc	r13, r13
     d98:	97 fe       	sbrs	r9, 7
     d9a:	08 c0       	rjmp	.+16     	; 0xdac <__mulsf3+0x110>
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	a0 e0       	ldi	r26, 0x00	; 0
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	a8 2a       	or	r10, r24
     da6:	b9 2a       	or	r11, r25
     da8:	ca 2a       	or	r12, r26
     daa:	db 2a       	or	r13, r27
     dac:	31 96       	adiw	r30, 0x01	; 1
     dae:	e0 32       	cpi	r30, 0x20	; 32
     db0:	f1 05       	cpc	r31, r1
     db2:	49 f0       	breq	.+18     	; 0xdc6 <__mulsf3+0x12a>
     db4:	66 0c       	add	r6, r6
     db6:	77 1c       	adc	r7, r7
     db8:	88 1c       	adc	r8, r8
     dba:	99 1c       	adc	r9, r9
     dbc:	56 94       	lsr	r5
     dbe:	47 94       	ror	r4
     dc0:	37 94       	ror	r3
     dc2:	27 94       	ror	r2
     dc4:	c3 cf       	rjmp	.-122    	; 0xd4c <__mulsf3+0xb0>
     dc6:	fa 85       	ldd	r31, Y+10	; 0x0a
     dc8:	ea 89       	ldd	r30, Y+18	; 0x12
     dca:	2b 89       	ldd	r18, Y+19	; 0x13
     dcc:	3c 89       	ldd	r19, Y+20	; 0x14
     dce:	8b 85       	ldd	r24, Y+11	; 0x0b
     dd0:	9c 85       	ldd	r25, Y+12	; 0x0c
     dd2:	28 0f       	add	r18, r24
     dd4:	39 1f       	adc	r19, r25
     dd6:	2e 5f       	subi	r18, 0xFE	; 254
     dd8:	3f 4f       	sbci	r19, 0xFF	; 255
     dda:	17 c0       	rjmp	.+46     	; 0xe0a <__mulsf3+0x16e>
     ddc:	ca 01       	movw	r24, r20
     dde:	81 70       	andi	r24, 0x01	; 1
     de0:	90 70       	andi	r25, 0x00	; 0
     de2:	89 2b       	or	r24, r25
     de4:	61 f0       	breq	.+24     	; 0xdfe <__mulsf3+0x162>
     de6:	16 95       	lsr	r17
     de8:	07 95       	ror	r16
     dea:	f7 94       	ror	r15
     dec:	e7 94       	ror	r14
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	a0 e0       	ldi	r26, 0x00	; 0
     df4:	b0 e8       	ldi	r27, 0x80	; 128
     df6:	e8 2a       	or	r14, r24
     df8:	f9 2a       	or	r15, r25
     dfa:	0a 2b       	or	r16, r26
     dfc:	1b 2b       	or	r17, r27
     dfe:	76 95       	lsr	r23
     e00:	67 95       	ror	r22
     e02:	57 95       	ror	r21
     e04:	47 95       	ror	r20
     e06:	2f 5f       	subi	r18, 0xFF	; 255
     e08:	3f 4f       	sbci	r19, 0xFF	; 255
     e0a:	77 fd       	sbrc	r23, 7
     e0c:	e7 cf       	rjmp	.-50     	; 0xddc <__mulsf3+0x140>
     e0e:	0c c0       	rjmp	.+24     	; 0xe28 <__mulsf3+0x18c>
     e10:	44 0f       	add	r20, r20
     e12:	55 1f       	adc	r21, r21
     e14:	66 1f       	adc	r22, r22
     e16:	77 1f       	adc	r23, r23
     e18:	17 fd       	sbrc	r17, 7
     e1a:	41 60       	ori	r20, 0x01	; 1
     e1c:	ee 0c       	add	r14, r14
     e1e:	ff 1c       	adc	r15, r15
     e20:	00 1f       	adc	r16, r16
     e22:	11 1f       	adc	r17, r17
     e24:	21 50       	subi	r18, 0x01	; 1
     e26:	30 40       	sbci	r19, 0x00	; 0
     e28:	40 30       	cpi	r20, 0x00	; 0
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	59 07       	cpc	r21, r25
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	69 07       	cpc	r22, r25
     e32:	90 e4       	ldi	r25, 0x40	; 64
     e34:	79 07       	cpc	r23, r25
     e36:	60 f3       	brcs	.-40     	; 0xe10 <__mulsf3+0x174>
     e38:	2b 8f       	std	Y+27, r18	; 0x1b
     e3a:	3c 8f       	std	Y+28, r19	; 0x1c
     e3c:	db 01       	movw	r26, r22
     e3e:	ca 01       	movw	r24, r20
     e40:	8f 77       	andi	r24, 0x7F	; 127
     e42:	90 70       	andi	r25, 0x00	; 0
     e44:	a0 70       	andi	r26, 0x00	; 0
     e46:	b0 70       	andi	r27, 0x00	; 0
     e48:	80 34       	cpi	r24, 0x40	; 64
     e4a:	91 05       	cpc	r25, r1
     e4c:	a1 05       	cpc	r26, r1
     e4e:	b1 05       	cpc	r27, r1
     e50:	61 f4       	brne	.+24     	; 0xe6a <__mulsf3+0x1ce>
     e52:	47 fd       	sbrc	r20, 7
     e54:	0a c0       	rjmp	.+20     	; 0xe6a <__mulsf3+0x1ce>
     e56:	e1 14       	cp	r14, r1
     e58:	f1 04       	cpc	r15, r1
     e5a:	01 05       	cpc	r16, r1
     e5c:	11 05       	cpc	r17, r1
     e5e:	29 f0       	breq	.+10     	; 0xe6a <__mulsf3+0x1ce>
     e60:	40 5c       	subi	r20, 0xC0	; 192
     e62:	5f 4f       	sbci	r21, 0xFF	; 255
     e64:	6f 4f       	sbci	r22, 0xFF	; 255
     e66:	7f 4f       	sbci	r23, 0xFF	; 255
     e68:	40 78       	andi	r20, 0x80	; 128
     e6a:	1a 8e       	std	Y+26, r1	; 0x1a
     e6c:	fe 17       	cp	r31, r30
     e6e:	11 f0       	breq	.+4      	; 0xe74 <__mulsf3+0x1d8>
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	8a 8f       	std	Y+26, r24	; 0x1a
     e74:	4d 8f       	std	Y+29, r20	; 0x1d
     e76:	5e 8f       	std	Y+30, r21	; 0x1e
     e78:	6f 8f       	std	Y+31, r22	; 0x1f
     e7a:	78 a3       	std	Y+32, r23	; 0x20
     e7c:	83 e0       	ldi	r24, 0x03	; 3
     e7e:	89 8f       	std	Y+25, r24	; 0x19
     e80:	ce 01       	movw	r24, r28
     e82:	49 96       	adiw	r24, 0x19	; 25
     e84:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__pack_f>
     e88:	a0 96       	adiw	r28, 0x20	; 32
     e8a:	e2 e1       	ldi	r30, 0x12	; 18
     e8c:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <__epilogue_restores__>

00000e90 <__gtsf2>:
     e90:	a8 e1       	ldi	r26, 0x18	; 24
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ee e4       	ldi	r30, 0x4E	; 78
     e96:	f7 e0       	ldi	r31, 0x07	; 7
     e98:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__prologue_saves__+0x18>
     e9c:	69 83       	std	Y+1, r22	; 0x01
     e9e:	7a 83       	std	Y+2, r23	; 0x02
     ea0:	8b 83       	std	Y+3, r24	; 0x03
     ea2:	9c 83       	std	Y+4, r25	; 0x04
     ea4:	2d 83       	std	Y+5, r18	; 0x05
     ea6:	3e 83       	std	Y+6, r19	; 0x06
     ea8:	4f 83       	std	Y+7, r20	; 0x07
     eaa:	58 87       	std	Y+8, r21	; 0x08
     eac:	89 e0       	ldi	r24, 0x09	; 9
     eae:	e8 2e       	mov	r14, r24
     eb0:	f1 2c       	mov	r15, r1
     eb2:	ec 0e       	add	r14, r28
     eb4:	fd 1e       	adc	r15, r29
     eb6:	ce 01       	movw	r24, r28
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	b7 01       	movw	r22, r14
     ebc:	0e 94 c9 09 	call	0x1392	; 0x1392 <__unpack_f>
     ec0:	8e 01       	movw	r16, r28
     ec2:	0f 5e       	subi	r16, 0xEF	; 239
     ec4:	1f 4f       	sbci	r17, 0xFF	; 255
     ec6:	ce 01       	movw	r24, r28
     ec8:	05 96       	adiw	r24, 0x05	; 5
     eca:	b8 01       	movw	r22, r16
     ecc:	0e 94 c9 09 	call	0x1392	; 0x1392 <__unpack_f>
     ed0:	89 85       	ldd	r24, Y+9	; 0x09
     ed2:	82 30       	cpi	r24, 0x02	; 2
     ed4:	40 f0       	brcs	.+16     	; 0xee6 <__gtsf2+0x56>
     ed6:	89 89       	ldd	r24, Y+17	; 0x11
     ed8:	82 30       	cpi	r24, 0x02	; 2
     eda:	28 f0       	brcs	.+10     	; 0xee6 <__gtsf2+0x56>
     edc:	c7 01       	movw	r24, r14
     ede:	b8 01       	movw	r22, r16
     ee0:	0e 94 41 0a 	call	0x1482	; 0x1482 <__fpcmp_parts_f>
     ee4:	01 c0       	rjmp	.+2      	; 0xee8 <__gtsf2+0x58>
     ee6:	8f ef       	ldi	r24, 0xFF	; 255
     ee8:	68 96       	adiw	r28, 0x18	; 24
     eea:	e6 e0       	ldi	r30, 0x06	; 6
     eec:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__epilogue_restores__+0x18>

00000ef0 <__gesf2>:
     ef0:	a8 e1       	ldi	r26, 0x18	; 24
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	ee e7       	ldi	r30, 0x7E	; 126
     ef6:	f7 e0       	ldi	r31, 0x07	; 7
     ef8:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__prologue_saves__+0x18>
     efc:	69 83       	std	Y+1, r22	; 0x01
     efe:	7a 83       	std	Y+2, r23	; 0x02
     f00:	8b 83       	std	Y+3, r24	; 0x03
     f02:	9c 83       	std	Y+4, r25	; 0x04
     f04:	2d 83       	std	Y+5, r18	; 0x05
     f06:	3e 83       	std	Y+6, r19	; 0x06
     f08:	4f 83       	std	Y+7, r20	; 0x07
     f0a:	58 87       	std	Y+8, r21	; 0x08
     f0c:	89 e0       	ldi	r24, 0x09	; 9
     f0e:	e8 2e       	mov	r14, r24
     f10:	f1 2c       	mov	r15, r1
     f12:	ec 0e       	add	r14, r28
     f14:	fd 1e       	adc	r15, r29
     f16:	ce 01       	movw	r24, r28
     f18:	01 96       	adiw	r24, 0x01	; 1
     f1a:	b7 01       	movw	r22, r14
     f1c:	0e 94 c9 09 	call	0x1392	; 0x1392 <__unpack_f>
     f20:	8e 01       	movw	r16, r28
     f22:	0f 5e       	subi	r16, 0xEF	; 239
     f24:	1f 4f       	sbci	r17, 0xFF	; 255
     f26:	ce 01       	movw	r24, r28
     f28:	05 96       	adiw	r24, 0x05	; 5
     f2a:	b8 01       	movw	r22, r16
     f2c:	0e 94 c9 09 	call	0x1392	; 0x1392 <__unpack_f>
     f30:	89 85       	ldd	r24, Y+9	; 0x09
     f32:	82 30       	cpi	r24, 0x02	; 2
     f34:	40 f0       	brcs	.+16     	; 0xf46 <__gesf2+0x56>
     f36:	89 89       	ldd	r24, Y+17	; 0x11
     f38:	82 30       	cpi	r24, 0x02	; 2
     f3a:	28 f0       	brcs	.+10     	; 0xf46 <__gesf2+0x56>
     f3c:	c7 01       	movw	r24, r14
     f3e:	b8 01       	movw	r22, r16
     f40:	0e 94 41 0a 	call	0x1482	; 0x1482 <__fpcmp_parts_f>
     f44:	01 c0       	rjmp	.+2      	; 0xf48 <__gesf2+0x58>
     f46:	8f ef       	ldi	r24, 0xFF	; 255
     f48:	68 96       	adiw	r28, 0x18	; 24
     f4a:	e6 e0       	ldi	r30, 0x06	; 6
     f4c:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__epilogue_restores__+0x18>

00000f50 <__lesf2>:
     f50:	a8 e1       	ldi	r26, 0x18	; 24
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	ee ea       	ldi	r30, 0xAE	; 174
     f56:	f7 e0       	ldi	r31, 0x07	; 7
     f58:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <__prologue_saves__+0x18>
     f5c:	69 83       	std	Y+1, r22	; 0x01
     f5e:	7a 83       	std	Y+2, r23	; 0x02
     f60:	8b 83       	std	Y+3, r24	; 0x03
     f62:	9c 83       	std	Y+4, r25	; 0x04
     f64:	2d 83       	std	Y+5, r18	; 0x05
     f66:	3e 83       	std	Y+6, r19	; 0x06
     f68:	4f 83       	std	Y+7, r20	; 0x07
     f6a:	58 87       	std	Y+8, r21	; 0x08
     f6c:	89 e0       	ldi	r24, 0x09	; 9
     f6e:	e8 2e       	mov	r14, r24
     f70:	f1 2c       	mov	r15, r1
     f72:	ec 0e       	add	r14, r28
     f74:	fd 1e       	adc	r15, r29
     f76:	ce 01       	movw	r24, r28
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	b7 01       	movw	r22, r14
     f7c:	0e 94 c9 09 	call	0x1392	; 0x1392 <__unpack_f>
     f80:	8e 01       	movw	r16, r28
     f82:	0f 5e       	subi	r16, 0xEF	; 239
     f84:	1f 4f       	sbci	r17, 0xFF	; 255
     f86:	ce 01       	movw	r24, r28
     f88:	05 96       	adiw	r24, 0x05	; 5
     f8a:	b8 01       	movw	r22, r16
     f8c:	0e 94 c9 09 	call	0x1392	; 0x1392 <__unpack_f>
     f90:	89 85       	ldd	r24, Y+9	; 0x09
     f92:	82 30       	cpi	r24, 0x02	; 2
     f94:	40 f0       	brcs	.+16     	; 0xfa6 <__lesf2+0x56>
     f96:	89 89       	ldd	r24, Y+17	; 0x11
     f98:	82 30       	cpi	r24, 0x02	; 2
     f9a:	28 f0       	brcs	.+10     	; 0xfa6 <__lesf2+0x56>
     f9c:	c7 01       	movw	r24, r14
     f9e:	b8 01       	movw	r22, r16
     fa0:	0e 94 41 0a 	call	0x1482	; 0x1482 <__fpcmp_parts_f>
     fa4:	01 c0       	rjmp	.+2      	; 0xfa8 <__lesf2+0x58>
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	68 96       	adiw	r28, 0x18	; 24
     faa:	e6 e0       	ldi	r30, 0x06	; 6
     fac:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__epilogue_restores__+0x18>

00000fb0 <__fixsfsi>:
     fb0:	ac e0       	ldi	r26, 0x0C	; 12
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	ee ed       	ldi	r30, 0xDE	; 222
     fb6:	f7 e0       	ldi	r31, 0x07	; 7
     fb8:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__prologue_saves__+0x20>
     fbc:	69 83       	std	Y+1, r22	; 0x01
     fbe:	7a 83       	std	Y+2, r23	; 0x02
     fc0:	8b 83       	std	Y+3, r24	; 0x03
     fc2:	9c 83       	std	Y+4, r25	; 0x04
     fc4:	ce 01       	movw	r24, r28
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	be 01       	movw	r22, r28
     fca:	6b 5f       	subi	r22, 0xFB	; 251
     fcc:	7f 4f       	sbci	r23, 0xFF	; 255
     fce:	0e 94 c9 09 	call	0x1392	; 0x1392 <__unpack_f>
     fd2:	8d 81       	ldd	r24, Y+5	; 0x05
     fd4:	82 30       	cpi	r24, 0x02	; 2
     fd6:	61 f1       	breq	.+88     	; 0x1030 <__fixsfsi+0x80>
     fd8:	82 30       	cpi	r24, 0x02	; 2
     fda:	50 f1       	brcs	.+84     	; 0x1030 <__fixsfsi+0x80>
     fdc:	84 30       	cpi	r24, 0x04	; 4
     fde:	21 f4       	brne	.+8      	; 0xfe8 <__fixsfsi+0x38>
     fe0:	8e 81       	ldd	r24, Y+6	; 0x06
     fe2:	88 23       	and	r24, r24
     fe4:	51 f1       	breq	.+84     	; 0x103a <__fixsfsi+0x8a>
     fe6:	2e c0       	rjmp	.+92     	; 0x1044 <__fixsfsi+0x94>
     fe8:	2f 81       	ldd	r18, Y+7	; 0x07
     fea:	38 85       	ldd	r19, Y+8	; 0x08
     fec:	37 fd       	sbrc	r19, 7
     fee:	20 c0       	rjmp	.+64     	; 0x1030 <__fixsfsi+0x80>
     ff0:	6e 81       	ldd	r22, Y+6	; 0x06
     ff2:	2f 31       	cpi	r18, 0x1F	; 31
     ff4:	31 05       	cpc	r19, r1
     ff6:	1c f0       	brlt	.+6      	; 0xffe <__fixsfsi+0x4e>
     ff8:	66 23       	and	r22, r22
     ffa:	f9 f0       	breq	.+62     	; 0x103a <__fixsfsi+0x8a>
     ffc:	23 c0       	rjmp	.+70     	; 0x1044 <__fixsfsi+0x94>
     ffe:	8e e1       	ldi	r24, 0x1E	; 30
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	82 1b       	sub	r24, r18
    1004:	93 0b       	sbc	r25, r19
    1006:	29 85       	ldd	r18, Y+9	; 0x09
    1008:	3a 85       	ldd	r19, Y+10	; 0x0a
    100a:	4b 85       	ldd	r20, Y+11	; 0x0b
    100c:	5c 85       	ldd	r21, Y+12	; 0x0c
    100e:	04 c0       	rjmp	.+8      	; 0x1018 <__fixsfsi+0x68>
    1010:	56 95       	lsr	r21
    1012:	47 95       	ror	r20
    1014:	37 95       	ror	r19
    1016:	27 95       	ror	r18
    1018:	8a 95       	dec	r24
    101a:	d2 f7       	brpl	.-12     	; 0x1010 <__fixsfsi+0x60>
    101c:	66 23       	and	r22, r22
    101e:	b1 f0       	breq	.+44     	; 0x104c <__fixsfsi+0x9c>
    1020:	50 95       	com	r21
    1022:	40 95       	com	r20
    1024:	30 95       	com	r19
    1026:	21 95       	neg	r18
    1028:	3f 4f       	sbci	r19, 0xFF	; 255
    102a:	4f 4f       	sbci	r20, 0xFF	; 255
    102c:	5f 4f       	sbci	r21, 0xFF	; 255
    102e:	0e c0       	rjmp	.+28     	; 0x104c <__fixsfsi+0x9c>
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	50 e0       	ldi	r21, 0x00	; 0
    1038:	09 c0       	rjmp	.+18     	; 0x104c <__fixsfsi+0x9c>
    103a:	2f ef       	ldi	r18, 0xFF	; 255
    103c:	3f ef       	ldi	r19, 0xFF	; 255
    103e:	4f ef       	ldi	r20, 0xFF	; 255
    1040:	5f e7       	ldi	r21, 0x7F	; 127
    1042:	04 c0       	rjmp	.+8      	; 0x104c <__fixsfsi+0x9c>
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	40 e0       	ldi	r20, 0x00	; 0
    104a:	50 e8       	ldi	r21, 0x80	; 128
    104c:	b9 01       	movw	r22, r18
    104e:	ca 01       	movw	r24, r20
    1050:	2c 96       	adiw	r28, 0x0c	; 12
    1052:	e2 e0       	ldi	r30, 0x02	; 2
    1054:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__epilogue_restores__+0x20>

00001058 <__floatunsisf>:
    1058:	a8 e0       	ldi	r26, 0x08	; 8
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e2 e3       	ldi	r30, 0x32	; 50
    105e:	f8 e0       	ldi	r31, 0x08	; 8
    1060:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__prologue_saves__+0x10>
    1064:	7b 01       	movw	r14, r22
    1066:	8c 01       	movw	r16, r24
    1068:	61 15       	cp	r22, r1
    106a:	71 05       	cpc	r23, r1
    106c:	81 05       	cpc	r24, r1
    106e:	91 05       	cpc	r25, r1
    1070:	19 f4       	brne	.+6      	; 0x1078 <__floatunsisf+0x20>
    1072:	82 e0       	ldi	r24, 0x02	; 2
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	60 c0       	rjmp	.+192    	; 0x1138 <__floatunsisf+0xe0>
    1078:	83 e0       	ldi	r24, 0x03	; 3
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	8e e1       	ldi	r24, 0x1E	; 30
    107e:	c8 2e       	mov	r12, r24
    1080:	d1 2c       	mov	r13, r1
    1082:	dc 82       	std	Y+4, r13	; 0x04
    1084:	cb 82       	std	Y+3, r12	; 0x03
    1086:	ed 82       	std	Y+5, r14	; 0x05
    1088:	fe 82       	std	Y+6, r15	; 0x06
    108a:	0f 83       	std	Y+7, r16	; 0x07
    108c:	18 87       	std	Y+8, r17	; 0x08
    108e:	c8 01       	movw	r24, r16
    1090:	b7 01       	movw	r22, r14
    1092:	0e 94 a5 08 	call	0x114a	; 0x114a <__clzsi2>
    1096:	fc 01       	movw	r30, r24
    1098:	31 97       	sbiw	r30, 0x01	; 1
    109a:	f7 ff       	sbrs	r31, 7
    109c:	3b c0       	rjmp	.+118    	; 0x1114 <__floatunsisf+0xbc>
    109e:	22 27       	eor	r18, r18
    10a0:	33 27       	eor	r19, r19
    10a2:	2e 1b       	sub	r18, r30
    10a4:	3f 0b       	sbc	r19, r31
    10a6:	57 01       	movw	r10, r14
    10a8:	68 01       	movw	r12, r16
    10aa:	02 2e       	mov	r0, r18
    10ac:	04 c0       	rjmp	.+8      	; 0x10b6 <__floatunsisf+0x5e>
    10ae:	d6 94       	lsr	r13
    10b0:	c7 94       	ror	r12
    10b2:	b7 94       	ror	r11
    10b4:	a7 94       	ror	r10
    10b6:	0a 94       	dec	r0
    10b8:	d2 f7       	brpl	.-12     	; 0x10ae <__floatunsisf+0x56>
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	a0 e0       	ldi	r26, 0x00	; 0
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	04 c0       	rjmp	.+8      	; 0x10d4 <__floatunsisf+0x7c>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	aa 1f       	adc	r26, r26
    10d2:	bb 1f       	adc	r27, r27
    10d4:	2a 95       	dec	r18
    10d6:	d2 f7       	brpl	.-12     	; 0x10cc <__floatunsisf+0x74>
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	a1 09       	sbc	r26, r1
    10dc:	b1 09       	sbc	r27, r1
    10de:	8e 21       	and	r24, r14
    10e0:	9f 21       	and	r25, r15
    10e2:	a0 23       	and	r26, r16
    10e4:	b1 23       	and	r27, r17
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	a1 05       	cpc	r26, r1
    10ea:	b1 05       	cpc	r27, r1
    10ec:	21 f0       	breq	.+8      	; 0x10f6 <__floatunsisf+0x9e>
    10ee:	41 e0       	ldi	r20, 0x01	; 1
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	4a 29       	or	r20, r10
    10f8:	5b 29       	or	r21, r11
    10fa:	6c 29       	or	r22, r12
    10fc:	7d 29       	or	r23, r13
    10fe:	4d 83       	std	Y+5, r20	; 0x05
    1100:	5e 83       	std	Y+6, r21	; 0x06
    1102:	6f 83       	std	Y+7, r22	; 0x07
    1104:	78 87       	std	Y+8, r23	; 0x08
    1106:	8e e1       	ldi	r24, 0x1E	; 30
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	8e 1b       	sub	r24, r30
    110c:	9f 0b       	sbc	r25, r31
    110e:	9c 83       	std	Y+4, r25	; 0x04
    1110:	8b 83       	std	Y+3, r24	; 0x03
    1112:	12 c0       	rjmp	.+36     	; 0x1138 <__floatunsisf+0xe0>
    1114:	30 97       	sbiw	r30, 0x00	; 0
    1116:	81 f0       	breq	.+32     	; 0x1138 <__floatunsisf+0xe0>
    1118:	0e 2e       	mov	r0, r30
    111a:	04 c0       	rjmp	.+8      	; 0x1124 <__floatunsisf+0xcc>
    111c:	ee 0c       	add	r14, r14
    111e:	ff 1c       	adc	r15, r15
    1120:	00 1f       	adc	r16, r16
    1122:	11 1f       	adc	r17, r17
    1124:	0a 94       	dec	r0
    1126:	d2 f7       	brpl	.-12     	; 0x111c <__floatunsisf+0xc4>
    1128:	ed 82       	std	Y+5, r14	; 0x05
    112a:	fe 82       	std	Y+6, r15	; 0x06
    112c:	0f 83       	std	Y+7, r16	; 0x07
    112e:	18 87       	std	Y+8, r17	; 0x08
    1130:	ce 1a       	sub	r12, r30
    1132:	df 0a       	sbc	r13, r31
    1134:	dc 82       	std	Y+4, r13	; 0x04
    1136:	cb 82       	std	Y+3, r12	; 0x03
    1138:	1a 82       	std	Y+2, r1	; 0x02
    113a:	ce 01       	movw	r24, r28
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__pack_f>
    1142:	28 96       	adiw	r28, 0x08	; 8
    1144:	ea e0       	ldi	r30, 0x0A	; 10
    1146:	0c 94 d2 0a 	jmp	0x15a4	; 0x15a4 <__epilogue_restores__+0x10>

0000114a <__clzsi2>:
    114a:	ef 92       	push	r14
    114c:	ff 92       	push	r15
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	7b 01       	movw	r14, r22
    1154:	8c 01       	movw	r16, r24
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	e8 16       	cp	r14, r24
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	f8 06       	cpc	r15, r24
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	08 07       	cpc	r16, r24
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	18 07       	cpc	r17, r24
    1166:	88 f4       	brcc	.+34     	; 0x118a <__clzsi2+0x40>
    1168:	8f ef       	ldi	r24, 0xFF	; 255
    116a:	e8 16       	cp	r14, r24
    116c:	f1 04       	cpc	r15, r1
    116e:	01 05       	cpc	r16, r1
    1170:	11 05       	cpc	r17, r1
    1172:	31 f0       	breq	.+12     	; 0x1180 <__clzsi2+0x36>
    1174:	28 f0       	brcs	.+10     	; 0x1180 <__clzsi2+0x36>
    1176:	88 e0       	ldi	r24, 0x08	; 8
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	a0 e0       	ldi	r26, 0x00	; 0
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	17 c0       	rjmp	.+46     	; 0x11ae <__clzsi2+0x64>
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	a0 e0       	ldi	r26, 0x00	; 0
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	12 c0       	rjmp	.+36     	; 0x11ae <__clzsi2+0x64>
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	e8 16       	cp	r14, r24
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	f8 06       	cpc	r15, r24
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	08 07       	cpc	r16, r24
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	18 07       	cpc	r17, r24
    119a:	28 f0       	brcs	.+10     	; 0x11a6 <__clzsi2+0x5c>
    119c:	88 e1       	ldi	r24, 0x18	; 24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	a0 e0       	ldi	r26, 0x00	; 0
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <__clzsi2+0x64>
    11a6:	80 e1       	ldi	r24, 0x10	; 16
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	a0 e0       	ldi	r26, 0x00	; 0
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	20 e2       	ldi	r18, 0x20	; 32
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e0       	ldi	r20, 0x00	; 0
    11b4:	50 e0       	ldi	r21, 0x00	; 0
    11b6:	28 1b       	sub	r18, r24
    11b8:	39 0b       	sbc	r19, r25
    11ba:	4a 0b       	sbc	r20, r26
    11bc:	5b 0b       	sbc	r21, r27
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <__clzsi2+0x7e>
    11c0:	16 95       	lsr	r17
    11c2:	07 95       	ror	r16
    11c4:	f7 94       	ror	r15
    11c6:	e7 94       	ror	r14
    11c8:	8a 95       	dec	r24
    11ca:	d2 f7       	brpl	.-12     	; 0x11c0 <__clzsi2+0x76>
    11cc:	f7 01       	movw	r30, r14
    11ce:	e8 59       	subi	r30, 0x98	; 152
    11d0:	ff 4f       	sbci	r31, 0xFF	; 255
    11d2:	80 81       	ld	r24, Z
    11d4:	28 1b       	sub	r18, r24
    11d6:	31 09       	sbc	r19, r1
    11d8:	41 09       	sbc	r20, r1
    11da:	51 09       	sbc	r21, r1
    11dc:	c9 01       	movw	r24, r18
    11de:	1f 91       	pop	r17
    11e0:	0f 91       	pop	r16
    11e2:	ff 90       	pop	r15
    11e4:	ef 90       	pop	r14
    11e6:	08 95       	ret

000011e8 <__pack_f>:
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	fc 01       	movw	r30, r24
    11f4:	e4 80       	ldd	r14, Z+4	; 0x04
    11f6:	f5 80       	ldd	r15, Z+5	; 0x05
    11f8:	06 81       	ldd	r16, Z+6	; 0x06
    11fa:	17 81       	ldd	r17, Z+7	; 0x07
    11fc:	d1 80       	ldd	r13, Z+1	; 0x01
    11fe:	80 81       	ld	r24, Z
    1200:	82 30       	cpi	r24, 0x02	; 2
    1202:	48 f4       	brcc	.+18     	; 0x1216 <__pack_f+0x2e>
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	a0 e1       	ldi	r26, 0x10	; 16
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e8 2a       	or	r14, r24
    120e:	f9 2a       	or	r15, r25
    1210:	0a 2b       	or	r16, r26
    1212:	1b 2b       	or	r17, r27
    1214:	a5 c0       	rjmp	.+330    	; 0x1360 <__pack_f+0x178>
    1216:	84 30       	cpi	r24, 0x04	; 4
    1218:	09 f4       	brne	.+2      	; 0x121c <__pack_f+0x34>
    121a:	9f c0       	rjmp	.+318    	; 0x135a <__pack_f+0x172>
    121c:	82 30       	cpi	r24, 0x02	; 2
    121e:	21 f4       	brne	.+8      	; 0x1228 <__pack_f+0x40>
    1220:	ee 24       	eor	r14, r14
    1222:	ff 24       	eor	r15, r15
    1224:	87 01       	movw	r16, r14
    1226:	05 c0       	rjmp	.+10     	; 0x1232 <__pack_f+0x4a>
    1228:	e1 14       	cp	r14, r1
    122a:	f1 04       	cpc	r15, r1
    122c:	01 05       	cpc	r16, r1
    122e:	11 05       	cpc	r17, r1
    1230:	19 f4       	brne	.+6      	; 0x1238 <__pack_f+0x50>
    1232:	e0 e0       	ldi	r30, 0x00	; 0
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	96 c0       	rjmp	.+300    	; 0x1364 <__pack_f+0x17c>
    1238:	62 81       	ldd	r22, Z+2	; 0x02
    123a:	73 81       	ldd	r23, Z+3	; 0x03
    123c:	9f ef       	ldi	r25, 0xFF	; 255
    123e:	62 38       	cpi	r22, 0x82	; 130
    1240:	79 07       	cpc	r23, r25
    1242:	0c f0       	brlt	.+2      	; 0x1246 <__pack_f+0x5e>
    1244:	5b c0       	rjmp	.+182    	; 0x12fc <__pack_f+0x114>
    1246:	22 e8       	ldi	r18, 0x82	; 130
    1248:	3f ef       	ldi	r19, 0xFF	; 255
    124a:	26 1b       	sub	r18, r22
    124c:	37 0b       	sbc	r19, r23
    124e:	2a 31       	cpi	r18, 0x1A	; 26
    1250:	31 05       	cpc	r19, r1
    1252:	2c f0       	brlt	.+10     	; 0x125e <__pack_f+0x76>
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e0       	ldi	r20, 0x00	; 0
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	2a c0       	rjmp	.+84     	; 0x12b2 <__pack_f+0xca>
    125e:	b8 01       	movw	r22, r16
    1260:	a7 01       	movw	r20, r14
    1262:	02 2e       	mov	r0, r18
    1264:	04 c0       	rjmp	.+8      	; 0x126e <__pack_f+0x86>
    1266:	76 95       	lsr	r23
    1268:	67 95       	ror	r22
    126a:	57 95       	ror	r21
    126c:	47 95       	ror	r20
    126e:	0a 94       	dec	r0
    1270:	d2 f7       	brpl	.-12     	; 0x1266 <__pack_f+0x7e>
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	a0 e0       	ldi	r26, 0x00	; 0
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <__pack_f+0x9c>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	aa 1f       	adc	r26, r26
    1282:	bb 1f       	adc	r27, r27
    1284:	2a 95       	dec	r18
    1286:	d2 f7       	brpl	.-12     	; 0x127c <__pack_f+0x94>
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	a1 09       	sbc	r26, r1
    128c:	b1 09       	sbc	r27, r1
    128e:	8e 21       	and	r24, r14
    1290:	9f 21       	and	r25, r15
    1292:	a0 23       	and	r26, r16
    1294:	b1 23       	and	r27, r17
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	a1 05       	cpc	r26, r1
    129a:	b1 05       	cpc	r27, r1
    129c:	21 f0       	breq	.+8      	; 0x12a6 <__pack_f+0xbe>
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	a0 e0       	ldi	r26, 0x00	; 0
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	9a 01       	movw	r18, r20
    12a8:	ab 01       	movw	r20, r22
    12aa:	28 2b       	or	r18, r24
    12ac:	39 2b       	or	r19, r25
    12ae:	4a 2b       	or	r20, r26
    12b0:	5b 2b       	or	r21, r27
    12b2:	da 01       	movw	r26, r20
    12b4:	c9 01       	movw	r24, r18
    12b6:	8f 77       	andi	r24, 0x7F	; 127
    12b8:	90 70       	andi	r25, 0x00	; 0
    12ba:	a0 70       	andi	r26, 0x00	; 0
    12bc:	b0 70       	andi	r27, 0x00	; 0
    12be:	80 34       	cpi	r24, 0x40	; 64
    12c0:	91 05       	cpc	r25, r1
    12c2:	a1 05       	cpc	r26, r1
    12c4:	b1 05       	cpc	r27, r1
    12c6:	39 f4       	brne	.+14     	; 0x12d6 <__pack_f+0xee>
    12c8:	27 ff       	sbrs	r18, 7
    12ca:	09 c0       	rjmp	.+18     	; 0x12de <__pack_f+0xf6>
    12cc:	20 5c       	subi	r18, 0xC0	; 192
    12ce:	3f 4f       	sbci	r19, 0xFF	; 255
    12d0:	4f 4f       	sbci	r20, 0xFF	; 255
    12d2:	5f 4f       	sbci	r21, 0xFF	; 255
    12d4:	04 c0       	rjmp	.+8      	; 0x12de <__pack_f+0xf6>
    12d6:	21 5c       	subi	r18, 0xC1	; 193
    12d8:	3f 4f       	sbci	r19, 0xFF	; 255
    12da:	4f 4f       	sbci	r20, 0xFF	; 255
    12dc:	5f 4f       	sbci	r21, 0xFF	; 255
    12de:	e0 e0       	ldi	r30, 0x00	; 0
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	20 30       	cpi	r18, 0x00	; 0
    12e4:	a0 e0       	ldi	r26, 0x00	; 0
    12e6:	3a 07       	cpc	r19, r26
    12e8:	a0 e0       	ldi	r26, 0x00	; 0
    12ea:	4a 07       	cpc	r20, r26
    12ec:	a0 e4       	ldi	r26, 0x40	; 64
    12ee:	5a 07       	cpc	r21, r26
    12f0:	10 f0       	brcs	.+4      	; 0x12f6 <__pack_f+0x10e>
    12f2:	e1 e0       	ldi	r30, 0x01	; 1
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	79 01       	movw	r14, r18
    12f8:	8a 01       	movw	r16, r20
    12fa:	27 c0       	rjmp	.+78     	; 0x134a <__pack_f+0x162>
    12fc:	60 38       	cpi	r22, 0x80	; 128
    12fe:	71 05       	cpc	r23, r1
    1300:	64 f5       	brge	.+88     	; 0x135a <__pack_f+0x172>
    1302:	fb 01       	movw	r30, r22
    1304:	e1 58       	subi	r30, 0x81	; 129
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	d8 01       	movw	r26, r16
    130a:	c7 01       	movw	r24, r14
    130c:	8f 77       	andi	r24, 0x7F	; 127
    130e:	90 70       	andi	r25, 0x00	; 0
    1310:	a0 70       	andi	r26, 0x00	; 0
    1312:	b0 70       	andi	r27, 0x00	; 0
    1314:	80 34       	cpi	r24, 0x40	; 64
    1316:	91 05       	cpc	r25, r1
    1318:	a1 05       	cpc	r26, r1
    131a:	b1 05       	cpc	r27, r1
    131c:	39 f4       	brne	.+14     	; 0x132c <__pack_f+0x144>
    131e:	e7 fe       	sbrs	r14, 7
    1320:	0d c0       	rjmp	.+26     	; 0x133c <__pack_f+0x154>
    1322:	80 e4       	ldi	r24, 0x40	; 64
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	a0 e0       	ldi	r26, 0x00	; 0
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	04 c0       	rjmp	.+8      	; 0x1334 <__pack_f+0x14c>
    132c:	8f e3       	ldi	r24, 0x3F	; 63
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	a0 e0       	ldi	r26, 0x00	; 0
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e8 0e       	add	r14, r24
    1336:	f9 1e       	adc	r15, r25
    1338:	0a 1f       	adc	r16, r26
    133a:	1b 1f       	adc	r17, r27
    133c:	17 ff       	sbrs	r17, 7
    133e:	05 c0       	rjmp	.+10     	; 0x134a <__pack_f+0x162>
    1340:	16 95       	lsr	r17
    1342:	07 95       	ror	r16
    1344:	f7 94       	ror	r15
    1346:	e7 94       	ror	r14
    1348:	31 96       	adiw	r30, 0x01	; 1
    134a:	87 e0       	ldi	r24, 0x07	; 7
    134c:	16 95       	lsr	r17
    134e:	07 95       	ror	r16
    1350:	f7 94       	ror	r15
    1352:	e7 94       	ror	r14
    1354:	8a 95       	dec	r24
    1356:	d1 f7       	brne	.-12     	; 0x134c <__pack_f+0x164>
    1358:	05 c0       	rjmp	.+10     	; 0x1364 <__pack_f+0x17c>
    135a:	ee 24       	eor	r14, r14
    135c:	ff 24       	eor	r15, r15
    135e:	87 01       	movw	r16, r14
    1360:	ef ef       	ldi	r30, 0xFF	; 255
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	6e 2f       	mov	r22, r30
    1366:	67 95       	ror	r22
    1368:	66 27       	eor	r22, r22
    136a:	67 95       	ror	r22
    136c:	90 2f       	mov	r25, r16
    136e:	9f 77       	andi	r25, 0x7F	; 127
    1370:	d7 94       	ror	r13
    1372:	dd 24       	eor	r13, r13
    1374:	d7 94       	ror	r13
    1376:	8e 2f       	mov	r24, r30
    1378:	86 95       	lsr	r24
    137a:	49 2f       	mov	r20, r25
    137c:	46 2b       	or	r20, r22
    137e:	58 2f       	mov	r21, r24
    1380:	5d 29       	or	r21, r13
    1382:	b7 01       	movw	r22, r14
    1384:	ca 01       	movw	r24, r20
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	ff 90       	pop	r15
    138c:	ef 90       	pop	r14
    138e:	df 90       	pop	r13
    1390:	08 95       	ret

00001392 <__unpack_f>:
    1392:	fc 01       	movw	r30, r24
    1394:	db 01       	movw	r26, r22
    1396:	40 81       	ld	r20, Z
    1398:	51 81       	ldd	r21, Z+1	; 0x01
    139a:	22 81       	ldd	r18, Z+2	; 0x02
    139c:	62 2f       	mov	r22, r18
    139e:	6f 77       	andi	r22, 0x7F	; 127
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	22 1f       	adc	r18, r18
    13a4:	22 27       	eor	r18, r18
    13a6:	22 1f       	adc	r18, r18
    13a8:	93 81       	ldd	r25, Z+3	; 0x03
    13aa:	89 2f       	mov	r24, r25
    13ac:	88 0f       	add	r24, r24
    13ae:	82 2b       	or	r24, r18
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	99 1f       	adc	r25, r25
    13b6:	99 27       	eor	r25, r25
    13b8:	99 1f       	adc	r25, r25
    13ba:	11 96       	adiw	r26, 0x01	; 1
    13bc:	9c 93       	st	X, r25
    13be:	11 97       	sbiw	r26, 0x01	; 1
    13c0:	21 15       	cp	r18, r1
    13c2:	31 05       	cpc	r19, r1
    13c4:	a9 f5       	brne	.+106    	; 0x1430 <__unpack_f+0x9e>
    13c6:	41 15       	cp	r20, r1
    13c8:	51 05       	cpc	r21, r1
    13ca:	61 05       	cpc	r22, r1
    13cc:	71 05       	cpc	r23, r1
    13ce:	11 f4       	brne	.+4      	; 0x13d4 <__unpack_f+0x42>
    13d0:	82 e0       	ldi	r24, 0x02	; 2
    13d2:	37 c0       	rjmp	.+110    	; 0x1442 <__unpack_f+0xb0>
    13d4:	82 e8       	ldi	r24, 0x82	; 130
    13d6:	9f ef       	ldi	r25, 0xFF	; 255
    13d8:	13 96       	adiw	r26, 0x03	; 3
    13da:	9c 93       	st	X, r25
    13dc:	8e 93       	st	-X, r24
    13de:	12 97       	sbiw	r26, 0x02	; 2
    13e0:	9a 01       	movw	r18, r20
    13e2:	ab 01       	movw	r20, r22
    13e4:	67 e0       	ldi	r22, 0x07	; 7
    13e6:	22 0f       	add	r18, r18
    13e8:	33 1f       	adc	r19, r19
    13ea:	44 1f       	adc	r20, r20
    13ec:	55 1f       	adc	r21, r21
    13ee:	6a 95       	dec	r22
    13f0:	d1 f7       	brne	.-12     	; 0x13e6 <__unpack_f+0x54>
    13f2:	83 e0       	ldi	r24, 0x03	; 3
    13f4:	8c 93       	st	X, r24
    13f6:	0d c0       	rjmp	.+26     	; 0x1412 <__unpack_f+0x80>
    13f8:	22 0f       	add	r18, r18
    13fa:	33 1f       	adc	r19, r19
    13fc:	44 1f       	adc	r20, r20
    13fe:	55 1f       	adc	r21, r21
    1400:	12 96       	adiw	r26, 0x02	; 2
    1402:	8d 91       	ld	r24, X+
    1404:	9c 91       	ld	r25, X
    1406:	13 97       	sbiw	r26, 0x03	; 3
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	13 96       	adiw	r26, 0x03	; 3
    140c:	9c 93       	st	X, r25
    140e:	8e 93       	st	-X, r24
    1410:	12 97       	sbiw	r26, 0x02	; 2
    1412:	20 30       	cpi	r18, 0x00	; 0
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	38 07       	cpc	r19, r24
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	48 07       	cpc	r20, r24
    141c:	80 e4       	ldi	r24, 0x40	; 64
    141e:	58 07       	cpc	r21, r24
    1420:	58 f3       	brcs	.-42     	; 0x13f8 <__unpack_f+0x66>
    1422:	14 96       	adiw	r26, 0x04	; 4
    1424:	2d 93       	st	X+, r18
    1426:	3d 93       	st	X+, r19
    1428:	4d 93       	st	X+, r20
    142a:	5c 93       	st	X, r21
    142c:	17 97       	sbiw	r26, 0x07	; 7
    142e:	08 95       	ret
    1430:	2f 3f       	cpi	r18, 0xFF	; 255
    1432:	31 05       	cpc	r19, r1
    1434:	79 f4       	brne	.+30     	; 0x1454 <__unpack_f+0xc2>
    1436:	41 15       	cp	r20, r1
    1438:	51 05       	cpc	r21, r1
    143a:	61 05       	cpc	r22, r1
    143c:	71 05       	cpc	r23, r1
    143e:	19 f4       	brne	.+6      	; 0x1446 <__unpack_f+0xb4>
    1440:	84 e0       	ldi	r24, 0x04	; 4
    1442:	8c 93       	st	X, r24
    1444:	08 95       	ret
    1446:	64 ff       	sbrs	r22, 4
    1448:	03 c0       	rjmp	.+6      	; 0x1450 <__unpack_f+0xbe>
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	8c 93       	st	X, r24
    144e:	12 c0       	rjmp	.+36     	; 0x1474 <__unpack_f+0xe2>
    1450:	1c 92       	st	X, r1
    1452:	10 c0       	rjmp	.+32     	; 0x1474 <__unpack_f+0xe2>
    1454:	2f 57       	subi	r18, 0x7F	; 127
    1456:	30 40       	sbci	r19, 0x00	; 0
    1458:	13 96       	adiw	r26, 0x03	; 3
    145a:	3c 93       	st	X, r19
    145c:	2e 93       	st	-X, r18
    145e:	12 97       	sbiw	r26, 0x02	; 2
    1460:	83 e0       	ldi	r24, 0x03	; 3
    1462:	8c 93       	st	X, r24
    1464:	87 e0       	ldi	r24, 0x07	; 7
    1466:	44 0f       	add	r20, r20
    1468:	55 1f       	adc	r21, r21
    146a:	66 1f       	adc	r22, r22
    146c:	77 1f       	adc	r23, r23
    146e:	8a 95       	dec	r24
    1470:	d1 f7       	brne	.-12     	; 0x1466 <__unpack_f+0xd4>
    1472:	70 64       	ori	r23, 0x40	; 64
    1474:	14 96       	adiw	r26, 0x04	; 4
    1476:	4d 93       	st	X+, r20
    1478:	5d 93       	st	X+, r21
    147a:	6d 93       	st	X+, r22
    147c:	7c 93       	st	X, r23
    147e:	17 97       	sbiw	r26, 0x07	; 7
    1480:	08 95       	ret

00001482 <__fpcmp_parts_f>:
    1482:	1f 93       	push	r17
    1484:	dc 01       	movw	r26, r24
    1486:	fb 01       	movw	r30, r22
    1488:	9c 91       	ld	r25, X
    148a:	92 30       	cpi	r25, 0x02	; 2
    148c:	08 f4       	brcc	.+2      	; 0x1490 <__fpcmp_parts_f+0xe>
    148e:	47 c0       	rjmp	.+142    	; 0x151e <__fpcmp_parts_f+0x9c>
    1490:	80 81       	ld	r24, Z
    1492:	82 30       	cpi	r24, 0x02	; 2
    1494:	08 f4       	brcc	.+2      	; 0x1498 <__fpcmp_parts_f+0x16>
    1496:	43 c0       	rjmp	.+134    	; 0x151e <__fpcmp_parts_f+0x9c>
    1498:	94 30       	cpi	r25, 0x04	; 4
    149a:	51 f4       	brne	.+20     	; 0x14b0 <__fpcmp_parts_f+0x2e>
    149c:	11 96       	adiw	r26, 0x01	; 1
    149e:	1c 91       	ld	r17, X
    14a0:	84 30       	cpi	r24, 0x04	; 4
    14a2:	99 f5       	brne	.+102    	; 0x150a <__fpcmp_parts_f+0x88>
    14a4:	81 81       	ldd	r24, Z+1	; 0x01
    14a6:	68 2f       	mov	r22, r24
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	61 1b       	sub	r22, r17
    14ac:	71 09       	sbc	r23, r1
    14ae:	3f c0       	rjmp	.+126    	; 0x152e <__fpcmp_parts_f+0xac>
    14b0:	84 30       	cpi	r24, 0x04	; 4
    14b2:	21 f0       	breq	.+8      	; 0x14bc <__fpcmp_parts_f+0x3a>
    14b4:	92 30       	cpi	r25, 0x02	; 2
    14b6:	31 f4       	brne	.+12     	; 0x14c4 <__fpcmp_parts_f+0x42>
    14b8:	82 30       	cpi	r24, 0x02	; 2
    14ba:	b9 f1       	breq	.+110    	; 0x152a <__fpcmp_parts_f+0xa8>
    14bc:	81 81       	ldd	r24, Z+1	; 0x01
    14be:	88 23       	and	r24, r24
    14c0:	89 f1       	breq	.+98     	; 0x1524 <__fpcmp_parts_f+0xa2>
    14c2:	2d c0       	rjmp	.+90     	; 0x151e <__fpcmp_parts_f+0x9c>
    14c4:	11 96       	adiw	r26, 0x01	; 1
    14c6:	1c 91       	ld	r17, X
    14c8:	11 97       	sbiw	r26, 0x01	; 1
    14ca:	82 30       	cpi	r24, 0x02	; 2
    14cc:	f1 f0       	breq	.+60     	; 0x150a <__fpcmp_parts_f+0x88>
    14ce:	81 81       	ldd	r24, Z+1	; 0x01
    14d0:	18 17       	cp	r17, r24
    14d2:	d9 f4       	brne	.+54     	; 0x150a <__fpcmp_parts_f+0x88>
    14d4:	12 96       	adiw	r26, 0x02	; 2
    14d6:	2d 91       	ld	r18, X+
    14d8:	3c 91       	ld	r19, X
    14da:	13 97       	sbiw	r26, 0x03	; 3
    14dc:	82 81       	ldd	r24, Z+2	; 0x02
    14de:	93 81       	ldd	r25, Z+3	; 0x03
    14e0:	82 17       	cp	r24, r18
    14e2:	93 07       	cpc	r25, r19
    14e4:	94 f0       	brlt	.+36     	; 0x150a <__fpcmp_parts_f+0x88>
    14e6:	28 17       	cp	r18, r24
    14e8:	39 07       	cpc	r19, r25
    14ea:	bc f0       	brlt	.+46     	; 0x151a <__fpcmp_parts_f+0x98>
    14ec:	14 96       	adiw	r26, 0x04	; 4
    14ee:	8d 91       	ld	r24, X+
    14f0:	9d 91       	ld	r25, X+
    14f2:	0d 90       	ld	r0, X+
    14f4:	bc 91       	ld	r27, X
    14f6:	a0 2d       	mov	r26, r0
    14f8:	24 81       	ldd	r18, Z+4	; 0x04
    14fa:	35 81       	ldd	r19, Z+5	; 0x05
    14fc:	46 81       	ldd	r20, Z+6	; 0x06
    14fe:	57 81       	ldd	r21, Z+7	; 0x07
    1500:	28 17       	cp	r18, r24
    1502:	39 07       	cpc	r19, r25
    1504:	4a 07       	cpc	r20, r26
    1506:	5b 07       	cpc	r21, r27
    1508:	18 f4       	brcc	.+6      	; 0x1510 <__fpcmp_parts_f+0x8e>
    150a:	11 23       	and	r17, r17
    150c:	41 f0       	breq	.+16     	; 0x151e <__fpcmp_parts_f+0x9c>
    150e:	0a c0       	rjmp	.+20     	; 0x1524 <__fpcmp_parts_f+0xa2>
    1510:	82 17       	cp	r24, r18
    1512:	93 07       	cpc	r25, r19
    1514:	a4 07       	cpc	r26, r20
    1516:	b5 07       	cpc	r27, r21
    1518:	40 f4       	brcc	.+16     	; 0x152a <__fpcmp_parts_f+0xa8>
    151a:	11 23       	and	r17, r17
    151c:	19 f0       	breq	.+6      	; 0x1524 <__fpcmp_parts_f+0xa2>
    151e:	61 e0       	ldi	r22, 0x01	; 1
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	05 c0       	rjmp	.+10     	; 0x152e <__fpcmp_parts_f+0xac>
    1524:	6f ef       	ldi	r22, 0xFF	; 255
    1526:	7f ef       	ldi	r23, 0xFF	; 255
    1528:	02 c0       	rjmp	.+4      	; 0x152e <__fpcmp_parts_f+0xac>
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	cb 01       	movw	r24, r22
    1530:	1f 91       	pop	r17
    1532:	08 95       	ret

00001534 <__udivmodhi4>:
    1534:	aa 1b       	sub	r26, r26
    1536:	bb 1b       	sub	r27, r27
    1538:	51 e1       	ldi	r21, 0x11	; 17
    153a:	07 c0       	rjmp	.+14     	; 0x154a <__udivmodhi4_ep>

0000153c <__udivmodhi4_loop>:
    153c:	aa 1f       	adc	r26, r26
    153e:	bb 1f       	adc	r27, r27
    1540:	a6 17       	cp	r26, r22
    1542:	b7 07       	cpc	r27, r23
    1544:	10 f0       	brcs	.+4      	; 0x154a <__udivmodhi4_ep>
    1546:	a6 1b       	sub	r26, r22
    1548:	b7 0b       	sbc	r27, r23

0000154a <__udivmodhi4_ep>:
    154a:	88 1f       	adc	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	5a 95       	dec	r21
    1550:	a9 f7       	brne	.-22     	; 0x153c <__udivmodhi4_loop>
    1552:	80 95       	com	r24
    1554:	90 95       	com	r25
    1556:	bc 01       	movw	r22, r24
    1558:	cd 01       	movw	r24, r26
    155a:	08 95       	ret

0000155c <__prologue_saves__>:
    155c:	2f 92       	push	r2
    155e:	3f 92       	push	r3
    1560:	4f 92       	push	r4
    1562:	5f 92       	push	r5
    1564:	6f 92       	push	r6
    1566:	7f 92       	push	r7
    1568:	8f 92       	push	r8
    156a:	9f 92       	push	r9
    156c:	af 92       	push	r10
    156e:	bf 92       	push	r11
    1570:	cf 92       	push	r12
    1572:	df 92       	push	r13
    1574:	ef 92       	push	r14
    1576:	ff 92       	push	r15
    1578:	0f 93       	push	r16
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	ca 1b       	sub	r28, r26
    1586:	db 0b       	sbc	r29, r27
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	09 94       	ijmp

00001594 <__epilogue_restores__>:
    1594:	2a 88       	ldd	r2, Y+18	; 0x12
    1596:	39 88       	ldd	r3, Y+17	; 0x11
    1598:	48 88       	ldd	r4, Y+16	; 0x10
    159a:	5f 84       	ldd	r5, Y+15	; 0x0f
    159c:	6e 84       	ldd	r6, Y+14	; 0x0e
    159e:	7d 84       	ldd	r7, Y+13	; 0x0d
    15a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    15a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    15a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    15a6:	b9 84       	ldd	r11, Y+9	; 0x09
    15a8:	c8 84       	ldd	r12, Y+8	; 0x08
    15aa:	df 80       	ldd	r13, Y+7	; 0x07
    15ac:	ee 80       	ldd	r14, Y+6	; 0x06
    15ae:	fd 80       	ldd	r15, Y+5	; 0x05
    15b0:	0c 81       	ldd	r16, Y+4	; 0x04
    15b2:	1b 81       	ldd	r17, Y+3	; 0x03
    15b4:	aa 81       	ldd	r26, Y+2	; 0x02
    15b6:	b9 81       	ldd	r27, Y+1	; 0x01
    15b8:	ce 0f       	add	r28, r30
    15ba:	d1 1d       	adc	r29, r1
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	ed 01       	movw	r28, r26
    15c8:	08 95       	ret

000015ca <_exit>:
    15ca:	f8 94       	cli

000015cc <__stop_program>:
    15cc:	ff cf       	rjmp	.-2      	; 0x15cc <__stop_program>
