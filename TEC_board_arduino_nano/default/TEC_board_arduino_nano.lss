
TEC_board_arduino_nano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800100  0000183c  000018d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000183c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  00800208  00001944  000019d8  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  000019d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  000019db  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000215  00000000  00000000  000019fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d3e  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000366  00000000  00000000  0000294e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf4  00000000  00000000  00002cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000038a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000308  00000000  00000000  00003a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f7  00000000  00000000  00003d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  00004427  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e3       	ldi	r30, 0x3C	; 60
      7c:	f8 e1       	ldi	r31, 0x18	; 24
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a8 30       	cpi	r26, 0x08	; 8
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a8 e0       	ldi	r26, 0x08	; 8
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 33       	cpi	r26, 0x33	; 51
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 1c 03 	call	0x638	; 0x638 <main>
      9e:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
      a6:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
      a8:	f9 99       	sbic	0x1f, 1	; 31
      aa:	fe cf       	rjmp	.-4      	; 0xa8 <eeprom_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
      ac:	32 bd       	out	0x22, r19	; 34
      ae:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
      b0:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
      b2:	80 b5       	in	r24, 0x20	; 32
}
      b4:	08 95       	ret

000000b6 <eeprom_write_byte>:

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
      b6:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
      b8:	f9 99       	sbic	0x1f, 1	; 31
      ba:	fe cf       	rjmp	.-4      	; 0xb8 <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
      bc:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
      be:	32 bd       	out	0x22, r19	; 34
      c0:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
      c2:	60 bd       	out	0x20, r22	; 32

    __asm__ __volatile__ (
      c4:	0f b6       	in	r0, 0x3f	; 63
      c6:	f8 94       	cli
      c8:	fa 9a       	sbi	0x1f, 2	; 31
      ca:	f9 9a       	sbi	0x1f, 1	; 31
      cc:	0f be       	out	0x3f, r0	; 63
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
}
      ce:	08 95       	ret

000000d0 <uartInit>:

//------------------------------------------------------------------------------------
//UART

void uartInit(void)
{
      d0:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0H = (BAUD_PRESCALE >> 8);		// Init UART baudrate
	UBRR0L = BAUD_PRESCALE;
      d4:	87 e6       	ldi	r24, 0x67	; 103
      d6:	80 93 c4 00 	sts	0x00C4, r24

	UCSR0B |= (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);   // Turn on the transmission and reception circuitry
      da:	e1 ec       	ldi	r30, 0xC1	; 193
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	88 69       	ori	r24, 0x98	; 152
      e2:	80 83       	st	Z, r24
    UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01); // Use 8-bit character sizes
      e4:	e2 ec       	ldi	r30, 0xC2	; 194
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	86 60       	ori	r24, 0x06	; 6
      ec:	80 83       	st	Z, r24

	return;
}
      ee:	08 95       	ret

000000f0 <uartTransmitByte>:

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
      f0:	98 2f       	mov	r25, r24
	while ( !( UCSR0A & (1<<UDRE0)) );
      f2:	80 91 c0 00 	lds	r24, 0x00C0
      f6:	85 ff       	sbrs	r24, 5
      f8:	fc cf       	rjmp	.-8      	; 0xf2 <uartTransmitByte+0x2>
	UDR0 = data;
      fa:	90 93 c6 00 	sts	0x00C6, r25
	return;
}
      fe:	08 95       	ret

00000100 <uartReceiveByte>:

//Receive byte thought UART
unsigned char uartReceiveByte (void)
{
     100:	80 91 c0 00 	lds	r24, 0x00C0
     104:	87 ff       	sbrs	r24, 7
     106:	fc cf       	rjmp	.-8      	; 0x100 <uartReceiveByte>

	while ( !(UCSR0A & (1<<RXC0)) )
	;
	return UDR0;
     108:	80 91 c6 00 	lds	r24, 0x00C6
}
     10c:	08 95       	ret

0000010e <uartTransmitMessage>:

//Transmit string to UART
void uartTransmitMessage(char* msg)
{ unsigned char i;
     10e:	ac 01       	movw	r20, r24
     110:	20 e0       	ldi	r18, 0x00	; 0
     112:	07 c0       	rjmp	.+14     	; 0x122 <uartTransmitMessage+0x14>
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSR0A & (1<<UDRE0)) );
     114:	80 91 c0 00 	lds	r24, 0x00C0
     118:	85 ff       	sbrs	r24, 5
     11a:	fc cf       	rjmp	.-8      	; 0x114 <uartTransmitMessage+0x6>
	UDR0 = data;
     11c:	e0 93 c6 00 	sts	0x00C6, r30
	i=0;

	while ((i<256)&(msg[i]!=0x00) )
	{
		uartTransmitByte(msg[i]);
		i++;
     120:	2f 5f       	subi	r18, 0xFF	; 255
//Transmit string to UART
void uartTransmitMessage(char* msg)
{ unsigned char i;
	i=0;

	while ((i<256)&(msg[i]!=0x00) )
     122:	fa 01       	movw	r30, r20
     124:	e2 0f       	add	r30, r18
     126:	f1 1d       	adc	r31, r1
     128:	e0 81       	ld	r30, Z
     12a:	ee 23       	and	r30, r30
     12c:	99 f7       	brne	.-26     	; 0x114 <uartTransmitMessage+0x6>
	{
		uartTransmitByte(msg[i]);
		i++;
	}
	return;
}
     12e:	08 95       	ret

00000130 <initPWM>:

//------------------------------------------------------------------------------------
//PWM

void initPWM (void)
{
     130:	5d 98       	cbi	0x0b, 5	; 11
	TEC_PORT&=~(1<<TEC_PIN);
	TEC_DDR|=(1<<TEC_PIN);
     132:	55 9a       	sbi	0x0a, 5	; 10

	TCCR1A|=(1<<WGM10);
     134:	e0 e8       	ldi	r30, 0x80	; 128
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	81 60       	ori	r24, 0x01	; 1
     13c:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM12)|(1<<CS10);
     13e:	e1 e8       	ldi	r30, 0x81	; 129
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	89 60       	ori	r24, 0x09	; 9
     146:	80 83       	st	Z, r24

	OCR1AL=0x00;
     148:	10 92 88 00 	sts	0x0088, r1
	OCR1BL=0x00;
     14c:	10 92 8a 00 	sts	0x008A, r1
	return;
}
     150:	08 95       	ret

00000152 <offPWM>:

void offPWM()
{
     152:	e0 e8       	ldi	r30, 0x80	; 128
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	80 81       	ld	r24, Z
     158:	8f 77       	andi	r24, 0x7F	; 127
     15a:	80 83       	st	Z, r24
	TCCR1A&=~(1<<COM1A1);
	return;
}
     15c:	08 95       	ret

0000015e <onPWM>:

void onPWM()
{
     15e:	e0 e8       	ldi	r30, 0x80	; 128
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	80 68       	ori	r24, 0x80	; 128
     166:	80 83       	st	Z, r24
	TCCR1A|=(1<<COM1A1);
	return;
}
     168:	08 95       	ret

0000016a <setPWM>:

void setPWM (uint8_t data)
{
     16a:	80 93 88 00 	sts	0x0088, r24
	OCR1AL=data;
	if (data==0) offPWM();
     16e:	88 23       	and	r24, r24
     170:	21 f4       	brne	.+8      	; 0x17a <setPWM+0x10>
	return;
}

void offPWM()
{
	TCCR1A&=~(1<<COM1A1);
     172:	80 91 80 00 	lds	r24, 0x0080
     176:	8f 77       	andi	r24, 0x7F	; 127
     178:	03 c0       	rjmp	.+6      	; 0x180 <setPWM+0x16>
	return;
}

void onPWM()
{
	TCCR1A|=(1<<COM1A1);
     17a:	80 91 80 00 	lds	r24, 0x0080
     17e:	80 68       	ori	r24, 0x80	; 128
     180:	80 93 80 00 	sts	0x0080, r24
     184:	08 95       	ret

00000186 <getPWM>:

	return;
}

uint8_t getPWM (void)
{
     186:	80 91 88 00 	lds	r24, 0x0088
	return OCR1AL;
}
     18a:	08 95       	ret

0000018c <clearRXBuf>:

//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
     18c:	ee e1       	ldi	r30, 0x1E	; 30
     18e:	f2 e0       	ldi	r31, 0x02	; 2
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     190:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     192:	82 e0       	ldi	r24, 0x02	; 2
     194:	e9 32       	cpi	r30, 0x29	; 41
     196:	f8 07       	cpc	r31, r24
     198:	d9 f7       	brne	.-10     	; 0x190 <clearRXBuf+0x4>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     19a:	10 92 09 02 	sts	0x0209, r1
	return;
}
     19e:	08 95       	ret

000001a0 <clearTXBuf>:

void clearTXBuf (void)
{
     1a0:	ec e0       	ldi	r30, 0x0C	; 12
     1a2:	f2 e0       	ldi	r31, 0x02	; 2
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	txBuf[i]=0;
     1a4:	11 92       	st	Z+, r1
}

void clearTXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     1a6:	82 e0       	ldi	r24, 0x02	; 2
     1a8:	e7 31       	cpi	r30, 0x17	; 23
     1aa:	f8 07       	cpc	r31, r24
     1ac:	d9 f7       	brne	.-10     	; 0x1a4 <clearTXBuf+0x4>
	txBuf[i]=0;
	return;
}
     1ae:	08 95       	ret

000001b0 <clearBuf>:

void clearBuf (void)
{
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=txBuf[i]=0;
     1b4:	fc 01       	movw	r30, r24
     1b6:	e4 5f       	subi	r30, 0xF4	; 244
     1b8:	fd 4f       	sbci	r31, 0xFD	; 253
     1ba:	10 82       	st	Z, r1
     1bc:	fc 01       	movw	r30, r24
     1be:	e2 5e       	subi	r30, 0xE2	; 226
     1c0:	fd 4f       	sbci	r31, 0xFD	; 253
     1c2:	10 82       	st	Z, r1
     1c4:	01 96       	adiw	r24, 0x01	; 1
}

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     1c6:	8b 30       	cpi	r24, 0x0B	; 11
     1c8:	91 05       	cpc	r25, r1
     1ca:	a1 f7       	brne	.-24     	; 0x1b4 <clearBuf+0x4>
	rxBuf[i]=txBuf[i]=0;
	return;
}
     1cc:	08 95       	ret

000001ce <__vector_18>:

//receive packet to RX buffer
ISR(USART_RX_vect, ISR_BLOCK)
{
     1ce:	1f 92       	push	r1
     1d0:	0f 92       	push	r0
     1d2:	0f b6       	in	r0, 0x3f	; 63
     1d4:	0f 92       	push	r0
     1d6:	11 24       	eor	r1, r1
     1d8:	2f 93       	push	r18
     1da:	3f 93       	push	r19
     1dc:	4f 93       	push	r20
     1de:	6f 93       	push	r22
     1e0:	7f 93       	push	r23
     1e2:	8f 93       	push	r24
     1e4:	9f 93       	push	r25
     1e6:	ef 93       	push	r30
     1e8:	ff 93       	push	r31
	uint16_t i=0;

	if (packetReceived!=0)
     1ea:	80 91 08 02 	lds	r24, 0x0208
     1ee:	88 23       	and	r24, r24
     1f0:	19 f0       	breq	.+6      	; 0x1f8 <__vector_18+0x2a>
	{
		i=UDR0;
     1f2:	80 91 c6 00 	lds	r24, 0x00C6
     1f6:	29 c0       	rjmp	.+82     	; 0x24a <__vector_18+0x7c>
		return;
	}

	rxBuf[0]=UDR0;
     1f8:	80 91 c6 00 	lds	r24, 0x00C6
     1fc:	80 93 1e 02 	sts	0x021E, r24
	currentRXPacketLen=1;
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	80 93 09 02 	sts	0x0209, r24
     206:	20 e0       	ldi	r18, 0x00	; 0
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	41 e0       	ldi	r20, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	09 c0       	rjmp	.+18     	; 0x224 <__vector_18+0x56>

	while (1)
	{
		while ( !(UCSR0A & (1<<RXC0)) )
		{
			if (i==10000)
     212:	87 e2       	ldi	r24, 0x27	; 39
     214:	20 31       	cpi	r18, 0x10	; 16
     216:	38 07       	cpc	r19, r24
     218:	99 f0       	breq	.+38     	; 0x240 <__vector_18+0x72>
			{
				packetReceived=1;
				return;
			}
			i++;
     21a:	2f 5f       	subi	r18, 0xFF	; 255
     21c:	3f 4f       	sbci	r19, 0xFF	; 255
     21e:	cb 01       	movw	r24, r22
     220:	01 97       	sbiw	r24, 0x01	; 1
     222:	f1 f7       	brne	.-4      	; 0x220 <__vector_18+0x52>
	rxBuf[0]=UDR0;
	currentRXPacketLen=1;

	while (1)
	{
		while ( !(UCSR0A & (1<<RXC0)) )
     224:	80 91 c0 00 	lds	r24, 0x00C0
     228:	87 ff       	sbrs	r24, 7
     22a:	f3 cf       	rjmp	.-26     	; 0x212 <__vector_18+0x44>
				return;
			}
			i++;
			_delay_loop_2(1);
		}
		rxBuf[currentRXPacketLen]=UDR0;
     22c:	80 91 c6 00 	lds	r24, 0x00C6
     230:	e4 2f       	mov	r30, r20
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	e2 5e       	subi	r30, 0xE2	; 226
     236:	fd 4f       	sbci	r31, 0xFD	; 253
     238:	80 83       	st	Z, r24
		currentRXPacketLen++;
     23a:	4f 5f       	subi	r20, 0xFF	; 255

		if (currentRXPacketLen>=BUFF_SIZE)
     23c:	4b 30       	cpi	r20, 0x0B	; 11
     23e:	90 f3       	brcs	.-28     	; 0x224 <__vector_18+0x56>
     240:	40 93 09 02 	sts	0x0209, r20
		{
			packetReceived=1;
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	80 93 08 02 	sts	0x0208, r24
			return;
		}
	}
}
     24a:	ff 91       	pop	r31
     24c:	ef 91       	pop	r30
     24e:	9f 91       	pop	r25
     250:	8f 91       	pop	r24
     252:	7f 91       	pop	r23
     254:	6f 91       	pop	r22
     256:	4f 91       	pop	r20
     258:	3f 91       	pop	r19
     25a:	2f 91       	pop	r18
     25c:	0f 90       	pop	r0
     25e:	0f be       	out	0x3f, r0	; 63
     260:	0f 90       	pop	r0
     262:	1f 90       	pop	r1
     264:	18 95       	reti

00000266 <uartSendPacket>:

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
     266:	ec e0       	ldi	r30, 0x0C	; 12
     268:	f2 e0       	ldi	r31, 0x02	; 2
	uint8_t i;
	for (i=0;i<length;i++)
     26a:	70 e0       	ldi	r23, 0x00	; 0
     26c:	6e 0f       	add	r22, r30
     26e:	7f 1f       	adc	r23, r31
     270:	08 c0       	rjmp	.+16     	; 0x282 <uartSendPacket+0x1c>
	uartTransmitByte(txBuf[i]);
     272:	90 81       	ld	r25, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSR0A & (1<<UDRE0)) );
     274:	80 91 c0 00 	lds	r24, 0x00C0
     278:	85 ff       	sbrs	r24, 5
     27a:	fc cf       	rjmp	.-8      	; 0x274 <uartSendPacket+0xe>
	UDR0 = data;
     27c:	90 93 c6 00 	sts	0x00C6, r25
     280:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     282:	e6 17       	cp	r30, r22
     284:	f7 07       	cpc	r31, r23
     286:	a9 f7       	brne	.-22     	; 0x272 <uartSendPacket+0xc>
	uartTransmitByte(txBuf[i]);
	return;
}
     288:	08 95       	ret

0000028a <crc8Block>:

//crc calculating function
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
     28a:	fc 01       	movw	r30, r24
     28c:	9f ef       	ldi	r25, 0xFF	; 255
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     28e:	21 e3       	ldi	r18, 0x31	; 49
     290:	0e c0       	rjmp	.+28     	; 0x2ae <crc8Block+0x24>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     292:	80 81       	ld	r24, Z
     294:	98 27       	eor	r25, r24
     296:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     298:	97 ff       	sbrs	r25, 7
     29a:	03 c0       	rjmp	.+6      	; 0x2a2 <crc8Block+0x18>
     29c:	99 0f       	add	r25, r25
     29e:	92 27       	eor	r25, r18
     2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <crc8Block+0x1a>
     2a2:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     2a4:	8f 5f       	subi	r24, 0xFF	; 255
     2a6:	88 30       	cpi	r24, 0x08	; 8
     2a8:	b9 f7       	brne	.-18     	; 0x298 <crc8Block+0xe>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     2aa:	31 96       	adiw	r30, 0x01	; 1
     2ac:	61 50       	subi	r22, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     2ae:	66 23       	and	r22, r22
     2b0:	81 f7       	brne	.-32     	; 0x292 <crc8Block+0x8>
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
	}	
	return crc;
}
     2b2:	89 2f       	mov	r24, r25
     2b4:	08 95       	ret

000002b6 <prepareSystemStatus>:

//prepare TX buffer
void prepareSystemStatus (void)
{
     2b6:	84 e6       	ldi	r24, 0x64	; 100
     2b8:	80 93 0c 02 	sts	0x020C, r24
	txBuf[0]='d';
	txBuf[1]= sensorData[0]>>8;
     2bc:	90 91 1a 02 	lds	r25, 0x021A
     2c0:	80 91 1b 02 	lds	r24, 0x021B
     2c4:	80 93 0d 02 	sts	0x020D, r24
	txBuf[2]= sensorData[0]&0x00ff;
     2c8:	90 93 0e 02 	sts	0x020E, r25
	txBuf[3]= sensorData[1]>>8;
     2cc:	90 91 1c 02 	lds	r25, 0x021C
     2d0:	80 91 1d 02 	lds	r24, 0x021D
     2d4:	80 93 0f 02 	sts	0x020F, r24
	txBuf[4]= sensorData[1]&0x00ff;
     2d8:	90 93 10 02 	sts	0x0210, r25
	txBuf[5]= setData[0]>>8;
     2dc:	90 91 18 02 	lds	r25, 0x0218
     2e0:	80 91 19 02 	lds	r24, 0x0219
     2e4:	80 93 11 02 	sts	0x0211, r24
	txBuf[6]= setData[0]&0x00ff;
     2e8:	90 93 12 02 	sts	0x0212, r25
	#if PWM_MODE == 1
		txBuf[7]= getPWM();
	#else
		txBuf[7]=coolerPower;
     2ec:	80 91 0b 02 	lds	r24, 0x020B
     2f0:	80 93 13 02 	sts	0x0213, r24
	#endif
	txBuf[8]= errorCode;
     2f4:	80 91 0a 02 	lds	r24, 0x020A
     2f8:	80 93 14 02 	sts	0x0214, r24
	txBuf[9]= coolerState;
     2fc:	80 91 2a 02 	lds	r24, 0x022A
     300:	80 93 15 02 	sts	0x0215, r24
     304:	9f ef       	ldi	r25, 0xFF	; 255
     306:	ec e0       	ldi	r30, 0x0C	; 12
     308:	f2 e0       	ldi	r31, 0x02	; 2
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     30a:	21 e3       	ldi	r18, 0x31	; 49
     30c:	0d c0       	rjmp	.+26     	; 0x328 <prepareSystemStatus+0x72>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     30e:	80 81       	ld	r24, Z
     310:	98 27       	eor	r25, r24
     312:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     314:	97 ff       	sbrs	r25, 7
     316:	03 c0       	rjmp	.+6      	; 0x31e <prepareSystemStatus+0x68>
     318:	99 0f       	add	r25, r25
     31a:	92 27       	eor	r25, r18
     31c:	01 c0       	rjmp	.+2      	; 0x320 <prepareSystemStatus+0x6a>
     31e:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     320:	8f 5f       	subi	r24, 0xFF	; 255
     322:	88 30       	cpi	r24, 0x08	; 8
     324:	b9 f7       	brne	.-18     	; 0x314 <prepareSystemStatus+0x5e>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     326:	31 96       	adiw	r30, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	e6 31       	cpi	r30, 0x16	; 22
     32c:	f8 07       	cpc	r31, r24
     32e:	79 f7       	brne	.-34     	; 0x30e <prepareSystemStatus+0x58>
	#else
		txBuf[7]=coolerPower;
	#endif
	txBuf[8]= errorCode;
	txBuf[9]= coolerState;
	txBuf[10]=crc8Block(txBuf,10);
     330:	90 83       	st	Z, r25
}
     332:	08 95       	ret

00000334 <presentDS18b20>:

//------------------------------------------------------------------------------------
//DS18B20

uint8_t presentDS18b20(uint8_t sensor_num)
{	uint8_t res, sensor_pin;
     334:	88 23       	and	r24, r24
     336:	11 f0       	breq	.+4      	; 0x33c <presentDS18b20+0x8>
     338:	43 e0       	ldi	r20, 0x03	; 3
     33a:	01 c0       	rjmp	.+2      	; 0x33e <presentDS18b20+0xa>
     33c:	42 e0       	ldi	r20, 0x02	; 2

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;
	
	SENSOR_DDR|=(1<<sensor_pin);
     33e:	87 b1       	in	r24, 0x07	; 7
     340:	21 e0       	ldi	r18, 0x01	; 1
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	92 2f       	mov	r25, r18
     346:	04 2e       	mov	r0, r20
     348:	01 c0       	rjmp	.+2      	; 0x34c <presentDS18b20+0x18>
     34a:	99 0f       	add	r25, r25
     34c:	0a 94       	dec	r0
     34e:	ea f7       	brpl	.-6      	; 0x34a <presentDS18b20+0x16>
     350:	89 2b       	or	r24, r25
     352:	87 b9       	out	0x07, r24	; 7
     354:	e8 ea       	ldi	r30, 0xA8	; 168
     356:	f7 e0       	ldi	r31, 0x07	; 7
     358:	31 97       	sbiw	r30, 0x01	; 1
     35a:	f1 f7       	brne	.-4      	; 0x358 <presentDS18b20+0x24>
	_delay_us (490);

	SENSOR_DDR&=~(1<<sensor_pin);
     35c:	87 b1       	in	r24, 0x07	; 7
     35e:	90 95       	com	r25
     360:	98 23       	and	r25, r24
     362:	97 b9       	out	0x07, r25	; 7
     364:	80 e4       	ldi	r24, 0x40	; 64
     366:	91 e0       	ldi	r25, 0x01	; 1
     368:	01 97       	sbiw	r24, 0x01	; 1
     36a:	f1 f7       	brne	.-4      	; 0x368 <presentDS18b20+0x34>
	_delay_us(80);
	
	if ((SENSOR_PIN&(1<<sensor_pin)) == 0x00) res=1;  
     36c:	86 b1       	in	r24, 0x06	; 6
     36e:	e0 e9       	ldi	r30, 0x90	; 144
     370:	f6 e0       	ldi	r31, 0x06	; 6
     372:	31 97       	sbiw	r30, 0x01	; 1
     374:	f1 f7       	brne	.-4      	; 0x372 <presentDS18b20+0x3e>
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	02 c0       	rjmp	.+4      	; 0x37e <presentDS18b20+0x4a>
     37a:	95 95       	asr	r25
     37c:	87 95       	ror	r24
     37e:	4a 95       	dec	r20
     380:	e2 f7       	brpl	.-8      	; 0x37a <presentDS18b20+0x46>
     382:	82 27       	eor	r24, r18
     384:	93 27       	eor	r25, r19
	else res=0;  
	
	_delay_us(420);
	return res;
}
     386:	81 70       	andi	r24, 0x01	; 1
     388:	08 95       	ret

0000038a <sendDS18b20>:

void sendDS18b20(uint8_t command, uint8_t sensor_num)
{	uint8_t i, data, sensor_pin;
     38a:	38 2f       	mov	r19, r24

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     38c:	66 23       	and	r22, r22
     38e:	11 f0       	breq	.+4      	; 0x394 <sendDS18b20+0xa>
     390:	23 e0       	ldi	r18, 0x03	; 3
     392:	01 c0       	rjmp	.+2      	; 0x396 <sendDS18b20+0xc>
     394:	22 e0       	ldi	r18, 0x02	; 2
	data=command;

	for(i=0;i<8;i++)
	{
		if ((data&0x01)==0x01) {    //Send 1 on SDA
			SENSOR_DDR|=(1<<sensor_pin);
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	48 2f       	mov	r20, r24
     39c:	01 c0       	rjmp	.+2      	; 0x3a0 <sendDS18b20+0x16>
     39e:	44 0f       	add	r20, r20
     3a0:	2a 95       	dec	r18
     3a2:	ea f7       	brpl	.-6      	; 0x39e <sendDS18b20+0x14>
			_delay_us(9);
			SENSOR_DDR&=~(1<<sensor_pin);
     3a4:	54 2f       	mov	r21, r20
     3a6:	50 95       	com	r21
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	e8 e1       	ldi	r30, 0x18	; 24
     3ac:	f1 e0       	ldi	r31, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3ae:	b0 e5       	ldi	r27, 0x50	; 80
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3b0:	a0 e3       	ldi	r26, 0x30	; 48
     3b2:	6c e2       	ldi	r22, 0x2C	; 44
     3b4:	71 e0       	ldi	r23, 0x01	; 1
	else sensor_pin=SENSOR1_PIN;
	data=command;

	for(i=0;i<8;i++)
	{
		if ((data&0x01)==0x01) {    //Send 1 on SDA
     3b6:	30 ff       	sbrs	r19, 0
     3b8:	0d c0       	rjmp	.+26     	; 0x3d4 <sendDS18b20+0x4a>
			SENSOR_DDR|=(1<<sensor_pin);
     3ba:	87 b1       	in	r24, 0x07	; 7
     3bc:	84 2b       	or	r24, r20
     3be:	87 b9       	out	0x07, r24	; 7
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3c0:	8a 2f       	mov	r24, r26
     3c2:	8a 95       	dec	r24
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <sendDS18b20+0x38>
			_delay_us(9);
			SENSOR_DDR&=~(1<<sensor_pin);
     3c6:	87 b1       	in	r24, 0x07	; 7
     3c8:	85 23       	and	r24, r21
     3ca:	87 b9       	out	0x07, r24	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3cc:	cb 01       	movw	r24, r22
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <sendDS18b20+0x44>
     3d2:	0c c0       	rjmp	.+24     	; 0x3ec <sendDS18b20+0x62>
			_delay_us(75);
		}
		else {                   	//Send 0 on SDA
			SENSOR_DDR|=(1<<sensor_pin);
     3d4:	87 b1       	in	r24, 0x07	; 7
     3d6:	84 2b       	or	r24, r20
     3d8:	87 b9       	out	0x07, r24	; 7
     3da:	cf 01       	movw	r24, r30
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	f1 f7       	brne	.-4      	; 0x3dc <sendDS18b20+0x52>
			_delay_us(70);
			SENSOR_DDR&=~(1<<sensor_pin);
     3e0:	87 b1       	in	r24, 0x07	; 7
     3e2:	85 23       	and	r24, r21
     3e4:	87 b9       	out	0x07, r24	; 7
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3e6:	8b 2f       	mov	r24, r27
     3e8:	8a 95       	dec	r24
     3ea:	f1 f7       	brne	.-4      	; 0x3e8 <sendDS18b20+0x5e>

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;
	data=command;

	for(i=0;i<8;i++)
     3ec:	2f 5f       	subi	r18, 0xFF	; 255
     3ee:	28 30       	cpi	r18, 0x08	; 8
     3f0:	11 f0       	breq	.+4      	; 0x3f6 <sendDS18b20+0x6c>
			SENSOR_DDR|=(1<<sensor_pin);
			_delay_us(70);
			SENSOR_DDR&=~(1<<sensor_pin);
			_delay_us(15);
		}
		data=data>>1;
     3f2:	36 95       	lsr	r19
     3f4:	e0 cf       	rjmp	.-64     	; 0x3b6 <sendDS18b20+0x2c>
     3f6:	08 95       	ret

000003f8 <receiveDS18b20>:
	}
	return;
}

uint16_t receiveDS18b20(uint8_t sensor_num)
{	uint8_t i, sensor_pin;
     3f8:	0f 93       	push	r16
     3fa:	1f 93       	push	r17
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
	uint16_t res=0;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     400:	88 23       	and	r24, r24
     402:	11 f0       	breq	.+4      	; 0x408 <receiveDS18b20+0x10>
     404:	83 e0       	ldi	r24, 0x03	; 3
     406:	01 c0       	rjmp	.+2      	; 0x40a <receiveDS18b20+0x12>
     408:	82 e0       	ldi	r24, 0x02	; 2
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
	{
		SENSOR_DDR|=(1<<sensor_pin);		
     40a:	61 e0       	ldi	r22, 0x01	; 1
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	02 c0       	rjmp	.+4      	; 0x414 <receiveDS18b20+0x1c>
     410:	66 0f       	add	r22, r22
     412:	77 1f       	adc	r23, r23
     414:	8a 95       	dec	r24
     416:	e2 f7       	brpl	.-8      	; 0x410 <receiveDS18b20+0x18>
     418:	a6 2f       	mov	r26, r22
		_delay_us(9);
		SENSOR_DDR&=~(1<<sensor_pin);		
     41a:	b6 2f       	mov	r27, r22
     41c:	b0 95       	com	r27
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	40 e0       	ldi	r20, 0x00	; 0
     424:	50 e0       	ldi	r21, 0x00	; 0
     426:	00 e3       	ldi	r16, 0x30	; 48
		_delay_us(12);

		if ((SENSOR_PIN & (1<<sensor_pin))==0x00) res&=~_BV(i);	//If 0 on SDA
		else 	res|=_BV(i);	    //IF 1 on SDA
     428:	10 e4       	ldi	r17, 0x40	; 64
     42a:	e1 e0       	ldi	r30, 0x01	; 1
     42c:	f0 e0       	ldi	r31, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     42e:	c4 e0       	ldi	r28, 0x04	; 4
     430:	d1 e0       	ldi	r29, 0x01	; 1
	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
	{
		SENSOR_DDR|=(1<<sensor_pin);		
     432:	87 b1       	in	r24, 0x07	; 7
     434:	8a 2b       	or	r24, r26
     436:	87 b9       	out	0x07, r24	; 7
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     438:	80 2f       	mov	r24, r16
     43a:	8a 95       	dec	r24
     43c:	f1 f7       	brne	.-4      	; 0x43a <receiveDS18b20+0x42>
		_delay_us(9);
		SENSOR_DDR&=~(1<<sensor_pin);		
     43e:	87 b1       	in	r24, 0x07	; 7
     440:	8b 23       	and	r24, r27
     442:	87 b9       	out	0x07, r24	; 7
     444:	81 2f       	mov	r24, r17
     446:	8a 95       	dec	r24
     448:	f1 f7       	brne	.-4      	; 0x446 <receiveDS18b20+0x4e>
		_delay_us(12);

		if ((SENSOR_PIN & (1<<sensor_pin))==0x00) res&=~_BV(i);	//If 0 on SDA
     44a:	86 b1       	in	r24, 0x06	; 6
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	86 23       	and	r24, r22
     450:	97 23       	and	r25, r23
     452:	89 2b       	or	r24, r25
     454:	61 f4       	brne	.+24     	; 0x46e <receiveDS18b20+0x76>
     456:	cf 01       	movw	r24, r30
     458:	04 2e       	mov	r0, r20
     45a:	02 c0       	rjmp	.+4      	; 0x460 <receiveDS18b20+0x68>
     45c:	88 0f       	add	r24, r24
     45e:	99 1f       	adc	r25, r25
     460:	0a 94       	dec	r0
     462:	e2 f7       	brpl	.-8      	; 0x45c <receiveDS18b20+0x64>
     464:	80 95       	com	r24
     466:	90 95       	com	r25
     468:	28 23       	and	r18, r24
     46a:	39 23       	and	r19, r25
     46c:	09 c0       	rjmp	.+18     	; 0x480 <receiveDS18b20+0x88>
		else 	res|=_BV(i);	    //IF 1 on SDA
     46e:	cf 01       	movw	r24, r30
     470:	04 2e       	mov	r0, r20
     472:	02 c0       	rjmp	.+4      	; 0x478 <receiveDS18b20+0x80>
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	0a 94       	dec	r0
     47a:	e2 f7       	brpl	.-8      	; 0x474 <receiveDS18b20+0x7c>
     47c:	28 2b       	or	r18, r24
     47e:	39 2b       	or	r19, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     480:	ce 01       	movw	r24, r28
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	f1 f7       	brne	.-4      	; 0x482 <receiveDS18b20+0x8a>
     486:	4f 5f       	subi	r20, 0xFF	; 255
     488:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t res=0;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
     48a:	40 31       	cpi	r20, 0x10	; 16
     48c:	51 05       	cpc	r21, r1
     48e:	89 f6       	brne	.-94     	; 0x432 <receiveDS18b20+0x3a>
		else 	res|=_BV(i);	    //IF 1 on SDA
				
		_delay_us(65);
	}
	return res;
}
     490:	c9 01       	movw	r24, r18
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	0f 91       	pop	r16
     49a:	08 95       	ret

0000049c <processPacket>:
	txBuf[10]=crc8Block(txBuf,10);
}

//process received packet
void processPacket(void)
{
     49c:	f8 94       	cli
	cli();
	//check CRC
	if (crc8Block(rxBuf,currentRXPacketLen-1)!=rxBuf[currentRXPacketLen-1])
     49e:	40 91 09 02 	lds	r20, 0x0209
     4a2:	41 50       	subi	r20, 0x01	; 1
     4a4:	9f ef       	ldi	r25, 0xFF	; 255
     4a6:	ee e1       	ldi	r30, 0x1E	; 30
     4a8:	f2 e0       	ldi	r31, 0x02	; 2
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     4aa:	24 2f       	mov	r18, r20
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	4f 5f       	subi	r20, 0xFF	; 255
     4b0:	2e 0f       	add	r18, r30
     4b2:	3f 1f       	adc	r19, r31
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     4b4:	51 e3       	ldi	r21, 0x31	; 49
     4b6:	0d c0       	rjmp	.+26     	; 0x4d2 <processPacket+0x36>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     4b8:	80 81       	ld	r24, Z
     4ba:	98 27       	eor	r25, r24
     4bc:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     4be:	97 ff       	sbrs	r25, 7
     4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <processPacket+0x2c>
     4c2:	99 0f       	add	r25, r25
     4c4:	95 27       	eor	r25, r21
     4c6:	01 c0       	rjmp	.+2      	; 0x4ca <processPacket+0x2e>
     4c8:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     4ca:	8f 5f       	subi	r24, 0xFF	; 255
     4cc:	88 30       	cpi	r24, 0x08	; 8
     4ce:	b9 f7       	brne	.-18     	; 0x4be <processPacket+0x22>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     4d0:	31 96       	adiw	r30, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     4d2:	e2 17       	cp	r30, r18
     4d4:	f3 07       	cpc	r31, r19
     4d6:	81 f7       	brne	.-32     	; 0x4b8 <processPacket+0x1c>
//process received packet
void processPacket(void)
{
	cli();
	//check CRC
	if (crc8Block(rxBuf,currentRXPacketLen-1)!=rxBuf[currentRXPacketLen-1])
     4d8:	e4 2f       	mov	r30, r20
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	e3 5e       	subi	r30, 0xE3	; 227
     4de:	fd 4f       	sbci	r31, 0xFD	; 253
     4e0:	80 81       	ld	r24, Z
     4e2:	98 17       	cp	r25, r24
     4e4:	69 f0       	breq	.+26     	; 0x500 <processPacket+0x64>
	{
		packetReceived=0;
     4e6:	10 92 08 02 	sts	0x0208, r1
     4ea:	ee e1       	ldi	r30, 0x1E	; 30
     4ec:	f2 e0       	ldi	r31, 0x02	; 2
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     4ee:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     4f0:	42 e0       	ldi	r20, 0x02	; 2
     4f2:	e9 32       	cpi	r30, 0x29	; 41
     4f4:	f4 07       	cpc	r31, r20
     4f6:	d9 f7       	brne	.-10     	; 0x4ee <processPacket+0x52>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     4f8:	10 92 09 02 	sts	0x0209, r1
	//check CRC
	if (crc8Block(rxBuf,currentRXPacketLen-1)!=rxBuf[currentRXPacketLen-1])
	{
		packetReceived=0;
		clearRXBuf();
		sei();
     4fc:	78 94       	sei
     4fe:	08 95       	ret
		return;
	}
	//differentiate and process packet
	switch (rxBuf[0]) {
     500:	80 91 1e 02 	lds	r24, 0x021E
     504:	89 36       	cpi	r24, 0x69	; 105
     506:	09 f4       	brne	.+2      	; 0x50a <processPacket+0x6e>
     508:	41 c0       	rjmp	.+130    	; 0x58c <processPacket+0xf0>
     50a:	8a 36       	cpi	r24, 0x6A	; 106
     50c:	20 f4       	brcc	.+8      	; 0x516 <processPacket+0x7a>
     50e:	87 36       	cpi	r24, 0x67	; 103
     510:	09 f0       	breq	.+2      	; 0x514 <processPacket+0x78>
     512:	85 c0       	rjmp	.+266    	; 0x61e <processPacket+0x182>
     514:	07 c0       	rjmp	.+14     	; 0x524 <processPacket+0x88>
     516:	80 37       	cpi	r24, 0x70	; 112
     518:	09 f4       	brne	.+2      	; 0x51c <processPacket+0x80>
     51a:	6c c0       	rjmp	.+216    	; 0x5f4 <processPacket+0x158>
     51c:	83 37       	cpi	r24, 0x73	; 115
     51e:	09 f0       	breq	.+2      	; 0x522 <processPacket+0x86>
     520:	7e c0       	rjmp	.+252    	; 0x61e <processPacket+0x182>
     522:	14 c0       	rjmp	.+40     	; 0x54c <processPacket+0xb0>
		//if get command
		case 'g' : 	{
			if (currentRXPacketLen==2)
     524:	42 30       	cpi	r20, 0x02	; 2
     526:	09 f0       	breq	.+2      	; 0x52a <processPacket+0x8e>
     528:	7a c0       	rjmp	.+244    	; 0x61e <processPacket+0x182>
			{
				prepareSystemStatus();
     52a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <prepareSystemStatus>
     52e:	ec e0       	ldi	r30, 0x0C	; 12
     530:	f2 e0       	ldi	r31, 0x02	; 2
//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
	uartTransmitByte(txBuf[i]);
     532:	90 81       	ld	r25, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSR0A & (1<<UDRE0)) );
     534:	80 91 c0 00 	lds	r24, 0x00C0
     538:	85 ff       	sbrs	r24, 5
     53a:	fc cf       	rjmp	.-8      	; 0x534 <processPacket+0x98>
	UDR0 = data;
     53c:	90 93 c6 00 	sts	0x00C6, r25
     540:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     542:	82 e0       	ldi	r24, 0x02	; 2
     544:	e7 31       	cpi	r30, 0x17	; 23
     546:	f8 07       	cpc	r31, r24
     548:	a1 f7       	brne	.-24     	; 0x532 <processPacket+0x96>
     54a:	69 c0       	rjmp	.+210    	; 0x61e <processPacket+0x182>
			}			
			break;
		}
		//if set command
		case 's' : 	{
			if (currentRXPacketLen==4)
     54c:	44 30       	cpi	r20, 0x04	; 4
     54e:	09 f0       	breq	.+2      	; 0x552 <processPacket+0xb6>
     550:	66 c0       	rjmp	.+204    	; 0x61e <processPacket+0x182>
			{
				uint16_t val;

				val=(rxBuf[1]<<8)|(rxBuf[2]);
     552:	90 91 1f 02 	lds	r25, 0x021F
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	20 91 20 02 	lds	r18, 0x0220
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	28 2b       	or	r18, r24
     560:	39 2b       	or	r19, r25
				if ((val<=1780)&&(val>=780)) setData[0]=val;
     562:	c9 01       	movw	r24, r18
     564:	8c 50       	subi	r24, 0x0C	; 12
     566:	93 40       	sbci	r25, 0x03	; 3
     568:	89 5e       	subi	r24, 0xE9	; 233
     56a:	93 40       	sbci	r25, 0x03	; 3
     56c:	20 f4       	brcc	.+8      	; 0x576 <processPacket+0xda>
     56e:	30 93 19 02 	sts	0x0219, r19
     572:	20 93 18 02 	sts	0x0218, r18
/** \ingroup avr_eeprom
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
    __eewr_word (__p, __value, eeprom_write_byte);
     576:	60 91 18 02 	lds	r22, 0x0218
     57a:	70 91 19 02 	lds	r23, 0x0219
     57e:	4b e5       	ldi	r20, 0x5B	; 91
     580:	50 e0       	ldi	r21, 0x00	; 0
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__eewr_word>
     58a:	49 c0       	rjmp	.+146    	; 0x61e <processPacket+0x182>
			
			break;
		}
		//if info command
		case 'i' :	{
			if (currentRXPacketLen==2)
     58c:	42 30       	cpi	r20, 0x02	; 2
     58e:	09 f0       	breq	.+2      	; 0x592 <processPacket+0xf6>
     590:	46 c0       	rjmp	.+140    	; 0x61e <processPacket+0x182>
			{
				txBuf[0]='v';
     592:	86 e7       	ldi	r24, 0x76	; 118
     594:	80 93 0c 02 	sts	0x020C, r24
				txBuf[1]=HW_REVISION;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	80 93 0d 02 	sts	0x020D, r24
				txBuf[2]=SW_REVISION;
     59e:	80 93 0e 02 	sts	0x020E, r24
				txBuf[3]=SENSOR_COUNT;
     5a2:	40 93 0f 02 	sts	0x020F, r20
				txBuf[4]=VALUE_COUNT;
     5a6:	80 93 10 02 	sts	0x0210, r24
     5aa:	9f ef       	ldi	r25, 0xFF	; 255
     5ac:	ec e0       	ldi	r30, 0x0C	; 12
     5ae:	f2 e0       	ldi	r31, 0x02	; 2
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     5b0:	21 e3       	ldi	r18, 0x31	; 49
     5b2:	0d c0       	rjmp	.+26     	; 0x5ce <processPacket+0x132>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     5b4:	80 81       	ld	r24, Z
     5b6:	98 27       	eor	r25, r24
     5b8:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     5ba:	97 ff       	sbrs	r25, 7
     5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <processPacket+0x128>
     5be:	99 0f       	add	r25, r25
     5c0:	92 27       	eor	r25, r18
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <processPacket+0x12a>
     5c4:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     5c6:	8f 5f       	subi	r24, 0xFF	; 255
     5c8:	88 30       	cpi	r24, 0x08	; 8
     5ca:	b9 f7       	brne	.-18     	; 0x5ba <processPacket+0x11e>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     5cc:	31 96       	adiw	r30, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     5ce:	82 e0       	ldi	r24, 0x02	; 2
     5d0:	e1 31       	cpi	r30, 0x11	; 17
     5d2:	f8 07       	cpc	r31, r24
     5d4:	79 f7       	brne	.-34     	; 0x5b4 <processPacket+0x118>
				txBuf[0]='v';
				txBuf[1]=HW_REVISION;
				txBuf[2]=SW_REVISION;
				txBuf[3]=SENSOR_COUNT;
				txBuf[4]=VALUE_COUNT;
				txBuf[5]=crc8Block(txBuf,5);
     5d6:	90 83       	st	Z, r25
     5d8:	35 97       	sbiw	r30, 0x05	; 5
//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
	uartTransmitByte(txBuf[i]);
     5da:	90 81       	ld	r25, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSR0A & (1<<UDRE0)) );
     5dc:	80 91 c0 00 	lds	r24, 0x00C0
     5e0:	85 ff       	sbrs	r24, 5
     5e2:	fc cf       	rjmp	.-8      	; 0x5dc <processPacket+0x140>
	UDR0 = data;
     5e4:	90 93 c6 00 	sts	0x00C6, r25
     5e8:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     5ea:	42 e0       	ldi	r20, 0x02	; 2
     5ec:	e2 31       	cpi	r30, 0x12	; 18
     5ee:	f4 07       	cpc	r31, r20
     5f0:	a1 f7       	brne	.-24     	; 0x5da <processPacket+0x13e>
     5f2:	15 c0       	rjmp	.+42     	; 0x61e <processPacket+0x182>

			break;
		}
		//if powern ON/OFF PWM
		case 'p' : 	{
		if (currentRXPacketLen==3)
     5f4:	43 30       	cpi	r20, 0x03	; 3
     5f6:	99 f4       	brne	.+38     	; 0x61e <processPacket+0x182>
		{
			if ((rxBuf[1]==COOLER_OFF)||(rxBuf[1]==COOLER_ON))
     5f8:	20 91 1f 02 	lds	r18, 0x021F
     5fc:	22 30       	cpi	r18, 0x02	; 2
     5fe:	78 f4       	brcc	.+30     	; 0x61e <processPacket+0x182>
			{
				coolerState=rxBuf[1];
     600:	20 93 2a 02 	sts	0x022A, r18
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     604:	f9 99       	sbic	0x1f, 1	; 31
     606:	fe cf       	rjmp	.-4      	; 0x604 <processPacket+0x168>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     608:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     60a:	82 e0       	ldi	r24, 0x02	; 2
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	92 bd       	out	0x22, r25	; 34
     610:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
     612:	20 bd       	out	0x20, r18	; 32

    __asm__ __volatile__ (
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	f8 94       	cli
     618:	fa 9a       	sbi	0x1f, 2	; 31
     61a:	f9 9a       	sbi	0x1f, 1	; 31
     61c:	0f be       	out	0x3f, r0	; 63
		default:
		{
			;
		}
	}
	packetReceived=0;
     61e:	10 92 08 02 	sts	0x0208, r1
     622:	ee e1       	ldi	r30, 0x1E	; 30
     624:	f2 e0       	ldi	r31, 0x02	; 2
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     626:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	e9 32       	cpi	r30, 0x29	; 41
     62c:	f8 07       	cpc	r31, r24
     62e:	d9 f7       	brne	.-10     	; 0x626 <processPacket+0x18a>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     630:	10 92 09 02 	sts	0x0209, r1
			;
		}
	}
	packetReceived=0;
	clearRXBuf();
	sei();
     634:	78 94       	sei
     636:	08 95       	ret

00000638 <main>:
	return res;
}

//------------------------------------------------------------------------------------
int main(void)
{
     638:	2f 92       	push	r2
     63a:	3f 92       	push	r3
     63c:	5f 92       	push	r5
     63e:	6f 92       	push	r6
     640:	7f 92       	push	r7
     642:	8f 92       	push	r8
     644:	9f 92       	push	r9
     646:	af 92       	push	r10
     648:	bf 92       	push	r11
     64a:	cf 92       	push	r12
     64c:	df 92       	push	r13
     64e:	ef 92       	push	r14
     650:	ff 92       	push	r15
     652:	0f 93       	push	r16
     654:	1f 93       	push	r17
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    return __eerd_word (__p, eeprom_read_byte);
     65a:	63 e5       	ldi	r22, 0x53	; 83
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0e 94 a6 0b 	call	0x174c	; 0x174c <__eerd_word>
     666:	9c 01       	movw	r18, r24
	uint8_t i, sign, firstConv=_YES;
	uint16_t val, fract;	
	//read from EEPROM saved value & coolerState state
	#if STANDALONE_MODE == 1
		setData[0]= eeprom_read_word (&savedSetData);
     668:	90 93 19 02 	sts	0x0219, r25
     66c:	80 93 18 02 	sts	0x0218, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     670:	f9 99       	sbic	0x1f, 1	; 31
     672:	fe cf       	rjmp	.-4      	; 0x670 <main+0x38>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     674:	82 e0       	ldi	r24, 0x02	; 2
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	92 bd       	out	0x22, r25	; 34
     67a:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
     67c:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
     67e:	40 b5       	in	r20, 0x20	; 32
		coolerState = eeprom_read_byte(&savedCoolerState);
     680:	40 93 2a 02 	sts	0x022A, r20
		//if saved settings corrupted - set it by default
		if ( (setData[0]<780)||(setData[0]>1780) ) setData[0]=1730;
     684:	2c 50       	subi	r18, 0x0C	; 12
     686:	33 40       	sbci	r19, 0x03	; 3
     688:	29 5e       	subi	r18, 0xE9	; 233
     68a:	33 40       	sbci	r19, 0x03	; 3
     68c:	30 f0       	brcs	.+12     	; 0x69a <main+0x62>
     68e:	82 ec       	ldi	r24, 0xC2	; 194
     690:	96 e0       	ldi	r25, 0x06	; 6
     692:	90 93 19 02 	sts	0x0219, r25
     696:	80 93 18 02 	sts	0x0218, r24
		if ( (coolerState!=COOLER_ON)&&(coolerState!=COOLER_OFF) ) coolerState=COOLER_OFF;
     69a:	42 30       	cpi	r20, 0x02	; 2
     69c:	10 f0       	brcs	.+4      	; 0x6a2 <main+0x6a>
     69e:	10 92 2a 02 	sts	0x022A, r1
		setData[0]=1730;
		coolerState=COOLER_OFF;
	#endif
	//init variables
	for (i=0;i<SENSOR_COUNT;i++)
		sensorData[i]=0;
     6a2:	10 92 1b 02 	sts	0x021B, r1
     6a6:	10 92 1a 02 	sts	0x021A, r1
     6aa:	10 92 1d 02 	sts	0x021D, r1
     6ae:	10 92 1c 02 	sts	0x021C, r1
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=txBuf[i]=0;
     6b6:	fc 01       	movw	r30, r24
     6b8:	e4 5f       	subi	r30, 0xF4	; 244
     6ba:	fd 4f       	sbci	r31, 0xFD	; 253
     6bc:	10 82       	st	Z, r1
     6be:	fc 01       	movw	r30, r24
     6c0:	e2 5e       	subi	r30, 0xE2	; 226
     6c2:	fd 4f       	sbci	r31, 0xFD	; 253
     6c4:	10 82       	st	Z, r1
     6c6:	01 96       	adiw	r24, 0x01	; 1
}

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     6c8:	8b 30       	cpi	r24, 0x0B	; 11
     6ca:	91 05       	cpc	r25, r1
     6cc:	a1 f7       	brne	.-24     	; 0x6b6 <main+0x7e>
	#endif
	//init variables
	for (i=0;i<SENSOR_COUNT;i++)
		sensorData[i]=0;
	clearBuf ();
	U=0.0;
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	a0 e0       	ldi	r26, 0x00	; 0
     6d4:	b0 e0       	ldi	r27, 0x00	; 0
     6d6:	80 93 2f 02 	sts	0x022F, r24
     6da:	90 93 30 02 	sts	0x0230, r25
     6de:	a0 93 31 02 	sts	0x0231, r26
     6e2:	b0 93 32 02 	sts	0x0232, r27
	E=0;
     6e6:	80 93 2b 02 	sts	0x022B, r24
     6ea:	90 93 2c 02 	sts	0x022C, r25
     6ee:	a0 93 2d 02 	sts	0x022D, r26
     6f2:	b0 93 2e 02 	sts	0x022E, r27
	//Init ports, UART, PWM
	SENSOR_PORT&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));     	
     6f6:	88 b1       	in	r24, 0x08	; 8
     6f8:	83 7f       	andi	r24, 0xF3	; 243
     6fa:	88 b9       	out	0x08, r24	; 8
	SENSOR_DDR&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));		
     6fc:	87 b1       	in	r24, 0x07	; 7
     6fe:	83 7f       	andi	r24, 0xF3	; 243
     700:	87 b9       	out	0x07, r24	; 7
 
	#if PWM_MODE == 1
		initPWM();
	#else
		TEC_PORT&=~(1<<TEC_PIN);
     702:	5d 98       	cbi	0x0b, 5	; 11
		TEC_DDR|=(1<<TEC_PIN);
     704:	55 9a       	sbi	0x0a, 5	; 10
//------------------------------------------------------------------------------------
//UART

void uartInit(void)
{
	UBRR0H = (BAUD_PRESCALE >> 8);		// Init UART baudrate
     706:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUD_PRESCALE;
     70a:	87 e6       	ldi	r24, 0x67	; 103
     70c:	80 93 c4 00 	sts	0x00C4, r24

	UCSR0B |= (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);   // Turn on the transmission and reception circuitry
     710:	80 91 c1 00 	lds	r24, 0x00C1
     714:	88 69       	ori	r24, 0x98	; 152
     716:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01); // Use 8-bit character sizes
     71a:	80 91 c2 00 	lds	r24, 0x00C2
     71e:	86 60       	ori	r24, 0x06	; 6
     720:	80 93 c2 00 	sts	0x00C2, r24
	#else
		TEC_PORT&=~(1<<TEC_PIN);
		TEC_DDR|=(1<<TEC_PIN);
	#endif
	uartInit();	
	sei();
     724:	78 94       	sei
     726:	11 e0       	ldi	r17, 0x01	; 1
     728:	a0 e9       	ldi	r26, 0x90	; 144
     72a:	2a 2e       	mov	r2, r26
     72c:	a1 e0       	ldi	r26, 0x01	; 1
     72e:	3a 2e       	mov	r3, r26
					E=(double) sensorData[0]-setData[0];

					U=U+KPSLOW*E;

					if (U>255.0) 	U=255.0;
					if (U<=0.0) 	U=0.0;		
     730:	0f 2e       	mov	r0, r31
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	6f 2e       	mov	r6, r31
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	7f 2e       	mov	r7, r31
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	8f 2e       	mov	r8, r31
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	9f 2e       	mov	r9, r31
     742:	f0 2d       	mov	r31, r0
     744:	01 c0       	rjmp	.+2      	; 0x748 <main+0x110>
	#else
		TEC_PORT&=~(1<<TEC_PIN);
		TEC_DDR|=(1<<TEC_PIN);
	#endif
	uartInit();	
	sei();
     746:	10 e0       	ldi	r17, 0x00	; 0

//##############################################################
	#if SLOW_PWM_MODE == 1
	while (1)
	{
		if (packetReceived!=0) processPacket();
     748:	80 91 08 02 	lds	r24, 0x0208
     74c:	88 23       	and	r24, r24
     74e:	11 f0       	breq	.+4      	; 0x754 <main+0x11c>
     750:	0e 94 4e 02 	call	0x49c	; 0x49c <processPacket>
		errorCode=0;
     754:	10 92 0a 02 	sts	0x020A, r1
		for (i=0;i<SENSOR_COUNT;i++)
		{
			if (presentDS18b20(i)==1)
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	0e 94 9a 01 	call	0x334	; 0x334 <presentDS18b20>
     75e:	81 30       	cpi	r24, 0x01	; 1
     760:	31 f0       	breq	.+12     	; 0x76e <main+0x136>
			{
				sendDS18b20(SKIP_ROM,i);
				sendDS18b20(START_CONVERSION,i);
			}
			else errorCode|=(1<<i);
     762:	80 91 0a 02 	lds	r24, 0x020A
     766:	81 60       	ori	r24, 0x01	; 1
     768:	80 93 0a 02 	sts	0x020A, r24
     76c:	08 c0       	rjmp	.+16     	; 0x77e <main+0x146>
		errorCode=0;
		for (i=0;i<SENSOR_COUNT;i++)
		{
			if (presentDS18b20(i)==1)
			{
				sendDS18b20(SKIP_ROM,i);
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	8c ec       	ldi	r24, 0xCC	; 204
     772:	0e 94 c5 01 	call	0x38a	; 0x38a <sendDS18b20>
				sendDS18b20(START_CONVERSION,i);
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	84 e4       	ldi	r24, 0x44	; 68
     77a:	0e 94 c5 01 	call	0x38a	; 0x38a <sendDS18b20>
	{
		if (packetReceived!=0) processPacket();
		errorCode=0;
		for (i=0;i<SENSOR_COUNT;i++)
		{
			if (presentDS18b20(i)==1)
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	0e 94 9a 01 	call	0x334	; 0x334 <presentDS18b20>
     784:	81 30       	cpi	r24, 0x01	; 1
     786:	49 f4       	brne	.+18     	; 0x79a <main+0x162>
			{
				sendDS18b20(SKIP_ROM,i);
     788:	61 e0       	ldi	r22, 0x01	; 1
     78a:	8c ec       	ldi	r24, 0xCC	; 204
     78c:	0e 94 c5 01 	call	0x38a	; 0x38a <sendDS18b20>
				sendDS18b20(START_CONVERSION,i);
     790:	61 e0       	ldi	r22, 0x01	; 1
     792:	84 e4       	ldi	r24, 0x44	; 68
     794:	0e 94 c5 01 	call	0x38a	; 0x38a <sendDS18b20>
     798:	05 c0       	rjmp	.+10     	; 0x7a4 <main+0x16c>
			}
			else errorCode|=(1<<i);
     79a:	80 91 0a 02 	lds	r24, 0x020A
     79e:	82 60       	ori	r24, 0x02	; 2
     7a0:	80 93 0a 02 	sts	0x020A, r24
		}
		if (firstConv==_YES) firstConv=_NO;
     7a4:	11 30       	cpi	r17, 0x01	; 1
     7a6:	79 f2       	breq	.-98     	; 0x746 <main+0x10e>
     7a8:	ca e1       	ldi	r28, 0x1A	; 26
     7aa:	d2 e0       	ldi	r29, 0x02	; 2
     7ac:	00 e0       	ldi	r16, 0x00	; 0
     7ae:	10 e0       	ldi	r17, 0x00	; 0
		else
		{		 
			//receive measured data from sensors
			for (i=0;i<SENSOR_COUNT;i++)
			{
				if (presentDS18b20(i)==1)
     7b0:	80 2f       	mov	r24, r16
     7b2:	0e 94 9a 01 	call	0x334	; 0x334 <presentDS18b20>
     7b6:	81 30       	cpi	r24, 0x01	; 1
     7b8:	09 f0       	breq	.+2      	; 0x7bc <main+0x184>
     7ba:	49 c0       	rjmp	.+146    	; 0x84e <main+0x216>
				{
					sendDS18b20(SKIP_ROM,i);
     7bc:	60 2f       	mov	r22, r16
     7be:	8c ec       	ldi	r24, 0xCC	; 204
     7c0:	0e 94 c5 01 	call	0x38a	; 0x38a <sendDS18b20>
					sendDS18b20(GET_DATA,i);
     7c4:	60 2f       	mov	r22, r16
     7c6:	8e eb       	ldi	r24, 0xBE	; 190
     7c8:	0e 94 c5 01 	call	0x38a	; 0x38a <sendDS18b20>
					val=receiveDS18b20(i);
     7cc:	80 2f       	mov	r24, r16
     7ce:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <receiveDS18b20>
					if ((val&0x8000)!=0x00)
     7d2:	97 fd       	sbrc	r25, 7
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <main+0x1a2>
     7d6:	e0 e0       	ldi	r30, 0x00	; 0
     7d8:	04 c0       	rjmp	.+8      	; 0x7e2 <main+0x1aa>
					{
						sign=1;
						val=0xffff-val+1;
     7da:	90 95       	com	r25
     7dc:	81 95       	neg	r24
     7de:	9f 4f       	sbci	r25, 0xFF	; 255
     7e0:	e1 e0       	ldi	r30, 0x01	; 1
					}
					else sign=0;
					fract=0;
					if ((val&0x01)!=0x00) fract=fract+65;
     7e2:	80 fd       	sbrc	r24, 0
     7e4:	03 c0       	rjmp	.+6      	; 0x7ec <main+0x1b4>
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <main+0x1b8>
     7ec:	41 e4       	ldi	r20, 0x41	; 65
     7ee:	50 e0       	ldi	r21, 0x00	; 0
					if ((val&0x02)!=0x00) fract=fract+125;
     7f0:	81 ff       	sbrs	r24, 1
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <main+0x1c0>
     7f4:	43 58       	subi	r20, 0x83	; 131
     7f6:	5f 4f       	sbci	r21, 0xFF	; 255
					if ((val&0x04)!=0x00) fract=fract+250;
     7f8:	82 ff       	sbrs	r24, 2
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <main+0x1c8>
     7fc:	46 50       	subi	r20, 0x06	; 6
     7fe:	5f 4f       	sbci	r21, 0xFF	; 255
					if ((val&0x08)!=0x00) fract=fract+500;
     800:	83 ff       	sbrs	r24, 3
     802:	02 c0       	rjmp	.+4      	; 0x808 <main+0x1d0>
     804:	4c 50       	subi	r20, 0x0C	; 12
     806:	5e 4f       	sbci	r21, 0xFE	; 254
					val=(val>>4)*10+fract/100;
     808:	f4 e0       	ldi	r31, 0x04	; 4
     80a:	96 95       	lsr	r25
     80c:	87 95       	ror	r24
     80e:	fa 95       	dec	r31
     810:	e1 f7       	brne	.-8      	; 0x80a <main+0x1d2>
     812:	9c 01       	movw	r18, r24
     814:	73 e0       	ldi	r23, 0x03	; 3
     816:	22 0f       	add	r18, r18
     818:	33 1f       	adc	r19, r19
     81a:	7a 95       	dec	r23
     81c:	e1 f7       	brne	.-8      	; 0x816 <main+0x1de>
     81e:	88 0f       	add	r24, r24
     820:	99 1f       	adc	r25, r25
     822:	28 0f       	add	r18, r24
     824:	39 1f       	adc	r19, r25
     826:	ca 01       	movw	r24, r20
     828:	64 e6       	ldi	r22, 0x64	; 100
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <__udivmodhi4>
     830:	62 0f       	add	r22, r18
     832:	73 1f       	adc	r23, r19
					if (sign==1) val=OFFSET-val;
     834:	e1 30       	cpi	r30, 0x01	; 1
     836:	31 f4       	brne	.+12     	; 0x844 <main+0x20c>
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	95 e0       	ldi	r25, 0x05	; 5
     83c:	86 1b       	sub	r24, r22
     83e:	97 0b       	sbc	r25, r23
     840:	bc 01       	movw	r22, r24
     842:	02 c0       	rjmp	.+4      	; 0x848 <main+0x210>
					else val=val+OFFSET;
     844:	60 50       	subi	r22, 0x00	; 0
     846:	7b 4f       	sbci	r23, 0xFB	; 251
					sensorData[i]=val;
     848:	79 83       	std	Y+1, r23	; 0x01
     84a:	68 83       	st	Y, r22
     84c:	0d c0       	rjmp	.+26     	; 0x868 <main+0x230>
				}
				else errorCode|=(1<<i);
     84e:	21 e0       	ldi	r18, 0x01	; 1
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	00 2e       	mov	r0, r16
     854:	02 c0       	rjmp	.+4      	; 0x85a <main+0x222>
     856:	22 0f       	add	r18, r18
     858:	33 1f       	adc	r19, r19
     85a:	0a 94       	dec	r0
     85c:	e2 f7       	brpl	.-8      	; 0x856 <main+0x21e>
     85e:	80 91 0a 02 	lds	r24, 0x020A
     862:	82 2b       	or	r24, r18
     864:	80 93 0a 02 	sts	0x020A, r24
     868:	0f 5f       	subi	r16, 0xFF	; 255
     86a:	1f 4f       	sbci	r17, 0xFF	; 255
     86c:	22 96       	adiw	r28, 0x02	; 2
		}
		if (firstConv==_YES) firstConv=_NO;
		else
		{		 
			//receive measured data from sensors
			for (i=0;i<SENSOR_COUNT;i++)
     86e:	02 30       	cpi	r16, 0x02	; 2
     870:	11 05       	cpc	r17, r1
     872:	09 f0       	breq	.+2      	; 0x876 <main+0x23e>
     874:	9d cf       	rjmp	.-198    	; 0x7b0 <main+0x178>
					sensorData[i]=val;
				}
				else errorCode|=(1<<i);
			}
			//if coolerState is OFF - clear all variables
			if (coolerState==COOLER_OFF) 
     876:	80 91 2a 02 	lds	r24, 0x022A
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <main+0x26e>
			{
				coolerPower=0x00;
     87e:	10 92 0b 02 	sts	0x020B, r1
				U=0.0;
     882:	60 92 2f 02 	sts	0x022F, r6
     886:	70 92 30 02 	sts	0x0230, r7
     88a:	80 92 31 02 	sts	0x0231, r8
     88e:	90 92 32 02 	sts	0x0232, r9
				E=0.0;
     892:	60 92 2b 02 	sts	0x022B, r6
     896:	70 92 2c 02 	sts	0x022C, r7
     89a:	80 92 2d 02 	sts	0x022D, r8
     89e:	90 92 2e 02 	sts	0x022E, r9
				TEC_PORT&=~(1<<TEC_PIN);
     8a2:	5d 98       	cbi	0x0b, 5	; 11
     8a4:	50 cf       	rjmp	.-352    	; 0x746 <main+0x10e>
			}
			//If no errors at sensor[0] and coolerState is ON - calculate and set software PWM
			if (coolerState==COOLER_ON)
     8a6:	81 30       	cpi	r24, 0x01	; 1
     8a8:	09 f0       	breq	.+2      	; 0x8ac <main+0x274>
     8aa:	4d cf       	rjmp	.-358    	; 0x746 <main+0x10e>
				{
					E=(double) sensorData[0]-setData[0];
     8ac:	60 91 1a 02 	lds	r22, 0x021A
     8b0:	70 91 1b 02 	lds	r23, 0x021B
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 38 09 	call	0x1270	; 0x1270 <__floatunsisf>
     8bc:	7b 01       	movw	r14, r22
     8be:	8c 01       	movw	r16, r24
     8c0:	60 91 18 02 	lds	r22, 0x0218
     8c4:	70 91 19 02 	lds	r23, 0x0219
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 38 09 	call	0x1270	; 0x1270 <__floatunsisf>
     8d0:	9b 01       	movw	r18, r22
     8d2:	ac 01       	movw	r20, r24
     8d4:	c8 01       	movw	r24, r16
     8d6:	b7 01       	movw	r22, r14
     8d8:	0e 94 cc 06 	call	0xd98	; 0xd98 <__subsf3>
     8dc:	60 93 2b 02 	sts	0x022B, r22
     8e0:	70 93 2c 02 	sts	0x022C, r23
     8e4:	80 93 2d 02 	sts	0x022D, r24
     8e8:	90 93 2e 02 	sts	0x022E, r25

					U=U+KPSLOW*E;
     8ec:	2a e0       	ldi	r18, 0x0A	; 10
     8ee:	37 ed       	ldi	r19, 0xD7	; 215
     8f0:	43 e2       	ldi	r20, 0x23	; 35
     8f2:	5c e3       	ldi	r21, 0x3C	; 60
     8f4:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     8f8:	20 91 2f 02 	lds	r18, 0x022F
     8fc:	30 91 30 02 	lds	r19, 0x0230
     900:	40 91 31 02 	lds	r20, 0x0231
     904:	50 91 32 02 	lds	r21, 0x0232
     908:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__addsf3>
     90c:	60 93 2f 02 	sts	0x022F, r22
     910:	70 93 30 02 	sts	0x0230, r23
     914:	80 93 31 02 	sts	0x0231, r24
     918:	90 93 32 02 	sts	0x0232, r25

					if (U>255.0) 	U=255.0;
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	4f e7       	ldi	r20, 0x7F	; 127
     922:	53 e4       	ldi	r21, 0x43	; 67
     924:	0e 94 24 08 	call	0x1048	; 0x1048 <__gtsf2>
     928:	18 16       	cp	r1, r24
     92a:	64 f4       	brge	.+24     	; 0x944 <__stack+0x45>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	af e7       	ldi	r26, 0x7F	; 127
     932:	b3 e4       	ldi	r27, 0x43	; 67
     934:	80 93 2f 02 	sts	0x022F, r24
     938:	90 93 30 02 	sts	0x0230, r25
     93c:	a0 93 31 02 	sts	0x0231, r26
     940:	b0 93 32 02 	sts	0x0232, r27
					if (U<=0.0) 	U=0.0;		
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	40 e0       	ldi	r20, 0x00	; 0
     94a:	50 e0       	ldi	r21, 0x00	; 0
     94c:	60 91 2f 02 	lds	r22, 0x022F
     950:	70 91 30 02 	lds	r23, 0x0230
     954:	80 91 31 02 	lds	r24, 0x0231
     958:	90 91 32 02 	lds	r25, 0x0232
     95c:	0e 94 b4 08 	call	0x1168	; 0x1168 <__lesf2>
     960:	18 16       	cp	r1, r24
     962:	44 f0       	brlt	.+16     	; 0x974 <__stack+0x75>
     964:	60 92 2f 02 	sts	0x022F, r6
     968:	70 92 30 02 	sts	0x0230, r7
     96c:	80 92 31 02 	sts	0x0231, r8
     970:	90 92 32 02 	sts	0x0232, r9
					
					if (U>0.0) TEC_PORT|=(1<<TEC_PIN);	
     974:	a0 90 2f 02 	lds	r10, 0x022F
     978:	b0 90 30 02 	lds	r11, 0x0230
     97c:	c0 90 31 02 	lds	r12, 0x0231
     980:	d0 90 32 02 	lds	r13, 0x0232
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	c6 01       	movw	r24, r12
     98e:	b5 01       	movw	r22, r10
     990:	0e 94 24 08 	call	0x1048	; 0x1048 <__gtsf2>
     994:	18 16       	cp	r1, r24
     996:	0c f4       	brge	.+2      	; 0x99a <__stack+0x9b>
     998:	5d 9a       	sbi	0x0b, 5	; 11
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	4a e7       	ldi	r20, 0x7A	; 122
     9a0:	55 e4       	ldi	r21, 0x45	; 69
     9a2:	c6 01       	movw	r24, r12
     9a4:	b5 01       	movw	r22, r10
     9a6:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     9aa:	7b 01       	movw	r14, r22
     9ac:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e8       	ldi	r20, 0x80	; 128
     9b4:	5f e3       	ldi	r21, 0x3F	; 63
     9b6:	0e 94 84 08 	call	0x1108	; 0x1108 <__ltsf2>
     9ba:	88 23       	and	r24, r24
     9bc:	1c f4       	brge	.+6      	; 0x9c4 <__stack+0xc5>
     9be:	61 e0       	ldi	r22, 0x01	; 1
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	22 c0       	rjmp	.+68     	; 0xa08 <__stack+0x109>
		__ticks = 1;
	else if (__tmp > 65535)
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	3f ef       	ldi	r19, 0xFF	; 255
     9c8:	4f e7       	ldi	r20, 0x7F	; 127
     9ca:	57 e4       	ldi	r21, 0x47	; 71
     9cc:	c8 01       	movw	r24, r16
     9ce:	b7 01       	movw	r22, r14
     9d0:	0e 94 24 08 	call	0x1048	; 0x1048 <__gtsf2>
     9d4:	18 16       	cp	r1, r24
     9d6:	a4 f4       	brge	.+40     	; 0xa00 <__stack+0x101>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	40 e2       	ldi	r20, 0x20	; 32
     9de:	51 e4       	ldi	r21, 0x41	; 65
     9e0:	c6 01       	movw	r24, r12
     9e2:	b5 01       	movw	r22, r10
     9e4:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     9e8:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     9ec:	05 c0       	rjmp	.+10     	; 0x9f8 <__stack+0xf9>
     9ee:	c1 01       	movw	r24, r2
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	f1 f7       	brne	.-4      	; 0x9f0 <__stack+0xf1>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9f4:	61 50       	subi	r22, 0x01	; 1
     9f6:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9f8:	61 15       	cp	r22, r1
     9fa:	71 05       	cpc	r23, r1
     9fc:	c1 f7       	brne	.-16     	; 0x9ee <__stack+0xef>
     9fe:	07 c0       	rjmp	.+14     	; 0xa0e <__stack+0x10f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a00:	c8 01       	movw	r24, r16
     a02:	b7 01       	movw	r22, r14
     a04:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     a08:	cb 01       	movw	r24, r22
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	f1 f7       	brne	.-4      	; 0xa0a <__stack+0x10b>
					_delay_ms(U);								
					if (((uint8_t) U)!=255)TEC_PORT&=~(1<<TEC_PIN);
     a0e:	c6 01       	movw	r24, r12
     a10:	b5 01       	movw	r22, r10
     a12:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     a16:	56 2e       	mov	r5, r22
     a18:	9f ef       	ldi	r25, 0xFF	; 255
     a1a:	59 12       	cpse	r5, r25
     a1c:	5d 98       	cbi	0x0b, 5	; 11
					_delay_ms(255-U);
     a1e:	a6 01       	movw	r20, r12
     a20:	95 01       	movw	r18, r10
     a22:	60 e0       	ldi	r22, 0x00	; 0
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	8f e7       	ldi	r24, 0x7F	; 127
     a28:	93 e4       	ldi	r25, 0x43	; 67
     a2a:	0e 94 cc 06 	call	0xd98	; 0xd98 <__subsf3>
     a2e:	5b 01       	movw	r10, r22
     a30:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	4a e7       	ldi	r20, 0x7A	; 122
     a38:	55 e4       	ldi	r21, 0x45	; 69
     a3a:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     a3e:	7b 01       	movw	r14, r22
     a40:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	40 e8       	ldi	r20, 0x80	; 128
     a48:	5f e3       	ldi	r21, 0x3F	; 63
     a4a:	0e 94 84 08 	call	0x1108	; 0x1108 <__ltsf2>
     a4e:	88 23       	and	r24, r24
     a50:	1c f4       	brge	.+6      	; 0xa58 <__stack+0x159>
     a52:	61 e0       	ldi	r22, 0x01	; 1
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	22 c0       	rjmp	.+68     	; 0xa9c <__stack+0x19d>
		__ticks = 1;
	else if (__tmp > 65535)
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	3f ef       	ldi	r19, 0xFF	; 255
     a5c:	4f e7       	ldi	r20, 0x7F	; 127
     a5e:	57 e4       	ldi	r21, 0x47	; 71
     a60:	c8 01       	movw	r24, r16
     a62:	b7 01       	movw	r22, r14
     a64:	0e 94 24 08 	call	0x1048	; 0x1048 <__gtsf2>
     a68:	18 16       	cp	r1, r24
     a6a:	a4 f4       	brge	.+40     	; 0xa94 <__stack+0x195>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	40 e2       	ldi	r20, 0x20	; 32
     a72:	51 e4       	ldi	r21, 0x41	; 65
     a74:	c6 01       	movw	r24, r12
     a76:	b5 01       	movw	r22, r10
     a78:	0e 94 2a 07 	call	0xe54	; 0xe54 <__mulsf3>
     a7c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     a80:	05 c0       	rjmp	.+10     	; 0xa8c <__stack+0x18d>
     a82:	c1 01       	movw	r24, r2
     a84:	01 97       	sbiw	r24, 0x01	; 1
     a86:	f1 f7       	brne	.-4      	; 0xa84 <__stack+0x185>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a88:	61 50       	subi	r22, 0x01	; 1
     a8a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a8c:	61 15       	cp	r22, r1
     a8e:	71 05       	cpc	r23, r1
     a90:	c1 f7       	brne	.-16     	; 0xa82 <__stack+0x183>
     a92:	07 c0       	rjmp	.+14     	; 0xaa2 <__stack+0x1a3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a94:	c8 01       	movw	r24, r16
     a96:	b7 01       	movw	r22, r14
     a98:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixunssfsi>
     a9c:	cb 01       	movw	r24, r22
     a9e:	01 97       	sbiw	r24, 0x01	; 1
     aa0:	f1 f7       	brne	.-4      	; 0xa9e <__stack+0x19f>

					coolerPower=((uint8_t)U);
     aa2:	50 92 0b 02 	sts	0x020B, r5
     aa6:	4f ce       	rjmp	.-866    	; 0x746 <main+0x10e>

00000aa8 <__fixunssfsi>:
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	7b 01       	movw	r14, r22
     ab2:	8c 01       	movw	r16, r24
     ab4:	20 e0       	ldi	r18, 0x00	; 0
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	40 e0       	ldi	r20, 0x00	; 0
     aba:	5f e4       	ldi	r21, 0x4F	; 79
     abc:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__gesf2>
     ac0:	88 23       	and	r24, r24
     ac2:	8c f0       	brlt	.+34     	; 0xae6 <__fixunssfsi+0x3e>
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	40 e0       	ldi	r20, 0x00	; 0
     aca:	5f e4       	ldi	r21, 0x4F	; 79
     acc:	c8 01       	movw	r24, r16
     ace:	b7 01       	movw	r22, r14
     ad0:	0e 94 cc 06 	call	0xd98	; 0xd98 <__subsf3>
     ad4:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__fixsfsi>
     ad8:	9b 01       	movw	r18, r22
     ada:	ac 01       	movw	r20, r24
     adc:	20 50       	subi	r18, 0x00	; 0
     ade:	30 40       	sbci	r19, 0x00	; 0
     ae0:	40 40       	sbci	r20, 0x00	; 0
     ae2:	50 48       	sbci	r21, 0x80	; 128
     ae4:	06 c0       	rjmp	.+12     	; 0xaf2 <__fixunssfsi+0x4a>
     ae6:	c8 01       	movw	r24, r16
     ae8:	b7 01       	movw	r22, r14
     aea:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__fixsfsi>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	b9 01       	movw	r22, r18
     af4:	ca 01       	movw	r24, r20
     af6:	1f 91       	pop	r17
     af8:	0f 91       	pop	r16
     afa:	ff 90       	pop	r15
     afc:	ef 90       	pop	r14
     afe:	08 95       	ret

00000b00 <_fpadd_parts>:
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	e6 e8       	ldi	r30, 0x86	; 134
     b06:	f5 e0       	ldi	r31, 0x05	; 5
     b08:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <__prologue_saves__>
     b0c:	dc 01       	movw	r26, r24
     b0e:	2b 01       	movw	r4, r22
     b10:	fa 01       	movw	r30, r20
     b12:	9c 91       	ld	r25, X
     b14:	92 30       	cpi	r25, 0x02	; 2
     b16:	08 f4       	brcc	.+2      	; 0xb1a <_fpadd_parts+0x1a>
     b18:	39 c1       	rjmp	.+626    	; 0xd8c <_fpadd_parts+0x28c>
     b1a:	eb 01       	movw	r28, r22
     b1c:	88 81       	ld	r24, Y
     b1e:	82 30       	cpi	r24, 0x02	; 2
     b20:	08 f4       	brcc	.+2      	; 0xb24 <_fpadd_parts+0x24>
     b22:	33 c1       	rjmp	.+614    	; 0xd8a <_fpadd_parts+0x28a>
     b24:	94 30       	cpi	r25, 0x04	; 4
     b26:	69 f4       	brne	.+26     	; 0xb42 <_fpadd_parts+0x42>
     b28:	84 30       	cpi	r24, 0x04	; 4
     b2a:	09 f0       	breq	.+2      	; 0xb2e <_fpadd_parts+0x2e>
     b2c:	2f c1       	rjmp	.+606    	; 0xd8c <_fpadd_parts+0x28c>
     b2e:	11 96       	adiw	r26, 0x01	; 1
     b30:	9c 91       	ld	r25, X
     b32:	11 97       	sbiw	r26, 0x01	; 1
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	98 17       	cp	r25, r24
     b38:	09 f4       	brne	.+2      	; 0xb3c <_fpadd_parts+0x3c>
     b3a:	28 c1       	rjmp	.+592    	; 0xd8c <_fpadd_parts+0x28c>
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b1 e0       	ldi	r27, 0x01	; 1
     b40:	25 c1       	rjmp	.+586    	; 0xd8c <_fpadd_parts+0x28c>
     b42:	84 30       	cpi	r24, 0x04	; 4
     b44:	09 f4       	brne	.+2      	; 0xb48 <_fpadd_parts+0x48>
     b46:	21 c1       	rjmp	.+578    	; 0xd8a <_fpadd_parts+0x28a>
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	a9 f4       	brne	.+42     	; 0xb76 <_fpadd_parts+0x76>
     b4c:	92 30       	cpi	r25, 0x02	; 2
     b4e:	09 f0       	breq	.+2      	; 0xb52 <_fpadd_parts+0x52>
     b50:	1d c1       	rjmp	.+570    	; 0xd8c <_fpadd_parts+0x28c>
     b52:	9a 01       	movw	r18, r20
     b54:	ad 01       	movw	r20, r26
     b56:	88 e0       	ldi	r24, 0x08	; 8
     b58:	ea 01       	movw	r28, r20
     b5a:	09 90       	ld	r0, Y+
     b5c:	ae 01       	movw	r20, r28
     b5e:	e9 01       	movw	r28, r18
     b60:	09 92       	st	Y+, r0
     b62:	9e 01       	movw	r18, r28
     b64:	81 50       	subi	r24, 0x01	; 1
     b66:	c1 f7       	brne	.-16     	; 0xb58 <_fpadd_parts+0x58>
     b68:	e2 01       	movw	r28, r4
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	11 96       	adiw	r26, 0x01	; 1
     b6e:	9c 91       	ld	r25, X
     b70:	89 23       	and	r24, r25
     b72:	81 83       	std	Z+1, r24	; 0x01
     b74:	08 c1       	rjmp	.+528    	; 0xd86 <_fpadd_parts+0x286>
     b76:	92 30       	cpi	r25, 0x02	; 2
     b78:	09 f4       	brne	.+2      	; 0xb7c <_fpadd_parts+0x7c>
     b7a:	07 c1       	rjmp	.+526    	; 0xd8a <_fpadd_parts+0x28a>
     b7c:	12 96       	adiw	r26, 0x02	; 2
     b7e:	2d 90       	ld	r2, X+
     b80:	3c 90       	ld	r3, X
     b82:	13 97       	sbiw	r26, 0x03	; 3
     b84:	eb 01       	movw	r28, r22
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	9b 81       	ldd	r25, Y+3	; 0x03
     b8a:	14 96       	adiw	r26, 0x04	; 4
     b8c:	ad 90       	ld	r10, X+
     b8e:	bd 90       	ld	r11, X+
     b90:	cd 90       	ld	r12, X+
     b92:	dc 90       	ld	r13, X
     b94:	17 97       	sbiw	r26, 0x07	; 7
     b96:	ec 80       	ldd	r14, Y+4	; 0x04
     b98:	fd 80       	ldd	r15, Y+5	; 0x05
     b9a:	0e 81       	ldd	r16, Y+6	; 0x06
     b9c:	1f 81       	ldd	r17, Y+7	; 0x07
     b9e:	91 01       	movw	r18, r2
     ba0:	28 1b       	sub	r18, r24
     ba2:	39 0b       	sbc	r19, r25
     ba4:	b9 01       	movw	r22, r18
     ba6:	37 ff       	sbrs	r19, 7
     ba8:	04 c0       	rjmp	.+8      	; 0xbb2 <_fpadd_parts+0xb2>
     baa:	66 27       	eor	r22, r22
     bac:	77 27       	eor	r23, r23
     bae:	62 1b       	sub	r22, r18
     bb0:	73 0b       	sbc	r23, r19
     bb2:	60 32       	cpi	r22, 0x20	; 32
     bb4:	71 05       	cpc	r23, r1
     bb6:	0c f0       	brlt	.+2      	; 0xbba <_fpadd_parts+0xba>
     bb8:	61 c0       	rjmp	.+194    	; 0xc7c <_fpadd_parts+0x17c>
     bba:	12 16       	cp	r1, r18
     bbc:	13 06       	cpc	r1, r19
     bbe:	6c f5       	brge	.+90     	; 0xc1a <_fpadd_parts+0x11a>
     bc0:	37 01       	movw	r6, r14
     bc2:	48 01       	movw	r8, r16
     bc4:	06 2e       	mov	r0, r22
     bc6:	04 c0       	rjmp	.+8      	; 0xbd0 <_fpadd_parts+0xd0>
     bc8:	96 94       	lsr	r9
     bca:	87 94       	ror	r8
     bcc:	77 94       	ror	r7
     bce:	67 94       	ror	r6
     bd0:	0a 94       	dec	r0
     bd2:	d2 f7       	brpl	.-12     	; 0xbc8 <_fpadd_parts+0xc8>
     bd4:	21 e0       	ldi	r18, 0x01	; 1
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	40 e0       	ldi	r20, 0x00	; 0
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <_fpadd_parts+0xe6>
     bde:	22 0f       	add	r18, r18
     be0:	33 1f       	adc	r19, r19
     be2:	44 1f       	adc	r20, r20
     be4:	55 1f       	adc	r21, r21
     be6:	6a 95       	dec	r22
     be8:	d2 f7       	brpl	.-12     	; 0xbde <_fpadd_parts+0xde>
     bea:	21 50       	subi	r18, 0x01	; 1
     bec:	30 40       	sbci	r19, 0x00	; 0
     bee:	40 40       	sbci	r20, 0x00	; 0
     bf0:	50 40       	sbci	r21, 0x00	; 0
     bf2:	2e 21       	and	r18, r14
     bf4:	3f 21       	and	r19, r15
     bf6:	40 23       	and	r20, r16
     bf8:	51 23       	and	r21, r17
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	41 05       	cpc	r20, r1
     c00:	51 05       	cpc	r21, r1
     c02:	21 f0       	breq	.+8      	; 0xc0c <_fpadd_parts+0x10c>
     c04:	21 e0       	ldi	r18, 0x01	; 1
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e0       	ldi	r20, 0x00	; 0
     c0a:	50 e0       	ldi	r21, 0x00	; 0
     c0c:	79 01       	movw	r14, r18
     c0e:	8a 01       	movw	r16, r20
     c10:	e6 28       	or	r14, r6
     c12:	f7 28       	or	r15, r7
     c14:	08 29       	or	r16, r8
     c16:	19 29       	or	r17, r9
     c18:	3c c0       	rjmp	.+120    	; 0xc92 <_fpadd_parts+0x192>
     c1a:	23 2b       	or	r18, r19
     c1c:	d1 f1       	breq	.+116    	; 0xc92 <_fpadd_parts+0x192>
     c1e:	26 0e       	add	r2, r22
     c20:	37 1e       	adc	r3, r23
     c22:	35 01       	movw	r6, r10
     c24:	46 01       	movw	r8, r12
     c26:	06 2e       	mov	r0, r22
     c28:	04 c0       	rjmp	.+8      	; 0xc32 <_fpadd_parts+0x132>
     c2a:	96 94       	lsr	r9
     c2c:	87 94       	ror	r8
     c2e:	77 94       	ror	r7
     c30:	67 94       	ror	r6
     c32:	0a 94       	dec	r0
     c34:	d2 f7       	brpl	.-12     	; 0xc2a <_fpadd_parts+0x12a>
     c36:	21 e0       	ldi	r18, 0x01	; 1
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	40 e0       	ldi	r20, 0x00	; 0
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <_fpadd_parts+0x148>
     c40:	22 0f       	add	r18, r18
     c42:	33 1f       	adc	r19, r19
     c44:	44 1f       	adc	r20, r20
     c46:	55 1f       	adc	r21, r21
     c48:	6a 95       	dec	r22
     c4a:	d2 f7       	brpl	.-12     	; 0xc40 <_fpadd_parts+0x140>
     c4c:	21 50       	subi	r18, 0x01	; 1
     c4e:	30 40       	sbci	r19, 0x00	; 0
     c50:	40 40       	sbci	r20, 0x00	; 0
     c52:	50 40       	sbci	r21, 0x00	; 0
     c54:	2a 21       	and	r18, r10
     c56:	3b 21       	and	r19, r11
     c58:	4c 21       	and	r20, r12
     c5a:	5d 21       	and	r21, r13
     c5c:	21 15       	cp	r18, r1
     c5e:	31 05       	cpc	r19, r1
     c60:	41 05       	cpc	r20, r1
     c62:	51 05       	cpc	r21, r1
     c64:	21 f0       	breq	.+8      	; 0xc6e <_fpadd_parts+0x16e>
     c66:	21 e0       	ldi	r18, 0x01	; 1
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	50 e0       	ldi	r21, 0x00	; 0
     c6e:	59 01       	movw	r10, r18
     c70:	6a 01       	movw	r12, r20
     c72:	a6 28       	or	r10, r6
     c74:	b7 28       	or	r11, r7
     c76:	c8 28       	or	r12, r8
     c78:	d9 28       	or	r13, r9
     c7a:	0b c0       	rjmp	.+22     	; 0xc92 <_fpadd_parts+0x192>
     c7c:	82 15       	cp	r24, r2
     c7e:	93 05       	cpc	r25, r3
     c80:	2c f0       	brlt	.+10     	; 0xc8c <_fpadd_parts+0x18c>
     c82:	1c 01       	movw	r2, r24
     c84:	aa 24       	eor	r10, r10
     c86:	bb 24       	eor	r11, r11
     c88:	65 01       	movw	r12, r10
     c8a:	03 c0       	rjmp	.+6      	; 0xc92 <_fpadd_parts+0x192>
     c8c:	ee 24       	eor	r14, r14
     c8e:	ff 24       	eor	r15, r15
     c90:	87 01       	movw	r16, r14
     c92:	11 96       	adiw	r26, 0x01	; 1
     c94:	9c 91       	ld	r25, X
     c96:	d2 01       	movw	r26, r4
     c98:	11 96       	adiw	r26, 0x01	; 1
     c9a:	8c 91       	ld	r24, X
     c9c:	98 17       	cp	r25, r24
     c9e:	09 f4       	brne	.+2      	; 0xca2 <_fpadd_parts+0x1a2>
     ca0:	45 c0       	rjmp	.+138    	; 0xd2c <_fpadd_parts+0x22c>
     ca2:	99 23       	and	r25, r25
     ca4:	39 f0       	breq	.+14     	; 0xcb4 <_fpadd_parts+0x1b4>
     ca6:	a8 01       	movw	r20, r16
     ca8:	97 01       	movw	r18, r14
     caa:	2a 19       	sub	r18, r10
     cac:	3b 09       	sbc	r19, r11
     cae:	4c 09       	sbc	r20, r12
     cb0:	5d 09       	sbc	r21, r13
     cb2:	06 c0       	rjmp	.+12     	; 0xcc0 <_fpadd_parts+0x1c0>
     cb4:	a6 01       	movw	r20, r12
     cb6:	95 01       	movw	r18, r10
     cb8:	2e 19       	sub	r18, r14
     cba:	3f 09       	sbc	r19, r15
     cbc:	40 0b       	sbc	r20, r16
     cbe:	51 0b       	sbc	r21, r17
     cc0:	57 fd       	sbrc	r21, 7
     cc2:	08 c0       	rjmp	.+16     	; 0xcd4 <_fpadd_parts+0x1d4>
     cc4:	11 82       	std	Z+1, r1	; 0x01
     cc6:	33 82       	std	Z+3, r3	; 0x03
     cc8:	22 82       	std	Z+2, r2	; 0x02
     cca:	24 83       	std	Z+4, r18	; 0x04
     ccc:	35 83       	std	Z+5, r19	; 0x05
     cce:	46 83       	std	Z+6, r20	; 0x06
     cd0:	57 83       	std	Z+7, r21	; 0x07
     cd2:	1d c0       	rjmp	.+58     	; 0xd0e <_fpadd_parts+0x20e>
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	81 83       	std	Z+1, r24	; 0x01
     cd8:	33 82       	std	Z+3, r3	; 0x03
     cda:	22 82       	std	Z+2, r2	; 0x02
     cdc:	88 27       	eor	r24, r24
     cde:	99 27       	eor	r25, r25
     ce0:	dc 01       	movw	r26, r24
     ce2:	82 1b       	sub	r24, r18
     ce4:	93 0b       	sbc	r25, r19
     ce6:	a4 0b       	sbc	r26, r20
     ce8:	b5 0b       	sbc	r27, r21
     cea:	84 83       	std	Z+4, r24	; 0x04
     cec:	95 83       	std	Z+5, r25	; 0x05
     cee:	a6 83       	std	Z+6, r26	; 0x06
     cf0:	b7 83       	std	Z+7, r27	; 0x07
     cf2:	0d c0       	rjmp	.+26     	; 0xd0e <_fpadd_parts+0x20e>
     cf4:	22 0f       	add	r18, r18
     cf6:	33 1f       	adc	r19, r19
     cf8:	44 1f       	adc	r20, r20
     cfa:	55 1f       	adc	r21, r21
     cfc:	24 83       	std	Z+4, r18	; 0x04
     cfe:	35 83       	std	Z+5, r19	; 0x05
     d00:	46 83       	std	Z+6, r20	; 0x06
     d02:	57 83       	std	Z+7, r21	; 0x07
     d04:	82 81       	ldd	r24, Z+2	; 0x02
     d06:	93 81       	ldd	r25, Z+3	; 0x03
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	93 83       	std	Z+3, r25	; 0x03
     d0c:	82 83       	std	Z+2, r24	; 0x02
     d0e:	24 81       	ldd	r18, Z+4	; 0x04
     d10:	35 81       	ldd	r19, Z+5	; 0x05
     d12:	46 81       	ldd	r20, Z+6	; 0x06
     d14:	57 81       	ldd	r21, Z+7	; 0x07
     d16:	da 01       	movw	r26, r20
     d18:	c9 01       	movw	r24, r18
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	a1 09       	sbc	r26, r1
     d1e:	b1 09       	sbc	r27, r1
     d20:	8f 5f       	subi	r24, 0xFF	; 255
     d22:	9f 4f       	sbci	r25, 0xFF	; 255
     d24:	af 4f       	sbci	r26, 0xFF	; 255
     d26:	bf 43       	sbci	r27, 0x3F	; 63
     d28:	28 f3       	brcs	.-54     	; 0xcf4 <_fpadd_parts+0x1f4>
     d2a:	0b c0       	rjmp	.+22     	; 0xd42 <_fpadd_parts+0x242>
     d2c:	91 83       	std	Z+1, r25	; 0x01
     d2e:	33 82       	std	Z+3, r3	; 0x03
     d30:	22 82       	std	Z+2, r2	; 0x02
     d32:	ea 0c       	add	r14, r10
     d34:	fb 1c       	adc	r15, r11
     d36:	0c 1d       	adc	r16, r12
     d38:	1d 1d       	adc	r17, r13
     d3a:	e4 82       	std	Z+4, r14	; 0x04
     d3c:	f5 82       	std	Z+5, r15	; 0x05
     d3e:	06 83       	std	Z+6, r16	; 0x06
     d40:	17 83       	std	Z+7, r17	; 0x07
     d42:	83 e0       	ldi	r24, 0x03	; 3
     d44:	80 83       	st	Z, r24
     d46:	24 81       	ldd	r18, Z+4	; 0x04
     d48:	35 81       	ldd	r19, Z+5	; 0x05
     d4a:	46 81       	ldd	r20, Z+6	; 0x06
     d4c:	57 81       	ldd	r21, Z+7	; 0x07
     d4e:	57 ff       	sbrs	r21, 7
     d50:	1a c0       	rjmp	.+52     	; 0xd86 <_fpadd_parts+0x286>
     d52:	c9 01       	movw	r24, r18
     d54:	aa 27       	eor	r26, r26
     d56:	97 fd       	sbrc	r25, 7
     d58:	a0 95       	com	r26
     d5a:	ba 2f       	mov	r27, r26
     d5c:	81 70       	andi	r24, 0x01	; 1
     d5e:	90 70       	andi	r25, 0x00	; 0
     d60:	a0 70       	andi	r26, 0x00	; 0
     d62:	b0 70       	andi	r27, 0x00	; 0
     d64:	56 95       	lsr	r21
     d66:	47 95       	ror	r20
     d68:	37 95       	ror	r19
     d6a:	27 95       	ror	r18
     d6c:	82 2b       	or	r24, r18
     d6e:	93 2b       	or	r25, r19
     d70:	a4 2b       	or	r26, r20
     d72:	b5 2b       	or	r27, r21
     d74:	84 83       	std	Z+4, r24	; 0x04
     d76:	95 83       	std	Z+5, r25	; 0x05
     d78:	a6 83       	std	Z+6, r26	; 0x06
     d7a:	b7 83       	std	Z+7, r27	; 0x07
     d7c:	82 81       	ldd	r24, Z+2	; 0x02
     d7e:	93 81       	ldd	r25, Z+3	; 0x03
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	93 83       	std	Z+3, r25	; 0x03
     d84:	82 83       	std	Z+2, r24	; 0x02
     d86:	df 01       	movw	r26, r30
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <_fpadd_parts+0x28c>
     d8a:	d2 01       	movw	r26, r4
     d8c:	cd 01       	movw	r24, r26
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	e2 e1       	ldi	r30, 0x12	; 18
     d94:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__epilogue_restores__>

00000d98 <__subsf3>:
     d98:	a0 e2       	ldi	r26, 0x20	; 32
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e2 ed       	ldi	r30, 0xD2	; 210
     d9e:	f6 e0       	ldi	r31, 0x06	; 6
     da0:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__prologue_saves__+0x18>
     da4:	69 83       	std	Y+1, r22	; 0x01
     da6:	7a 83       	std	Y+2, r23	; 0x02
     da8:	8b 83       	std	Y+3, r24	; 0x03
     daa:	9c 83       	std	Y+4, r25	; 0x04
     dac:	2d 83       	std	Y+5, r18	; 0x05
     dae:	3e 83       	std	Y+6, r19	; 0x06
     db0:	4f 83       	std	Y+7, r20	; 0x07
     db2:	58 87       	std	Y+8, r21	; 0x08
     db4:	e9 e0       	ldi	r30, 0x09	; 9
     db6:	ee 2e       	mov	r14, r30
     db8:	f1 2c       	mov	r15, r1
     dba:	ec 0e       	add	r14, r28
     dbc:	fd 1e       	adc	r15, r29
     dbe:	b7 01       	movw	r22, r14
     dc0:	ce 01       	movw	r24, r28
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__unpack_f>
     dc8:	8e 01       	movw	r16, r28
     dca:	0f 5e       	subi	r16, 0xEF	; 239
     dcc:	1f 4f       	sbci	r17, 0xFF	; 255
     dce:	b8 01       	movw	r22, r16
     dd0:	ce 01       	movw	r24, r28
     dd2:	05 96       	adiw	r24, 0x05	; 5
     dd4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__unpack_f>
     dd8:	8a 89       	ldd	r24, Y+18	; 0x12
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	89 27       	eor	r24, r25
     dde:	8a 8b       	std	Y+18, r24	; 0x12
     de0:	ae 01       	movw	r20, r28
     de2:	47 5e       	subi	r20, 0xE7	; 231
     de4:	5f 4f       	sbci	r21, 0xFF	; 255
     de6:	b8 01       	movw	r22, r16
     de8:	c7 01       	movw	r24, r14
     dea:	0e 94 80 05 	call	0xb00	; 0xb00 <_fpadd_parts>
     dee:	0e 94 00 0a 	call	0x1400	; 0x1400 <__pack_f>
     df2:	a0 96       	adiw	r28, 0x20	; 32
     df4:	e6 e0       	ldi	r30, 0x06	; 6
     df6:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__epilogue_restores__+0x18>

00000dfa <__addsf3>:
     dfa:	a0 e2       	ldi	r26, 0x20	; 32
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e3 e0       	ldi	r30, 0x03	; 3
     e00:	f7 e0       	ldi	r31, 0x07	; 7
     e02:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__prologue_saves__+0x18>
     e06:	69 83       	std	Y+1, r22	; 0x01
     e08:	7a 83       	std	Y+2, r23	; 0x02
     e0a:	8b 83       	std	Y+3, r24	; 0x03
     e0c:	9c 83       	std	Y+4, r25	; 0x04
     e0e:	2d 83       	std	Y+5, r18	; 0x05
     e10:	3e 83       	std	Y+6, r19	; 0x06
     e12:	4f 83       	std	Y+7, r20	; 0x07
     e14:	58 87       	std	Y+8, r21	; 0x08
     e16:	f9 e0       	ldi	r31, 0x09	; 9
     e18:	ef 2e       	mov	r14, r31
     e1a:	f1 2c       	mov	r15, r1
     e1c:	ec 0e       	add	r14, r28
     e1e:	fd 1e       	adc	r15, r29
     e20:	b7 01       	movw	r22, r14
     e22:	ce 01       	movw	r24, r28
     e24:	01 96       	adiw	r24, 0x01	; 1
     e26:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__unpack_f>
     e2a:	8e 01       	movw	r16, r28
     e2c:	0f 5e       	subi	r16, 0xEF	; 239
     e2e:	1f 4f       	sbci	r17, 0xFF	; 255
     e30:	b8 01       	movw	r22, r16
     e32:	ce 01       	movw	r24, r28
     e34:	05 96       	adiw	r24, 0x05	; 5
     e36:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__unpack_f>
     e3a:	ae 01       	movw	r20, r28
     e3c:	47 5e       	subi	r20, 0xE7	; 231
     e3e:	5f 4f       	sbci	r21, 0xFF	; 255
     e40:	b8 01       	movw	r22, r16
     e42:	c7 01       	movw	r24, r14
     e44:	0e 94 80 05 	call	0xb00	; 0xb00 <_fpadd_parts>
     e48:	0e 94 00 0a 	call	0x1400	; 0x1400 <__pack_f>
     e4c:	a0 96       	adiw	r28, 0x20	; 32
     e4e:	e6 e0       	ldi	r30, 0x06	; 6
     e50:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__epilogue_restores__+0x18>

00000e54 <__mulsf3>:
     e54:	a0 e2       	ldi	r26, 0x20	; 32
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e0 e3       	ldi	r30, 0x30	; 48
     e5a:	f7 e0       	ldi	r31, 0x07	; 7
     e5c:	0c 94 e5 0b 	jmp	0x17ca	; 0x17ca <__prologue_saves__>
     e60:	69 83       	std	Y+1, r22	; 0x01
     e62:	7a 83       	std	Y+2, r23	; 0x02
     e64:	8b 83       	std	Y+3, r24	; 0x03
     e66:	9c 83       	std	Y+4, r25	; 0x04
     e68:	2d 83       	std	Y+5, r18	; 0x05
     e6a:	3e 83       	std	Y+6, r19	; 0x06
     e6c:	4f 83       	std	Y+7, r20	; 0x07
     e6e:	58 87       	std	Y+8, r21	; 0x08
     e70:	be 01       	movw	r22, r28
     e72:	67 5f       	subi	r22, 0xF7	; 247
     e74:	7f 4f       	sbci	r23, 0xFF	; 255
     e76:	ce 01       	movw	r24, r28
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__unpack_f>
     e7e:	be 01       	movw	r22, r28
     e80:	6f 5e       	subi	r22, 0xEF	; 239
     e82:	7f 4f       	sbci	r23, 0xFF	; 255
     e84:	ce 01       	movw	r24, r28
     e86:	05 96       	adiw	r24, 0x05	; 5
     e88:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__unpack_f>
     e8c:	99 85       	ldd	r25, Y+9	; 0x09
     e8e:	92 30       	cpi	r25, 0x02	; 2
     e90:	88 f0       	brcs	.+34     	; 0xeb4 <__mulsf3+0x60>
     e92:	89 89       	ldd	r24, Y+17	; 0x11
     e94:	82 30       	cpi	r24, 0x02	; 2
     e96:	c8 f0       	brcs	.+50     	; 0xeca <__mulsf3+0x76>
     e98:	94 30       	cpi	r25, 0x04	; 4
     e9a:	19 f4       	brne	.+6      	; 0xea2 <__mulsf3+0x4e>
     e9c:	82 30       	cpi	r24, 0x02	; 2
     e9e:	51 f4       	brne	.+20     	; 0xeb4 <__mulsf3+0x60>
     ea0:	04 c0       	rjmp	.+8      	; 0xeaa <__mulsf3+0x56>
     ea2:	84 30       	cpi	r24, 0x04	; 4
     ea4:	29 f4       	brne	.+10     	; 0xeb0 <__mulsf3+0x5c>
     ea6:	92 30       	cpi	r25, 0x02	; 2
     ea8:	81 f4       	brne	.+32     	; 0xeca <__mulsf3+0x76>
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	c6 c0       	rjmp	.+396    	; 0x103c <__mulsf3+0x1e8>
     eb0:	92 30       	cpi	r25, 0x02	; 2
     eb2:	49 f4       	brne	.+18     	; 0xec6 <__mulsf3+0x72>
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb8:	8a 89       	ldd	r24, Y+18	; 0x12
     eba:	98 13       	cpse	r25, r24
     ebc:	21 e0       	ldi	r18, 0x01	; 1
     ebe:	2a 87       	std	Y+10, r18	; 0x0a
     ec0:	ce 01       	movw	r24, r28
     ec2:	09 96       	adiw	r24, 0x09	; 9
     ec4:	bb c0       	rjmp	.+374    	; 0x103c <__mulsf3+0x1e8>
     ec6:	82 30       	cpi	r24, 0x02	; 2
     ec8:	49 f4       	brne	.+18     	; 0xedc <__mulsf3+0x88>
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ece:	8a 89       	ldd	r24, Y+18	; 0x12
     ed0:	98 13       	cpse	r25, r24
     ed2:	21 e0       	ldi	r18, 0x01	; 1
     ed4:	2a 8b       	std	Y+18, r18	; 0x12
     ed6:	ce 01       	movw	r24, r28
     ed8:	41 96       	adiw	r24, 0x11	; 17
     eda:	b0 c0       	rjmp	.+352    	; 0x103c <__mulsf3+0x1e8>
     edc:	2d 84       	ldd	r2, Y+13	; 0x0d
     ede:	3e 84       	ldd	r3, Y+14	; 0x0e
     ee0:	4f 84       	ldd	r4, Y+15	; 0x0f
     ee2:	58 88       	ldd	r5, Y+16	; 0x10
     ee4:	6d 88       	ldd	r6, Y+21	; 0x15
     ee6:	7e 88       	ldd	r7, Y+22	; 0x16
     ee8:	8f 88       	ldd	r8, Y+23	; 0x17
     eea:	98 8c       	ldd	r9, Y+24	; 0x18
     eec:	ee 24       	eor	r14, r14
     eee:	ff 24       	eor	r15, r15
     ef0:	87 01       	movw	r16, r14
     ef2:	aa 24       	eor	r10, r10
     ef4:	bb 24       	eor	r11, r11
     ef6:	65 01       	movw	r12, r10
     ef8:	40 e0       	ldi	r20, 0x00	; 0
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	e0 e0       	ldi	r30, 0x00	; 0
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	c1 01       	movw	r24, r2
     f06:	81 70       	andi	r24, 0x01	; 1
     f08:	90 70       	andi	r25, 0x00	; 0
     f0a:	89 2b       	or	r24, r25
     f0c:	e9 f0       	breq	.+58     	; 0xf48 <__mulsf3+0xf4>
     f0e:	e6 0c       	add	r14, r6
     f10:	f7 1c       	adc	r15, r7
     f12:	08 1d       	adc	r16, r8
     f14:	19 1d       	adc	r17, r9
     f16:	9a 01       	movw	r18, r20
     f18:	ab 01       	movw	r20, r22
     f1a:	2a 0d       	add	r18, r10
     f1c:	3b 1d       	adc	r19, r11
     f1e:	4c 1d       	adc	r20, r12
     f20:	5d 1d       	adc	r21, r13
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	a0 e0       	ldi	r26, 0x00	; 0
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e6 14       	cp	r14, r6
     f2c:	f7 04       	cpc	r15, r7
     f2e:	08 05       	cpc	r16, r8
     f30:	19 05       	cpc	r17, r9
     f32:	20 f4       	brcc	.+8      	; 0xf3c <__mulsf3+0xe8>
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	a0 e0       	ldi	r26, 0x00	; 0
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	ba 01       	movw	r22, r20
     f3e:	a9 01       	movw	r20, r18
     f40:	48 0f       	add	r20, r24
     f42:	59 1f       	adc	r21, r25
     f44:	6a 1f       	adc	r22, r26
     f46:	7b 1f       	adc	r23, r27
     f48:	aa 0c       	add	r10, r10
     f4a:	bb 1c       	adc	r11, r11
     f4c:	cc 1c       	adc	r12, r12
     f4e:	dd 1c       	adc	r13, r13
     f50:	97 fe       	sbrs	r9, 7
     f52:	08 c0       	rjmp	.+16     	; 0xf64 <__mulsf3+0x110>
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	a0 e0       	ldi	r26, 0x00	; 0
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	a8 2a       	or	r10, r24
     f5e:	b9 2a       	or	r11, r25
     f60:	ca 2a       	or	r12, r26
     f62:	db 2a       	or	r13, r27
     f64:	31 96       	adiw	r30, 0x01	; 1
     f66:	e0 32       	cpi	r30, 0x20	; 32
     f68:	f1 05       	cpc	r31, r1
     f6a:	49 f0       	breq	.+18     	; 0xf7e <__mulsf3+0x12a>
     f6c:	66 0c       	add	r6, r6
     f6e:	77 1c       	adc	r7, r7
     f70:	88 1c       	adc	r8, r8
     f72:	99 1c       	adc	r9, r9
     f74:	56 94       	lsr	r5
     f76:	47 94       	ror	r4
     f78:	37 94       	ror	r3
     f7a:	27 94       	ror	r2
     f7c:	c3 cf       	rjmp	.-122    	; 0xf04 <__mulsf3+0xb0>
     f7e:	fa 85       	ldd	r31, Y+10	; 0x0a
     f80:	ea 89       	ldd	r30, Y+18	; 0x12
     f82:	2b 89       	ldd	r18, Y+19	; 0x13
     f84:	3c 89       	ldd	r19, Y+20	; 0x14
     f86:	8b 85       	ldd	r24, Y+11	; 0x0b
     f88:	9c 85       	ldd	r25, Y+12	; 0x0c
     f8a:	28 0f       	add	r18, r24
     f8c:	39 1f       	adc	r19, r25
     f8e:	2e 5f       	subi	r18, 0xFE	; 254
     f90:	3f 4f       	sbci	r19, 0xFF	; 255
     f92:	17 c0       	rjmp	.+46     	; 0xfc2 <__mulsf3+0x16e>
     f94:	ca 01       	movw	r24, r20
     f96:	81 70       	andi	r24, 0x01	; 1
     f98:	90 70       	andi	r25, 0x00	; 0
     f9a:	89 2b       	or	r24, r25
     f9c:	61 f0       	breq	.+24     	; 0xfb6 <__mulsf3+0x162>
     f9e:	16 95       	lsr	r17
     fa0:	07 95       	ror	r16
     fa2:	f7 94       	ror	r15
     fa4:	e7 94       	ror	r14
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a0 e0       	ldi	r26, 0x00	; 0
     fac:	b0 e8       	ldi	r27, 0x80	; 128
     fae:	e8 2a       	or	r14, r24
     fb0:	f9 2a       	or	r15, r25
     fb2:	0a 2b       	or	r16, r26
     fb4:	1b 2b       	or	r17, r27
     fb6:	76 95       	lsr	r23
     fb8:	67 95       	ror	r22
     fba:	57 95       	ror	r21
     fbc:	47 95       	ror	r20
     fbe:	2f 5f       	subi	r18, 0xFF	; 255
     fc0:	3f 4f       	sbci	r19, 0xFF	; 255
     fc2:	77 fd       	sbrc	r23, 7
     fc4:	e7 cf       	rjmp	.-50     	; 0xf94 <__mulsf3+0x140>
     fc6:	0c c0       	rjmp	.+24     	; 0xfe0 <__mulsf3+0x18c>
     fc8:	44 0f       	add	r20, r20
     fca:	55 1f       	adc	r21, r21
     fcc:	66 1f       	adc	r22, r22
     fce:	77 1f       	adc	r23, r23
     fd0:	17 fd       	sbrc	r17, 7
     fd2:	41 60       	ori	r20, 0x01	; 1
     fd4:	ee 0c       	add	r14, r14
     fd6:	ff 1c       	adc	r15, r15
     fd8:	00 1f       	adc	r16, r16
     fda:	11 1f       	adc	r17, r17
     fdc:	21 50       	subi	r18, 0x01	; 1
     fde:	30 40       	sbci	r19, 0x00	; 0
     fe0:	40 30       	cpi	r20, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	59 07       	cpc	r21, r25
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	69 07       	cpc	r22, r25
     fea:	90 e4       	ldi	r25, 0x40	; 64
     fec:	79 07       	cpc	r23, r25
     fee:	60 f3       	brcs	.-40     	; 0xfc8 <__mulsf3+0x174>
     ff0:	2b 8f       	std	Y+27, r18	; 0x1b
     ff2:	3c 8f       	std	Y+28, r19	; 0x1c
     ff4:	db 01       	movw	r26, r22
     ff6:	ca 01       	movw	r24, r20
     ff8:	8f 77       	andi	r24, 0x7F	; 127
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	a0 70       	andi	r26, 0x00	; 0
     ffe:	b0 70       	andi	r27, 0x00	; 0
    1000:	80 34       	cpi	r24, 0x40	; 64
    1002:	91 05       	cpc	r25, r1
    1004:	a1 05       	cpc	r26, r1
    1006:	b1 05       	cpc	r27, r1
    1008:	61 f4       	brne	.+24     	; 0x1022 <__mulsf3+0x1ce>
    100a:	47 fd       	sbrc	r20, 7
    100c:	0a c0       	rjmp	.+20     	; 0x1022 <__mulsf3+0x1ce>
    100e:	e1 14       	cp	r14, r1
    1010:	f1 04       	cpc	r15, r1
    1012:	01 05       	cpc	r16, r1
    1014:	11 05       	cpc	r17, r1
    1016:	29 f0       	breq	.+10     	; 0x1022 <__mulsf3+0x1ce>
    1018:	40 5c       	subi	r20, 0xC0	; 192
    101a:	5f 4f       	sbci	r21, 0xFF	; 255
    101c:	6f 4f       	sbci	r22, 0xFF	; 255
    101e:	7f 4f       	sbci	r23, 0xFF	; 255
    1020:	40 78       	andi	r20, 0x80	; 128
    1022:	1a 8e       	std	Y+26, r1	; 0x1a
    1024:	fe 17       	cp	r31, r30
    1026:	11 f0       	breq	.+4      	; 0x102c <__mulsf3+0x1d8>
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	8a 8f       	std	Y+26, r24	; 0x1a
    102c:	4d 8f       	std	Y+29, r20	; 0x1d
    102e:	5e 8f       	std	Y+30, r21	; 0x1e
    1030:	6f 8f       	std	Y+31, r22	; 0x1f
    1032:	78 a3       	std	Y+32, r23	; 0x20
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	89 8f       	std	Y+25, r24	; 0x19
    1038:	ce 01       	movw	r24, r28
    103a:	49 96       	adiw	r24, 0x19	; 25
    103c:	0e 94 00 0a 	call	0x1400	; 0x1400 <__pack_f>
    1040:	a0 96       	adiw	r28, 0x20	; 32
    1042:	e2 e1       	ldi	r30, 0x12	; 18
    1044:	0c 94 01 0c 	jmp	0x1802	; 0x1802 <__epilogue_restores__>

00001048 <__gtsf2>:
    1048:	a8 e1       	ldi	r26, 0x18	; 24
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	ea e2       	ldi	r30, 0x2A	; 42
    104e:	f8 e0       	ldi	r31, 0x08	; 8
    1050:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__prologue_saves__+0x18>
    1054:	69 83       	std	Y+1, r22	; 0x01
    1056:	7a 83       	std	Y+2, r23	; 0x02
    1058:	8b 83       	std	Y+3, r24	; 0x03
    105a:	9c 83       	std	Y+4, r25	; 0x04
    105c:	2d 83       	std	Y+5, r18	; 0x05
    105e:	3e 83       	std	Y+6, r19	; 0x06
    1060:	4f 83       	std	Y+7, r20	; 0x07
    1062:	58 87       	std	Y+8, r21	; 0x08
    1064:	89 e0       	ldi	r24, 0x09	; 9
    1066:	e8 2e       	mov	r14, r24
    1068:	f1 2c       	mov	r15, r1
    106a:	ec 0e       	add	r14, r28
    106c:	fd 1e       	adc	r15, r29
    106e:	b7 01       	movw	r22, r14
    1070:	ce 01       	movw	r24, r28
    1072:	01 96       	adiw	r24, 0x01	; 1
    1074:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__unpack_f>
    1078:	8e 01       	movw	r16, r28
    107a:	0f 5e       	subi	r16, 0xEF	; 239
    107c:	1f 4f       	sbci	r17, 0xFF	; 255
    107e:	b8 01       	movw	r22, r16
    1080:	ce 01       	movw	r24, r28
    1082:	05 96       	adiw	r24, 0x05	; 5
    1084:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__unpack_f>
    1088:	89 85       	ldd	r24, Y+9	; 0x09
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	40 f0       	brcs	.+16     	; 0x109e <__gtsf2+0x56>
    108e:	89 89       	ldd	r24, Y+17	; 0x11
    1090:	82 30       	cpi	r24, 0x02	; 2
    1092:	28 f0       	brcs	.+10     	; 0x109e <__gtsf2+0x56>
    1094:	b8 01       	movw	r22, r16
    1096:	c7 01       	movw	r24, r14
    1098:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fpcmp_parts_f>
    109c:	01 c0       	rjmp	.+2      	; 0x10a0 <__gtsf2+0x58>
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	68 96       	adiw	r28, 0x18	; 24
    10a2:	e6 e0       	ldi	r30, 0x06	; 6
    10a4:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__epilogue_restores__+0x18>

000010a8 <__gesf2>:
    10a8:	a8 e1       	ldi	r26, 0x18	; 24
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	ea e5       	ldi	r30, 0x5A	; 90
    10ae:	f8 e0       	ldi	r31, 0x08	; 8
    10b0:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__prologue_saves__+0x18>
    10b4:	69 83       	std	Y+1, r22	; 0x01
    10b6:	7a 83       	std	Y+2, r23	; 0x02
    10b8:	8b 83       	std	Y+3, r24	; 0x03
    10ba:	9c 83       	std	Y+4, r25	; 0x04
    10bc:	2d 83       	std	Y+5, r18	; 0x05
    10be:	3e 83       	std	Y+6, r19	; 0x06
    10c0:	4f 83       	std	Y+7, r20	; 0x07
    10c2:	58 87       	std	Y+8, r21	; 0x08
    10c4:	89 e0       	ldi	r24, 0x09	; 9
    10c6:	e8 2e       	mov	r14, r24
    10c8:	f1 2c       	mov	r15, r1
    10ca:	ec 0e       	add	r14, r28
    10cc:	fd 1e       	adc	r15, r29
    10ce:	b7 01       	movw	r22, r14
    10d0:	ce 01       	movw	r24, r28
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__unpack_f>
    10d8:	8e 01       	movw	r16, r28
    10da:	0f 5e       	subi	r16, 0xEF	; 239
    10dc:	1f 4f       	sbci	r17, 0xFF	; 255
    10de:	b8 01       	movw	r22, r16
    10e0:	ce 01       	movw	r24, r28
    10e2:	05 96       	adiw	r24, 0x05	; 5
    10e4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__unpack_f>
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	82 30       	cpi	r24, 0x02	; 2
    10ec:	40 f0       	brcs	.+16     	; 0x10fe <__gesf2+0x56>
    10ee:	89 89       	ldd	r24, Y+17	; 0x11
    10f0:	82 30       	cpi	r24, 0x02	; 2
    10f2:	28 f0       	brcs	.+10     	; 0x10fe <__gesf2+0x56>
    10f4:	b8 01       	movw	r22, r16
    10f6:	c7 01       	movw	r24, r14
    10f8:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fpcmp_parts_f>
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <__gesf2+0x58>
    10fe:	8f ef       	ldi	r24, 0xFF	; 255
    1100:	68 96       	adiw	r28, 0x18	; 24
    1102:	e6 e0       	ldi	r30, 0x06	; 6
    1104:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__epilogue_restores__+0x18>

00001108 <__ltsf2>:
    1108:	a8 e1       	ldi	r26, 0x18	; 24
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	ea e8       	ldi	r30, 0x8A	; 138
    110e:	f8 e0       	ldi	r31, 0x08	; 8
    1110:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__prologue_saves__+0x18>
    1114:	69 83       	std	Y+1, r22	; 0x01
    1116:	7a 83       	std	Y+2, r23	; 0x02
    1118:	8b 83       	std	Y+3, r24	; 0x03
    111a:	9c 83       	std	Y+4, r25	; 0x04
    111c:	2d 83       	std	Y+5, r18	; 0x05
    111e:	3e 83       	std	Y+6, r19	; 0x06
    1120:	4f 83       	std	Y+7, r20	; 0x07
    1122:	58 87       	std	Y+8, r21	; 0x08
    1124:	89 e0       	ldi	r24, 0x09	; 9
    1126:	e8 2e       	mov	r14, r24
    1128:	f1 2c       	mov	r15, r1
    112a:	ec 0e       	add	r14, r28
    112c:	fd 1e       	adc	r15, r29
    112e:	b7 01       	movw	r22, r14
    1130:	ce 01       	movw	r24, r28
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__unpack_f>
    1138:	8e 01       	movw	r16, r28
    113a:	0f 5e       	subi	r16, 0xEF	; 239
    113c:	1f 4f       	sbci	r17, 0xFF	; 255
    113e:	b8 01       	movw	r22, r16
    1140:	ce 01       	movw	r24, r28
    1142:	05 96       	adiw	r24, 0x05	; 5
    1144:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__unpack_f>
    1148:	89 85       	ldd	r24, Y+9	; 0x09
    114a:	82 30       	cpi	r24, 0x02	; 2
    114c:	40 f0       	brcs	.+16     	; 0x115e <__ltsf2+0x56>
    114e:	89 89       	ldd	r24, Y+17	; 0x11
    1150:	82 30       	cpi	r24, 0x02	; 2
    1152:	28 f0       	brcs	.+10     	; 0x115e <__ltsf2+0x56>
    1154:	b8 01       	movw	r22, r16
    1156:	c7 01       	movw	r24, r14
    1158:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fpcmp_parts_f>
    115c:	01 c0       	rjmp	.+2      	; 0x1160 <__ltsf2+0x58>
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	68 96       	adiw	r28, 0x18	; 24
    1162:	e6 e0       	ldi	r30, 0x06	; 6
    1164:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__epilogue_restores__+0x18>

00001168 <__lesf2>:
    1168:	a8 e1       	ldi	r26, 0x18	; 24
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	ea eb       	ldi	r30, 0xBA	; 186
    116e:	f8 e0       	ldi	r31, 0x08	; 8
    1170:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__prologue_saves__+0x18>
    1174:	69 83       	std	Y+1, r22	; 0x01
    1176:	7a 83       	std	Y+2, r23	; 0x02
    1178:	8b 83       	std	Y+3, r24	; 0x03
    117a:	9c 83       	std	Y+4, r25	; 0x04
    117c:	2d 83       	std	Y+5, r18	; 0x05
    117e:	3e 83       	std	Y+6, r19	; 0x06
    1180:	4f 83       	std	Y+7, r20	; 0x07
    1182:	58 87       	std	Y+8, r21	; 0x08
    1184:	89 e0       	ldi	r24, 0x09	; 9
    1186:	e8 2e       	mov	r14, r24
    1188:	f1 2c       	mov	r15, r1
    118a:	ec 0e       	add	r14, r28
    118c:	fd 1e       	adc	r15, r29
    118e:	b7 01       	movw	r22, r14
    1190:	ce 01       	movw	r24, r28
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__unpack_f>
    1198:	8e 01       	movw	r16, r28
    119a:	0f 5e       	subi	r16, 0xEF	; 239
    119c:	1f 4f       	sbci	r17, 0xFF	; 255
    119e:	b8 01       	movw	r22, r16
    11a0:	ce 01       	movw	r24, r28
    11a2:	05 96       	adiw	r24, 0x05	; 5
    11a4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__unpack_f>
    11a8:	89 85       	ldd	r24, Y+9	; 0x09
    11aa:	82 30       	cpi	r24, 0x02	; 2
    11ac:	40 f0       	brcs	.+16     	; 0x11be <__lesf2+0x56>
    11ae:	89 89       	ldd	r24, Y+17	; 0x11
    11b0:	82 30       	cpi	r24, 0x02	; 2
    11b2:	28 f0       	brcs	.+10     	; 0x11be <__lesf2+0x56>
    11b4:	b8 01       	movw	r22, r16
    11b6:	c7 01       	movw	r24, r14
    11b8:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fpcmp_parts_f>
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <__lesf2+0x58>
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	68 96       	adiw	r28, 0x18	; 24
    11c2:	e6 e0       	ldi	r30, 0x06	; 6
    11c4:	0c 94 0d 0c 	jmp	0x181a	; 0x181a <__epilogue_restores__+0x18>

000011c8 <__fixsfsi>:
    11c8:	ac e0       	ldi	r26, 0x0C	; 12
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	ea ee       	ldi	r30, 0xEA	; 234
    11ce:	f8 e0       	ldi	r31, 0x08	; 8
    11d0:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__prologue_saves__+0x20>
    11d4:	69 83       	std	Y+1, r22	; 0x01
    11d6:	7a 83       	std	Y+2, r23	; 0x02
    11d8:	8b 83       	std	Y+3, r24	; 0x03
    11da:	9c 83       	std	Y+4, r25	; 0x04
    11dc:	be 01       	movw	r22, r28
    11de:	6b 5f       	subi	r22, 0xFB	; 251
    11e0:	7f 4f       	sbci	r23, 0xFF	; 255
    11e2:	ce 01       	movw	r24, r28
    11e4:	01 96       	adiw	r24, 0x01	; 1
    11e6:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__unpack_f>
    11ea:	8d 81       	ldd	r24, Y+5	; 0x05
    11ec:	82 30       	cpi	r24, 0x02	; 2
    11ee:	61 f1       	breq	.+88     	; 0x1248 <__fixsfsi+0x80>
    11f0:	82 30       	cpi	r24, 0x02	; 2
    11f2:	50 f1       	brcs	.+84     	; 0x1248 <__fixsfsi+0x80>
    11f4:	84 30       	cpi	r24, 0x04	; 4
    11f6:	21 f4       	brne	.+8      	; 0x1200 <__fixsfsi+0x38>
    11f8:	8e 81       	ldd	r24, Y+6	; 0x06
    11fa:	88 23       	and	r24, r24
    11fc:	51 f1       	breq	.+84     	; 0x1252 <__fixsfsi+0x8a>
    11fe:	2e c0       	rjmp	.+92     	; 0x125c <__fixsfsi+0x94>
    1200:	2f 81       	ldd	r18, Y+7	; 0x07
    1202:	38 85       	ldd	r19, Y+8	; 0x08
    1204:	37 fd       	sbrc	r19, 7
    1206:	20 c0       	rjmp	.+64     	; 0x1248 <__fixsfsi+0x80>
    1208:	6e 81       	ldd	r22, Y+6	; 0x06
    120a:	2f 31       	cpi	r18, 0x1F	; 31
    120c:	31 05       	cpc	r19, r1
    120e:	1c f0       	brlt	.+6      	; 0x1216 <__fixsfsi+0x4e>
    1210:	66 23       	and	r22, r22
    1212:	f9 f0       	breq	.+62     	; 0x1252 <__fixsfsi+0x8a>
    1214:	23 c0       	rjmp	.+70     	; 0x125c <__fixsfsi+0x94>
    1216:	8e e1       	ldi	r24, 0x1E	; 30
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	82 1b       	sub	r24, r18
    121c:	93 0b       	sbc	r25, r19
    121e:	29 85       	ldd	r18, Y+9	; 0x09
    1220:	3a 85       	ldd	r19, Y+10	; 0x0a
    1222:	4b 85       	ldd	r20, Y+11	; 0x0b
    1224:	5c 85       	ldd	r21, Y+12	; 0x0c
    1226:	04 c0       	rjmp	.+8      	; 0x1230 <__fixsfsi+0x68>
    1228:	56 95       	lsr	r21
    122a:	47 95       	ror	r20
    122c:	37 95       	ror	r19
    122e:	27 95       	ror	r18
    1230:	8a 95       	dec	r24
    1232:	d2 f7       	brpl	.-12     	; 0x1228 <__fixsfsi+0x60>
    1234:	66 23       	and	r22, r22
    1236:	b1 f0       	breq	.+44     	; 0x1264 <__fixsfsi+0x9c>
    1238:	50 95       	com	r21
    123a:	40 95       	com	r20
    123c:	30 95       	com	r19
    123e:	21 95       	neg	r18
    1240:	3f 4f       	sbci	r19, 0xFF	; 255
    1242:	4f 4f       	sbci	r20, 0xFF	; 255
    1244:	5f 4f       	sbci	r21, 0xFF	; 255
    1246:	0e c0       	rjmp	.+28     	; 0x1264 <__fixsfsi+0x9c>
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	50 e0       	ldi	r21, 0x00	; 0
    1250:	09 c0       	rjmp	.+18     	; 0x1264 <__fixsfsi+0x9c>
    1252:	2f ef       	ldi	r18, 0xFF	; 255
    1254:	3f ef       	ldi	r19, 0xFF	; 255
    1256:	4f ef       	ldi	r20, 0xFF	; 255
    1258:	5f e7       	ldi	r21, 0x7F	; 127
    125a:	04 c0       	rjmp	.+8      	; 0x1264 <__fixsfsi+0x9c>
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	50 e8       	ldi	r21, 0x80	; 128
    1264:	b9 01       	movw	r22, r18
    1266:	ca 01       	movw	r24, r20
    1268:	2c 96       	adiw	r28, 0x0c	; 12
    126a:	e2 e0       	ldi	r30, 0x02	; 2
    126c:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__epilogue_restores__+0x20>

00001270 <__floatunsisf>:
    1270:	a8 e0       	ldi	r26, 0x08	; 8
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	ee e3       	ldi	r30, 0x3E	; 62
    1276:	f9 e0       	ldi	r31, 0x09	; 9
    1278:	0c 94 ef 0b 	jmp	0x17de	; 0x17de <__prologue_saves__+0x14>
    127c:	7b 01       	movw	r14, r22
    127e:	8c 01       	movw	r16, r24
    1280:	61 15       	cp	r22, r1
    1282:	71 05       	cpc	r23, r1
    1284:	81 05       	cpc	r24, r1
    1286:	91 05       	cpc	r25, r1
    1288:	19 f4       	brne	.+6      	; 0x1290 <__floatunsisf+0x20>
    128a:	82 e0       	ldi	r24, 0x02	; 2
    128c:	89 83       	std	Y+1, r24	; 0x01
    128e:	60 c0       	rjmp	.+192    	; 0x1350 <__floatunsisf+0xe0>
    1290:	83 e0       	ldi	r24, 0x03	; 3
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	8e e1       	ldi	r24, 0x1E	; 30
    1296:	c8 2e       	mov	r12, r24
    1298:	d1 2c       	mov	r13, r1
    129a:	dc 82       	std	Y+4, r13	; 0x04
    129c:	cb 82       	std	Y+3, r12	; 0x03
    129e:	ed 82       	std	Y+5, r14	; 0x05
    12a0:	fe 82       	std	Y+6, r15	; 0x06
    12a2:	0f 83       	std	Y+7, r16	; 0x07
    12a4:	18 87       	std	Y+8, r17	; 0x08
    12a6:	c8 01       	movw	r24, r16
    12a8:	b7 01       	movw	r22, r14
    12aa:	0e 94 b1 09 	call	0x1362	; 0x1362 <__clzsi2>
    12ae:	bc 01       	movw	r22, r24
    12b0:	61 50       	subi	r22, 0x01	; 1
    12b2:	70 40       	sbci	r23, 0x00	; 0
    12b4:	77 ff       	sbrs	r23, 7
    12b6:	39 c0       	rjmp	.+114    	; 0x132a <__floatunsisf+0xba>
    12b8:	ee 27       	eor	r30, r30
    12ba:	ff 27       	eor	r31, r31
    12bc:	e6 1b       	sub	r30, r22
    12be:	f7 0b       	sbc	r31, r23
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a0 e0       	ldi	r26, 0x00	; 0
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	0e 2e       	mov	r0, r30
    12d2:	04 c0       	rjmp	.+8      	; 0x12dc <__floatunsisf+0x6c>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	aa 1f       	adc	r26, r26
    12da:	bb 1f       	adc	r27, r27
    12dc:	0a 94       	dec	r0
    12de:	d2 f7       	brpl	.-12     	; 0x12d4 <__floatunsisf+0x64>
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	a1 09       	sbc	r26, r1
    12e4:	b1 09       	sbc	r27, r1
    12e6:	8e 21       	and	r24, r14
    12e8:	9f 21       	and	r25, r15
    12ea:	a0 23       	and	r26, r16
    12ec:	b1 23       	and	r27, r17
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	a1 05       	cpc	r26, r1
    12f2:	b1 05       	cpc	r27, r1
    12f4:	21 f0       	breq	.+8      	; 0x12fe <__floatunsisf+0x8e>
    12f6:	21 e0       	ldi	r18, 0x01	; 1
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	04 c0       	rjmp	.+8      	; 0x1308 <__floatunsisf+0x98>
    1300:	16 95       	lsr	r17
    1302:	07 95       	ror	r16
    1304:	f7 94       	ror	r15
    1306:	e7 94       	ror	r14
    1308:	ea 95       	dec	r30
    130a:	d2 f7       	brpl	.-12     	; 0x1300 <__floatunsisf+0x90>
    130c:	2e 29       	or	r18, r14
    130e:	3f 29       	or	r19, r15
    1310:	40 2b       	or	r20, r16
    1312:	51 2b       	or	r21, r17
    1314:	2d 83       	std	Y+5, r18	; 0x05
    1316:	3e 83       	std	Y+6, r19	; 0x06
    1318:	4f 83       	std	Y+7, r20	; 0x07
    131a:	58 87       	std	Y+8, r21	; 0x08
    131c:	8e e1       	ldi	r24, 0x1E	; 30
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	86 1b       	sub	r24, r22
    1322:	97 0b       	sbc	r25, r23
    1324:	9c 83       	std	Y+4, r25	; 0x04
    1326:	8b 83       	std	Y+3, r24	; 0x03
    1328:	13 c0       	rjmp	.+38     	; 0x1350 <__floatunsisf+0xe0>
    132a:	61 15       	cp	r22, r1
    132c:	71 05       	cpc	r23, r1
    132e:	81 f0       	breq	.+32     	; 0x1350 <__floatunsisf+0xe0>
    1330:	06 2e       	mov	r0, r22
    1332:	04 c0       	rjmp	.+8      	; 0x133c <__floatunsisf+0xcc>
    1334:	ee 0c       	add	r14, r14
    1336:	ff 1c       	adc	r15, r15
    1338:	00 1f       	adc	r16, r16
    133a:	11 1f       	adc	r17, r17
    133c:	0a 94       	dec	r0
    133e:	d2 f7       	brpl	.-12     	; 0x1334 <__floatunsisf+0xc4>
    1340:	ed 82       	std	Y+5, r14	; 0x05
    1342:	fe 82       	std	Y+6, r15	; 0x06
    1344:	0f 83       	std	Y+7, r16	; 0x07
    1346:	18 87       	std	Y+8, r17	; 0x08
    1348:	c6 1a       	sub	r12, r22
    134a:	d7 0a       	sbc	r13, r23
    134c:	dc 82       	std	Y+4, r13	; 0x04
    134e:	cb 82       	std	Y+3, r12	; 0x03
    1350:	1a 82       	std	Y+2, r1	; 0x02
    1352:	ce 01       	movw	r24, r28
    1354:	01 96       	adiw	r24, 0x01	; 1
    1356:	0e 94 00 0a 	call	0x1400	; 0x1400 <__pack_f>
    135a:	28 96       	adiw	r28, 0x08	; 8
    135c:	e8 e0       	ldi	r30, 0x08	; 8
    135e:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <__epilogue_restores__+0x14>

00001362 <__clzsi2>:
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	7b 01       	movw	r14, r22
    136c:	8c 01       	movw	r16, r24
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	e8 16       	cp	r14, r24
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	f8 06       	cpc	r15, r24
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	08 07       	cpc	r16, r24
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	18 07       	cpc	r17, r24
    137e:	88 f4       	brcc	.+34     	; 0x13a2 <__clzsi2+0x40>
    1380:	8f ef       	ldi	r24, 0xFF	; 255
    1382:	e8 16       	cp	r14, r24
    1384:	f1 04       	cpc	r15, r1
    1386:	01 05       	cpc	r16, r1
    1388:	11 05       	cpc	r17, r1
    138a:	31 f0       	breq	.+12     	; 0x1398 <__clzsi2+0x36>
    138c:	28 f0       	brcs	.+10     	; 0x1398 <__clzsi2+0x36>
    138e:	88 e0       	ldi	r24, 0x08	; 8
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	a0 e0       	ldi	r26, 0x00	; 0
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	17 c0       	rjmp	.+46     	; 0x13c6 <__clzsi2+0x64>
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	a0 e0       	ldi	r26, 0x00	; 0
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	12 c0       	rjmp	.+36     	; 0x13c6 <__clzsi2+0x64>
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	e8 16       	cp	r14, r24
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	f8 06       	cpc	r15, r24
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	08 07       	cpc	r16, r24
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	18 07       	cpc	r17, r24
    13b2:	28 f0       	brcs	.+10     	; 0x13be <__clzsi2+0x5c>
    13b4:	88 e1       	ldi	r24, 0x18	; 24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	a0 e0       	ldi	r26, 0x00	; 0
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	04 c0       	rjmp	.+8      	; 0x13c6 <__clzsi2+0x64>
    13be:	80 e1       	ldi	r24, 0x10	; 16
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	a0 e0       	ldi	r26, 0x00	; 0
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	20 e2       	ldi	r18, 0x20	; 32
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	28 1b       	sub	r18, r24
    13d0:	39 0b       	sbc	r19, r25
    13d2:	4a 0b       	sbc	r20, r26
    13d4:	5b 0b       	sbc	r21, r27
    13d6:	04 c0       	rjmp	.+8      	; 0x13e0 <__clzsi2+0x7e>
    13d8:	16 95       	lsr	r17
    13da:	07 95       	ror	r16
    13dc:	f7 94       	ror	r15
    13de:	e7 94       	ror	r14
    13e0:	8a 95       	dec	r24
    13e2:	d2 f7       	brpl	.-12     	; 0x13d8 <__clzsi2+0x76>
    13e4:	f7 01       	movw	r30, r14
    13e6:	e8 5f       	subi	r30, 0xF8	; 248
    13e8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ea:	80 81       	ld	r24, Z
    13ec:	28 1b       	sub	r18, r24
    13ee:	31 09       	sbc	r19, r1
    13f0:	41 09       	sbc	r20, r1
    13f2:	51 09       	sbc	r21, r1
    13f4:	c9 01       	movw	r24, r18
    13f6:	1f 91       	pop	r17
    13f8:	0f 91       	pop	r16
    13fa:	ff 90       	pop	r15
    13fc:	ef 90       	pop	r14
    13fe:	08 95       	ret

00001400 <__pack_f>:
    1400:	df 92       	push	r13
    1402:	ef 92       	push	r14
    1404:	ff 92       	push	r15
    1406:	0f 93       	push	r16
    1408:	1f 93       	push	r17
    140a:	fc 01       	movw	r30, r24
    140c:	e4 80       	ldd	r14, Z+4	; 0x04
    140e:	f5 80       	ldd	r15, Z+5	; 0x05
    1410:	06 81       	ldd	r16, Z+6	; 0x06
    1412:	17 81       	ldd	r17, Z+7	; 0x07
    1414:	d1 80       	ldd	r13, Z+1	; 0x01
    1416:	80 81       	ld	r24, Z
    1418:	82 30       	cpi	r24, 0x02	; 2
    141a:	48 f4       	brcc	.+18     	; 0x142e <__pack_f+0x2e>
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	a0 e1       	ldi	r26, 0x10	; 16
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e8 2a       	or	r14, r24
    1426:	f9 2a       	or	r15, r25
    1428:	0a 2b       	or	r16, r26
    142a:	1b 2b       	or	r17, r27
    142c:	a5 c0       	rjmp	.+330    	; 0x1578 <__pack_f+0x178>
    142e:	84 30       	cpi	r24, 0x04	; 4
    1430:	09 f4       	brne	.+2      	; 0x1434 <__pack_f+0x34>
    1432:	9f c0       	rjmp	.+318    	; 0x1572 <__pack_f+0x172>
    1434:	82 30       	cpi	r24, 0x02	; 2
    1436:	21 f4       	brne	.+8      	; 0x1440 <__pack_f+0x40>
    1438:	ee 24       	eor	r14, r14
    143a:	ff 24       	eor	r15, r15
    143c:	87 01       	movw	r16, r14
    143e:	05 c0       	rjmp	.+10     	; 0x144a <__pack_f+0x4a>
    1440:	e1 14       	cp	r14, r1
    1442:	f1 04       	cpc	r15, r1
    1444:	01 05       	cpc	r16, r1
    1446:	11 05       	cpc	r17, r1
    1448:	19 f4       	brne	.+6      	; 0x1450 <__pack_f+0x50>
    144a:	e0 e0       	ldi	r30, 0x00	; 0
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	96 c0       	rjmp	.+300    	; 0x157c <__pack_f+0x17c>
    1450:	62 81       	ldd	r22, Z+2	; 0x02
    1452:	73 81       	ldd	r23, Z+3	; 0x03
    1454:	9f ef       	ldi	r25, 0xFF	; 255
    1456:	62 38       	cpi	r22, 0x82	; 130
    1458:	79 07       	cpc	r23, r25
    145a:	0c f0       	brlt	.+2      	; 0x145e <__pack_f+0x5e>
    145c:	5b c0       	rjmp	.+182    	; 0x1514 <__pack_f+0x114>
    145e:	22 e8       	ldi	r18, 0x82	; 130
    1460:	3f ef       	ldi	r19, 0xFF	; 255
    1462:	26 1b       	sub	r18, r22
    1464:	37 0b       	sbc	r19, r23
    1466:	2a 31       	cpi	r18, 0x1A	; 26
    1468:	31 05       	cpc	r19, r1
    146a:	2c f0       	brlt	.+10     	; 0x1476 <__pack_f+0x76>
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	2a c0       	rjmp	.+84     	; 0x14ca <__pack_f+0xca>
    1476:	b8 01       	movw	r22, r16
    1478:	a7 01       	movw	r20, r14
    147a:	02 2e       	mov	r0, r18
    147c:	04 c0       	rjmp	.+8      	; 0x1486 <__pack_f+0x86>
    147e:	76 95       	lsr	r23
    1480:	67 95       	ror	r22
    1482:	57 95       	ror	r21
    1484:	47 95       	ror	r20
    1486:	0a 94       	dec	r0
    1488:	d2 f7       	brpl	.-12     	; 0x147e <__pack_f+0x7e>
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	a0 e0       	ldi	r26, 0x00	; 0
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	04 c0       	rjmp	.+8      	; 0x149c <__pack_f+0x9c>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	aa 1f       	adc	r26, r26
    149a:	bb 1f       	adc	r27, r27
    149c:	2a 95       	dec	r18
    149e:	d2 f7       	brpl	.-12     	; 0x1494 <__pack_f+0x94>
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	a1 09       	sbc	r26, r1
    14a4:	b1 09       	sbc	r27, r1
    14a6:	8e 21       	and	r24, r14
    14a8:	9f 21       	and	r25, r15
    14aa:	a0 23       	and	r26, r16
    14ac:	b1 23       	and	r27, r17
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	a1 05       	cpc	r26, r1
    14b2:	b1 05       	cpc	r27, r1
    14b4:	21 f0       	breq	.+8      	; 0x14be <__pack_f+0xbe>
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	a0 e0       	ldi	r26, 0x00	; 0
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	9a 01       	movw	r18, r20
    14c0:	ab 01       	movw	r20, r22
    14c2:	28 2b       	or	r18, r24
    14c4:	39 2b       	or	r19, r25
    14c6:	4a 2b       	or	r20, r26
    14c8:	5b 2b       	or	r21, r27
    14ca:	da 01       	movw	r26, r20
    14cc:	c9 01       	movw	r24, r18
    14ce:	8f 77       	andi	r24, 0x7F	; 127
    14d0:	90 70       	andi	r25, 0x00	; 0
    14d2:	a0 70       	andi	r26, 0x00	; 0
    14d4:	b0 70       	andi	r27, 0x00	; 0
    14d6:	80 34       	cpi	r24, 0x40	; 64
    14d8:	91 05       	cpc	r25, r1
    14da:	a1 05       	cpc	r26, r1
    14dc:	b1 05       	cpc	r27, r1
    14de:	39 f4       	brne	.+14     	; 0x14ee <__pack_f+0xee>
    14e0:	27 ff       	sbrs	r18, 7
    14e2:	09 c0       	rjmp	.+18     	; 0x14f6 <__pack_f+0xf6>
    14e4:	20 5c       	subi	r18, 0xC0	; 192
    14e6:	3f 4f       	sbci	r19, 0xFF	; 255
    14e8:	4f 4f       	sbci	r20, 0xFF	; 255
    14ea:	5f 4f       	sbci	r21, 0xFF	; 255
    14ec:	04 c0       	rjmp	.+8      	; 0x14f6 <__pack_f+0xf6>
    14ee:	21 5c       	subi	r18, 0xC1	; 193
    14f0:	3f 4f       	sbci	r19, 0xFF	; 255
    14f2:	4f 4f       	sbci	r20, 0xFF	; 255
    14f4:	5f 4f       	sbci	r21, 0xFF	; 255
    14f6:	e0 e0       	ldi	r30, 0x00	; 0
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	20 30       	cpi	r18, 0x00	; 0
    14fc:	a0 e0       	ldi	r26, 0x00	; 0
    14fe:	3a 07       	cpc	r19, r26
    1500:	a0 e0       	ldi	r26, 0x00	; 0
    1502:	4a 07       	cpc	r20, r26
    1504:	a0 e4       	ldi	r26, 0x40	; 64
    1506:	5a 07       	cpc	r21, r26
    1508:	10 f0       	brcs	.+4      	; 0x150e <__pack_f+0x10e>
    150a:	e1 e0       	ldi	r30, 0x01	; 1
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	79 01       	movw	r14, r18
    1510:	8a 01       	movw	r16, r20
    1512:	27 c0       	rjmp	.+78     	; 0x1562 <__pack_f+0x162>
    1514:	60 38       	cpi	r22, 0x80	; 128
    1516:	71 05       	cpc	r23, r1
    1518:	64 f5       	brge	.+88     	; 0x1572 <__pack_f+0x172>
    151a:	fb 01       	movw	r30, r22
    151c:	e1 58       	subi	r30, 0x81	; 129
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	d8 01       	movw	r26, r16
    1522:	c7 01       	movw	r24, r14
    1524:	8f 77       	andi	r24, 0x7F	; 127
    1526:	90 70       	andi	r25, 0x00	; 0
    1528:	a0 70       	andi	r26, 0x00	; 0
    152a:	b0 70       	andi	r27, 0x00	; 0
    152c:	80 34       	cpi	r24, 0x40	; 64
    152e:	91 05       	cpc	r25, r1
    1530:	a1 05       	cpc	r26, r1
    1532:	b1 05       	cpc	r27, r1
    1534:	39 f4       	brne	.+14     	; 0x1544 <__pack_f+0x144>
    1536:	e7 fe       	sbrs	r14, 7
    1538:	0d c0       	rjmp	.+26     	; 0x1554 <__pack_f+0x154>
    153a:	80 e4       	ldi	r24, 0x40	; 64
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	a0 e0       	ldi	r26, 0x00	; 0
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	04 c0       	rjmp	.+8      	; 0x154c <__pack_f+0x14c>
    1544:	8f e3       	ldi	r24, 0x3F	; 63
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	a0 e0       	ldi	r26, 0x00	; 0
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e8 0e       	add	r14, r24
    154e:	f9 1e       	adc	r15, r25
    1550:	0a 1f       	adc	r16, r26
    1552:	1b 1f       	adc	r17, r27
    1554:	17 ff       	sbrs	r17, 7
    1556:	05 c0       	rjmp	.+10     	; 0x1562 <__pack_f+0x162>
    1558:	16 95       	lsr	r17
    155a:	07 95       	ror	r16
    155c:	f7 94       	ror	r15
    155e:	e7 94       	ror	r14
    1560:	31 96       	adiw	r30, 0x01	; 1
    1562:	87 e0       	ldi	r24, 0x07	; 7
    1564:	16 95       	lsr	r17
    1566:	07 95       	ror	r16
    1568:	f7 94       	ror	r15
    156a:	e7 94       	ror	r14
    156c:	8a 95       	dec	r24
    156e:	d1 f7       	brne	.-12     	; 0x1564 <__pack_f+0x164>
    1570:	05 c0       	rjmp	.+10     	; 0x157c <__pack_f+0x17c>
    1572:	ee 24       	eor	r14, r14
    1574:	ff 24       	eor	r15, r15
    1576:	87 01       	movw	r16, r14
    1578:	ef ef       	ldi	r30, 0xFF	; 255
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	6e 2f       	mov	r22, r30
    157e:	67 95       	ror	r22
    1580:	66 27       	eor	r22, r22
    1582:	67 95       	ror	r22
    1584:	90 2f       	mov	r25, r16
    1586:	9f 77       	andi	r25, 0x7F	; 127
    1588:	d7 94       	ror	r13
    158a:	dd 24       	eor	r13, r13
    158c:	d7 94       	ror	r13
    158e:	8e 2f       	mov	r24, r30
    1590:	86 95       	lsr	r24
    1592:	49 2f       	mov	r20, r25
    1594:	46 2b       	or	r20, r22
    1596:	58 2f       	mov	r21, r24
    1598:	5d 29       	or	r21, r13
    159a:	b7 01       	movw	r22, r14
    159c:	ca 01       	movw	r24, r20
    159e:	1f 91       	pop	r17
    15a0:	0f 91       	pop	r16
    15a2:	ff 90       	pop	r15
    15a4:	ef 90       	pop	r14
    15a6:	df 90       	pop	r13
    15a8:	08 95       	ret

000015aa <__unpack_f>:
    15aa:	fc 01       	movw	r30, r24
    15ac:	db 01       	movw	r26, r22
    15ae:	40 81       	ld	r20, Z
    15b0:	51 81       	ldd	r21, Z+1	; 0x01
    15b2:	22 81       	ldd	r18, Z+2	; 0x02
    15b4:	62 2f       	mov	r22, r18
    15b6:	6f 77       	andi	r22, 0x7F	; 127
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	22 1f       	adc	r18, r18
    15bc:	22 27       	eor	r18, r18
    15be:	22 1f       	adc	r18, r18
    15c0:	93 81       	ldd	r25, Z+3	; 0x03
    15c2:	89 2f       	mov	r24, r25
    15c4:	88 0f       	add	r24, r24
    15c6:	82 2b       	or	r24, r18
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	99 1f       	adc	r25, r25
    15ce:	99 27       	eor	r25, r25
    15d0:	99 1f       	adc	r25, r25
    15d2:	11 96       	adiw	r26, 0x01	; 1
    15d4:	9c 93       	st	X, r25
    15d6:	11 97       	sbiw	r26, 0x01	; 1
    15d8:	21 15       	cp	r18, r1
    15da:	31 05       	cpc	r19, r1
    15dc:	a9 f5       	brne	.+106    	; 0x1648 <__unpack_f+0x9e>
    15de:	41 15       	cp	r20, r1
    15e0:	51 05       	cpc	r21, r1
    15e2:	61 05       	cpc	r22, r1
    15e4:	71 05       	cpc	r23, r1
    15e6:	11 f4       	brne	.+4      	; 0x15ec <__unpack_f+0x42>
    15e8:	82 e0       	ldi	r24, 0x02	; 2
    15ea:	37 c0       	rjmp	.+110    	; 0x165a <__unpack_f+0xb0>
    15ec:	82 e8       	ldi	r24, 0x82	; 130
    15ee:	9f ef       	ldi	r25, 0xFF	; 255
    15f0:	13 96       	adiw	r26, 0x03	; 3
    15f2:	9c 93       	st	X, r25
    15f4:	8e 93       	st	-X, r24
    15f6:	12 97       	sbiw	r26, 0x02	; 2
    15f8:	9a 01       	movw	r18, r20
    15fa:	ab 01       	movw	r20, r22
    15fc:	67 e0       	ldi	r22, 0x07	; 7
    15fe:	22 0f       	add	r18, r18
    1600:	33 1f       	adc	r19, r19
    1602:	44 1f       	adc	r20, r20
    1604:	55 1f       	adc	r21, r21
    1606:	6a 95       	dec	r22
    1608:	d1 f7       	brne	.-12     	; 0x15fe <__unpack_f+0x54>
    160a:	83 e0       	ldi	r24, 0x03	; 3
    160c:	8c 93       	st	X, r24
    160e:	0d c0       	rjmp	.+26     	; 0x162a <__unpack_f+0x80>
    1610:	22 0f       	add	r18, r18
    1612:	33 1f       	adc	r19, r19
    1614:	44 1f       	adc	r20, r20
    1616:	55 1f       	adc	r21, r21
    1618:	12 96       	adiw	r26, 0x02	; 2
    161a:	8d 91       	ld	r24, X+
    161c:	9c 91       	ld	r25, X
    161e:	13 97       	sbiw	r26, 0x03	; 3
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	13 96       	adiw	r26, 0x03	; 3
    1624:	9c 93       	st	X, r25
    1626:	8e 93       	st	-X, r24
    1628:	12 97       	sbiw	r26, 0x02	; 2
    162a:	20 30       	cpi	r18, 0x00	; 0
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	38 07       	cpc	r19, r24
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	48 07       	cpc	r20, r24
    1634:	80 e4       	ldi	r24, 0x40	; 64
    1636:	58 07       	cpc	r21, r24
    1638:	58 f3       	brcs	.-42     	; 0x1610 <__unpack_f+0x66>
    163a:	14 96       	adiw	r26, 0x04	; 4
    163c:	2d 93       	st	X+, r18
    163e:	3d 93       	st	X+, r19
    1640:	4d 93       	st	X+, r20
    1642:	5c 93       	st	X, r21
    1644:	17 97       	sbiw	r26, 0x07	; 7
    1646:	08 95       	ret
    1648:	2f 3f       	cpi	r18, 0xFF	; 255
    164a:	31 05       	cpc	r19, r1
    164c:	79 f4       	brne	.+30     	; 0x166c <__unpack_f+0xc2>
    164e:	41 15       	cp	r20, r1
    1650:	51 05       	cpc	r21, r1
    1652:	61 05       	cpc	r22, r1
    1654:	71 05       	cpc	r23, r1
    1656:	19 f4       	brne	.+6      	; 0x165e <__unpack_f+0xb4>
    1658:	84 e0       	ldi	r24, 0x04	; 4
    165a:	8c 93       	st	X, r24
    165c:	08 95       	ret
    165e:	64 ff       	sbrs	r22, 4
    1660:	03 c0       	rjmp	.+6      	; 0x1668 <__unpack_f+0xbe>
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	8c 93       	st	X, r24
    1666:	12 c0       	rjmp	.+36     	; 0x168c <__unpack_f+0xe2>
    1668:	1c 92       	st	X, r1
    166a:	10 c0       	rjmp	.+32     	; 0x168c <__unpack_f+0xe2>
    166c:	2f 57       	subi	r18, 0x7F	; 127
    166e:	30 40       	sbci	r19, 0x00	; 0
    1670:	13 96       	adiw	r26, 0x03	; 3
    1672:	3c 93       	st	X, r19
    1674:	2e 93       	st	-X, r18
    1676:	12 97       	sbiw	r26, 0x02	; 2
    1678:	83 e0       	ldi	r24, 0x03	; 3
    167a:	8c 93       	st	X, r24
    167c:	87 e0       	ldi	r24, 0x07	; 7
    167e:	44 0f       	add	r20, r20
    1680:	55 1f       	adc	r21, r21
    1682:	66 1f       	adc	r22, r22
    1684:	77 1f       	adc	r23, r23
    1686:	8a 95       	dec	r24
    1688:	d1 f7       	brne	.-12     	; 0x167e <__unpack_f+0xd4>
    168a:	70 64       	ori	r23, 0x40	; 64
    168c:	14 96       	adiw	r26, 0x04	; 4
    168e:	4d 93       	st	X+, r20
    1690:	5d 93       	st	X+, r21
    1692:	6d 93       	st	X+, r22
    1694:	7c 93       	st	X, r23
    1696:	17 97       	sbiw	r26, 0x07	; 7
    1698:	08 95       	ret

0000169a <__fpcmp_parts_f>:
    169a:	1f 93       	push	r17
    169c:	dc 01       	movw	r26, r24
    169e:	fb 01       	movw	r30, r22
    16a0:	9c 91       	ld	r25, X
    16a2:	92 30       	cpi	r25, 0x02	; 2
    16a4:	08 f4       	brcc	.+2      	; 0x16a8 <__fpcmp_parts_f+0xe>
    16a6:	47 c0       	rjmp	.+142    	; 0x1736 <__fpcmp_parts_f+0x9c>
    16a8:	80 81       	ld	r24, Z
    16aa:	82 30       	cpi	r24, 0x02	; 2
    16ac:	08 f4       	brcc	.+2      	; 0x16b0 <__fpcmp_parts_f+0x16>
    16ae:	43 c0       	rjmp	.+134    	; 0x1736 <__fpcmp_parts_f+0x9c>
    16b0:	94 30       	cpi	r25, 0x04	; 4
    16b2:	51 f4       	brne	.+20     	; 0x16c8 <__fpcmp_parts_f+0x2e>
    16b4:	11 96       	adiw	r26, 0x01	; 1
    16b6:	1c 91       	ld	r17, X
    16b8:	84 30       	cpi	r24, 0x04	; 4
    16ba:	99 f5       	brne	.+102    	; 0x1722 <__fpcmp_parts_f+0x88>
    16bc:	81 81       	ldd	r24, Z+1	; 0x01
    16be:	68 2f       	mov	r22, r24
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	61 1b       	sub	r22, r17
    16c4:	71 09       	sbc	r23, r1
    16c6:	3f c0       	rjmp	.+126    	; 0x1746 <__fpcmp_parts_f+0xac>
    16c8:	84 30       	cpi	r24, 0x04	; 4
    16ca:	21 f0       	breq	.+8      	; 0x16d4 <__fpcmp_parts_f+0x3a>
    16cc:	92 30       	cpi	r25, 0x02	; 2
    16ce:	31 f4       	brne	.+12     	; 0x16dc <__fpcmp_parts_f+0x42>
    16d0:	82 30       	cpi	r24, 0x02	; 2
    16d2:	b9 f1       	breq	.+110    	; 0x1742 <__fpcmp_parts_f+0xa8>
    16d4:	81 81       	ldd	r24, Z+1	; 0x01
    16d6:	88 23       	and	r24, r24
    16d8:	89 f1       	breq	.+98     	; 0x173c <__fpcmp_parts_f+0xa2>
    16da:	2d c0       	rjmp	.+90     	; 0x1736 <__fpcmp_parts_f+0x9c>
    16dc:	11 96       	adiw	r26, 0x01	; 1
    16de:	1c 91       	ld	r17, X
    16e0:	11 97       	sbiw	r26, 0x01	; 1
    16e2:	82 30       	cpi	r24, 0x02	; 2
    16e4:	f1 f0       	breq	.+60     	; 0x1722 <__fpcmp_parts_f+0x88>
    16e6:	81 81       	ldd	r24, Z+1	; 0x01
    16e8:	18 17       	cp	r17, r24
    16ea:	d9 f4       	brne	.+54     	; 0x1722 <__fpcmp_parts_f+0x88>
    16ec:	12 96       	adiw	r26, 0x02	; 2
    16ee:	2d 91       	ld	r18, X+
    16f0:	3c 91       	ld	r19, X
    16f2:	13 97       	sbiw	r26, 0x03	; 3
    16f4:	82 81       	ldd	r24, Z+2	; 0x02
    16f6:	93 81       	ldd	r25, Z+3	; 0x03
    16f8:	82 17       	cp	r24, r18
    16fa:	93 07       	cpc	r25, r19
    16fc:	94 f0       	brlt	.+36     	; 0x1722 <__fpcmp_parts_f+0x88>
    16fe:	28 17       	cp	r18, r24
    1700:	39 07       	cpc	r19, r25
    1702:	bc f0       	brlt	.+46     	; 0x1732 <__fpcmp_parts_f+0x98>
    1704:	14 96       	adiw	r26, 0x04	; 4
    1706:	8d 91       	ld	r24, X+
    1708:	9d 91       	ld	r25, X+
    170a:	0d 90       	ld	r0, X+
    170c:	bc 91       	ld	r27, X
    170e:	a0 2d       	mov	r26, r0
    1710:	24 81       	ldd	r18, Z+4	; 0x04
    1712:	35 81       	ldd	r19, Z+5	; 0x05
    1714:	46 81       	ldd	r20, Z+6	; 0x06
    1716:	57 81       	ldd	r21, Z+7	; 0x07
    1718:	28 17       	cp	r18, r24
    171a:	39 07       	cpc	r19, r25
    171c:	4a 07       	cpc	r20, r26
    171e:	5b 07       	cpc	r21, r27
    1720:	18 f4       	brcc	.+6      	; 0x1728 <__fpcmp_parts_f+0x8e>
    1722:	11 23       	and	r17, r17
    1724:	41 f0       	breq	.+16     	; 0x1736 <__fpcmp_parts_f+0x9c>
    1726:	0a c0       	rjmp	.+20     	; 0x173c <__fpcmp_parts_f+0xa2>
    1728:	82 17       	cp	r24, r18
    172a:	93 07       	cpc	r25, r19
    172c:	a4 07       	cpc	r26, r20
    172e:	b5 07       	cpc	r27, r21
    1730:	40 f4       	brcc	.+16     	; 0x1742 <__fpcmp_parts_f+0xa8>
    1732:	11 23       	and	r17, r17
    1734:	19 f0       	breq	.+6      	; 0x173c <__fpcmp_parts_f+0xa2>
    1736:	61 e0       	ldi	r22, 0x01	; 1
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	05 c0       	rjmp	.+10     	; 0x1746 <__fpcmp_parts_f+0xac>
    173c:	6f ef       	ldi	r22, 0xFF	; 255
    173e:	7f ef       	ldi	r23, 0xFF	; 255
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <__fpcmp_parts_f+0xac>
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	cb 01       	movw	r24, r22
    1748:	1f 91       	pop	r17
    174a:	08 95       	ret

0000174c <__eerd_word>:
    174c:	df 92       	push	r13
    174e:	ef 92       	push	r14
    1750:	ff 92       	push	r15
    1752:	0f 93       	push	r16
    1754:	1f 93       	push	r17
    1756:	7b 01       	movw	r14, r22
    1758:	8c 01       	movw	r16, r24
    175a:	fb 01       	movw	r30, r22
    175c:	09 95       	icall
    175e:	d8 2e       	mov	r13, r24
    1760:	c8 01       	movw	r24, r16
    1762:	01 96       	adiw	r24, 0x01	; 1
    1764:	f7 01       	movw	r30, r14
    1766:	09 95       	icall
    1768:	98 2f       	mov	r25, r24
    176a:	8d 2d       	mov	r24, r13
    176c:	1f 91       	pop	r17
    176e:	0f 91       	pop	r16
    1770:	ff 90       	pop	r15
    1772:	ef 90       	pop	r14
    1774:	df 90       	pop	r13
    1776:	08 95       	ret

00001778 <__eewr_word>:
    1778:	df 92       	push	r13
    177a:	ef 92       	push	r14
    177c:	ff 92       	push	r15
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	d7 2e       	mov	r13, r23
    1784:	7a 01       	movw	r14, r20
    1786:	8c 01       	movw	r16, r24
    1788:	fa 01       	movw	r30, r20
    178a:	09 95       	icall
    178c:	6d 2d       	mov	r22, r13
    178e:	c8 01       	movw	r24, r16
    1790:	01 96       	adiw	r24, 0x01	; 1
    1792:	f7 01       	movw	r30, r14
    1794:	09 95       	icall
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	ff 90       	pop	r15
    179c:	ef 90       	pop	r14
    179e:	df 90       	pop	r13
    17a0:	08 95       	ret

000017a2 <__udivmodhi4>:
    17a2:	aa 1b       	sub	r26, r26
    17a4:	bb 1b       	sub	r27, r27
    17a6:	51 e1       	ldi	r21, 0x11	; 17
    17a8:	07 c0       	rjmp	.+14     	; 0x17b8 <__udivmodhi4_ep>

000017aa <__udivmodhi4_loop>:
    17aa:	aa 1f       	adc	r26, r26
    17ac:	bb 1f       	adc	r27, r27
    17ae:	a6 17       	cp	r26, r22
    17b0:	b7 07       	cpc	r27, r23
    17b2:	10 f0       	brcs	.+4      	; 0x17b8 <__udivmodhi4_ep>
    17b4:	a6 1b       	sub	r26, r22
    17b6:	b7 0b       	sbc	r27, r23

000017b8 <__udivmodhi4_ep>:
    17b8:	88 1f       	adc	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	5a 95       	dec	r21
    17be:	a9 f7       	brne	.-22     	; 0x17aa <__udivmodhi4_loop>
    17c0:	80 95       	com	r24
    17c2:	90 95       	com	r25
    17c4:	bc 01       	movw	r22, r24
    17c6:	cd 01       	movw	r24, r26
    17c8:	08 95       	ret

000017ca <__prologue_saves__>:
    17ca:	2f 92       	push	r2
    17cc:	3f 92       	push	r3
    17ce:	4f 92       	push	r4
    17d0:	5f 92       	push	r5
    17d2:	6f 92       	push	r6
    17d4:	7f 92       	push	r7
    17d6:	8f 92       	push	r8
    17d8:	9f 92       	push	r9
    17da:	af 92       	push	r10
    17dc:	bf 92       	push	r11
    17de:	cf 92       	push	r12
    17e0:	df 92       	push	r13
    17e2:	ef 92       	push	r14
    17e4:	ff 92       	push	r15
    17e6:	0f 93       	push	r16
    17e8:	1f 93       	push	r17
    17ea:	cf 93       	push	r28
    17ec:	df 93       	push	r29
    17ee:	cd b7       	in	r28, 0x3d	; 61
    17f0:	de b7       	in	r29, 0x3e	; 62
    17f2:	ca 1b       	sub	r28, r26
    17f4:	db 0b       	sbc	r29, r27
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	09 94       	ijmp

00001802 <__epilogue_restores__>:
    1802:	2a 88       	ldd	r2, Y+18	; 0x12
    1804:	39 88       	ldd	r3, Y+17	; 0x11
    1806:	48 88       	ldd	r4, Y+16	; 0x10
    1808:	5f 84       	ldd	r5, Y+15	; 0x0f
    180a:	6e 84       	ldd	r6, Y+14	; 0x0e
    180c:	7d 84       	ldd	r7, Y+13	; 0x0d
    180e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1810:	9b 84       	ldd	r9, Y+11	; 0x0b
    1812:	aa 84       	ldd	r10, Y+10	; 0x0a
    1814:	b9 84       	ldd	r11, Y+9	; 0x09
    1816:	c8 84       	ldd	r12, Y+8	; 0x08
    1818:	df 80       	ldd	r13, Y+7	; 0x07
    181a:	ee 80       	ldd	r14, Y+6	; 0x06
    181c:	fd 80       	ldd	r15, Y+5	; 0x05
    181e:	0c 81       	ldd	r16, Y+4	; 0x04
    1820:	1b 81       	ldd	r17, Y+3	; 0x03
    1822:	aa 81       	ldd	r26, Y+2	; 0x02
    1824:	b9 81       	ldd	r27, Y+1	; 0x01
    1826:	ce 0f       	add	r28, r30
    1828:	d1 1d       	adc	r29, r1
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	ed 01       	movw	r28, r26
    1836:	08 95       	ret

00001838 <_exit>:
    1838:	f8 94       	cli

0000183a <__stop_program>:
    183a:	ff cf       	rjmp	.-2      	; 0x183a <__stop_program>
