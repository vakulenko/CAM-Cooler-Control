
TEC_board_arduino_nano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800100  00001844  000018d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001844  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  00800208  0000194c  000019e0  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  000019e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  000019e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000215  00000000  00000000  00001a03  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d3e  00000000  00000000  00001c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000366  00000000  00000000  00002956  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bff  00000000  00000000  00002cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000038bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000308  00000000  00000000  00003a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f7  00000000  00000000  00003d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  0000443b  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e4       	ldi	r30, 0x44	; 68
      7c:	f8 e1       	ldi	r31, 0x18	; 24
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a8 30       	cpi	r26, 0x08	; 8
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a8 e0       	ldi	r26, 0x08	; 8
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 33       	cpi	r26, 0x33	; 51
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 20 03 	call	0x640	; 0x640 <main>
      9e:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
      a6:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
      a8:	f9 99       	sbic	0x1f, 1	; 31
      aa:	fe cf       	rjmp	.-4      	; 0xa8 <eeprom_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
      ac:	32 bd       	out	0x22, r19	; 34
      ae:	21 bd       	out	0x21, r18	; 33
#endif
    EECR |= (1 << EERE);
      b0:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
      b2:	80 b5       	in	r24, 0x20	; 32
}
      b4:	08 95       	ret

000000b6 <eeprom_write_byte>:

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
      b6:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
      b8:	f9 99       	sbic	0x1f, 1	; 31
      ba:	fe cf       	rjmp	.-4      	; 0xb8 <eeprom_write_byte+0x2>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
      bc:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
      be:	32 bd       	out	0x22, r19	; 34
      c0:	21 bd       	out	0x21, r18	; 33
#endif
    EEDR = __value;
      c2:	60 bd       	out	0x20, r22	; 32

    __asm__ __volatile__ (
      c4:	0f b6       	in	r0, 0x3f	; 63
      c6:	f8 94       	cli
      c8:	fa 9a       	sbi	0x1f, 2	; 31
      ca:	f9 9a       	sbi	0x1f, 1	; 31
      cc:	0f be       	out	0x3f, r0	; 63
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
}
      ce:	08 95       	ret

000000d0 <uartInit>:

//------------------------------------------------------------------------------------
//UART

void uartInit(void)
{
      d0:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0H = (BAUD_PRESCALE >> 8);		// Init UART baudrate
	UBRR0L = BAUD_PRESCALE;
      d4:	87 e6       	ldi	r24, 0x67	; 103
      d6:	80 93 c4 00 	sts	0x00C4, r24

	UCSR0B |= (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);   // Turn on the transmission and reception circuitry
      da:	e1 ec       	ldi	r30, 0xC1	; 193
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	88 69       	ori	r24, 0x98	; 152
      e2:	80 83       	st	Z, r24
    UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01); // Use 8-bit character sizes
      e4:	e2 ec       	ldi	r30, 0xC2	; 194
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	86 60       	ori	r24, 0x06	; 6
      ec:	80 83       	st	Z, r24

	return;
}
      ee:	08 95       	ret

000000f0 <uartTransmitByte>:

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
      f0:	98 2f       	mov	r25, r24
	while ( !( UCSR0A & (1<<UDRE0)) );
      f2:	80 91 c0 00 	lds	r24, 0x00C0
      f6:	85 ff       	sbrs	r24, 5
      f8:	fc cf       	rjmp	.-8      	; 0xf2 <uartTransmitByte+0x2>
	UDR0 = data;
      fa:	90 93 c6 00 	sts	0x00C6, r25
	return;
}
      fe:	08 95       	ret

00000100 <uartReceiveByte>:

//Receive byte thought UART
unsigned char uartReceiveByte (void)
{
     100:	80 91 c0 00 	lds	r24, 0x00C0
     104:	87 ff       	sbrs	r24, 7
     106:	fc cf       	rjmp	.-8      	; 0x100 <uartReceiveByte>

	while ( !(UCSR0A & (1<<RXC0)) )
	;
	return UDR0;
     108:	80 91 c6 00 	lds	r24, 0x00C6
}
     10c:	08 95       	ret

0000010e <uartTransmitMessage>:

//Transmit string to UART
void uartTransmitMessage(char* msg)
{ unsigned char i;
     10e:	ac 01       	movw	r20, r24
     110:	20 e0       	ldi	r18, 0x00	; 0
     112:	07 c0       	rjmp	.+14     	; 0x122 <uartTransmitMessage+0x14>
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSR0A & (1<<UDRE0)) );
     114:	80 91 c0 00 	lds	r24, 0x00C0
     118:	85 ff       	sbrs	r24, 5
     11a:	fc cf       	rjmp	.-8      	; 0x114 <uartTransmitMessage+0x6>
	UDR0 = data;
     11c:	e0 93 c6 00 	sts	0x00C6, r30
	i=0;

	while ((i<256)&(msg[i]!=0x00) )
	{
		uartTransmitByte(msg[i]);
		i++;
     120:	2f 5f       	subi	r18, 0xFF	; 255
//Transmit string to UART
void uartTransmitMessage(char* msg)
{ unsigned char i;
	i=0;

	while ((i<256)&(msg[i]!=0x00) )
     122:	fa 01       	movw	r30, r20
     124:	e2 0f       	add	r30, r18
     126:	f1 1d       	adc	r31, r1
     128:	e0 81       	ld	r30, Z
     12a:	ee 23       	and	r30, r30
     12c:	99 f7       	brne	.-26     	; 0x114 <uartTransmitMessage+0x6>
	{
		uartTransmitByte(msg[i]);
		i++;
	}
	return;
}
     12e:	08 95       	ret

00000130 <initPWM>:

//------------------------------------------------------------------------------------
//PWM

void initPWM (void)
{
     130:	5d 98       	cbi	0x0b, 5	; 11
	TEC_PORT&=~(1<<TEC_PIN);
	TEC_DDR|=(1<<TEC_PIN);
     132:	55 9a       	sbi	0x0a, 5	; 10

	TCCR1A|=(1<<WGM10);
     134:	e0 e8       	ldi	r30, 0x80	; 128
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	81 60       	ori	r24, 0x01	; 1
     13c:	80 83       	st	Z, r24
	TCCR1B|=(1<<WGM12)|(1<<CS10);
     13e:	e1 e8       	ldi	r30, 0x81	; 129
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	89 60       	ori	r24, 0x09	; 9
     146:	80 83       	st	Z, r24

	OCR1AL=0x00;
     148:	10 92 88 00 	sts	0x0088, r1
	OCR1BL=0x00;
     14c:	10 92 8a 00 	sts	0x008A, r1
	return;
}
     150:	08 95       	ret

00000152 <offPWM>:

void offPWM()
{
     152:	e0 e8       	ldi	r30, 0x80	; 128
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	80 81       	ld	r24, Z
     158:	8f 77       	andi	r24, 0x7F	; 127
     15a:	80 83       	st	Z, r24
	TCCR1A&=~(1<<COM1A1);
	return;
}
     15c:	08 95       	ret

0000015e <onPWM>:

void onPWM()
{
     15e:	e0 e8       	ldi	r30, 0x80	; 128
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	80 68       	ori	r24, 0x80	; 128
     166:	80 83       	st	Z, r24
	TCCR1A|=(1<<COM1A1);
	return;
}
     168:	08 95       	ret

0000016a <setPWM>:

void setPWM (uint8_t data)
{
     16a:	80 93 88 00 	sts	0x0088, r24
	OCR1AL=data;
	if (data==0) offPWM();
     16e:	88 23       	and	r24, r24
     170:	21 f4       	brne	.+8      	; 0x17a <setPWM+0x10>
	return;
}

void offPWM()
{
	TCCR1A&=~(1<<COM1A1);
     172:	80 91 80 00 	lds	r24, 0x0080
     176:	8f 77       	andi	r24, 0x7F	; 127
     178:	03 c0       	rjmp	.+6      	; 0x180 <setPWM+0x16>
	return;
}

void onPWM()
{
	TCCR1A|=(1<<COM1A1);
     17a:	80 91 80 00 	lds	r24, 0x0080
     17e:	80 68       	ori	r24, 0x80	; 128
     180:	80 93 80 00 	sts	0x0080, r24
     184:	08 95       	ret

00000186 <getPWM>:

	return;
}

uint8_t getPWM (void)
{
     186:	80 91 88 00 	lds	r24, 0x0088
	return OCR1AL;
}
     18a:	08 95       	ret

0000018c <clearRXBuf>:

//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
     18c:	ee e1       	ldi	r30, 0x1E	; 30
     18e:	f2 e0       	ldi	r31, 0x02	; 2
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     190:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     192:	82 e0       	ldi	r24, 0x02	; 2
     194:	e9 32       	cpi	r30, 0x29	; 41
     196:	f8 07       	cpc	r31, r24
     198:	d9 f7       	brne	.-10     	; 0x190 <clearRXBuf+0x4>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     19a:	10 92 09 02 	sts	0x0209, r1
	return;
}
     19e:	08 95       	ret

000001a0 <clearTXBuf>:

void clearTXBuf (void)
{
     1a0:	ec e0       	ldi	r30, 0x0C	; 12
     1a2:	f2 e0       	ldi	r31, 0x02	; 2
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	txBuf[i]=0;
     1a4:	11 92       	st	Z+, r1
}

void clearTXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     1a6:	82 e0       	ldi	r24, 0x02	; 2
     1a8:	e7 31       	cpi	r30, 0x17	; 23
     1aa:	f8 07       	cpc	r31, r24
     1ac:	d9 f7       	brne	.-10     	; 0x1a4 <clearTXBuf+0x4>
	txBuf[i]=0;
	return;
}
     1ae:	08 95       	ret

000001b0 <clearBuf>:

void clearBuf (void)
{
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=txBuf[i]=0;
     1b4:	fc 01       	movw	r30, r24
     1b6:	e4 5f       	subi	r30, 0xF4	; 244
     1b8:	fd 4f       	sbci	r31, 0xFD	; 253
     1ba:	10 82       	st	Z, r1
     1bc:	fc 01       	movw	r30, r24
     1be:	e2 5e       	subi	r30, 0xE2	; 226
     1c0:	fd 4f       	sbci	r31, 0xFD	; 253
     1c2:	10 82       	st	Z, r1
     1c4:	01 96       	adiw	r24, 0x01	; 1
}

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     1c6:	8b 30       	cpi	r24, 0x0B	; 11
     1c8:	91 05       	cpc	r25, r1
     1ca:	a1 f7       	brne	.-24     	; 0x1b4 <clearBuf+0x4>
	rxBuf[i]=txBuf[i]=0;
	return;
}
     1cc:	08 95       	ret

000001ce <__vector_18>:

//receive packet to RX buffer
ISR(USART_RX_vect, ISR_BLOCK)
{
     1ce:	1f 92       	push	r1
     1d0:	0f 92       	push	r0
     1d2:	0f b6       	in	r0, 0x3f	; 63
     1d4:	0f 92       	push	r0
     1d6:	11 24       	eor	r1, r1
     1d8:	2f 93       	push	r18
     1da:	3f 93       	push	r19
     1dc:	4f 93       	push	r20
     1de:	6f 93       	push	r22
     1e0:	7f 93       	push	r23
     1e2:	8f 93       	push	r24
     1e4:	9f 93       	push	r25
     1e6:	ef 93       	push	r30
     1e8:	ff 93       	push	r31
	uint16_t i=0;

	if (packetReceived!=0)
     1ea:	80 91 08 02 	lds	r24, 0x0208
     1ee:	88 23       	and	r24, r24
     1f0:	19 f0       	breq	.+6      	; 0x1f8 <__vector_18+0x2a>
	{
		i=UDR0;
     1f2:	80 91 c6 00 	lds	r24, 0x00C6
     1f6:	29 c0       	rjmp	.+82     	; 0x24a <__vector_18+0x7c>
		return;
	}

	rxBuf[0]=UDR0;
     1f8:	80 91 c6 00 	lds	r24, 0x00C6
     1fc:	80 93 1e 02 	sts	0x021E, r24
	currentRXPacketLen=1;
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	80 93 09 02 	sts	0x0209, r24
     206:	20 e0       	ldi	r18, 0x00	; 0
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	41 e0       	ldi	r20, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	09 c0       	rjmp	.+18     	; 0x224 <__vector_18+0x56>

	while (1)
	{
		while ( !(UCSR0A & (1<<RXC0)) )
		{
			if (i==10000)
     212:	87 e2       	ldi	r24, 0x27	; 39
     214:	20 31       	cpi	r18, 0x10	; 16
     216:	38 07       	cpc	r19, r24
     218:	99 f0       	breq	.+38     	; 0x240 <__vector_18+0x72>
			{
				packetReceived=1;
				return;
			}
			i++;
     21a:	2f 5f       	subi	r18, 0xFF	; 255
     21c:	3f 4f       	sbci	r19, 0xFF	; 255
     21e:	cb 01       	movw	r24, r22
     220:	01 97       	sbiw	r24, 0x01	; 1
     222:	f1 f7       	brne	.-4      	; 0x220 <__vector_18+0x52>
	rxBuf[0]=UDR0;
	currentRXPacketLen=1;

	while (1)
	{
		while ( !(UCSR0A & (1<<RXC0)) )
     224:	80 91 c0 00 	lds	r24, 0x00C0
     228:	87 ff       	sbrs	r24, 7
     22a:	f3 cf       	rjmp	.-26     	; 0x212 <__vector_18+0x44>
				return;
			}
			i++;
			_delay_loop_2(1);
		}
		rxBuf[currentRXPacketLen]=UDR0;
     22c:	80 91 c6 00 	lds	r24, 0x00C6
     230:	e4 2f       	mov	r30, r20
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	e2 5e       	subi	r30, 0xE2	; 226
     236:	fd 4f       	sbci	r31, 0xFD	; 253
     238:	80 83       	st	Z, r24
		currentRXPacketLen++;
     23a:	4f 5f       	subi	r20, 0xFF	; 255

		if (currentRXPacketLen>=BUFF_SIZE)
     23c:	4b 30       	cpi	r20, 0x0B	; 11
     23e:	90 f3       	brcs	.-28     	; 0x224 <__vector_18+0x56>
     240:	40 93 09 02 	sts	0x0209, r20
		{
			packetReceived=1;
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	80 93 08 02 	sts	0x0208, r24
			return;
		}
	}
}
     24a:	ff 91       	pop	r31
     24c:	ef 91       	pop	r30
     24e:	9f 91       	pop	r25
     250:	8f 91       	pop	r24
     252:	7f 91       	pop	r23
     254:	6f 91       	pop	r22
     256:	4f 91       	pop	r20
     258:	3f 91       	pop	r19
     25a:	2f 91       	pop	r18
     25c:	0f 90       	pop	r0
     25e:	0f be       	out	0x3f, r0	; 63
     260:	0f 90       	pop	r0
     262:	1f 90       	pop	r1
     264:	18 95       	reti

00000266 <uartSendPacket>:

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
     266:	ec e0       	ldi	r30, 0x0C	; 12
     268:	f2 e0       	ldi	r31, 0x02	; 2
	uint8_t i;
	for (i=0;i<length;i++)
     26a:	70 e0       	ldi	r23, 0x00	; 0
     26c:	6e 0f       	add	r22, r30
     26e:	7f 1f       	adc	r23, r31
     270:	08 c0       	rjmp	.+16     	; 0x282 <uartSendPacket+0x1c>
	uartTransmitByte(txBuf[i]);
     272:	90 81       	ld	r25, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSR0A & (1<<UDRE0)) );
     274:	80 91 c0 00 	lds	r24, 0x00C0
     278:	85 ff       	sbrs	r24, 5
     27a:	fc cf       	rjmp	.-8      	; 0x274 <uartSendPacket+0xe>
	UDR0 = data;
     27c:	90 93 c6 00 	sts	0x00C6, r25
     280:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     282:	e6 17       	cp	r30, r22
     284:	f7 07       	cpc	r31, r23
     286:	a9 f7       	brne	.-22     	; 0x272 <uartSendPacket+0xc>
	uartTransmitByte(txBuf[i]);
	return;
}
     288:	08 95       	ret

0000028a <crc8Block>:

//crc calculating function
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
     28a:	fc 01       	movw	r30, r24
     28c:	9f ef       	ldi	r25, 0xFF	; 255
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     28e:	21 e3       	ldi	r18, 0x31	; 49
     290:	0e c0       	rjmp	.+28     	; 0x2ae <crc8Block+0x24>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     292:	80 81       	ld	r24, Z
     294:	98 27       	eor	r25, r24
     296:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     298:	97 ff       	sbrs	r25, 7
     29a:	03 c0       	rjmp	.+6      	; 0x2a2 <crc8Block+0x18>
     29c:	99 0f       	add	r25, r25
     29e:	92 27       	eor	r25, r18
     2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <crc8Block+0x1a>
     2a2:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     2a4:	8f 5f       	subi	r24, 0xFF	; 255
     2a6:	88 30       	cpi	r24, 0x08	; 8
     2a8:	b9 f7       	brne	.-18     	; 0x298 <crc8Block+0xe>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     2aa:	31 96       	adiw	r30, 0x01	; 1
     2ac:	61 50       	subi	r22, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     2ae:	66 23       	and	r22, r22
     2b0:	81 f7       	brne	.-32     	; 0x292 <crc8Block+0x8>
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
	}	
	return crc;
}
     2b2:	89 2f       	mov	r24, r25
     2b4:	08 95       	ret

000002b6 <prepareSystemStatus>:

//prepare TX buffer
void prepareSystemStatus (void)
{
     2b6:	84 e6       	ldi	r24, 0x64	; 100
     2b8:	80 93 0c 02 	sts	0x020C, r24
	txBuf[0]='d';
	txBuf[1]= sensorData[0]>>8;
     2bc:	90 91 1a 02 	lds	r25, 0x021A
     2c0:	80 91 1b 02 	lds	r24, 0x021B
     2c4:	80 93 0d 02 	sts	0x020D, r24
	txBuf[2]= sensorData[0]&0x00ff;
     2c8:	90 93 0e 02 	sts	0x020E, r25
	txBuf[3]= sensorData[1]>>8;
     2cc:	90 91 1c 02 	lds	r25, 0x021C
     2d0:	80 91 1d 02 	lds	r24, 0x021D
     2d4:	80 93 0f 02 	sts	0x020F, r24
	txBuf[4]= sensorData[1]&0x00ff;
     2d8:	90 93 10 02 	sts	0x0210, r25
	txBuf[5]= setData[0]>>8;
     2dc:	90 91 18 02 	lds	r25, 0x0218
     2e0:	80 91 19 02 	lds	r24, 0x0219
     2e4:	80 93 11 02 	sts	0x0211, r24
	txBuf[6]= setData[0]&0x00ff;
     2e8:	90 93 12 02 	sts	0x0212, r25
	#if PWM_MODE == 1
		txBuf[7]= getPWM();
	#else
		txBuf[7]=coolerPower;
     2ec:	80 91 0b 02 	lds	r24, 0x020B
     2f0:	80 93 13 02 	sts	0x0213, r24
	#endif
	txBuf[8]= errorCode;
     2f4:	80 91 0a 02 	lds	r24, 0x020A
     2f8:	80 93 14 02 	sts	0x0214, r24
	txBuf[9]= coolerState;
     2fc:	80 91 2a 02 	lds	r24, 0x022A
     300:	80 93 15 02 	sts	0x0215, r24
     304:	9f ef       	ldi	r25, 0xFF	; 255
     306:	ec e0       	ldi	r30, 0x0C	; 12
     308:	f2 e0       	ldi	r31, 0x02	; 2
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     30a:	21 e3       	ldi	r18, 0x31	; 49
     30c:	0d c0       	rjmp	.+26     	; 0x328 <prepareSystemStatus+0x72>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     30e:	80 81       	ld	r24, Z
     310:	98 27       	eor	r25, r24
     312:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     314:	97 ff       	sbrs	r25, 7
     316:	03 c0       	rjmp	.+6      	; 0x31e <prepareSystemStatus+0x68>
     318:	99 0f       	add	r25, r25
     31a:	92 27       	eor	r25, r18
     31c:	01 c0       	rjmp	.+2      	; 0x320 <prepareSystemStatus+0x6a>
     31e:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     320:	8f 5f       	subi	r24, 0xFF	; 255
     322:	88 30       	cpi	r24, 0x08	; 8
     324:	b9 f7       	brne	.-18     	; 0x314 <prepareSystemStatus+0x5e>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     326:	31 96       	adiw	r30, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	e6 31       	cpi	r30, 0x16	; 22
     32c:	f8 07       	cpc	r31, r24
     32e:	79 f7       	brne	.-34     	; 0x30e <prepareSystemStatus+0x58>
	#else
		txBuf[7]=coolerPower;
	#endif
	txBuf[8]= errorCode;
	txBuf[9]= coolerState;
	txBuf[10]=crc8Block(txBuf,10);
     330:	90 83       	st	Z, r25
}
     332:	08 95       	ret

00000334 <presentDS18b20>:

//------------------------------------------------------------------------------------
//DS18B20

uint8_t presentDS18b20(uint8_t sensor_num)
{	uint8_t res, sensor_pin;
     334:	88 23       	and	r24, r24
     336:	11 f0       	breq	.+4      	; 0x33c <presentDS18b20+0x8>
     338:	33 e0       	ldi	r19, 0x03	; 3
     33a:	01 c0       	rjmp	.+2      	; 0x33e <presentDS18b20+0xa>
     33c:	32 e0       	ldi	r19, 0x02	; 2

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;
	
	SENSOR_DDR|=(1<<sensor_pin);
     33e:	87 b1       	in	r24, 0x07	; 7
     340:	41 e0       	ldi	r20, 0x01	; 1
     342:	50 e0       	ldi	r21, 0x00	; 0
     344:	94 2f       	mov	r25, r20
     346:	03 2e       	mov	r0, r19
     348:	01 c0       	rjmp	.+2      	; 0x34c <presentDS18b20+0x18>
     34a:	99 0f       	add	r25, r25
     34c:	0a 94       	dec	r0
     34e:	ea f7       	brpl	.-6      	; 0x34a <presentDS18b20+0x16>
     350:	89 2b       	or	r24, r25
     352:	87 b9       	out	0x07, r24	; 7
     354:	e8 ea       	ldi	r30, 0xA8	; 168
     356:	f7 e0       	ldi	r31, 0x07	; 7
     358:	31 97       	sbiw	r30, 0x01	; 1
     35a:	f1 f7       	brne	.-4      	; 0x358 <presentDS18b20+0x24>
	_delay_us (490);

	SENSOR_DDR&=~(1<<sensor_pin);
     35c:	27 b1       	in	r18, 0x07	; 7
     35e:	89 2f       	mov	r24, r25
     360:	80 95       	com	r24
     362:	82 23       	and	r24, r18
     364:	87 b9       	out	0x07, r24	; 7
	SENSOR_PORT|=(1<<sensor_pin);
     366:	88 b1       	in	r24, 0x08	; 8
     368:	98 2b       	or	r25, r24
     36a:	98 b9       	out	0x08, r25	; 8
     36c:	80 e4       	ldi	r24, 0x40	; 64
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	f1 f7       	brne	.-4      	; 0x370 <presentDS18b20+0x3c>
	_delay_us(80);
	
	if ((SENSOR_PIN&(1<<sensor_pin)) == 0x00) res=1;  
     374:	86 b1       	in	r24, 0x06	; 6
     376:	e0 e9       	ldi	r30, 0x90	; 144
     378:	f6 e0       	ldi	r31, 0x06	; 6
     37a:	31 97       	sbiw	r30, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <presentDS18b20+0x46>
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	02 c0       	rjmp	.+4      	; 0x386 <presentDS18b20+0x52>
     382:	95 95       	asr	r25
     384:	87 95       	ror	r24
     386:	3a 95       	dec	r19
     388:	e2 f7       	brpl	.-8      	; 0x382 <presentDS18b20+0x4e>
     38a:	84 27       	eor	r24, r20
     38c:	95 27       	eor	r25, r21
	else res=0;  
	
	_delay_us(420);
	return res;
}
     38e:	81 70       	andi	r24, 0x01	; 1
     390:	08 95       	ret

00000392 <sendDS18b20>:

void sendDS18b20(uint8_t command, uint8_t sensor_num)
{	uint8_t i, data, sensor_pin;
     392:	38 2f       	mov	r19, r24

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     394:	66 23       	and	r22, r22
     396:	11 f0       	breq	.+4      	; 0x39c <sendDS18b20+0xa>
     398:	23 e0       	ldi	r18, 0x03	; 3
     39a:	01 c0       	rjmp	.+2      	; 0x39e <sendDS18b20+0xc>
     39c:	22 e0       	ldi	r18, 0x02	; 2
	data=command;

	for(i=0;i<8;i++)
	{
		if ((data&0x01)==0x01) {    //Send 1 on SDA
			SENSOR_DDR|=(1<<sensor_pin);
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	48 2f       	mov	r20, r24
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <sendDS18b20+0x16>
     3a6:	44 0f       	add	r20, r20
     3a8:	2a 95       	dec	r18
     3aa:	ea f7       	brpl	.-6      	; 0x3a6 <sendDS18b20+0x14>
			_delay_us(9);
			SENSOR_DDR&=~(1<<sensor_pin);
     3ac:	54 2f       	mov	r21, r20
     3ae:	50 95       	com	r21
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	e8 e1       	ldi	r30, 0x18	; 24
     3b4:	f1 e0       	ldi	r31, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3b6:	b0 e5       	ldi	r27, 0x50	; 80
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3b8:	a0 e3       	ldi	r26, 0x30	; 48
     3ba:	6c e2       	ldi	r22, 0x2C	; 44
     3bc:	71 e0       	ldi	r23, 0x01	; 1
	else sensor_pin=SENSOR1_PIN;
	data=command;

	for(i=0;i<8;i++)
	{
		if ((data&0x01)==0x01) {    //Send 1 on SDA
     3be:	30 ff       	sbrs	r19, 0
     3c0:	0d c0       	rjmp	.+26     	; 0x3dc <sendDS18b20+0x4a>
			SENSOR_DDR|=(1<<sensor_pin);
     3c2:	87 b1       	in	r24, 0x07	; 7
     3c4:	84 2b       	or	r24, r20
     3c6:	87 b9       	out	0x07, r24	; 7
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3c8:	8a 2f       	mov	r24, r26
     3ca:	8a 95       	dec	r24
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <sendDS18b20+0x38>
			_delay_us(9);
			SENSOR_DDR&=~(1<<sensor_pin);
     3ce:	87 b1       	in	r24, 0x07	; 7
     3d0:	85 23       	and	r24, r21
     3d2:	87 b9       	out	0x07, r24	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3d4:	cb 01       	movw	r24, r22
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <sendDS18b20+0x44>
     3da:	0c c0       	rjmp	.+24     	; 0x3f4 <sendDS18b20+0x62>
			_delay_us(75);
		}
		else {                   	//Send 0 on SDA
			SENSOR_DDR|=(1<<sensor_pin);
     3dc:	87 b1       	in	r24, 0x07	; 7
     3de:	84 2b       	or	r24, r20
     3e0:	87 b9       	out	0x07, r24	; 7
     3e2:	cf 01       	movw	r24, r30
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <sendDS18b20+0x52>
			_delay_us(70);
			SENSOR_DDR&=~(1<<sensor_pin);
     3e8:	87 b1       	in	r24, 0x07	; 7
     3ea:	85 23       	and	r24, r21
     3ec:	87 b9       	out	0x07, r24	; 7
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3ee:	8b 2f       	mov	r24, r27
     3f0:	8a 95       	dec	r24
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <sendDS18b20+0x5e>

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;
	data=command;

	for(i=0;i<8;i++)
     3f4:	2f 5f       	subi	r18, 0xFF	; 255
     3f6:	28 30       	cpi	r18, 0x08	; 8
     3f8:	11 f0       	breq	.+4      	; 0x3fe <sendDS18b20+0x6c>
			SENSOR_DDR|=(1<<sensor_pin);
			_delay_us(70);
			SENSOR_DDR&=~(1<<sensor_pin);
			_delay_us(15);
		}
		data=data>>1;
     3fa:	36 95       	lsr	r19
     3fc:	e0 cf       	rjmp	.-64     	; 0x3be <sendDS18b20+0x2c>
     3fe:	08 95       	ret

00000400 <receiveDS18b20>:
	}
	return;
}

uint16_t receiveDS18b20(uint8_t sensor_num)
{	uint8_t i, sensor_pin;
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
	uint16_t res=0;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     408:	88 23       	and	r24, r24
     40a:	11 f0       	breq	.+4      	; 0x410 <receiveDS18b20+0x10>
     40c:	83 e0       	ldi	r24, 0x03	; 3
     40e:	01 c0       	rjmp	.+2      	; 0x412 <receiveDS18b20+0x12>
     410:	82 e0       	ldi	r24, 0x02	; 2
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
	{
		SENSOR_DDR|=(1<<sensor_pin);		
     412:	61 e0       	ldi	r22, 0x01	; 1
     414:	70 e0       	ldi	r23, 0x00	; 0
     416:	02 c0       	rjmp	.+4      	; 0x41c <receiveDS18b20+0x1c>
     418:	66 0f       	add	r22, r22
     41a:	77 1f       	adc	r23, r23
     41c:	8a 95       	dec	r24
     41e:	e2 f7       	brpl	.-8      	; 0x418 <receiveDS18b20+0x18>
     420:	a6 2f       	mov	r26, r22
		_delay_us(9);
		SENSOR_DDR&=~(1<<sensor_pin);		
     422:	b6 2f       	mov	r27, r22
     424:	b0 95       	com	r27
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	00 e3       	ldi	r16, 0x30	; 48
		_delay_us(12);

		if ((SENSOR_PIN & (1<<sensor_pin))==0x00) res&=~_BV(i);	//If 0 on SDA
		else 	res|=_BV(i);	    //IF 1 on SDA
     430:	10 e4       	ldi	r17, 0x40	; 64
     432:	e1 e0       	ldi	r30, 0x01	; 1
     434:	f0 e0       	ldi	r31, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     436:	c4 e0       	ldi	r28, 0x04	; 4
     438:	d1 e0       	ldi	r29, 0x01	; 1
	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
	{
		SENSOR_DDR|=(1<<sensor_pin);		
     43a:	87 b1       	in	r24, 0x07	; 7
     43c:	8a 2b       	or	r24, r26
     43e:	87 b9       	out	0x07, r24	; 7
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     440:	80 2f       	mov	r24, r16
     442:	8a 95       	dec	r24
     444:	f1 f7       	brne	.-4      	; 0x442 <receiveDS18b20+0x42>
		_delay_us(9);
		SENSOR_DDR&=~(1<<sensor_pin);		
     446:	87 b1       	in	r24, 0x07	; 7
     448:	8b 23       	and	r24, r27
     44a:	87 b9       	out	0x07, r24	; 7
     44c:	81 2f       	mov	r24, r17
     44e:	8a 95       	dec	r24
     450:	f1 f7       	brne	.-4      	; 0x44e <receiveDS18b20+0x4e>
		_delay_us(12);

		if ((SENSOR_PIN & (1<<sensor_pin))==0x00) res&=~_BV(i);	//If 0 on SDA
     452:	86 b1       	in	r24, 0x06	; 6
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	86 23       	and	r24, r22
     458:	97 23       	and	r25, r23
     45a:	89 2b       	or	r24, r25
     45c:	61 f4       	brne	.+24     	; 0x476 <receiveDS18b20+0x76>
     45e:	cf 01       	movw	r24, r30
     460:	04 2e       	mov	r0, r20
     462:	02 c0       	rjmp	.+4      	; 0x468 <receiveDS18b20+0x68>
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
     468:	0a 94       	dec	r0
     46a:	e2 f7       	brpl	.-8      	; 0x464 <receiveDS18b20+0x64>
     46c:	80 95       	com	r24
     46e:	90 95       	com	r25
     470:	28 23       	and	r18, r24
     472:	39 23       	and	r19, r25
     474:	09 c0       	rjmp	.+18     	; 0x488 <receiveDS18b20+0x88>
		else 	res|=_BV(i);	    //IF 1 on SDA
     476:	cf 01       	movw	r24, r30
     478:	04 2e       	mov	r0, r20
     47a:	02 c0       	rjmp	.+4      	; 0x480 <receiveDS18b20+0x80>
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	0a 94       	dec	r0
     482:	e2 f7       	brpl	.-8      	; 0x47c <receiveDS18b20+0x7c>
     484:	28 2b       	or	r18, r24
     486:	39 2b       	or	r19, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     488:	ce 01       	movw	r24, r28
     48a:	01 97       	sbiw	r24, 0x01	; 1
     48c:	f1 f7       	brne	.-4      	; 0x48a <receiveDS18b20+0x8a>
     48e:	4f 5f       	subi	r20, 0xFF	; 255
     490:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t res=0;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
     492:	40 31       	cpi	r20, 0x10	; 16
     494:	51 05       	cpc	r21, r1
     496:	89 f6       	brne	.-94     	; 0x43a <receiveDS18b20+0x3a>
		else 	res|=_BV(i);	    //IF 1 on SDA
				
		_delay_us(65);
	}
	return res;
}
     498:	c9 01       	movw	r24, r18
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	1f 91       	pop	r17
     4a0:	0f 91       	pop	r16
     4a2:	08 95       	ret

000004a4 <processPacket>:
	txBuf[10]=crc8Block(txBuf,10);
}

//process received packet
void processPacket(void)
{
     4a4:	f8 94       	cli
	cli();
	//check CRC
	if (crc8Block(rxBuf,currentRXPacketLen-1)!=rxBuf[currentRXPacketLen-1])
     4a6:	40 91 09 02 	lds	r20, 0x0209
     4aa:	41 50       	subi	r20, 0x01	; 1
     4ac:	9f ef       	ldi	r25, 0xFF	; 255
     4ae:	ee e1       	ldi	r30, 0x1E	; 30
     4b0:	f2 e0       	ldi	r31, 0x02	; 2
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     4b2:	24 2f       	mov	r18, r20
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	4f 5f       	subi	r20, 0xFF	; 255
     4b8:	2e 0f       	add	r18, r30
     4ba:	3f 1f       	adc	r19, r31
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     4bc:	51 e3       	ldi	r21, 0x31	; 49
     4be:	0d c0       	rjmp	.+26     	; 0x4da <processPacket+0x36>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     4c0:	80 81       	ld	r24, Z
     4c2:	98 27       	eor	r25, r24
     4c4:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     4c6:	97 ff       	sbrs	r25, 7
     4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <processPacket+0x2c>
     4ca:	99 0f       	add	r25, r25
     4cc:	95 27       	eor	r25, r21
     4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <processPacket+0x2e>
     4d0:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     4d2:	8f 5f       	subi	r24, 0xFF	; 255
     4d4:	88 30       	cpi	r24, 0x08	; 8
     4d6:	b9 f7       	brne	.-18     	; 0x4c6 <processPacket+0x22>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     4d8:	31 96       	adiw	r30, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     4da:	e2 17       	cp	r30, r18
     4dc:	f3 07       	cpc	r31, r19
     4de:	81 f7       	brne	.-32     	; 0x4c0 <processPacket+0x1c>
//process received packet
void processPacket(void)
{
	cli();
	//check CRC
	if (crc8Block(rxBuf,currentRXPacketLen-1)!=rxBuf[currentRXPacketLen-1])
     4e0:	e4 2f       	mov	r30, r20
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	e3 5e       	subi	r30, 0xE3	; 227
     4e6:	fd 4f       	sbci	r31, 0xFD	; 253
     4e8:	80 81       	ld	r24, Z
     4ea:	98 17       	cp	r25, r24
     4ec:	69 f0       	breq	.+26     	; 0x508 <processPacket+0x64>
	{
		packetReceived=0;
     4ee:	10 92 08 02 	sts	0x0208, r1
     4f2:	ee e1       	ldi	r30, 0x1E	; 30
     4f4:	f2 e0       	ldi	r31, 0x02	; 2
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     4f6:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     4f8:	42 e0       	ldi	r20, 0x02	; 2
     4fa:	e9 32       	cpi	r30, 0x29	; 41
     4fc:	f4 07       	cpc	r31, r20
     4fe:	d9 f7       	brne	.-10     	; 0x4f6 <processPacket+0x52>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     500:	10 92 09 02 	sts	0x0209, r1
	//check CRC
	if (crc8Block(rxBuf,currentRXPacketLen-1)!=rxBuf[currentRXPacketLen-1])
	{
		packetReceived=0;
		clearRXBuf();
		sei();
     504:	78 94       	sei
     506:	08 95       	ret
		return;
	}
	//differentiate and process packet
	switch (rxBuf[0]) {
     508:	80 91 1e 02 	lds	r24, 0x021E
     50c:	89 36       	cpi	r24, 0x69	; 105
     50e:	09 f4       	brne	.+2      	; 0x512 <processPacket+0x6e>
     510:	41 c0       	rjmp	.+130    	; 0x594 <processPacket+0xf0>
     512:	8a 36       	cpi	r24, 0x6A	; 106
     514:	20 f4       	brcc	.+8      	; 0x51e <processPacket+0x7a>
     516:	87 36       	cpi	r24, 0x67	; 103
     518:	09 f0       	breq	.+2      	; 0x51c <processPacket+0x78>
     51a:	85 c0       	rjmp	.+266    	; 0x626 <processPacket+0x182>
     51c:	07 c0       	rjmp	.+14     	; 0x52c <processPacket+0x88>
     51e:	80 37       	cpi	r24, 0x70	; 112
     520:	09 f4       	brne	.+2      	; 0x524 <processPacket+0x80>
     522:	6c c0       	rjmp	.+216    	; 0x5fc <processPacket+0x158>
     524:	83 37       	cpi	r24, 0x73	; 115
     526:	09 f0       	breq	.+2      	; 0x52a <processPacket+0x86>
     528:	7e c0       	rjmp	.+252    	; 0x626 <processPacket+0x182>
     52a:	14 c0       	rjmp	.+40     	; 0x554 <processPacket+0xb0>
		//if get command
		case 'g' : 	{
			if (currentRXPacketLen==2)
     52c:	42 30       	cpi	r20, 0x02	; 2
     52e:	09 f0       	breq	.+2      	; 0x532 <processPacket+0x8e>
     530:	7a c0       	rjmp	.+244    	; 0x626 <processPacket+0x182>
			{
				prepareSystemStatus();
     532:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <prepareSystemStatus>
     536:	ec e0       	ldi	r30, 0x0C	; 12
     538:	f2 e0       	ldi	r31, 0x02	; 2
//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
	uartTransmitByte(txBuf[i]);
     53a:	90 81       	ld	r25, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSR0A & (1<<UDRE0)) );
     53c:	80 91 c0 00 	lds	r24, 0x00C0
     540:	85 ff       	sbrs	r24, 5
     542:	fc cf       	rjmp	.-8      	; 0x53c <processPacket+0x98>
	UDR0 = data;
     544:	90 93 c6 00 	sts	0x00C6, r25
     548:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	e7 31       	cpi	r30, 0x17	; 23
     54e:	f8 07       	cpc	r31, r24
     550:	a1 f7       	brne	.-24     	; 0x53a <processPacket+0x96>
     552:	69 c0       	rjmp	.+210    	; 0x626 <processPacket+0x182>
			}			
			break;
		}
		//if set command
		case 's' : 	{
			if (currentRXPacketLen==4)
     554:	44 30       	cpi	r20, 0x04	; 4
     556:	09 f0       	breq	.+2      	; 0x55a <processPacket+0xb6>
     558:	66 c0       	rjmp	.+204    	; 0x626 <processPacket+0x182>
			{
				uint16_t val;

				val=(rxBuf[1]<<8)|(rxBuf[2]);
     55a:	90 91 1f 02 	lds	r25, 0x021F
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	20 91 20 02 	lds	r18, 0x0220
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	28 2b       	or	r18, r24
     568:	39 2b       	or	r19, r25
				if ((val<=1780)&&(val>=780)) setData[0]=val;
     56a:	c9 01       	movw	r24, r18
     56c:	8c 50       	subi	r24, 0x0C	; 12
     56e:	93 40       	sbci	r25, 0x03	; 3
     570:	89 5e       	subi	r24, 0xE9	; 233
     572:	93 40       	sbci	r25, 0x03	; 3
     574:	20 f4       	brcc	.+8      	; 0x57e <processPacket+0xda>
     576:	30 93 19 02 	sts	0x0219, r19
     57a:	20 93 18 02 	sts	0x0218, r18
/** \ingroup avr_eeprom
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
    __eewr_word (__p, __value, eeprom_write_byte);
     57e:	60 91 18 02 	lds	r22, 0x0218
     582:	70 91 19 02 	lds	r23, 0x0219
     586:	4b e5       	ldi	r20, 0x5B	; 91
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__eewr_word>
     592:	49 c0       	rjmp	.+146    	; 0x626 <processPacket+0x182>
			
			break;
		}
		//if info command
		case 'i' :	{
			if (currentRXPacketLen==2)
     594:	42 30       	cpi	r20, 0x02	; 2
     596:	09 f0       	breq	.+2      	; 0x59a <processPacket+0xf6>
     598:	46 c0       	rjmp	.+140    	; 0x626 <processPacket+0x182>
			{
				txBuf[0]='v';
     59a:	86 e7       	ldi	r24, 0x76	; 118
     59c:	80 93 0c 02 	sts	0x020C, r24
				txBuf[1]=HW_REVISION;
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	80 93 0d 02 	sts	0x020D, r24
				txBuf[2]=SW_REVISION;
     5a6:	80 93 0e 02 	sts	0x020E, r24
				txBuf[3]=SENSOR_COUNT;
     5aa:	40 93 0f 02 	sts	0x020F, r20
				txBuf[4]=VALUE_COUNT;
     5ae:	80 93 10 02 	sts	0x0210, r24
     5b2:	9f ef       	ldi	r25, 0xFF	; 255
     5b4:	ec e0       	ldi	r30, 0x0C	; 12
     5b6:	f2 e0       	ldi	r31, 0x02	; 2
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     5b8:	21 e3       	ldi	r18, 0x31	; 49
     5ba:	0d c0       	rjmp	.+26     	; 0x5d6 <processPacket+0x132>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     5bc:	80 81       	ld	r24, Z
     5be:	98 27       	eor	r25, r24
     5c0:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     5c2:	97 ff       	sbrs	r25, 7
     5c4:	03 c0       	rjmp	.+6      	; 0x5cc <processPacket+0x128>
     5c6:	99 0f       	add	r25, r25
     5c8:	92 27       	eor	r25, r18
     5ca:	01 c0       	rjmp	.+2      	; 0x5ce <processPacket+0x12a>
     5cc:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     5ce:	8f 5f       	subi	r24, 0xFF	; 255
     5d0:	88 30       	cpi	r24, 0x08	; 8
     5d2:	b9 f7       	brne	.-18     	; 0x5c2 <processPacket+0x11e>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     5d4:	31 96       	adiw	r30, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	e1 31       	cpi	r30, 0x11	; 17
     5da:	f8 07       	cpc	r31, r24
     5dc:	79 f7       	brne	.-34     	; 0x5bc <processPacket+0x118>
				txBuf[0]='v';
				txBuf[1]=HW_REVISION;
				txBuf[2]=SW_REVISION;
				txBuf[3]=SENSOR_COUNT;
				txBuf[4]=VALUE_COUNT;
				txBuf[5]=crc8Block(txBuf,5);
     5de:	90 83       	st	Z, r25
     5e0:	35 97       	sbiw	r30, 0x05	; 5
//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
	uartTransmitByte(txBuf[i]);
     5e2:	90 81       	ld	r25, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSR0A & (1<<UDRE0)) );
     5e4:	80 91 c0 00 	lds	r24, 0x00C0
     5e8:	85 ff       	sbrs	r24, 5
     5ea:	fc cf       	rjmp	.-8      	; 0x5e4 <processPacket+0x140>
	UDR0 = data;
     5ec:	90 93 c6 00 	sts	0x00C6, r25
     5f0:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     5f2:	42 e0       	ldi	r20, 0x02	; 2
     5f4:	e2 31       	cpi	r30, 0x12	; 18
     5f6:	f4 07       	cpc	r31, r20
     5f8:	a1 f7       	brne	.-24     	; 0x5e2 <processPacket+0x13e>
     5fa:	15 c0       	rjmp	.+42     	; 0x626 <processPacket+0x182>

			break;
		}
		//if powern ON/OFF PWM
		case 'p' : 	{
		if (currentRXPacketLen==3)
     5fc:	43 30       	cpi	r20, 0x03	; 3
     5fe:	99 f4       	brne	.+38     	; 0x626 <processPacket+0x182>
		{
			if ((rxBuf[1]==COOLER_OFF)||(rxBuf[1]==COOLER_ON))
     600:	20 91 1f 02 	lds	r18, 0x021F
     604:	22 30       	cpi	r18, 0x02	; 2
     606:	78 f4       	brcc	.+30     	; 0x626 <processPacket+0x182>
			{
				coolerState=rxBuf[1];
     608:	20 93 2a 02 	sts	0x022A, r18
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     60c:	f9 99       	sbic	0x1f, 1	; 31
     60e:	fe cf       	rjmp	.-4      	; 0x60c <processPacket+0x168>

#if	defined(EEPM0) && defined(EEPM1)
    EECR = 0;		/* Set programming mode: erase and write.	*/
     610:	1f ba       	out	0x1f, r1	; 31
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     612:	82 e0       	ldi	r24, 0x02	; 2
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	92 bd       	out	0x22, r25	; 34
     618:	81 bd       	out	0x21, r24	; 33
#endif
    EEDR = __value;
     61a:	20 bd       	out	0x20, r18	; 32

    __asm__ __volatile__ (
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	f8 94       	cli
     620:	fa 9a       	sbi	0x1f, 2	; 31
     622:	f9 9a       	sbi	0x1f, 1	; 31
     624:	0f be       	out	0x3f, r0	; 63
		default:
		{
			;
		}
	}
	packetReceived=0;
     626:	10 92 08 02 	sts	0x0208, r1
     62a:	ee e1       	ldi	r30, 0x1E	; 30
     62c:	f2 e0       	ldi	r31, 0x02	; 2
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     62e:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     630:	82 e0       	ldi	r24, 0x02	; 2
     632:	e9 32       	cpi	r30, 0x29	; 41
     634:	f8 07       	cpc	r31, r24
     636:	d9 f7       	brne	.-10     	; 0x62e <processPacket+0x18a>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     638:	10 92 09 02 	sts	0x0209, r1
			;
		}
	}
	packetReceived=0;
	clearRXBuf();
	sei();
     63c:	78 94       	sei
     63e:	08 95       	ret

00000640 <main>:
	return res;
}

//------------------------------------------------------------------------------------
int main(void)
{
     640:	2f 92       	push	r2
     642:	3f 92       	push	r3
     644:	5f 92       	push	r5
     646:	6f 92       	push	r6
     648:	7f 92       	push	r7
     64a:	8f 92       	push	r8
     64c:	9f 92       	push	r9
     64e:	af 92       	push	r10
     650:	bf 92       	push	r11
     652:	cf 92       	push	r12
     654:	df 92       	push	r13
     656:	ef 92       	push	r14
     658:	ff 92       	push	r15
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    return __eerd_word (__p, eeprom_read_byte);
     662:	63 e5       	ldi	r22, 0x53	; 83
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__eerd_word>
     66e:	9c 01       	movw	r18, r24
	uint8_t i, sign, firstConv=_YES;
	uint16_t val, fract;	
	//read from EEPROM saved value & coolerState state
	#if STANDALONE_MODE == 1
		setData[0]= eeprom_read_word (&savedSetData);
     670:	90 93 19 02 	sts	0x0219, r25
     674:	80 93 18 02 	sts	0x0218, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     678:	f9 99       	sbic	0x1f, 1	; 31
     67a:	fe cf       	rjmp	.-4      	; 0x678 <main+0x38>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     67c:	82 e0       	ldi	r24, 0x02	; 2
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	92 bd       	out	0x22, r25	; 34
     682:	81 bd       	out	0x21, r24	; 33
#endif
    EECR |= (1 << EERE);
     684:	f8 9a       	sbi	0x1f, 0	; 31
    return EEDR;
     686:	40 b5       	in	r20, 0x20	; 32
		coolerState = eeprom_read_byte(&savedCoolerState);
     688:	40 93 2a 02 	sts	0x022A, r20
		//if saved settings corrupted - set it by default
		if ( (setData[0]<780)||(setData[0]>1780) ) setData[0]=1730;
     68c:	2c 50       	subi	r18, 0x0C	; 12
     68e:	33 40       	sbci	r19, 0x03	; 3
     690:	29 5e       	subi	r18, 0xE9	; 233
     692:	33 40       	sbci	r19, 0x03	; 3
     694:	30 f0       	brcs	.+12     	; 0x6a2 <main+0x62>
     696:	82 ec       	ldi	r24, 0xC2	; 194
     698:	96 e0       	ldi	r25, 0x06	; 6
     69a:	90 93 19 02 	sts	0x0219, r25
     69e:	80 93 18 02 	sts	0x0218, r24
		if ( (coolerState!=COOLER_ON)&&(coolerState!=COOLER_OFF) ) coolerState=COOLER_OFF;
     6a2:	42 30       	cpi	r20, 0x02	; 2
     6a4:	10 f0       	brcs	.+4      	; 0x6aa <main+0x6a>
     6a6:	10 92 2a 02 	sts	0x022A, r1
		setData[0]=1730;
		coolerState=COOLER_OFF;
	#endif
	//init variables
	for (i=0;i<SENSOR_COUNT;i++)
		sensorData[i]=0;
     6aa:	10 92 1b 02 	sts	0x021B, r1
     6ae:	10 92 1a 02 	sts	0x021A, r1
     6b2:	10 92 1d 02 	sts	0x021D, r1
     6b6:	10 92 1c 02 	sts	0x021C, r1
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=txBuf[i]=0;
     6be:	fc 01       	movw	r30, r24
     6c0:	e4 5f       	subi	r30, 0xF4	; 244
     6c2:	fd 4f       	sbci	r31, 0xFD	; 253
     6c4:	10 82       	st	Z, r1
     6c6:	fc 01       	movw	r30, r24
     6c8:	e2 5e       	subi	r30, 0xE2	; 226
     6ca:	fd 4f       	sbci	r31, 0xFD	; 253
     6cc:	10 82       	st	Z, r1
     6ce:	01 96       	adiw	r24, 0x01	; 1
}

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     6d0:	8b 30       	cpi	r24, 0x0B	; 11
     6d2:	91 05       	cpc	r25, r1
     6d4:	a1 f7       	brne	.-24     	; 0x6be <main+0x7e>
	#endif
	//init variables
	for (i=0;i<SENSOR_COUNT;i++)
		sensorData[i]=0;
	clearBuf ();
	U=0.0;
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	a0 e0       	ldi	r26, 0x00	; 0
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	80 93 2f 02 	sts	0x022F, r24
     6e2:	90 93 30 02 	sts	0x0230, r25
     6e6:	a0 93 31 02 	sts	0x0231, r26
     6ea:	b0 93 32 02 	sts	0x0232, r27
	E=0;
     6ee:	80 93 2b 02 	sts	0x022B, r24
     6f2:	90 93 2c 02 	sts	0x022C, r25
     6f6:	a0 93 2d 02 	sts	0x022D, r26
     6fa:	b0 93 2e 02 	sts	0x022E, r27
	//Init ports, UART, PWM
	SENSOR_PORT&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));     	
     6fe:	88 b1       	in	r24, 0x08	; 8
     700:	83 7f       	andi	r24, 0xF3	; 243
     702:	88 b9       	out	0x08, r24	; 8
	SENSOR_DDR&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));		
     704:	87 b1       	in	r24, 0x07	; 7
     706:	83 7f       	andi	r24, 0xF3	; 243
     708:	87 b9       	out	0x07, r24	; 7
 
	#if PWM_MODE == 1
		initPWM();
	#else
		TEC_PORT&=~(1<<TEC_PIN);
     70a:	5d 98       	cbi	0x0b, 5	; 11
		TEC_DDR|=(1<<TEC_PIN);
     70c:	55 9a       	sbi	0x0a, 5	; 10
//------------------------------------------------------------------------------------
//UART

void uartInit(void)
{
	UBRR0H = (BAUD_PRESCALE >> 8);		// Init UART baudrate
     70e:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUD_PRESCALE;
     712:	87 e6       	ldi	r24, 0x67	; 103
     714:	80 93 c4 00 	sts	0x00C4, r24

	UCSR0B |= (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);   // Turn on the transmission and reception circuitry
     718:	80 91 c1 00 	lds	r24, 0x00C1
     71c:	88 69       	ori	r24, 0x98	; 152
     71e:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01); // Use 8-bit character sizes
     722:	80 91 c2 00 	lds	r24, 0x00C2
     726:	86 60       	ori	r24, 0x06	; 6
     728:	80 93 c2 00 	sts	0x00C2, r24
	#else
		TEC_PORT&=~(1<<TEC_PIN);
		TEC_DDR|=(1<<TEC_PIN);
	#endif
	uartInit();	
	sei();
     72c:	78 94       	sei
     72e:	11 e0       	ldi	r17, 0x01	; 1
     730:	a0 e9       	ldi	r26, 0x90	; 144
     732:	2a 2e       	mov	r2, r26
     734:	a1 e0       	ldi	r26, 0x01	; 1
     736:	3a 2e       	mov	r3, r26
					E=(double) sensorData[0]-setData[0];

					U=U+KPSLOW*E;

					if (U>255.0) 	U=255.0;
					if (U<=0.0) 	U=0.0;		
     738:	0f 2e       	mov	r0, r31
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	6f 2e       	mov	r6, r31
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	7f 2e       	mov	r7, r31
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	8f 2e       	mov	r8, r31
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	9f 2e       	mov	r9, r31
     74a:	f0 2d       	mov	r31, r0
     74c:	01 c0       	rjmp	.+2      	; 0x750 <main+0x110>
	#else
		TEC_PORT&=~(1<<TEC_PIN);
		TEC_DDR|=(1<<TEC_PIN);
	#endif
	uartInit();	
	sei();
     74e:	10 e0       	ldi	r17, 0x00	; 0

//##############################################################
	#if SLOW_PWM_MODE == 1
	while (1)
	{
		if (packetReceived!=0) processPacket();
     750:	80 91 08 02 	lds	r24, 0x0208
     754:	88 23       	and	r24, r24
     756:	11 f0       	breq	.+4      	; 0x75c <main+0x11c>
     758:	0e 94 52 02 	call	0x4a4	; 0x4a4 <processPacket>
		errorCode=0;
     75c:	10 92 0a 02 	sts	0x020A, r1
		for (i=0;i<SENSOR_COUNT;i++)
		{
			if (presentDS18b20(i)==1)
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	0e 94 9a 01 	call	0x334	; 0x334 <presentDS18b20>
     766:	81 30       	cpi	r24, 0x01	; 1
     768:	31 f0       	breq	.+12     	; 0x776 <main+0x136>
			{
				sendDS18b20(SKIP_ROM,i);
				sendDS18b20(START_CONVERSION,i);
			}
			else errorCode|=(1<<i);
     76a:	80 91 0a 02 	lds	r24, 0x020A
     76e:	81 60       	ori	r24, 0x01	; 1
     770:	80 93 0a 02 	sts	0x020A, r24
     774:	08 c0       	rjmp	.+16     	; 0x786 <main+0x146>
		errorCode=0;
		for (i=0;i<SENSOR_COUNT;i++)
		{
			if (presentDS18b20(i)==1)
			{
				sendDS18b20(SKIP_ROM,i);
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	8c ec       	ldi	r24, 0xCC	; 204
     77a:	0e 94 c9 01 	call	0x392	; 0x392 <sendDS18b20>
				sendDS18b20(START_CONVERSION,i);
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	84 e4       	ldi	r24, 0x44	; 68
     782:	0e 94 c9 01 	call	0x392	; 0x392 <sendDS18b20>
	{
		if (packetReceived!=0) processPacket();
		errorCode=0;
		for (i=0;i<SENSOR_COUNT;i++)
		{
			if (presentDS18b20(i)==1)
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	0e 94 9a 01 	call	0x334	; 0x334 <presentDS18b20>
     78c:	81 30       	cpi	r24, 0x01	; 1
     78e:	49 f4       	brne	.+18     	; 0x7a2 <main+0x162>
			{
				sendDS18b20(SKIP_ROM,i);
     790:	61 e0       	ldi	r22, 0x01	; 1
     792:	8c ec       	ldi	r24, 0xCC	; 204
     794:	0e 94 c9 01 	call	0x392	; 0x392 <sendDS18b20>
				sendDS18b20(START_CONVERSION,i);
     798:	61 e0       	ldi	r22, 0x01	; 1
     79a:	84 e4       	ldi	r24, 0x44	; 68
     79c:	0e 94 c9 01 	call	0x392	; 0x392 <sendDS18b20>
     7a0:	05 c0       	rjmp	.+10     	; 0x7ac <main+0x16c>
			}
			else errorCode|=(1<<i);
     7a2:	80 91 0a 02 	lds	r24, 0x020A
     7a6:	82 60       	ori	r24, 0x02	; 2
     7a8:	80 93 0a 02 	sts	0x020A, r24
		}
		if (firstConv==_YES) firstConv=_NO;
     7ac:	11 30       	cpi	r17, 0x01	; 1
     7ae:	79 f2       	breq	.-98     	; 0x74e <main+0x10e>
     7b0:	ca e1       	ldi	r28, 0x1A	; 26
     7b2:	d2 e0       	ldi	r29, 0x02	; 2
     7b4:	00 e0       	ldi	r16, 0x00	; 0
     7b6:	10 e0       	ldi	r17, 0x00	; 0
		else
		{		 
			//receive measured data from sensors
			for (i=0;i<SENSOR_COUNT;i++)
			{
				if (presentDS18b20(i)==1)
     7b8:	80 2f       	mov	r24, r16
     7ba:	0e 94 9a 01 	call	0x334	; 0x334 <presentDS18b20>
     7be:	81 30       	cpi	r24, 0x01	; 1
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <main+0x184>
     7c2:	49 c0       	rjmp	.+146    	; 0x856 <main+0x216>
				{
					sendDS18b20(SKIP_ROM,i);
     7c4:	60 2f       	mov	r22, r16
     7c6:	8c ec       	ldi	r24, 0xCC	; 204
     7c8:	0e 94 c9 01 	call	0x392	; 0x392 <sendDS18b20>
					sendDS18b20(GET_DATA,i);
     7cc:	60 2f       	mov	r22, r16
     7ce:	8e eb       	ldi	r24, 0xBE	; 190
     7d0:	0e 94 c9 01 	call	0x392	; 0x392 <sendDS18b20>
					val=receiveDS18b20(i);
     7d4:	80 2f       	mov	r24, r16
     7d6:	0e 94 00 02 	call	0x400	; 0x400 <receiveDS18b20>
					if ((val&0x8000)!=0x00)
     7da:	97 fd       	sbrc	r25, 7
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <main+0x1a2>
     7de:	e0 e0       	ldi	r30, 0x00	; 0
     7e0:	04 c0       	rjmp	.+8      	; 0x7ea <main+0x1aa>
					{
						sign=1;
						val=0xffff-val+1;
     7e2:	90 95       	com	r25
     7e4:	81 95       	neg	r24
     7e6:	9f 4f       	sbci	r25, 0xFF	; 255
     7e8:	e1 e0       	ldi	r30, 0x01	; 1
					}
					else sign=0;
					fract=0;
					if ((val&0x01)!=0x00) fract=fract+65;
     7ea:	80 fd       	sbrc	r24, 0
     7ec:	03 c0       	rjmp	.+6      	; 0x7f4 <main+0x1b4>
     7ee:	40 e0       	ldi	r20, 0x00	; 0
     7f0:	50 e0       	ldi	r21, 0x00	; 0
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <main+0x1b8>
     7f4:	41 e4       	ldi	r20, 0x41	; 65
     7f6:	50 e0       	ldi	r21, 0x00	; 0
					if ((val&0x02)!=0x00) fract=fract+125;
     7f8:	81 ff       	sbrs	r24, 1
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <main+0x1c0>
     7fc:	43 58       	subi	r20, 0x83	; 131
     7fe:	5f 4f       	sbci	r21, 0xFF	; 255
					if ((val&0x04)!=0x00) fract=fract+250;
     800:	82 ff       	sbrs	r24, 2
     802:	02 c0       	rjmp	.+4      	; 0x808 <main+0x1c8>
     804:	46 50       	subi	r20, 0x06	; 6
     806:	5f 4f       	sbci	r21, 0xFF	; 255
					if ((val&0x08)!=0x00) fract=fract+500;
     808:	83 ff       	sbrs	r24, 3
     80a:	02 c0       	rjmp	.+4      	; 0x810 <main+0x1d0>
     80c:	4c 50       	subi	r20, 0x0C	; 12
     80e:	5e 4f       	sbci	r21, 0xFE	; 254
					val=(val>>4)*10+fract/100;
     810:	f4 e0       	ldi	r31, 0x04	; 4
     812:	96 95       	lsr	r25
     814:	87 95       	ror	r24
     816:	fa 95       	dec	r31
     818:	e1 f7       	brne	.-8      	; 0x812 <main+0x1d2>
     81a:	9c 01       	movw	r18, r24
     81c:	73 e0       	ldi	r23, 0x03	; 3
     81e:	22 0f       	add	r18, r18
     820:	33 1f       	adc	r19, r19
     822:	7a 95       	dec	r23
     824:	e1 f7       	brne	.-8      	; 0x81e <main+0x1de>
     826:	88 0f       	add	r24, r24
     828:	99 1f       	adc	r25, r25
     82a:	28 0f       	add	r18, r24
     82c:	39 1f       	adc	r19, r25
     82e:	ca 01       	movw	r24, r20
     830:	64 e6       	ldi	r22, 0x64	; 100
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__udivmodhi4>
     838:	62 0f       	add	r22, r18
     83a:	73 1f       	adc	r23, r19
					if (sign==1) val=OFFSET-val;
     83c:	e1 30       	cpi	r30, 0x01	; 1
     83e:	31 f4       	brne	.+12     	; 0x84c <main+0x20c>
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	95 e0       	ldi	r25, 0x05	; 5
     844:	86 1b       	sub	r24, r22
     846:	97 0b       	sbc	r25, r23
     848:	bc 01       	movw	r22, r24
     84a:	02 c0       	rjmp	.+4      	; 0x850 <main+0x210>
					else val=val+OFFSET;
     84c:	60 50       	subi	r22, 0x00	; 0
     84e:	7b 4f       	sbci	r23, 0xFB	; 251
					sensorData[i]=val;
     850:	79 83       	std	Y+1, r23	; 0x01
     852:	68 83       	st	Y, r22
     854:	0d c0       	rjmp	.+26     	; 0x870 <main+0x230>
				}
				else errorCode|=(1<<i);
     856:	21 e0       	ldi	r18, 0x01	; 1
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	00 2e       	mov	r0, r16
     85c:	02 c0       	rjmp	.+4      	; 0x862 <main+0x222>
     85e:	22 0f       	add	r18, r18
     860:	33 1f       	adc	r19, r19
     862:	0a 94       	dec	r0
     864:	e2 f7       	brpl	.-8      	; 0x85e <main+0x21e>
     866:	80 91 0a 02 	lds	r24, 0x020A
     86a:	82 2b       	or	r24, r18
     86c:	80 93 0a 02 	sts	0x020A, r24
     870:	0f 5f       	subi	r16, 0xFF	; 255
     872:	1f 4f       	sbci	r17, 0xFF	; 255
     874:	22 96       	adiw	r28, 0x02	; 2
		}
		if (firstConv==_YES) firstConv=_NO;
		else
		{		 
			//receive measured data from sensors
			for (i=0;i<SENSOR_COUNT;i++)
     876:	02 30       	cpi	r16, 0x02	; 2
     878:	11 05       	cpc	r17, r1
     87a:	09 f0       	breq	.+2      	; 0x87e <main+0x23e>
     87c:	9d cf       	rjmp	.-198    	; 0x7b8 <main+0x178>
					sensorData[i]=val;
				}
				else errorCode|=(1<<i);
			}
			//if coolerState is OFF - clear all variables
			if (coolerState==COOLER_OFF) 
     87e:	80 91 2a 02 	lds	r24, 0x022A
     882:	88 23       	and	r24, r24
     884:	a1 f4       	brne	.+40     	; 0x8ae <main+0x26e>
			{
				coolerPower=0x00;
     886:	10 92 0b 02 	sts	0x020B, r1
				U=0.0;
     88a:	60 92 2f 02 	sts	0x022F, r6
     88e:	70 92 30 02 	sts	0x0230, r7
     892:	80 92 31 02 	sts	0x0231, r8
     896:	90 92 32 02 	sts	0x0232, r9
				E=0.0;
     89a:	60 92 2b 02 	sts	0x022B, r6
     89e:	70 92 2c 02 	sts	0x022C, r7
     8a2:	80 92 2d 02 	sts	0x022D, r8
     8a6:	90 92 2e 02 	sts	0x022E, r9
				TEC_PORT&=~(1<<TEC_PIN);
     8aa:	5d 98       	cbi	0x0b, 5	; 11
     8ac:	50 cf       	rjmp	.-352    	; 0x74e <main+0x10e>
			}
			//If no errors at sensor[0] and coolerState is ON - calculate and set software PWM
			if (coolerState==COOLER_ON)
     8ae:	81 30       	cpi	r24, 0x01	; 1
     8b0:	09 f0       	breq	.+2      	; 0x8b4 <main+0x274>
     8b2:	4d cf       	rjmp	.-358    	; 0x74e <main+0x10e>
				{
					E=(double) sensorData[0]-setData[0];
     8b4:	60 91 1a 02 	lds	r22, 0x021A
     8b8:	70 91 1b 02 	lds	r23, 0x021B
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 3c 09 	call	0x1278	; 0x1278 <__floatunsisf>
     8c4:	7b 01       	movw	r14, r22
     8c6:	8c 01       	movw	r16, r24
     8c8:	60 91 18 02 	lds	r22, 0x0218
     8cc:	70 91 19 02 	lds	r23, 0x0219
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 3c 09 	call	0x1278	; 0x1278 <__floatunsisf>
     8d8:	9b 01       	movw	r18, r22
     8da:	ac 01       	movw	r20, r24
     8dc:	c8 01       	movw	r24, r16
     8de:	b7 01       	movw	r22, r14
     8e0:	0e 94 d0 06 	call	0xda0	; 0xda0 <__subsf3>
     8e4:	60 93 2b 02 	sts	0x022B, r22
     8e8:	70 93 2c 02 	sts	0x022C, r23
     8ec:	80 93 2d 02 	sts	0x022D, r24
     8f0:	90 93 2e 02 	sts	0x022E, r25

					U=U+KPSLOW*E;
     8f4:	2a e0       	ldi	r18, 0x0A	; 10
     8f6:	37 ed       	ldi	r19, 0xD7	; 215
     8f8:	43 e2       	ldi	r20, 0x23	; 35
     8fa:	5c e3       	ldi	r21, 0x3C	; 60
     8fc:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__mulsf3>
     900:	20 91 2f 02 	lds	r18, 0x022F
     904:	30 91 30 02 	lds	r19, 0x0230
     908:	40 91 31 02 	lds	r20, 0x0231
     90c:	50 91 32 02 	lds	r21, 0x0232
     910:	0e 94 01 07 	call	0xe02	; 0xe02 <__addsf3>
     914:	60 93 2f 02 	sts	0x022F, r22
     918:	70 93 30 02 	sts	0x0230, r23
     91c:	80 93 31 02 	sts	0x0231, r24
     920:	90 93 32 02 	sts	0x0232, r25

					if (U>255.0) 	U=255.0;
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	4f e7       	ldi	r20, 0x7F	; 127
     92a:	53 e4       	ldi	r21, 0x43	; 67
     92c:	0e 94 28 08 	call	0x1050	; 0x1050 <__gtsf2>
     930:	18 16       	cp	r1, r24
     932:	64 f4       	brge	.+24     	; 0x94c <__stack+0x4d>
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	af e7       	ldi	r26, 0x7F	; 127
     93a:	b3 e4       	ldi	r27, 0x43	; 67
     93c:	80 93 2f 02 	sts	0x022F, r24
     940:	90 93 30 02 	sts	0x0230, r25
     944:	a0 93 31 02 	sts	0x0231, r26
     948:	b0 93 32 02 	sts	0x0232, r27
					if (U<=0.0) 	U=0.0;		
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	40 e0       	ldi	r20, 0x00	; 0
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	60 91 2f 02 	lds	r22, 0x022F
     958:	70 91 30 02 	lds	r23, 0x0230
     95c:	80 91 31 02 	lds	r24, 0x0231
     960:	90 91 32 02 	lds	r25, 0x0232
     964:	0e 94 b8 08 	call	0x1170	; 0x1170 <__lesf2>
     968:	18 16       	cp	r1, r24
     96a:	44 f0       	brlt	.+16     	; 0x97c <__stack+0x7d>
     96c:	60 92 2f 02 	sts	0x022F, r6
     970:	70 92 30 02 	sts	0x0230, r7
     974:	80 92 31 02 	sts	0x0231, r8
     978:	90 92 32 02 	sts	0x0232, r9
					
					if (U>0.0) TEC_PORT|=(1<<TEC_PIN);	
     97c:	a0 90 2f 02 	lds	r10, 0x022F
     980:	b0 90 30 02 	lds	r11, 0x0230
     984:	c0 90 31 02 	lds	r12, 0x0231
     988:	d0 90 32 02 	lds	r13, 0x0232
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	40 e0       	ldi	r20, 0x00	; 0
     992:	50 e0       	ldi	r21, 0x00	; 0
     994:	c6 01       	movw	r24, r12
     996:	b5 01       	movw	r22, r10
     998:	0e 94 28 08 	call	0x1050	; 0x1050 <__gtsf2>
     99c:	18 16       	cp	r1, r24
     99e:	0c f4       	brge	.+2      	; 0x9a2 <__stack+0xa3>
     9a0:	5d 9a       	sbi	0x0b, 5	; 11
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	4a e7       	ldi	r20, 0x7A	; 122
     9a8:	55 e4       	ldi	r21, 0x45	; 69
     9aa:	c6 01       	movw	r24, r12
     9ac:	b5 01       	movw	r22, r10
     9ae:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__mulsf3>
     9b2:	7b 01       	movw	r14, r22
     9b4:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	40 e8       	ldi	r20, 0x80	; 128
     9bc:	5f e3       	ldi	r21, 0x3F	; 63
     9be:	0e 94 88 08 	call	0x1110	; 0x1110 <__ltsf2>
     9c2:	88 23       	and	r24, r24
     9c4:	1c f4       	brge	.+6      	; 0x9cc <__stack+0xcd>
     9c6:	61 e0       	ldi	r22, 0x01	; 1
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	22 c0       	rjmp	.+68     	; 0xa10 <__stack+0x111>
		__ticks = 1;
	else if (__tmp > 65535)
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	3f ef       	ldi	r19, 0xFF	; 255
     9d0:	4f e7       	ldi	r20, 0x7F	; 127
     9d2:	57 e4       	ldi	r21, 0x47	; 71
     9d4:	c8 01       	movw	r24, r16
     9d6:	b7 01       	movw	r22, r14
     9d8:	0e 94 28 08 	call	0x1050	; 0x1050 <__gtsf2>
     9dc:	18 16       	cp	r1, r24
     9de:	a4 f4       	brge	.+40     	; 0xa08 <__stack+0x109>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	40 e2       	ldi	r20, 0x20	; 32
     9e6:	51 e4       	ldi	r21, 0x41	; 65
     9e8:	c6 01       	movw	r24, r12
     9ea:	b5 01       	movw	r22, r10
     9ec:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__mulsf3>
     9f0:	0e 94 58 05 	call	0xab0	; 0xab0 <__fixunssfsi>
     9f4:	05 c0       	rjmp	.+10     	; 0xa00 <__stack+0x101>
     9f6:	c1 01       	movw	r24, r2
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <__stack+0xf9>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9fc:	61 50       	subi	r22, 0x01	; 1
     9fe:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a00:	61 15       	cp	r22, r1
     a02:	71 05       	cpc	r23, r1
     a04:	c1 f7       	brne	.-16     	; 0x9f6 <__stack+0xf7>
     a06:	07 c0       	rjmp	.+14     	; 0xa16 <__stack+0x117>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a08:	c8 01       	movw	r24, r16
     a0a:	b7 01       	movw	r22, r14
     a0c:	0e 94 58 05 	call	0xab0	; 0xab0 <__fixunssfsi>
     a10:	cb 01       	movw	r24, r22
     a12:	01 97       	sbiw	r24, 0x01	; 1
     a14:	f1 f7       	brne	.-4      	; 0xa12 <__stack+0x113>
					_delay_ms(U);								
					if (((uint8_t) U)!=255)TEC_PORT&=~(1<<TEC_PIN);
     a16:	c6 01       	movw	r24, r12
     a18:	b5 01       	movw	r22, r10
     a1a:	0e 94 58 05 	call	0xab0	; 0xab0 <__fixunssfsi>
     a1e:	56 2e       	mov	r5, r22
     a20:	9f ef       	ldi	r25, 0xFF	; 255
     a22:	59 12       	cpse	r5, r25
     a24:	5d 98       	cbi	0x0b, 5	; 11
					_delay_ms(255-U);
     a26:	a6 01       	movw	r20, r12
     a28:	95 01       	movw	r18, r10
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	8f e7       	ldi	r24, 0x7F	; 127
     a30:	93 e4       	ldi	r25, 0x43	; 67
     a32:	0e 94 d0 06 	call	0xda0	; 0xda0 <__subsf3>
     a36:	5b 01       	movw	r10, r22
     a38:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	4a e7       	ldi	r20, 0x7A	; 122
     a40:	55 e4       	ldi	r21, 0x45	; 69
     a42:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__mulsf3>
     a46:	7b 01       	movw	r14, r22
     a48:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	40 e8       	ldi	r20, 0x80	; 128
     a50:	5f e3       	ldi	r21, 0x3F	; 63
     a52:	0e 94 88 08 	call	0x1110	; 0x1110 <__ltsf2>
     a56:	88 23       	and	r24, r24
     a58:	1c f4       	brge	.+6      	; 0xa60 <__stack+0x161>
     a5a:	61 e0       	ldi	r22, 0x01	; 1
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	22 c0       	rjmp	.+68     	; 0xaa4 <__stack+0x1a5>
		__ticks = 1;
	else if (__tmp > 65535)
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	3f ef       	ldi	r19, 0xFF	; 255
     a64:	4f e7       	ldi	r20, 0x7F	; 127
     a66:	57 e4       	ldi	r21, 0x47	; 71
     a68:	c8 01       	movw	r24, r16
     a6a:	b7 01       	movw	r22, r14
     a6c:	0e 94 28 08 	call	0x1050	; 0x1050 <__gtsf2>
     a70:	18 16       	cp	r1, r24
     a72:	a4 f4       	brge	.+40     	; 0xa9c <__stack+0x19d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a74:	20 e0       	ldi	r18, 0x00	; 0
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	40 e2       	ldi	r20, 0x20	; 32
     a7a:	51 e4       	ldi	r21, 0x41	; 65
     a7c:	c6 01       	movw	r24, r12
     a7e:	b5 01       	movw	r22, r10
     a80:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__mulsf3>
     a84:	0e 94 58 05 	call	0xab0	; 0xab0 <__fixunssfsi>
     a88:	05 c0       	rjmp	.+10     	; 0xa94 <__stack+0x195>
     a8a:	c1 01       	movw	r24, r2
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	f1 f7       	brne	.-4      	; 0xa8c <__stack+0x18d>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a90:	61 50       	subi	r22, 0x01	; 1
     a92:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a94:	61 15       	cp	r22, r1
     a96:	71 05       	cpc	r23, r1
     a98:	c1 f7       	brne	.-16     	; 0xa8a <__stack+0x18b>
     a9a:	07 c0       	rjmp	.+14     	; 0xaaa <__stack+0x1ab>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a9c:	c8 01       	movw	r24, r16
     a9e:	b7 01       	movw	r22, r14
     aa0:	0e 94 58 05 	call	0xab0	; 0xab0 <__fixunssfsi>
     aa4:	cb 01       	movw	r24, r22
     aa6:	01 97       	sbiw	r24, 0x01	; 1
     aa8:	f1 f7       	brne	.-4      	; 0xaa6 <__stack+0x1a7>

					coolerPower=((uint8_t)U);
     aaa:	50 92 0b 02 	sts	0x020B, r5
     aae:	4f ce       	rjmp	.-866    	; 0x74e <main+0x10e>

00000ab0 <__fixunssfsi>:
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	7b 01       	movw	r14, r22
     aba:	8c 01       	movw	r16, r24
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	40 e0       	ldi	r20, 0x00	; 0
     ac2:	5f e4       	ldi	r21, 0x4F	; 79
     ac4:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__gesf2>
     ac8:	88 23       	and	r24, r24
     aca:	8c f0       	brlt	.+34     	; 0xaee <__fixunssfsi+0x3e>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	5f e4       	ldi	r21, 0x4F	; 79
     ad4:	c8 01       	movw	r24, r16
     ad6:	b7 01       	movw	r22, r14
     ad8:	0e 94 d0 06 	call	0xda0	; 0xda0 <__subsf3>
     adc:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__fixsfsi>
     ae0:	9b 01       	movw	r18, r22
     ae2:	ac 01       	movw	r20, r24
     ae4:	20 50       	subi	r18, 0x00	; 0
     ae6:	30 40       	sbci	r19, 0x00	; 0
     ae8:	40 40       	sbci	r20, 0x00	; 0
     aea:	50 48       	sbci	r21, 0x80	; 128
     aec:	06 c0       	rjmp	.+12     	; 0xafa <__fixunssfsi+0x4a>
     aee:	c8 01       	movw	r24, r16
     af0:	b7 01       	movw	r22, r14
     af2:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__fixsfsi>
     af6:	9b 01       	movw	r18, r22
     af8:	ac 01       	movw	r20, r24
     afa:	b9 01       	movw	r22, r18
     afc:	ca 01       	movw	r24, r20
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	08 95       	ret

00000b08 <_fpadd_parts>:
     b08:	a0 e0       	ldi	r26, 0x00	; 0
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	ea e8       	ldi	r30, 0x8A	; 138
     b0e:	f5 e0       	ldi	r31, 0x05	; 5
     b10:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__prologue_saves__>
     b14:	dc 01       	movw	r26, r24
     b16:	2b 01       	movw	r4, r22
     b18:	fa 01       	movw	r30, r20
     b1a:	9c 91       	ld	r25, X
     b1c:	92 30       	cpi	r25, 0x02	; 2
     b1e:	08 f4       	brcc	.+2      	; 0xb22 <_fpadd_parts+0x1a>
     b20:	39 c1       	rjmp	.+626    	; 0xd94 <_fpadd_parts+0x28c>
     b22:	eb 01       	movw	r28, r22
     b24:	88 81       	ld	r24, Y
     b26:	82 30       	cpi	r24, 0x02	; 2
     b28:	08 f4       	brcc	.+2      	; 0xb2c <_fpadd_parts+0x24>
     b2a:	33 c1       	rjmp	.+614    	; 0xd92 <_fpadd_parts+0x28a>
     b2c:	94 30       	cpi	r25, 0x04	; 4
     b2e:	69 f4       	brne	.+26     	; 0xb4a <_fpadd_parts+0x42>
     b30:	84 30       	cpi	r24, 0x04	; 4
     b32:	09 f0       	breq	.+2      	; 0xb36 <_fpadd_parts+0x2e>
     b34:	2f c1       	rjmp	.+606    	; 0xd94 <_fpadd_parts+0x28c>
     b36:	11 96       	adiw	r26, 0x01	; 1
     b38:	9c 91       	ld	r25, X
     b3a:	11 97       	sbiw	r26, 0x01	; 1
     b3c:	89 81       	ldd	r24, Y+1	; 0x01
     b3e:	98 17       	cp	r25, r24
     b40:	09 f4       	brne	.+2      	; 0xb44 <_fpadd_parts+0x3c>
     b42:	28 c1       	rjmp	.+592    	; 0xd94 <_fpadd_parts+0x28c>
     b44:	a0 e0       	ldi	r26, 0x00	; 0
     b46:	b1 e0       	ldi	r27, 0x01	; 1
     b48:	25 c1       	rjmp	.+586    	; 0xd94 <_fpadd_parts+0x28c>
     b4a:	84 30       	cpi	r24, 0x04	; 4
     b4c:	09 f4       	brne	.+2      	; 0xb50 <_fpadd_parts+0x48>
     b4e:	21 c1       	rjmp	.+578    	; 0xd92 <_fpadd_parts+0x28a>
     b50:	82 30       	cpi	r24, 0x02	; 2
     b52:	a9 f4       	brne	.+42     	; 0xb7e <_fpadd_parts+0x76>
     b54:	92 30       	cpi	r25, 0x02	; 2
     b56:	09 f0       	breq	.+2      	; 0xb5a <_fpadd_parts+0x52>
     b58:	1d c1       	rjmp	.+570    	; 0xd94 <_fpadd_parts+0x28c>
     b5a:	9a 01       	movw	r18, r20
     b5c:	ad 01       	movw	r20, r26
     b5e:	88 e0       	ldi	r24, 0x08	; 8
     b60:	ea 01       	movw	r28, r20
     b62:	09 90       	ld	r0, Y+
     b64:	ae 01       	movw	r20, r28
     b66:	e9 01       	movw	r28, r18
     b68:	09 92       	st	Y+, r0
     b6a:	9e 01       	movw	r18, r28
     b6c:	81 50       	subi	r24, 0x01	; 1
     b6e:	c1 f7       	brne	.-16     	; 0xb60 <_fpadd_parts+0x58>
     b70:	e2 01       	movw	r28, r4
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	11 96       	adiw	r26, 0x01	; 1
     b76:	9c 91       	ld	r25, X
     b78:	89 23       	and	r24, r25
     b7a:	81 83       	std	Z+1, r24	; 0x01
     b7c:	08 c1       	rjmp	.+528    	; 0xd8e <_fpadd_parts+0x286>
     b7e:	92 30       	cpi	r25, 0x02	; 2
     b80:	09 f4       	brne	.+2      	; 0xb84 <_fpadd_parts+0x7c>
     b82:	07 c1       	rjmp	.+526    	; 0xd92 <_fpadd_parts+0x28a>
     b84:	12 96       	adiw	r26, 0x02	; 2
     b86:	2d 90       	ld	r2, X+
     b88:	3c 90       	ld	r3, X
     b8a:	13 97       	sbiw	r26, 0x03	; 3
     b8c:	eb 01       	movw	r28, r22
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	9b 81       	ldd	r25, Y+3	; 0x03
     b92:	14 96       	adiw	r26, 0x04	; 4
     b94:	ad 90       	ld	r10, X+
     b96:	bd 90       	ld	r11, X+
     b98:	cd 90       	ld	r12, X+
     b9a:	dc 90       	ld	r13, X
     b9c:	17 97       	sbiw	r26, 0x07	; 7
     b9e:	ec 80       	ldd	r14, Y+4	; 0x04
     ba0:	fd 80       	ldd	r15, Y+5	; 0x05
     ba2:	0e 81       	ldd	r16, Y+6	; 0x06
     ba4:	1f 81       	ldd	r17, Y+7	; 0x07
     ba6:	91 01       	movw	r18, r2
     ba8:	28 1b       	sub	r18, r24
     baa:	39 0b       	sbc	r19, r25
     bac:	b9 01       	movw	r22, r18
     bae:	37 ff       	sbrs	r19, 7
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <_fpadd_parts+0xb2>
     bb2:	66 27       	eor	r22, r22
     bb4:	77 27       	eor	r23, r23
     bb6:	62 1b       	sub	r22, r18
     bb8:	73 0b       	sbc	r23, r19
     bba:	60 32       	cpi	r22, 0x20	; 32
     bbc:	71 05       	cpc	r23, r1
     bbe:	0c f0       	brlt	.+2      	; 0xbc2 <_fpadd_parts+0xba>
     bc0:	61 c0       	rjmp	.+194    	; 0xc84 <_fpadd_parts+0x17c>
     bc2:	12 16       	cp	r1, r18
     bc4:	13 06       	cpc	r1, r19
     bc6:	6c f5       	brge	.+90     	; 0xc22 <_fpadd_parts+0x11a>
     bc8:	37 01       	movw	r6, r14
     bca:	48 01       	movw	r8, r16
     bcc:	06 2e       	mov	r0, r22
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <_fpadd_parts+0xd0>
     bd0:	96 94       	lsr	r9
     bd2:	87 94       	ror	r8
     bd4:	77 94       	ror	r7
     bd6:	67 94       	ror	r6
     bd8:	0a 94       	dec	r0
     bda:	d2 f7       	brpl	.-12     	; 0xbd0 <_fpadd_parts+0xc8>
     bdc:	21 e0       	ldi	r18, 0x01	; 1
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	50 e0       	ldi	r21, 0x00	; 0
     be4:	04 c0       	rjmp	.+8      	; 0xbee <_fpadd_parts+0xe6>
     be6:	22 0f       	add	r18, r18
     be8:	33 1f       	adc	r19, r19
     bea:	44 1f       	adc	r20, r20
     bec:	55 1f       	adc	r21, r21
     bee:	6a 95       	dec	r22
     bf0:	d2 f7       	brpl	.-12     	; 0xbe6 <_fpadd_parts+0xde>
     bf2:	21 50       	subi	r18, 0x01	; 1
     bf4:	30 40       	sbci	r19, 0x00	; 0
     bf6:	40 40       	sbci	r20, 0x00	; 0
     bf8:	50 40       	sbci	r21, 0x00	; 0
     bfa:	2e 21       	and	r18, r14
     bfc:	3f 21       	and	r19, r15
     bfe:	40 23       	and	r20, r16
     c00:	51 23       	and	r21, r17
     c02:	21 15       	cp	r18, r1
     c04:	31 05       	cpc	r19, r1
     c06:	41 05       	cpc	r20, r1
     c08:	51 05       	cpc	r21, r1
     c0a:	21 f0       	breq	.+8      	; 0xc14 <_fpadd_parts+0x10c>
     c0c:	21 e0       	ldi	r18, 0x01	; 1
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	40 e0       	ldi	r20, 0x00	; 0
     c12:	50 e0       	ldi	r21, 0x00	; 0
     c14:	79 01       	movw	r14, r18
     c16:	8a 01       	movw	r16, r20
     c18:	e6 28       	or	r14, r6
     c1a:	f7 28       	or	r15, r7
     c1c:	08 29       	or	r16, r8
     c1e:	19 29       	or	r17, r9
     c20:	3c c0       	rjmp	.+120    	; 0xc9a <_fpadd_parts+0x192>
     c22:	23 2b       	or	r18, r19
     c24:	d1 f1       	breq	.+116    	; 0xc9a <_fpadd_parts+0x192>
     c26:	26 0e       	add	r2, r22
     c28:	37 1e       	adc	r3, r23
     c2a:	35 01       	movw	r6, r10
     c2c:	46 01       	movw	r8, r12
     c2e:	06 2e       	mov	r0, r22
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <_fpadd_parts+0x132>
     c32:	96 94       	lsr	r9
     c34:	87 94       	ror	r8
     c36:	77 94       	ror	r7
     c38:	67 94       	ror	r6
     c3a:	0a 94       	dec	r0
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <_fpadd_parts+0x12a>
     c3e:	21 e0       	ldi	r18, 0x01	; 1
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	40 e0       	ldi	r20, 0x00	; 0
     c44:	50 e0       	ldi	r21, 0x00	; 0
     c46:	04 c0       	rjmp	.+8      	; 0xc50 <_fpadd_parts+0x148>
     c48:	22 0f       	add	r18, r18
     c4a:	33 1f       	adc	r19, r19
     c4c:	44 1f       	adc	r20, r20
     c4e:	55 1f       	adc	r21, r21
     c50:	6a 95       	dec	r22
     c52:	d2 f7       	brpl	.-12     	; 0xc48 <_fpadd_parts+0x140>
     c54:	21 50       	subi	r18, 0x01	; 1
     c56:	30 40       	sbci	r19, 0x00	; 0
     c58:	40 40       	sbci	r20, 0x00	; 0
     c5a:	50 40       	sbci	r21, 0x00	; 0
     c5c:	2a 21       	and	r18, r10
     c5e:	3b 21       	and	r19, r11
     c60:	4c 21       	and	r20, r12
     c62:	5d 21       	and	r21, r13
     c64:	21 15       	cp	r18, r1
     c66:	31 05       	cpc	r19, r1
     c68:	41 05       	cpc	r20, r1
     c6a:	51 05       	cpc	r21, r1
     c6c:	21 f0       	breq	.+8      	; 0xc76 <_fpadd_parts+0x16e>
     c6e:	21 e0       	ldi	r18, 0x01	; 1
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	40 e0       	ldi	r20, 0x00	; 0
     c74:	50 e0       	ldi	r21, 0x00	; 0
     c76:	59 01       	movw	r10, r18
     c78:	6a 01       	movw	r12, r20
     c7a:	a6 28       	or	r10, r6
     c7c:	b7 28       	or	r11, r7
     c7e:	c8 28       	or	r12, r8
     c80:	d9 28       	or	r13, r9
     c82:	0b c0       	rjmp	.+22     	; 0xc9a <_fpadd_parts+0x192>
     c84:	82 15       	cp	r24, r2
     c86:	93 05       	cpc	r25, r3
     c88:	2c f0       	brlt	.+10     	; 0xc94 <_fpadd_parts+0x18c>
     c8a:	1c 01       	movw	r2, r24
     c8c:	aa 24       	eor	r10, r10
     c8e:	bb 24       	eor	r11, r11
     c90:	65 01       	movw	r12, r10
     c92:	03 c0       	rjmp	.+6      	; 0xc9a <_fpadd_parts+0x192>
     c94:	ee 24       	eor	r14, r14
     c96:	ff 24       	eor	r15, r15
     c98:	87 01       	movw	r16, r14
     c9a:	11 96       	adiw	r26, 0x01	; 1
     c9c:	9c 91       	ld	r25, X
     c9e:	d2 01       	movw	r26, r4
     ca0:	11 96       	adiw	r26, 0x01	; 1
     ca2:	8c 91       	ld	r24, X
     ca4:	98 17       	cp	r25, r24
     ca6:	09 f4       	brne	.+2      	; 0xcaa <_fpadd_parts+0x1a2>
     ca8:	45 c0       	rjmp	.+138    	; 0xd34 <_fpadd_parts+0x22c>
     caa:	99 23       	and	r25, r25
     cac:	39 f0       	breq	.+14     	; 0xcbc <_fpadd_parts+0x1b4>
     cae:	a8 01       	movw	r20, r16
     cb0:	97 01       	movw	r18, r14
     cb2:	2a 19       	sub	r18, r10
     cb4:	3b 09       	sbc	r19, r11
     cb6:	4c 09       	sbc	r20, r12
     cb8:	5d 09       	sbc	r21, r13
     cba:	06 c0       	rjmp	.+12     	; 0xcc8 <_fpadd_parts+0x1c0>
     cbc:	a6 01       	movw	r20, r12
     cbe:	95 01       	movw	r18, r10
     cc0:	2e 19       	sub	r18, r14
     cc2:	3f 09       	sbc	r19, r15
     cc4:	40 0b       	sbc	r20, r16
     cc6:	51 0b       	sbc	r21, r17
     cc8:	57 fd       	sbrc	r21, 7
     cca:	08 c0       	rjmp	.+16     	; 0xcdc <_fpadd_parts+0x1d4>
     ccc:	11 82       	std	Z+1, r1	; 0x01
     cce:	33 82       	std	Z+3, r3	; 0x03
     cd0:	22 82       	std	Z+2, r2	; 0x02
     cd2:	24 83       	std	Z+4, r18	; 0x04
     cd4:	35 83       	std	Z+5, r19	; 0x05
     cd6:	46 83       	std	Z+6, r20	; 0x06
     cd8:	57 83       	std	Z+7, r21	; 0x07
     cda:	1d c0       	rjmp	.+58     	; 0xd16 <_fpadd_parts+0x20e>
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	81 83       	std	Z+1, r24	; 0x01
     ce0:	33 82       	std	Z+3, r3	; 0x03
     ce2:	22 82       	std	Z+2, r2	; 0x02
     ce4:	88 27       	eor	r24, r24
     ce6:	99 27       	eor	r25, r25
     ce8:	dc 01       	movw	r26, r24
     cea:	82 1b       	sub	r24, r18
     cec:	93 0b       	sbc	r25, r19
     cee:	a4 0b       	sbc	r26, r20
     cf0:	b5 0b       	sbc	r27, r21
     cf2:	84 83       	std	Z+4, r24	; 0x04
     cf4:	95 83       	std	Z+5, r25	; 0x05
     cf6:	a6 83       	std	Z+6, r26	; 0x06
     cf8:	b7 83       	std	Z+7, r27	; 0x07
     cfa:	0d c0       	rjmp	.+26     	; 0xd16 <_fpadd_parts+0x20e>
     cfc:	22 0f       	add	r18, r18
     cfe:	33 1f       	adc	r19, r19
     d00:	44 1f       	adc	r20, r20
     d02:	55 1f       	adc	r21, r21
     d04:	24 83       	std	Z+4, r18	; 0x04
     d06:	35 83       	std	Z+5, r19	; 0x05
     d08:	46 83       	std	Z+6, r20	; 0x06
     d0a:	57 83       	std	Z+7, r21	; 0x07
     d0c:	82 81       	ldd	r24, Z+2	; 0x02
     d0e:	93 81       	ldd	r25, Z+3	; 0x03
     d10:	01 97       	sbiw	r24, 0x01	; 1
     d12:	93 83       	std	Z+3, r25	; 0x03
     d14:	82 83       	std	Z+2, r24	; 0x02
     d16:	24 81       	ldd	r18, Z+4	; 0x04
     d18:	35 81       	ldd	r19, Z+5	; 0x05
     d1a:	46 81       	ldd	r20, Z+6	; 0x06
     d1c:	57 81       	ldd	r21, Z+7	; 0x07
     d1e:	da 01       	movw	r26, r20
     d20:	c9 01       	movw	r24, r18
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	a1 09       	sbc	r26, r1
     d26:	b1 09       	sbc	r27, r1
     d28:	8f 5f       	subi	r24, 0xFF	; 255
     d2a:	9f 4f       	sbci	r25, 0xFF	; 255
     d2c:	af 4f       	sbci	r26, 0xFF	; 255
     d2e:	bf 43       	sbci	r27, 0x3F	; 63
     d30:	28 f3       	brcs	.-54     	; 0xcfc <_fpadd_parts+0x1f4>
     d32:	0b c0       	rjmp	.+22     	; 0xd4a <_fpadd_parts+0x242>
     d34:	91 83       	std	Z+1, r25	; 0x01
     d36:	33 82       	std	Z+3, r3	; 0x03
     d38:	22 82       	std	Z+2, r2	; 0x02
     d3a:	ea 0c       	add	r14, r10
     d3c:	fb 1c       	adc	r15, r11
     d3e:	0c 1d       	adc	r16, r12
     d40:	1d 1d       	adc	r17, r13
     d42:	e4 82       	std	Z+4, r14	; 0x04
     d44:	f5 82       	std	Z+5, r15	; 0x05
     d46:	06 83       	std	Z+6, r16	; 0x06
     d48:	17 83       	std	Z+7, r17	; 0x07
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	80 83       	st	Z, r24
     d4e:	24 81       	ldd	r18, Z+4	; 0x04
     d50:	35 81       	ldd	r19, Z+5	; 0x05
     d52:	46 81       	ldd	r20, Z+6	; 0x06
     d54:	57 81       	ldd	r21, Z+7	; 0x07
     d56:	57 ff       	sbrs	r21, 7
     d58:	1a c0       	rjmp	.+52     	; 0xd8e <_fpadd_parts+0x286>
     d5a:	c9 01       	movw	r24, r18
     d5c:	aa 27       	eor	r26, r26
     d5e:	97 fd       	sbrc	r25, 7
     d60:	a0 95       	com	r26
     d62:	ba 2f       	mov	r27, r26
     d64:	81 70       	andi	r24, 0x01	; 1
     d66:	90 70       	andi	r25, 0x00	; 0
     d68:	a0 70       	andi	r26, 0x00	; 0
     d6a:	b0 70       	andi	r27, 0x00	; 0
     d6c:	56 95       	lsr	r21
     d6e:	47 95       	ror	r20
     d70:	37 95       	ror	r19
     d72:	27 95       	ror	r18
     d74:	82 2b       	or	r24, r18
     d76:	93 2b       	or	r25, r19
     d78:	a4 2b       	or	r26, r20
     d7a:	b5 2b       	or	r27, r21
     d7c:	84 83       	std	Z+4, r24	; 0x04
     d7e:	95 83       	std	Z+5, r25	; 0x05
     d80:	a6 83       	std	Z+6, r26	; 0x06
     d82:	b7 83       	std	Z+7, r27	; 0x07
     d84:	82 81       	ldd	r24, Z+2	; 0x02
     d86:	93 81       	ldd	r25, Z+3	; 0x03
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	93 83       	std	Z+3, r25	; 0x03
     d8c:	82 83       	std	Z+2, r24	; 0x02
     d8e:	df 01       	movw	r26, r30
     d90:	01 c0       	rjmp	.+2      	; 0xd94 <_fpadd_parts+0x28c>
     d92:	d2 01       	movw	r26, r4
     d94:	cd 01       	movw	r24, r26
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	e2 e1       	ldi	r30, 0x12	; 18
     d9c:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__epilogue_restores__>

00000da0 <__subsf3>:
     da0:	a0 e2       	ldi	r26, 0x20	; 32
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e6 ed       	ldi	r30, 0xD6	; 214
     da6:	f6 e0       	ldi	r31, 0x06	; 6
     da8:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__prologue_saves__+0x18>
     dac:	69 83       	std	Y+1, r22	; 0x01
     dae:	7a 83       	std	Y+2, r23	; 0x02
     db0:	8b 83       	std	Y+3, r24	; 0x03
     db2:	9c 83       	std	Y+4, r25	; 0x04
     db4:	2d 83       	std	Y+5, r18	; 0x05
     db6:	3e 83       	std	Y+6, r19	; 0x06
     db8:	4f 83       	std	Y+7, r20	; 0x07
     dba:	58 87       	std	Y+8, r21	; 0x08
     dbc:	e9 e0       	ldi	r30, 0x09	; 9
     dbe:	ee 2e       	mov	r14, r30
     dc0:	f1 2c       	mov	r15, r1
     dc2:	ec 0e       	add	r14, r28
     dc4:	fd 1e       	adc	r15, r29
     dc6:	b7 01       	movw	r22, r14
     dc8:	ce 01       	movw	r24, r28
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__unpack_f>
     dd0:	8e 01       	movw	r16, r28
     dd2:	0f 5e       	subi	r16, 0xEF	; 239
     dd4:	1f 4f       	sbci	r17, 0xFF	; 255
     dd6:	b8 01       	movw	r22, r16
     dd8:	ce 01       	movw	r24, r28
     dda:	05 96       	adiw	r24, 0x05	; 5
     ddc:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__unpack_f>
     de0:	8a 89       	ldd	r24, Y+18	; 0x12
     de2:	91 e0       	ldi	r25, 0x01	; 1
     de4:	89 27       	eor	r24, r25
     de6:	8a 8b       	std	Y+18, r24	; 0x12
     de8:	ae 01       	movw	r20, r28
     dea:	47 5e       	subi	r20, 0xE7	; 231
     dec:	5f 4f       	sbci	r21, 0xFF	; 255
     dee:	b8 01       	movw	r22, r16
     df0:	c7 01       	movw	r24, r14
     df2:	0e 94 84 05 	call	0xb08	; 0xb08 <_fpadd_parts>
     df6:	0e 94 04 0a 	call	0x1408	; 0x1408 <__pack_f>
     dfa:	a0 96       	adiw	r28, 0x20	; 32
     dfc:	e6 e0       	ldi	r30, 0x06	; 6
     dfe:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__epilogue_restores__+0x18>

00000e02 <__addsf3>:
     e02:	a0 e2       	ldi	r26, 0x20	; 32
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e7 e0       	ldi	r30, 0x07	; 7
     e08:	f7 e0       	ldi	r31, 0x07	; 7
     e0a:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__prologue_saves__+0x18>
     e0e:	69 83       	std	Y+1, r22	; 0x01
     e10:	7a 83       	std	Y+2, r23	; 0x02
     e12:	8b 83       	std	Y+3, r24	; 0x03
     e14:	9c 83       	std	Y+4, r25	; 0x04
     e16:	2d 83       	std	Y+5, r18	; 0x05
     e18:	3e 83       	std	Y+6, r19	; 0x06
     e1a:	4f 83       	std	Y+7, r20	; 0x07
     e1c:	58 87       	std	Y+8, r21	; 0x08
     e1e:	f9 e0       	ldi	r31, 0x09	; 9
     e20:	ef 2e       	mov	r14, r31
     e22:	f1 2c       	mov	r15, r1
     e24:	ec 0e       	add	r14, r28
     e26:	fd 1e       	adc	r15, r29
     e28:	b7 01       	movw	r22, r14
     e2a:	ce 01       	movw	r24, r28
     e2c:	01 96       	adiw	r24, 0x01	; 1
     e2e:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__unpack_f>
     e32:	8e 01       	movw	r16, r28
     e34:	0f 5e       	subi	r16, 0xEF	; 239
     e36:	1f 4f       	sbci	r17, 0xFF	; 255
     e38:	b8 01       	movw	r22, r16
     e3a:	ce 01       	movw	r24, r28
     e3c:	05 96       	adiw	r24, 0x05	; 5
     e3e:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__unpack_f>
     e42:	ae 01       	movw	r20, r28
     e44:	47 5e       	subi	r20, 0xE7	; 231
     e46:	5f 4f       	sbci	r21, 0xFF	; 255
     e48:	b8 01       	movw	r22, r16
     e4a:	c7 01       	movw	r24, r14
     e4c:	0e 94 84 05 	call	0xb08	; 0xb08 <_fpadd_parts>
     e50:	0e 94 04 0a 	call	0x1408	; 0x1408 <__pack_f>
     e54:	a0 96       	adiw	r28, 0x20	; 32
     e56:	e6 e0       	ldi	r30, 0x06	; 6
     e58:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__epilogue_restores__+0x18>

00000e5c <__mulsf3>:
     e5c:	a0 e2       	ldi	r26, 0x20	; 32
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e4 e3       	ldi	r30, 0x34	; 52
     e62:	f7 e0       	ldi	r31, 0x07	; 7
     e64:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__prologue_saves__>
     e68:	69 83       	std	Y+1, r22	; 0x01
     e6a:	7a 83       	std	Y+2, r23	; 0x02
     e6c:	8b 83       	std	Y+3, r24	; 0x03
     e6e:	9c 83       	std	Y+4, r25	; 0x04
     e70:	2d 83       	std	Y+5, r18	; 0x05
     e72:	3e 83       	std	Y+6, r19	; 0x06
     e74:	4f 83       	std	Y+7, r20	; 0x07
     e76:	58 87       	std	Y+8, r21	; 0x08
     e78:	be 01       	movw	r22, r28
     e7a:	67 5f       	subi	r22, 0xF7	; 247
     e7c:	7f 4f       	sbci	r23, 0xFF	; 255
     e7e:	ce 01       	movw	r24, r28
     e80:	01 96       	adiw	r24, 0x01	; 1
     e82:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__unpack_f>
     e86:	be 01       	movw	r22, r28
     e88:	6f 5e       	subi	r22, 0xEF	; 239
     e8a:	7f 4f       	sbci	r23, 0xFF	; 255
     e8c:	ce 01       	movw	r24, r28
     e8e:	05 96       	adiw	r24, 0x05	; 5
     e90:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__unpack_f>
     e94:	99 85       	ldd	r25, Y+9	; 0x09
     e96:	92 30       	cpi	r25, 0x02	; 2
     e98:	88 f0       	brcs	.+34     	; 0xebc <__mulsf3+0x60>
     e9a:	89 89       	ldd	r24, Y+17	; 0x11
     e9c:	82 30       	cpi	r24, 0x02	; 2
     e9e:	c8 f0       	brcs	.+50     	; 0xed2 <__mulsf3+0x76>
     ea0:	94 30       	cpi	r25, 0x04	; 4
     ea2:	19 f4       	brne	.+6      	; 0xeaa <__mulsf3+0x4e>
     ea4:	82 30       	cpi	r24, 0x02	; 2
     ea6:	51 f4       	brne	.+20     	; 0xebc <__mulsf3+0x60>
     ea8:	04 c0       	rjmp	.+8      	; 0xeb2 <__mulsf3+0x56>
     eaa:	84 30       	cpi	r24, 0x04	; 4
     eac:	29 f4       	brne	.+10     	; 0xeb8 <__mulsf3+0x5c>
     eae:	92 30       	cpi	r25, 0x02	; 2
     eb0:	81 f4       	brne	.+32     	; 0xed2 <__mulsf3+0x76>
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	91 e0       	ldi	r25, 0x01	; 1
     eb6:	c6 c0       	rjmp	.+396    	; 0x1044 <__mulsf3+0x1e8>
     eb8:	92 30       	cpi	r25, 0x02	; 2
     eba:	49 f4       	brne	.+18     	; 0xece <__mulsf3+0x72>
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec0:	8a 89       	ldd	r24, Y+18	; 0x12
     ec2:	98 13       	cpse	r25, r24
     ec4:	21 e0       	ldi	r18, 0x01	; 1
     ec6:	2a 87       	std	Y+10, r18	; 0x0a
     ec8:	ce 01       	movw	r24, r28
     eca:	09 96       	adiw	r24, 0x09	; 9
     ecc:	bb c0       	rjmp	.+374    	; 0x1044 <__mulsf3+0x1e8>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	49 f4       	brne	.+18     	; 0xee4 <__mulsf3+0x88>
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed6:	8a 89       	ldd	r24, Y+18	; 0x12
     ed8:	98 13       	cpse	r25, r24
     eda:	21 e0       	ldi	r18, 0x01	; 1
     edc:	2a 8b       	std	Y+18, r18	; 0x12
     ede:	ce 01       	movw	r24, r28
     ee0:	41 96       	adiw	r24, 0x11	; 17
     ee2:	b0 c0       	rjmp	.+352    	; 0x1044 <__mulsf3+0x1e8>
     ee4:	2d 84       	ldd	r2, Y+13	; 0x0d
     ee6:	3e 84       	ldd	r3, Y+14	; 0x0e
     ee8:	4f 84       	ldd	r4, Y+15	; 0x0f
     eea:	58 88       	ldd	r5, Y+16	; 0x10
     eec:	6d 88       	ldd	r6, Y+21	; 0x15
     eee:	7e 88       	ldd	r7, Y+22	; 0x16
     ef0:	8f 88       	ldd	r8, Y+23	; 0x17
     ef2:	98 8c       	ldd	r9, Y+24	; 0x18
     ef4:	ee 24       	eor	r14, r14
     ef6:	ff 24       	eor	r15, r15
     ef8:	87 01       	movw	r16, r14
     efa:	aa 24       	eor	r10, r10
     efc:	bb 24       	eor	r11, r11
     efe:	65 01       	movw	r12, r10
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	e0 e0       	ldi	r30, 0x00	; 0
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	c1 01       	movw	r24, r2
     f0e:	81 70       	andi	r24, 0x01	; 1
     f10:	90 70       	andi	r25, 0x00	; 0
     f12:	89 2b       	or	r24, r25
     f14:	e9 f0       	breq	.+58     	; 0xf50 <__mulsf3+0xf4>
     f16:	e6 0c       	add	r14, r6
     f18:	f7 1c       	adc	r15, r7
     f1a:	08 1d       	adc	r16, r8
     f1c:	19 1d       	adc	r17, r9
     f1e:	9a 01       	movw	r18, r20
     f20:	ab 01       	movw	r20, r22
     f22:	2a 0d       	add	r18, r10
     f24:	3b 1d       	adc	r19, r11
     f26:	4c 1d       	adc	r20, r12
     f28:	5d 1d       	adc	r21, r13
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	a0 e0       	ldi	r26, 0x00	; 0
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e6 14       	cp	r14, r6
     f34:	f7 04       	cpc	r15, r7
     f36:	08 05       	cpc	r16, r8
     f38:	19 05       	cpc	r17, r9
     f3a:	20 f4       	brcc	.+8      	; 0xf44 <__mulsf3+0xe8>
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	a0 e0       	ldi	r26, 0x00	; 0
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ba 01       	movw	r22, r20
     f46:	a9 01       	movw	r20, r18
     f48:	48 0f       	add	r20, r24
     f4a:	59 1f       	adc	r21, r25
     f4c:	6a 1f       	adc	r22, r26
     f4e:	7b 1f       	adc	r23, r27
     f50:	aa 0c       	add	r10, r10
     f52:	bb 1c       	adc	r11, r11
     f54:	cc 1c       	adc	r12, r12
     f56:	dd 1c       	adc	r13, r13
     f58:	97 fe       	sbrs	r9, 7
     f5a:	08 c0       	rjmp	.+16     	; 0xf6c <__mulsf3+0x110>
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	a0 e0       	ldi	r26, 0x00	; 0
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	a8 2a       	or	r10, r24
     f66:	b9 2a       	or	r11, r25
     f68:	ca 2a       	or	r12, r26
     f6a:	db 2a       	or	r13, r27
     f6c:	31 96       	adiw	r30, 0x01	; 1
     f6e:	e0 32       	cpi	r30, 0x20	; 32
     f70:	f1 05       	cpc	r31, r1
     f72:	49 f0       	breq	.+18     	; 0xf86 <__mulsf3+0x12a>
     f74:	66 0c       	add	r6, r6
     f76:	77 1c       	adc	r7, r7
     f78:	88 1c       	adc	r8, r8
     f7a:	99 1c       	adc	r9, r9
     f7c:	56 94       	lsr	r5
     f7e:	47 94       	ror	r4
     f80:	37 94       	ror	r3
     f82:	27 94       	ror	r2
     f84:	c3 cf       	rjmp	.-122    	; 0xf0c <__mulsf3+0xb0>
     f86:	fa 85       	ldd	r31, Y+10	; 0x0a
     f88:	ea 89       	ldd	r30, Y+18	; 0x12
     f8a:	2b 89       	ldd	r18, Y+19	; 0x13
     f8c:	3c 89       	ldd	r19, Y+20	; 0x14
     f8e:	8b 85       	ldd	r24, Y+11	; 0x0b
     f90:	9c 85       	ldd	r25, Y+12	; 0x0c
     f92:	28 0f       	add	r18, r24
     f94:	39 1f       	adc	r19, r25
     f96:	2e 5f       	subi	r18, 0xFE	; 254
     f98:	3f 4f       	sbci	r19, 0xFF	; 255
     f9a:	17 c0       	rjmp	.+46     	; 0xfca <__mulsf3+0x16e>
     f9c:	ca 01       	movw	r24, r20
     f9e:	81 70       	andi	r24, 0x01	; 1
     fa0:	90 70       	andi	r25, 0x00	; 0
     fa2:	89 2b       	or	r24, r25
     fa4:	61 f0       	breq	.+24     	; 0xfbe <__mulsf3+0x162>
     fa6:	16 95       	lsr	r17
     fa8:	07 95       	ror	r16
     faa:	f7 94       	ror	r15
     fac:	e7 94       	ror	r14
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	a0 e0       	ldi	r26, 0x00	; 0
     fb4:	b0 e8       	ldi	r27, 0x80	; 128
     fb6:	e8 2a       	or	r14, r24
     fb8:	f9 2a       	or	r15, r25
     fba:	0a 2b       	or	r16, r26
     fbc:	1b 2b       	or	r17, r27
     fbe:	76 95       	lsr	r23
     fc0:	67 95       	ror	r22
     fc2:	57 95       	ror	r21
     fc4:	47 95       	ror	r20
     fc6:	2f 5f       	subi	r18, 0xFF	; 255
     fc8:	3f 4f       	sbci	r19, 0xFF	; 255
     fca:	77 fd       	sbrc	r23, 7
     fcc:	e7 cf       	rjmp	.-50     	; 0xf9c <__mulsf3+0x140>
     fce:	0c c0       	rjmp	.+24     	; 0xfe8 <__mulsf3+0x18c>
     fd0:	44 0f       	add	r20, r20
     fd2:	55 1f       	adc	r21, r21
     fd4:	66 1f       	adc	r22, r22
     fd6:	77 1f       	adc	r23, r23
     fd8:	17 fd       	sbrc	r17, 7
     fda:	41 60       	ori	r20, 0x01	; 1
     fdc:	ee 0c       	add	r14, r14
     fde:	ff 1c       	adc	r15, r15
     fe0:	00 1f       	adc	r16, r16
     fe2:	11 1f       	adc	r17, r17
     fe4:	21 50       	subi	r18, 0x01	; 1
     fe6:	30 40       	sbci	r19, 0x00	; 0
     fe8:	40 30       	cpi	r20, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	59 07       	cpc	r21, r25
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	69 07       	cpc	r22, r25
     ff2:	90 e4       	ldi	r25, 0x40	; 64
     ff4:	79 07       	cpc	r23, r25
     ff6:	60 f3       	brcs	.-40     	; 0xfd0 <__mulsf3+0x174>
     ff8:	2b 8f       	std	Y+27, r18	; 0x1b
     ffa:	3c 8f       	std	Y+28, r19	; 0x1c
     ffc:	db 01       	movw	r26, r22
     ffe:	ca 01       	movw	r24, r20
    1000:	8f 77       	andi	r24, 0x7F	; 127
    1002:	90 70       	andi	r25, 0x00	; 0
    1004:	a0 70       	andi	r26, 0x00	; 0
    1006:	b0 70       	andi	r27, 0x00	; 0
    1008:	80 34       	cpi	r24, 0x40	; 64
    100a:	91 05       	cpc	r25, r1
    100c:	a1 05       	cpc	r26, r1
    100e:	b1 05       	cpc	r27, r1
    1010:	61 f4       	brne	.+24     	; 0x102a <__mulsf3+0x1ce>
    1012:	47 fd       	sbrc	r20, 7
    1014:	0a c0       	rjmp	.+20     	; 0x102a <__mulsf3+0x1ce>
    1016:	e1 14       	cp	r14, r1
    1018:	f1 04       	cpc	r15, r1
    101a:	01 05       	cpc	r16, r1
    101c:	11 05       	cpc	r17, r1
    101e:	29 f0       	breq	.+10     	; 0x102a <__mulsf3+0x1ce>
    1020:	40 5c       	subi	r20, 0xC0	; 192
    1022:	5f 4f       	sbci	r21, 0xFF	; 255
    1024:	6f 4f       	sbci	r22, 0xFF	; 255
    1026:	7f 4f       	sbci	r23, 0xFF	; 255
    1028:	40 78       	andi	r20, 0x80	; 128
    102a:	1a 8e       	std	Y+26, r1	; 0x1a
    102c:	fe 17       	cp	r31, r30
    102e:	11 f0       	breq	.+4      	; 0x1034 <__mulsf3+0x1d8>
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	8a 8f       	std	Y+26, r24	; 0x1a
    1034:	4d 8f       	std	Y+29, r20	; 0x1d
    1036:	5e 8f       	std	Y+30, r21	; 0x1e
    1038:	6f 8f       	std	Y+31, r22	; 0x1f
    103a:	78 a3       	std	Y+32, r23	; 0x20
    103c:	83 e0       	ldi	r24, 0x03	; 3
    103e:	89 8f       	std	Y+25, r24	; 0x19
    1040:	ce 01       	movw	r24, r28
    1042:	49 96       	adiw	r24, 0x19	; 25
    1044:	0e 94 04 0a 	call	0x1408	; 0x1408 <__pack_f>
    1048:	a0 96       	adiw	r28, 0x20	; 32
    104a:	e2 e1       	ldi	r30, 0x12	; 18
    104c:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__epilogue_restores__>

00001050 <__gtsf2>:
    1050:	a8 e1       	ldi	r26, 0x18	; 24
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	ee e2       	ldi	r30, 0x2E	; 46
    1056:	f8 e0       	ldi	r31, 0x08	; 8
    1058:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__prologue_saves__+0x18>
    105c:	69 83       	std	Y+1, r22	; 0x01
    105e:	7a 83       	std	Y+2, r23	; 0x02
    1060:	8b 83       	std	Y+3, r24	; 0x03
    1062:	9c 83       	std	Y+4, r25	; 0x04
    1064:	2d 83       	std	Y+5, r18	; 0x05
    1066:	3e 83       	std	Y+6, r19	; 0x06
    1068:	4f 83       	std	Y+7, r20	; 0x07
    106a:	58 87       	std	Y+8, r21	; 0x08
    106c:	89 e0       	ldi	r24, 0x09	; 9
    106e:	e8 2e       	mov	r14, r24
    1070:	f1 2c       	mov	r15, r1
    1072:	ec 0e       	add	r14, r28
    1074:	fd 1e       	adc	r15, r29
    1076:	b7 01       	movw	r22, r14
    1078:	ce 01       	movw	r24, r28
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__unpack_f>
    1080:	8e 01       	movw	r16, r28
    1082:	0f 5e       	subi	r16, 0xEF	; 239
    1084:	1f 4f       	sbci	r17, 0xFF	; 255
    1086:	b8 01       	movw	r22, r16
    1088:	ce 01       	movw	r24, r28
    108a:	05 96       	adiw	r24, 0x05	; 5
    108c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__unpack_f>
    1090:	89 85       	ldd	r24, Y+9	; 0x09
    1092:	82 30       	cpi	r24, 0x02	; 2
    1094:	40 f0       	brcs	.+16     	; 0x10a6 <__gtsf2+0x56>
    1096:	89 89       	ldd	r24, Y+17	; 0x11
    1098:	82 30       	cpi	r24, 0x02	; 2
    109a:	28 f0       	brcs	.+10     	; 0x10a6 <__gtsf2+0x56>
    109c:	b8 01       	movw	r22, r16
    109e:	c7 01       	movw	r24, r14
    10a0:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fpcmp_parts_f>
    10a4:	01 c0       	rjmp	.+2      	; 0x10a8 <__gtsf2+0x58>
    10a6:	8f ef       	ldi	r24, 0xFF	; 255
    10a8:	68 96       	adiw	r28, 0x18	; 24
    10aa:	e6 e0       	ldi	r30, 0x06	; 6
    10ac:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__epilogue_restores__+0x18>

000010b0 <__gesf2>:
    10b0:	a8 e1       	ldi	r26, 0x18	; 24
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	ee e5       	ldi	r30, 0x5E	; 94
    10b6:	f8 e0       	ldi	r31, 0x08	; 8
    10b8:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__prologue_saves__+0x18>
    10bc:	69 83       	std	Y+1, r22	; 0x01
    10be:	7a 83       	std	Y+2, r23	; 0x02
    10c0:	8b 83       	std	Y+3, r24	; 0x03
    10c2:	9c 83       	std	Y+4, r25	; 0x04
    10c4:	2d 83       	std	Y+5, r18	; 0x05
    10c6:	3e 83       	std	Y+6, r19	; 0x06
    10c8:	4f 83       	std	Y+7, r20	; 0x07
    10ca:	58 87       	std	Y+8, r21	; 0x08
    10cc:	89 e0       	ldi	r24, 0x09	; 9
    10ce:	e8 2e       	mov	r14, r24
    10d0:	f1 2c       	mov	r15, r1
    10d2:	ec 0e       	add	r14, r28
    10d4:	fd 1e       	adc	r15, r29
    10d6:	b7 01       	movw	r22, r14
    10d8:	ce 01       	movw	r24, r28
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__unpack_f>
    10e0:	8e 01       	movw	r16, r28
    10e2:	0f 5e       	subi	r16, 0xEF	; 239
    10e4:	1f 4f       	sbci	r17, 0xFF	; 255
    10e6:	b8 01       	movw	r22, r16
    10e8:	ce 01       	movw	r24, r28
    10ea:	05 96       	adiw	r24, 0x05	; 5
    10ec:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__unpack_f>
    10f0:	89 85       	ldd	r24, Y+9	; 0x09
    10f2:	82 30       	cpi	r24, 0x02	; 2
    10f4:	40 f0       	brcs	.+16     	; 0x1106 <__gesf2+0x56>
    10f6:	89 89       	ldd	r24, Y+17	; 0x11
    10f8:	82 30       	cpi	r24, 0x02	; 2
    10fa:	28 f0       	brcs	.+10     	; 0x1106 <__gesf2+0x56>
    10fc:	b8 01       	movw	r22, r16
    10fe:	c7 01       	movw	r24, r14
    1100:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fpcmp_parts_f>
    1104:	01 c0       	rjmp	.+2      	; 0x1108 <__gesf2+0x58>
    1106:	8f ef       	ldi	r24, 0xFF	; 255
    1108:	68 96       	adiw	r28, 0x18	; 24
    110a:	e6 e0       	ldi	r30, 0x06	; 6
    110c:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__epilogue_restores__+0x18>

00001110 <__ltsf2>:
    1110:	a8 e1       	ldi	r26, 0x18	; 24
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	ee e8       	ldi	r30, 0x8E	; 142
    1116:	f8 e0       	ldi	r31, 0x08	; 8
    1118:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__prologue_saves__+0x18>
    111c:	69 83       	std	Y+1, r22	; 0x01
    111e:	7a 83       	std	Y+2, r23	; 0x02
    1120:	8b 83       	std	Y+3, r24	; 0x03
    1122:	9c 83       	std	Y+4, r25	; 0x04
    1124:	2d 83       	std	Y+5, r18	; 0x05
    1126:	3e 83       	std	Y+6, r19	; 0x06
    1128:	4f 83       	std	Y+7, r20	; 0x07
    112a:	58 87       	std	Y+8, r21	; 0x08
    112c:	89 e0       	ldi	r24, 0x09	; 9
    112e:	e8 2e       	mov	r14, r24
    1130:	f1 2c       	mov	r15, r1
    1132:	ec 0e       	add	r14, r28
    1134:	fd 1e       	adc	r15, r29
    1136:	b7 01       	movw	r22, r14
    1138:	ce 01       	movw	r24, r28
    113a:	01 96       	adiw	r24, 0x01	; 1
    113c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__unpack_f>
    1140:	8e 01       	movw	r16, r28
    1142:	0f 5e       	subi	r16, 0xEF	; 239
    1144:	1f 4f       	sbci	r17, 0xFF	; 255
    1146:	b8 01       	movw	r22, r16
    1148:	ce 01       	movw	r24, r28
    114a:	05 96       	adiw	r24, 0x05	; 5
    114c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__unpack_f>
    1150:	89 85       	ldd	r24, Y+9	; 0x09
    1152:	82 30       	cpi	r24, 0x02	; 2
    1154:	40 f0       	brcs	.+16     	; 0x1166 <__ltsf2+0x56>
    1156:	89 89       	ldd	r24, Y+17	; 0x11
    1158:	82 30       	cpi	r24, 0x02	; 2
    115a:	28 f0       	brcs	.+10     	; 0x1166 <__ltsf2+0x56>
    115c:	b8 01       	movw	r22, r16
    115e:	c7 01       	movw	r24, r14
    1160:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fpcmp_parts_f>
    1164:	01 c0       	rjmp	.+2      	; 0x1168 <__ltsf2+0x58>
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	68 96       	adiw	r28, 0x18	; 24
    116a:	e6 e0       	ldi	r30, 0x06	; 6
    116c:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__epilogue_restores__+0x18>

00001170 <__lesf2>:
    1170:	a8 e1       	ldi	r26, 0x18	; 24
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	ee eb       	ldi	r30, 0xBE	; 190
    1176:	f8 e0       	ldi	r31, 0x08	; 8
    1178:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__prologue_saves__+0x18>
    117c:	69 83       	std	Y+1, r22	; 0x01
    117e:	7a 83       	std	Y+2, r23	; 0x02
    1180:	8b 83       	std	Y+3, r24	; 0x03
    1182:	9c 83       	std	Y+4, r25	; 0x04
    1184:	2d 83       	std	Y+5, r18	; 0x05
    1186:	3e 83       	std	Y+6, r19	; 0x06
    1188:	4f 83       	std	Y+7, r20	; 0x07
    118a:	58 87       	std	Y+8, r21	; 0x08
    118c:	89 e0       	ldi	r24, 0x09	; 9
    118e:	e8 2e       	mov	r14, r24
    1190:	f1 2c       	mov	r15, r1
    1192:	ec 0e       	add	r14, r28
    1194:	fd 1e       	adc	r15, r29
    1196:	b7 01       	movw	r22, r14
    1198:	ce 01       	movw	r24, r28
    119a:	01 96       	adiw	r24, 0x01	; 1
    119c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__unpack_f>
    11a0:	8e 01       	movw	r16, r28
    11a2:	0f 5e       	subi	r16, 0xEF	; 239
    11a4:	1f 4f       	sbci	r17, 0xFF	; 255
    11a6:	b8 01       	movw	r22, r16
    11a8:	ce 01       	movw	r24, r28
    11aa:	05 96       	adiw	r24, 0x05	; 5
    11ac:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__unpack_f>
    11b0:	89 85       	ldd	r24, Y+9	; 0x09
    11b2:	82 30       	cpi	r24, 0x02	; 2
    11b4:	40 f0       	brcs	.+16     	; 0x11c6 <__lesf2+0x56>
    11b6:	89 89       	ldd	r24, Y+17	; 0x11
    11b8:	82 30       	cpi	r24, 0x02	; 2
    11ba:	28 f0       	brcs	.+10     	; 0x11c6 <__lesf2+0x56>
    11bc:	b8 01       	movw	r22, r16
    11be:	c7 01       	movw	r24, r14
    11c0:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fpcmp_parts_f>
    11c4:	01 c0       	rjmp	.+2      	; 0x11c8 <__lesf2+0x58>
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	68 96       	adiw	r28, 0x18	; 24
    11ca:	e6 e0       	ldi	r30, 0x06	; 6
    11cc:	0c 94 11 0c 	jmp	0x1822	; 0x1822 <__epilogue_restores__+0x18>

000011d0 <__fixsfsi>:
    11d0:	ac e0       	ldi	r26, 0x0C	; 12
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	ee ee       	ldi	r30, 0xEE	; 238
    11d6:	f8 e0       	ldi	r31, 0x08	; 8
    11d8:	0c 94 f9 0b 	jmp	0x17f2	; 0x17f2 <__prologue_saves__+0x20>
    11dc:	69 83       	std	Y+1, r22	; 0x01
    11de:	7a 83       	std	Y+2, r23	; 0x02
    11e0:	8b 83       	std	Y+3, r24	; 0x03
    11e2:	9c 83       	std	Y+4, r25	; 0x04
    11e4:	be 01       	movw	r22, r28
    11e6:	6b 5f       	subi	r22, 0xFB	; 251
    11e8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ea:	ce 01       	movw	r24, r28
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__unpack_f>
    11f2:	8d 81       	ldd	r24, Y+5	; 0x05
    11f4:	82 30       	cpi	r24, 0x02	; 2
    11f6:	61 f1       	breq	.+88     	; 0x1250 <__fixsfsi+0x80>
    11f8:	82 30       	cpi	r24, 0x02	; 2
    11fa:	50 f1       	brcs	.+84     	; 0x1250 <__fixsfsi+0x80>
    11fc:	84 30       	cpi	r24, 0x04	; 4
    11fe:	21 f4       	brne	.+8      	; 0x1208 <__fixsfsi+0x38>
    1200:	8e 81       	ldd	r24, Y+6	; 0x06
    1202:	88 23       	and	r24, r24
    1204:	51 f1       	breq	.+84     	; 0x125a <__fixsfsi+0x8a>
    1206:	2e c0       	rjmp	.+92     	; 0x1264 <__fixsfsi+0x94>
    1208:	2f 81       	ldd	r18, Y+7	; 0x07
    120a:	38 85       	ldd	r19, Y+8	; 0x08
    120c:	37 fd       	sbrc	r19, 7
    120e:	20 c0       	rjmp	.+64     	; 0x1250 <__fixsfsi+0x80>
    1210:	6e 81       	ldd	r22, Y+6	; 0x06
    1212:	2f 31       	cpi	r18, 0x1F	; 31
    1214:	31 05       	cpc	r19, r1
    1216:	1c f0       	brlt	.+6      	; 0x121e <__fixsfsi+0x4e>
    1218:	66 23       	and	r22, r22
    121a:	f9 f0       	breq	.+62     	; 0x125a <__fixsfsi+0x8a>
    121c:	23 c0       	rjmp	.+70     	; 0x1264 <__fixsfsi+0x94>
    121e:	8e e1       	ldi	r24, 0x1E	; 30
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	82 1b       	sub	r24, r18
    1224:	93 0b       	sbc	r25, r19
    1226:	29 85       	ldd	r18, Y+9	; 0x09
    1228:	3a 85       	ldd	r19, Y+10	; 0x0a
    122a:	4b 85       	ldd	r20, Y+11	; 0x0b
    122c:	5c 85       	ldd	r21, Y+12	; 0x0c
    122e:	04 c0       	rjmp	.+8      	; 0x1238 <__fixsfsi+0x68>
    1230:	56 95       	lsr	r21
    1232:	47 95       	ror	r20
    1234:	37 95       	ror	r19
    1236:	27 95       	ror	r18
    1238:	8a 95       	dec	r24
    123a:	d2 f7       	brpl	.-12     	; 0x1230 <__fixsfsi+0x60>
    123c:	66 23       	and	r22, r22
    123e:	b1 f0       	breq	.+44     	; 0x126c <__fixsfsi+0x9c>
    1240:	50 95       	com	r21
    1242:	40 95       	com	r20
    1244:	30 95       	com	r19
    1246:	21 95       	neg	r18
    1248:	3f 4f       	sbci	r19, 0xFF	; 255
    124a:	4f 4f       	sbci	r20, 0xFF	; 255
    124c:	5f 4f       	sbci	r21, 0xFF	; 255
    124e:	0e c0       	rjmp	.+28     	; 0x126c <__fixsfsi+0x9c>
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	50 e0       	ldi	r21, 0x00	; 0
    1258:	09 c0       	rjmp	.+18     	; 0x126c <__fixsfsi+0x9c>
    125a:	2f ef       	ldi	r18, 0xFF	; 255
    125c:	3f ef       	ldi	r19, 0xFF	; 255
    125e:	4f ef       	ldi	r20, 0xFF	; 255
    1260:	5f e7       	ldi	r21, 0x7F	; 127
    1262:	04 c0       	rjmp	.+8      	; 0x126c <__fixsfsi+0x9c>
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	50 e8       	ldi	r21, 0x80	; 128
    126c:	b9 01       	movw	r22, r18
    126e:	ca 01       	movw	r24, r20
    1270:	2c 96       	adiw	r28, 0x0c	; 12
    1272:	e2 e0       	ldi	r30, 0x02	; 2
    1274:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__epilogue_restores__+0x20>

00001278 <__floatunsisf>:
    1278:	a8 e0       	ldi	r26, 0x08	; 8
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e2 e4       	ldi	r30, 0x42	; 66
    127e:	f9 e0       	ldi	r31, 0x09	; 9
    1280:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <__prologue_saves__+0x14>
    1284:	7b 01       	movw	r14, r22
    1286:	8c 01       	movw	r16, r24
    1288:	61 15       	cp	r22, r1
    128a:	71 05       	cpc	r23, r1
    128c:	81 05       	cpc	r24, r1
    128e:	91 05       	cpc	r25, r1
    1290:	19 f4       	brne	.+6      	; 0x1298 <__floatunsisf+0x20>
    1292:	82 e0       	ldi	r24, 0x02	; 2
    1294:	89 83       	std	Y+1, r24	; 0x01
    1296:	60 c0       	rjmp	.+192    	; 0x1358 <__floatunsisf+0xe0>
    1298:	83 e0       	ldi	r24, 0x03	; 3
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	8e e1       	ldi	r24, 0x1E	; 30
    129e:	c8 2e       	mov	r12, r24
    12a0:	d1 2c       	mov	r13, r1
    12a2:	dc 82       	std	Y+4, r13	; 0x04
    12a4:	cb 82       	std	Y+3, r12	; 0x03
    12a6:	ed 82       	std	Y+5, r14	; 0x05
    12a8:	fe 82       	std	Y+6, r15	; 0x06
    12aa:	0f 83       	std	Y+7, r16	; 0x07
    12ac:	18 87       	std	Y+8, r17	; 0x08
    12ae:	c8 01       	movw	r24, r16
    12b0:	b7 01       	movw	r22, r14
    12b2:	0e 94 b5 09 	call	0x136a	; 0x136a <__clzsi2>
    12b6:	bc 01       	movw	r22, r24
    12b8:	61 50       	subi	r22, 0x01	; 1
    12ba:	70 40       	sbci	r23, 0x00	; 0
    12bc:	77 ff       	sbrs	r23, 7
    12be:	39 c0       	rjmp	.+114    	; 0x1332 <__floatunsisf+0xba>
    12c0:	ee 27       	eor	r30, r30
    12c2:	ff 27       	eor	r31, r31
    12c4:	e6 1b       	sub	r30, r22
    12c6:	f7 0b       	sbc	r31, r23
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	a0 e0       	ldi	r26, 0x00	; 0
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	0e 2e       	mov	r0, r30
    12da:	04 c0       	rjmp	.+8      	; 0x12e4 <__floatunsisf+0x6c>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	aa 1f       	adc	r26, r26
    12e2:	bb 1f       	adc	r27, r27
    12e4:	0a 94       	dec	r0
    12e6:	d2 f7       	brpl	.-12     	; 0x12dc <__floatunsisf+0x64>
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	a1 09       	sbc	r26, r1
    12ec:	b1 09       	sbc	r27, r1
    12ee:	8e 21       	and	r24, r14
    12f0:	9f 21       	and	r25, r15
    12f2:	a0 23       	and	r26, r16
    12f4:	b1 23       	and	r27, r17
    12f6:	00 97       	sbiw	r24, 0x00	; 0
    12f8:	a1 05       	cpc	r26, r1
    12fa:	b1 05       	cpc	r27, r1
    12fc:	21 f0       	breq	.+8      	; 0x1306 <__floatunsisf+0x8e>
    12fe:	21 e0       	ldi	r18, 0x01	; 1
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	04 c0       	rjmp	.+8      	; 0x1310 <__floatunsisf+0x98>
    1308:	16 95       	lsr	r17
    130a:	07 95       	ror	r16
    130c:	f7 94       	ror	r15
    130e:	e7 94       	ror	r14
    1310:	ea 95       	dec	r30
    1312:	d2 f7       	brpl	.-12     	; 0x1308 <__floatunsisf+0x90>
    1314:	2e 29       	or	r18, r14
    1316:	3f 29       	or	r19, r15
    1318:	40 2b       	or	r20, r16
    131a:	51 2b       	or	r21, r17
    131c:	2d 83       	std	Y+5, r18	; 0x05
    131e:	3e 83       	std	Y+6, r19	; 0x06
    1320:	4f 83       	std	Y+7, r20	; 0x07
    1322:	58 87       	std	Y+8, r21	; 0x08
    1324:	8e e1       	ldi	r24, 0x1E	; 30
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	86 1b       	sub	r24, r22
    132a:	97 0b       	sbc	r25, r23
    132c:	9c 83       	std	Y+4, r25	; 0x04
    132e:	8b 83       	std	Y+3, r24	; 0x03
    1330:	13 c0       	rjmp	.+38     	; 0x1358 <__floatunsisf+0xe0>
    1332:	61 15       	cp	r22, r1
    1334:	71 05       	cpc	r23, r1
    1336:	81 f0       	breq	.+32     	; 0x1358 <__floatunsisf+0xe0>
    1338:	06 2e       	mov	r0, r22
    133a:	04 c0       	rjmp	.+8      	; 0x1344 <__floatunsisf+0xcc>
    133c:	ee 0c       	add	r14, r14
    133e:	ff 1c       	adc	r15, r15
    1340:	00 1f       	adc	r16, r16
    1342:	11 1f       	adc	r17, r17
    1344:	0a 94       	dec	r0
    1346:	d2 f7       	brpl	.-12     	; 0x133c <__floatunsisf+0xc4>
    1348:	ed 82       	std	Y+5, r14	; 0x05
    134a:	fe 82       	std	Y+6, r15	; 0x06
    134c:	0f 83       	std	Y+7, r16	; 0x07
    134e:	18 87       	std	Y+8, r17	; 0x08
    1350:	c6 1a       	sub	r12, r22
    1352:	d7 0a       	sbc	r13, r23
    1354:	dc 82       	std	Y+4, r13	; 0x04
    1356:	cb 82       	std	Y+3, r12	; 0x03
    1358:	1a 82       	std	Y+2, r1	; 0x02
    135a:	ce 01       	movw	r24, r28
    135c:	01 96       	adiw	r24, 0x01	; 1
    135e:	0e 94 04 0a 	call	0x1408	; 0x1408 <__pack_f>
    1362:	28 96       	adiw	r28, 0x08	; 8
    1364:	e8 e0       	ldi	r30, 0x08	; 8
    1366:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__epilogue_restores__+0x14>

0000136a <__clzsi2>:
    136a:	ef 92       	push	r14
    136c:	ff 92       	push	r15
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	7b 01       	movw	r14, r22
    1374:	8c 01       	movw	r16, r24
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	e8 16       	cp	r14, r24
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	f8 06       	cpc	r15, r24
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	08 07       	cpc	r16, r24
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	18 07       	cpc	r17, r24
    1386:	88 f4       	brcc	.+34     	; 0x13aa <__clzsi2+0x40>
    1388:	8f ef       	ldi	r24, 0xFF	; 255
    138a:	e8 16       	cp	r14, r24
    138c:	f1 04       	cpc	r15, r1
    138e:	01 05       	cpc	r16, r1
    1390:	11 05       	cpc	r17, r1
    1392:	31 f0       	breq	.+12     	; 0x13a0 <__clzsi2+0x36>
    1394:	28 f0       	brcs	.+10     	; 0x13a0 <__clzsi2+0x36>
    1396:	88 e0       	ldi	r24, 0x08	; 8
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a0 e0       	ldi	r26, 0x00	; 0
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	17 c0       	rjmp	.+46     	; 0x13ce <__clzsi2+0x64>
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	a0 e0       	ldi	r26, 0x00	; 0
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	12 c0       	rjmp	.+36     	; 0x13ce <__clzsi2+0x64>
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	e8 16       	cp	r14, r24
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	f8 06       	cpc	r15, r24
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	08 07       	cpc	r16, r24
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	18 07       	cpc	r17, r24
    13ba:	28 f0       	brcs	.+10     	; 0x13c6 <__clzsi2+0x5c>
    13bc:	88 e1       	ldi	r24, 0x18	; 24
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	a0 e0       	ldi	r26, 0x00	; 0
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	04 c0       	rjmp	.+8      	; 0x13ce <__clzsi2+0x64>
    13c6:	80 e1       	ldi	r24, 0x10	; 16
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	a0 e0       	ldi	r26, 0x00	; 0
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	20 e2       	ldi	r18, 0x20	; 32
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	50 e0       	ldi	r21, 0x00	; 0
    13d6:	28 1b       	sub	r18, r24
    13d8:	39 0b       	sbc	r19, r25
    13da:	4a 0b       	sbc	r20, r26
    13dc:	5b 0b       	sbc	r21, r27
    13de:	04 c0       	rjmp	.+8      	; 0x13e8 <__clzsi2+0x7e>
    13e0:	16 95       	lsr	r17
    13e2:	07 95       	ror	r16
    13e4:	f7 94       	ror	r15
    13e6:	e7 94       	ror	r14
    13e8:	8a 95       	dec	r24
    13ea:	d2 f7       	brpl	.-12     	; 0x13e0 <__clzsi2+0x76>
    13ec:	f7 01       	movw	r30, r14
    13ee:	e8 5f       	subi	r30, 0xF8	; 248
    13f0:	fe 4f       	sbci	r31, 0xFE	; 254
    13f2:	80 81       	ld	r24, Z
    13f4:	28 1b       	sub	r18, r24
    13f6:	31 09       	sbc	r19, r1
    13f8:	41 09       	sbc	r20, r1
    13fa:	51 09       	sbc	r21, r1
    13fc:	c9 01       	movw	r24, r18
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	ff 90       	pop	r15
    1404:	ef 90       	pop	r14
    1406:	08 95       	ret

00001408 <__pack_f>:
    1408:	df 92       	push	r13
    140a:	ef 92       	push	r14
    140c:	ff 92       	push	r15
    140e:	0f 93       	push	r16
    1410:	1f 93       	push	r17
    1412:	fc 01       	movw	r30, r24
    1414:	e4 80       	ldd	r14, Z+4	; 0x04
    1416:	f5 80       	ldd	r15, Z+5	; 0x05
    1418:	06 81       	ldd	r16, Z+6	; 0x06
    141a:	17 81       	ldd	r17, Z+7	; 0x07
    141c:	d1 80       	ldd	r13, Z+1	; 0x01
    141e:	80 81       	ld	r24, Z
    1420:	82 30       	cpi	r24, 0x02	; 2
    1422:	48 f4       	brcc	.+18     	; 0x1436 <__pack_f+0x2e>
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	a0 e1       	ldi	r26, 0x10	; 16
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e8 2a       	or	r14, r24
    142e:	f9 2a       	or	r15, r25
    1430:	0a 2b       	or	r16, r26
    1432:	1b 2b       	or	r17, r27
    1434:	a5 c0       	rjmp	.+330    	; 0x1580 <__pack_f+0x178>
    1436:	84 30       	cpi	r24, 0x04	; 4
    1438:	09 f4       	brne	.+2      	; 0x143c <__pack_f+0x34>
    143a:	9f c0       	rjmp	.+318    	; 0x157a <__pack_f+0x172>
    143c:	82 30       	cpi	r24, 0x02	; 2
    143e:	21 f4       	brne	.+8      	; 0x1448 <__pack_f+0x40>
    1440:	ee 24       	eor	r14, r14
    1442:	ff 24       	eor	r15, r15
    1444:	87 01       	movw	r16, r14
    1446:	05 c0       	rjmp	.+10     	; 0x1452 <__pack_f+0x4a>
    1448:	e1 14       	cp	r14, r1
    144a:	f1 04       	cpc	r15, r1
    144c:	01 05       	cpc	r16, r1
    144e:	11 05       	cpc	r17, r1
    1450:	19 f4       	brne	.+6      	; 0x1458 <__pack_f+0x50>
    1452:	e0 e0       	ldi	r30, 0x00	; 0
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	96 c0       	rjmp	.+300    	; 0x1584 <__pack_f+0x17c>
    1458:	62 81       	ldd	r22, Z+2	; 0x02
    145a:	73 81       	ldd	r23, Z+3	; 0x03
    145c:	9f ef       	ldi	r25, 0xFF	; 255
    145e:	62 38       	cpi	r22, 0x82	; 130
    1460:	79 07       	cpc	r23, r25
    1462:	0c f0       	brlt	.+2      	; 0x1466 <__pack_f+0x5e>
    1464:	5b c0       	rjmp	.+182    	; 0x151c <__pack_f+0x114>
    1466:	22 e8       	ldi	r18, 0x82	; 130
    1468:	3f ef       	ldi	r19, 0xFF	; 255
    146a:	26 1b       	sub	r18, r22
    146c:	37 0b       	sbc	r19, r23
    146e:	2a 31       	cpi	r18, 0x1A	; 26
    1470:	31 05       	cpc	r19, r1
    1472:	2c f0       	brlt	.+10     	; 0x147e <__pack_f+0x76>
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	40 e0       	ldi	r20, 0x00	; 0
    147a:	50 e0       	ldi	r21, 0x00	; 0
    147c:	2a c0       	rjmp	.+84     	; 0x14d2 <__pack_f+0xca>
    147e:	b8 01       	movw	r22, r16
    1480:	a7 01       	movw	r20, r14
    1482:	02 2e       	mov	r0, r18
    1484:	04 c0       	rjmp	.+8      	; 0x148e <__pack_f+0x86>
    1486:	76 95       	lsr	r23
    1488:	67 95       	ror	r22
    148a:	57 95       	ror	r21
    148c:	47 95       	ror	r20
    148e:	0a 94       	dec	r0
    1490:	d2 f7       	brpl	.-12     	; 0x1486 <__pack_f+0x7e>
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	a0 e0       	ldi	r26, 0x00	; 0
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	04 c0       	rjmp	.+8      	; 0x14a4 <__pack_f+0x9c>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	aa 1f       	adc	r26, r26
    14a2:	bb 1f       	adc	r27, r27
    14a4:	2a 95       	dec	r18
    14a6:	d2 f7       	brpl	.-12     	; 0x149c <__pack_f+0x94>
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	a1 09       	sbc	r26, r1
    14ac:	b1 09       	sbc	r27, r1
    14ae:	8e 21       	and	r24, r14
    14b0:	9f 21       	and	r25, r15
    14b2:	a0 23       	and	r26, r16
    14b4:	b1 23       	and	r27, r17
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	a1 05       	cpc	r26, r1
    14ba:	b1 05       	cpc	r27, r1
    14bc:	21 f0       	breq	.+8      	; 0x14c6 <__pack_f+0xbe>
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	a0 e0       	ldi	r26, 0x00	; 0
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	9a 01       	movw	r18, r20
    14c8:	ab 01       	movw	r20, r22
    14ca:	28 2b       	or	r18, r24
    14cc:	39 2b       	or	r19, r25
    14ce:	4a 2b       	or	r20, r26
    14d0:	5b 2b       	or	r21, r27
    14d2:	da 01       	movw	r26, r20
    14d4:	c9 01       	movw	r24, r18
    14d6:	8f 77       	andi	r24, 0x7F	; 127
    14d8:	90 70       	andi	r25, 0x00	; 0
    14da:	a0 70       	andi	r26, 0x00	; 0
    14dc:	b0 70       	andi	r27, 0x00	; 0
    14de:	80 34       	cpi	r24, 0x40	; 64
    14e0:	91 05       	cpc	r25, r1
    14e2:	a1 05       	cpc	r26, r1
    14e4:	b1 05       	cpc	r27, r1
    14e6:	39 f4       	brne	.+14     	; 0x14f6 <__pack_f+0xee>
    14e8:	27 ff       	sbrs	r18, 7
    14ea:	09 c0       	rjmp	.+18     	; 0x14fe <__pack_f+0xf6>
    14ec:	20 5c       	subi	r18, 0xC0	; 192
    14ee:	3f 4f       	sbci	r19, 0xFF	; 255
    14f0:	4f 4f       	sbci	r20, 0xFF	; 255
    14f2:	5f 4f       	sbci	r21, 0xFF	; 255
    14f4:	04 c0       	rjmp	.+8      	; 0x14fe <__pack_f+0xf6>
    14f6:	21 5c       	subi	r18, 0xC1	; 193
    14f8:	3f 4f       	sbci	r19, 0xFF	; 255
    14fa:	4f 4f       	sbci	r20, 0xFF	; 255
    14fc:	5f 4f       	sbci	r21, 0xFF	; 255
    14fe:	e0 e0       	ldi	r30, 0x00	; 0
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	20 30       	cpi	r18, 0x00	; 0
    1504:	a0 e0       	ldi	r26, 0x00	; 0
    1506:	3a 07       	cpc	r19, r26
    1508:	a0 e0       	ldi	r26, 0x00	; 0
    150a:	4a 07       	cpc	r20, r26
    150c:	a0 e4       	ldi	r26, 0x40	; 64
    150e:	5a 07       	cpc	r21, r26
    1510:	10 f0       	brcs	.+4      	; 0x1516 <__pack_f+0x10e>
    1512:	e1 e0       	ldi	r30, 0x01	; 1
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	79 01       	movw	r14, r18
    1518:	8a 01       	movw	r16, r20
    151a:	27 c0       	rjmp	.+78     	; 0x156a <__pack_f+0x162>
    151c:	60 38       	cpi	r22, 0x80	; 128
    151e:	71 05       	cpc	r23, r1
    1520:	64 f5       	brge	.+88     	; 0x157a <__pack_f+0x172>
    1522:	fb 01       	movw	r30, r22
    1524:	e1 58       	subi	r30, 0x81	; 129
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	d8 01       	movw	r26, r16
    152a:	c7 01       	movw	r24, r14
    152c:	8f 77       	andi	r24, 0x7F	; 127
    152e:	90 70       	andi	r25, 0x00	; 0
    1530:	a0 70       	andi	r26, 0x00	; 0
    1532:	b0 70       	andi	r27, 0x00	; 0
    1534:	80 34       	cpi	r24, 0x40	; 64
    1536:	91 05       	cpc	r25, r1
    1538:	a1 05       	cpc	r26, r1
    153a:	b1 05       	cpc	r27, r1
    153c:	39 f4       	brne	.+14     	; 0x154c <__pack_f+0x144>
    153e:	e7 fe       	sbrs	r14, 7
    1540:	0d c0       	rjmp	.+26     	; 0x155c <__pack_f+0x154>
    1542:	80 e4       	ldi	r24, 0x40	; 64
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	a0 e0       	ldi	r26, 0x00	; 0
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <__pack_f+0x14c>
    154c:	8f e3       	ldi	r24, 0x3F	; 63
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	a0 e0       	ldi	r26, 0x00	; 0
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e8 0e       	add	r14, r24
    1556:	f9 1e       	adc	r15, r25
    1558:	0a 1f       	adc	r16, r26
    155a:	1b 1f       	adc	r17, r27
    155c:	17 ff       	sbrs	r17, 7
    155e:	05 c0       	rjmp	.+10     	; 0x156a <__pack_f+0x162>
    1560:	16 95       	lsr	r17
    1562:	07 95       	ror	r16
    1564:	f7 94       	ror	r15
    1566:	e7 94       	ror	r14
    1568:	31 96       	adiw	r30, 0x01	; 1
    156a:	87 e0       	ldi	r24, 0x07	; 7
    156c:	16 95       	lsr	r17
    156e:	07 95       	ror	r16
    1570:	f7 94       	ror	r15
    1572:	e7 94       	ror	r14
    1574:	8a 95       	dec	r24
    1576:	d1 f7       	brne	.-12     	; 0x156c <__pack_f+0x164>
    1578:	05 c0       	rjmp	.+10     	; 0x1584 <__pack_f+0x17c>
    157a:	ee 24       	eor	r14, r14
    157c:	ff 24       	eor	r15, r15
    157e:	87 01       	movw	r16, r14
    1580:	ef ef       	ldi	r30, 0xFF	; 255
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	6e 2f       	mov	r22, r30
    1586:	67 95       	ror	r22
    1588:	66 27       	eor	r22, r22
    158a:	67 95       	ror	r22
    158c:	90 2f       	mov	r25, r16
    158e:	9f 77       	andi	r25, 0x7F	; 127
    1590:	d7 94       	ror	r13
    1592:	dd 24       	eor	r13, r13
    1594:	d7 94       	ror	r13
    1596:	8e 2f       	mov	r24, r30
    1598:	86 95       	lsr	r24
    159a:	49 2f       	mov	r20, r25
    159c:	46 2b       	or	r20, r22
    159e:	58 2f       	mov	r21, r24
    15a0:	5d 29       	or	r21, r13
    15a2:	b7 01       	movw	r22, r14
    15a4:	ca 01       	movw	r24, r20
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	ff 90       	pop	r15
    15ac:	ef 90       	pop	r14
    15ae:	df 90       	pop	r13
    15b0:	08 95       	ret

000015b2 <__unpack_f>:
    15b2:	fc 01       	movw	r30, r24
    15b4:	db 01       	movw	r26, r22
    15b6:	40 81       	ld	r20, Z
    15b8:	51 81       	ldd	r21, Z+1	; 0x01
    15ba:	22 81       	ldd	r18, Z+2	; 0x02
    15bc:	62 2f       	mov	r22, r18
    15be:	6f 77       	andi	r22, 0x7F	; 127
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	22 1f       	adc	r18, r18
    15c4:	22 27       	eor	r18, r18
    15c6:	22 1f       	adc	r18, r18
    15c8:	93 81       	ldd	r25, Z+3	; 0x03
    15ca:	89 2f       	mov	r24, r25
    15cc:	88 0f       	add	r24, r24
    15ce:	82 2b       	or	r24, r18
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	99 1f       	adc	r25, r25
    15d6:	99 27       	eor	r25, r25
    15d8:	99 1f       	adc	r25, r25
    15da:	11 96       	adiw	r26, 0x01	; 1
    15dc:	9c 93       	st	X, r25
    15de:	11 97       	sbiw	r26, 0x01	; 1
    15e0:	21 15       	cp	r18, r1
    15e2:	31 05       	cpc	r19, r1
    15e4:	a9 f5       	brne	.+106    	; 0x1650 <__unpack_f+0x9e>
    15e6:	41 15       	cp	r20, r1
    15e8:	51 05       	cpc	r21, r1
    15ea:	61 05       	cpc	r22, r1
    15ec:	71 05       	cpc	r23, r1
    15ee:	11 f4       	brne	.+4      	; 0x15f4 <__unpack_f+0x42>
    15f0:	82 e0       	ldi	r24, 0x02	; 2
    15f2:	37 c0       	rjmp	.+110    	; 0x1662 <__unpack_f+0xb0>
    15f4:	82 e8       	ldi	r24, 0x82	; 130
    15f6:	9f ef       	ldi	r25, 0xFF	; 255
    15f8:	13 96       	adiw	r26, 0x03	; 3
    15fa:	9c 93       	st	X, r25
    15fc:	8e 93       	st	-X, r24
    15fe:	12 97       	sbiw	r26, 0x02	; 2
    1600:	9a 01       	movw	r18, r20
    1602:	ab 01       	movw	r20, r22
    1604:	67 e0       	ldi	r22, 0x07	; 7
    1606:	22 0f       	add	r18, r18
    1608:	33 1f       	adc	r19, r19
    160a:	44 1f       	adc	r20, r20
    160c:	55 1f       	adc	r21, r21
    160e:	6a 95       	dec	r22
    1610:	d1 f7       	brne	.-12     	; 0x1606 <__unpack_f+0x54>
    1612:	83 e0       	ldi	r24, 0x03	; 3
    1614:	8c 93       	st	X, r24
    1616:	0d c0       	rjmp	.+26     	; 0x1632 <__unpack_f+0x80>
    1618:	22 0f       	add	r18, r18
    161a:	33 1f       	adc	r19, r19
    161c:	44 1f       	adc	r20, r20
    161e:	55 1f       	adc	r21, r21
    1620:	12 96       	adiw	r26, 0x02	; 2
    1622:	8d 91       	ld	r24, X+
    1624:	9c 91       	ld	r25, X
    1626:	13 97       	sbiw	r26, 0x03	; 3
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	13 96       	adiw	r26, 0x03	; 3
    162c:	9c 93       	st	X, r25
    162e:	8e 93       	st	-X, r24
    1630:	12 97       	sbiw	r26, 0x02	; 2
    1632:	20 30       	cpi	r18, 0x00	; 0
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	38 07       	cpc	r19, r24
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	48 07       	cpc	r20, r24
    163c:	80 e4       	ldi	r24, 0x40	; 64
    163e:	58 07       	cpc	r21, r24
    1640:	58 f3       	brcs	.-42     	; 0x1618 <__unpack_f+0x66>
    1642:	14 96       	adiw	r26, 0x04	; 4
    1644:	2d 93       	st	X+, r18
    1646:	3d 93       	st	X+, r19
    1648:	4d 93       	st	X+, r20
    164a:	5c 93       	st	X, r21
    164c:	17 97       	sbiw	r26, 0x07	; 7
    164e:	08 95       	ret
    1650:	2f 3f       	cpi	r18, 0xFF	; 255
    1652:	31 05       	cpc	r19, r1
    1654:	79 f4       	brne	.+30     	; 0x1674 <__unpack_f+0xc2>
    1656:	41 15       	cp	r20, r1
    1658:	51 05       	cpc	r21, r1
    165a:	61 05       	cpc	r22, r1
    165c:	71 05       	cpc	r23, r1
    165e:	19 f4       	brne	.+6      	; 0x1666 <__unpack_f+0xb4>
    1660:	84 e0       	ldi	r24, 0x04	; 4
    1662:	8c 93       	st	X, r24
    1664:	08 95       	ret
    1666:	64 ff       	sbrs	r22, 4
    1668:	03 c0       	rjmp	.+6      	; 0x1670 <__unpack_f+0xbe>
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	8c 93       	st	X, r24
    166e:	12 c0       	rjmp	.+36     	; 0x1694 <__unpack_f+0xe2>
    1670:	1c 92       	st	X, r1
    1672:	10 c0       	rjmp	.+32     	; 0x1694 <__unpack_f+0xe2>
    1674:	2f 57       	subi	r18, 0x7F	; 127
    1676:	30 40       	sbci	r19, 0x00	; 0
    1678:	13 96       	adiw	r26, 0x03	; 3
    167a:	3c 93       	st	X, r19
    167c:	2e 93       	st	-X, r18
    167e:	12 97       	sbiw	r26, 0x02	; 2
    1680:	83 e0       	ldi	r24, 0x03	; 3
    1682:	8c 93       	st	X, r24
    1684:	87 e0       	ldi	r24, 0x07	; 7
    1686:	44 0f       	add	r20, r20
    1688:	55 1f       	adc	r21, r21
    168a:	66 1f       	adc	r22, r22
    168c:	77 1f       	adc	r23, r23
    168e:	8a 95       	dec	r24
    1690:	d1 f7       	brne	.-12     	; 0x1686 <__unpack_f+0xd4>
    1692:	70 64       	ori	r23, 0x40	; 64
    1694:	14 96       	adiw	r26, 0x04	; 4
    1696:	4d 93       	st	X+, r20
    1698:	5d 93       	st	X+, r21
    169a:	6d 93       	st	X+, r22
    169c:	7c 93       	st	X, r23
    169e:	17 97       	sbiw	r26, 0x07	; 7
    16a0:	08 95       	ret

000016a2 <__fpcmp_parts_f>:
    16a2:	1f 93       	push	r17
    16a4:	dc 01       	movw	r26, r24
    16a6:	fb 01       	movw	r30, r22
    16a8:	9c 91       	ld	r25, X
    16aa:	92 30       	cpi	r25, 0x02	; 2
    16ac:	08 f4       	brcc	.+2      	; 0x16b0 <__fpcmp_parts_f+0xe>
    16ae:	47 c0       	rjmp	.+142    	; 0x173e <__fpcmp_parts_f+0x9c>
    16b0:	80 81       	ld	r24, Z
    16b2:	82 30       	cpi	r24, 0x02	; 2
    16b4:	08 f4       	brcc	.+2      	; 0x16b8 <__fpcmp_parts_f+0x16>
    16b6:	43 c0       	rjmp	.+134    	; 0x173e <__fpcmp_parts_f+0x9c>
    16b8:	94 30       	cpi	r25, 0x04	; 4
    16ba:	51 f4       	brne	.+20     	; 0x16d0 <__fpcmp_parts_f+0x2e>
    16bc:	11 96       	adiw	r26, 0x01	; 1
    16be:	1c 91       	ld	r17, X
    16c0:	84 30       	cpi	r24, 0x04	; 4
    16c2:	99 f5       	brne	.+102    	; 0x172a <__fpcmp_parts_f+0x88>
    16c4:	81 81       	ldd	r24, Z+1	; 0x01
    16c6:	68 2f       	mov	r22, r24
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	61 1b       	sub	r22, r17
    16cc:	71 09       	sbc	r23, r1
    16ce:	3f c0       	rjmp	.+126    	; 0x174e <__fpcmp_parts_f+0xac>
    16d0:	84 30       	cpi	r24, 0x04	; 4
    16d2:	21 f0       	breq	.+8      	; 0x16dc <__fpcmp_parts_f+0x3a>
    16d4:	92 30       	cpi	r25, 0x02	; 2
    16d6:	31 f4       	brne	.+12     	; 0x16e4 <__fpcmp_parts_f+0x42>
    16d8:	82 30       	cpi	r24, 0x02	; 2
    16da:	b9 f1       	breq	.+110    	; 0x174a <__fpcmp_parts_f+0xa8>
    16dc:	81 81       	ldd	r24, Z+1	; 0x01
    16de:	88 23       	and	r24, r24
    16e0:	89 f1       	breq	.+98     	; 0x1744 <__fpcmp_parts_f+0xa2>
    16e2:	2d c0       	rjmp	.+90     	; 0x173e <__fpcmp_parts_f+0x9c>
    16e4:	11 96       	adiw	r26, 0x01	; 1
    16e6:	1c 91       	ld	r17, X
    16e8:	11 97       	sbiw	r26, 0x01	; 1
    16ea:	82 30       	cpi	r24, 0x02	; 2
    16ec:	f1 f0       	breq	.+60     	; 0x172a <__fpcmp_parts_f+0x88>
    16ee:	81 81       	ldd	r24, Z+1	; 0x01
    16f0:	18 17       	cp	r17, r24
    16f2:	d9 f4       	brne	.+54     	; 0x172a <__fpcmp_parts_f+0x88>
    16f4:	12 96       	adiw	r26, 0x02	; 2
    16f6:	2d 91       	ld	r18, X+
    16f8:	3c 91       	ld	r19, X
    16fa:	13 97       	sbiw	r26, 0x03	; 3
    16fc:	82 81       	ldd	r24, Z+2	; 0x02
    16fe:	93 81       	ldd	r25, Z+3	; 0x03
    1700:	82 17       	cp	r24, r18
    1702:	93 07       	cpc	r25, r19
    1704:	94 f0       	brlt	.+36     	; 0x172a <__fpcmp_parts_f+0x88>
    1706:	28 17       	cp	r18, r24
    1708:	39 07       	cpc	r19, r25
    170a:	bc f0       	brlt	.+46     	; 0x173a <__fpcmp_parts_f+0x98>
    170c:	14 96       	adiw	r26, 0x04	; 4
    170e:	8d 91       	ld	r24, X+
    1710:	9d 91       	ld	r25, X+
    1712:	0d 90       	ld	r0, X+
    1714:	bc 91       	ld	r27, X
    1716:	a0 2d       	mov	r26, r0
    1718:	24 81       	ldd	r18, Z+4	; 0x04
    171a:	35 81       	ldd	r19, Z+5	; 0x05
    171c:	46 81       	ldd	r20, Z+6	; 0x06
    171e:	57 81       	ldd	r21, Z+7	; 0x07
    1720:	28 17       	cp	r18, r24
    1722:	39 07       	cpc	r19, r25
    1724:	4a 07       	cpc	r20, r26
    1726:	5b 07       	cpc	r21, r27
    1728:	18 f4       	brcc	.+6      	; 0x1730 <__fpcmp_parts_f+0x8e>
    172a:	11 23       	and	r17, r17
    172c:	41 f0       	breq	.+16     	; 0x173e <__fpcmp_parts_f+0x9c>
    172e:	0a c0       	rjmp	.+20     	; 0x1744 <__fpcmp_parts_f+0xa2>
    1730:	82 17       	cp	r24, r18
    1732:	93 07       	cpc	r25, r19
    1734:	a4 07       	cpc	r26, r20
    1736:	b5 07       	cpc	r27, r21
    1738:	40 f4       	brcc	.+16     	; 0x174a <__fpcmp_parts_f+0xa8>
    173a:	11 23       	and	r17, r17
    173c:	19 f0       	breq	.+6      	; 0x1744 <__fpcmp_parts_f+0xa2>
    173e:	61 e0       	ldi	r22, 0x01	; 1
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	05 c0       	rjmp	.+10     	; 0x174e <__fpcmp_parts_f+0xac>
    1744:	6f ef       	ldi	r22, 0xFF	; 255
    1746:	7f ef       	ldi	r23, 0xFF	; 255
    1748:	02 c0       	rjmp	.+4      	; 0x174e <__fpcmp_parts_f+0xac>
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	cb 01       	movw	r24, r22
    1750:	1f 91       	pop	r17
    1752:	08 95       	ret

00001754 <__eerd_word>:
    1754:	df 92       	push	r13
    1756:	ef 92       	push	r14
    1758:	ff 92       	push	r15
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	7b 01       	movw	r14, r22
    1760:	8c 01       	movw	r16, r24
    1762:	fb 01       	movw	r30, r22
    1764:	09 95       	icall
    1766:	d8 2e       	mov	r13, r24
    1768:	c8 01       	movw	r24, r16
    176a:	01 96       	adiw	r24, 0x01	; 1
    176c:	f7 01       	movw	r30, r14
    176e:	09 95       	icall
    1770:	98 2f       	mov	r25, r24
    1772:	8d 2d       	mov	r24, r13
    1774:	1f 91       	pop	r17
    1776:	0f 91       	pop	r16
    1778:	ff 90       	pop	r15
    177a:	ef 90       	pop	r14
    177c:	df 90       	pop	r13
    177e:	08 95       	ret

00001780 <__eewr_word>:
    1780:	df 92       	push	r13
    1782:	ef 92       	push	r14
    1784:	ff 92       	push	r15
    1786:	0f 93       	push	r16
    1788:	1f 93       	push	r17
    178a:	d7 2e       	mov	r13, r23
    178c:	7a 01       	movw	r14, r20
    178e:	8c 01       	movw	r16, r24
    1790:	fa 01       	movw	r30, r20
    1792:	09 95       	icall
    1794:	6d 2d       	mov	r22, r13
    1796:	c8 01       	movw	r24, r16
    1798:	01 96       	adiw	r24, 0x01	; 1
    179a:	f7 01       	movw	r30, r14
    179c:	09 95       	icall
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	df 90       	pop	r13
    17a8:	08 95       	ret

000017aa <__udivmodhi4>:
    17aa:	aa 1b       	sub	r26, r26
    17ac:	bb 1b       	sub	r27, r27
    17ae:	51 e1       	ldi	r21, 0x11	; 17
    17b0:	07 c0       	rjmp	.+14     	; 0x17c0 <__udivmodhi4_ep>

000017b2 <__udivmodhi4_loop>:
    17b2:	aa 1f       	adc	r26, r26
    17b4:	bb 1f       	adc	r27, r27
    17b6:	a6 17       	cp	r26, r22
    17b8:	b7 07       	cpc	r27, r23
    17ba:	10 f0       	brcs	.+4      	; 0x17c0 <__udivmodhi4_ep>
    17bc:	a6 1b       	sub	r26, r22
    17be:	b7 0b       	sbc	r27, r23

000017c0 <__udivmodhi4_ep>:
    17c0:	88 1f       	adc	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	5a 95       	dec	r21
    17c6:	a9 f7       	brne	.-22     	; 0x17b2 <__udivmodhi4_loop>
    17c8:	80 95       	com	r24
    17ca:	90 95       	com	r25
    17cc:	bc 01       	movw	r22, r24
    17ce:	cd 01       	movw	r24, r26
    17d0:	08 95       	ret

000017d2 <__prologue_saves__>:
    17d2:	2f 92       	push	r2
    17d4:	3f 92       	push	r3
    17d6:	4f 92       	push	r4
    17d8:	5f 92       	push	r5
    17da:	6f 92       	push	r6
    17dc:	7f 92       	push	r7
    17de:	8f 92       	push	r8
    17e0:	9f 92       	push	r9
    17e2:	af 92       	push	r10
    17e4:	bf 92       	push	r11
    17e6:	cf 92       	push	r12
    17e8:	df 92       	push	r13
    17ea:	ef 92       	push	r14
    17ec:	ff 92       	push	r15
    17ee:	0f 93       	push	r16
    17f0:	1f 93       	push	r17
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	ca 1b       	sub	r28, r26
    17fc:	db 0b       	sbc	r29, r27
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
    1808:	09 94       	ijmp

0000180a <__epilogue_restores__>:
    180a:	2a 88       	ldd	r2, Y+18	; 0x12
    180c:	39 88       	ldd	r3, Y+17	; 0x11
    180e:	48 88       	ldd	r4, Y+16	; 0x10
    1810:	5f 84       	ldd	r5, Y+15	; 0x0f
    1812:	6e 84       	ldd	r6, Y+14	; 0x0e
    1814:	7d 84       	ldd	r7, Y+13	; 0x0d
    1816:	8c 84       	ldd	r8, Y+12	; 0x0c
    1818:	9b 84       	ldd	r9, Y+11	; 0x0b
    181a:	aa 84       	ldd	r10, Y+10	; 0x0a
    181c:	b9 84       	ldd	r11, Y+9	; 0x09
    181e:	c8 84       	ldd	r12, Y+8	; 0x08
    1820:	df 80       	ldd	r13, Y+7	; 0x07
    1822:	ee 80       	ldd	r14, Y+6	; 0x06
    1824:	fd 80       	ldd	r15, Y+5	; 0x05
    1826:	0c 81       	ldd	r16, Y+4	; 0x04
    1828:	1b 81       	ldd	r17, Y+3	; 0x03
    182a:	aa 81       	ldd	r26, Y+2	; 0x02
    182c:	b9 81       	ldd	r27, Y+1	; 0x01
    182e:	ce 0f       	add	r28, r30
    1830:	d1 1d       	adc	r29, r1
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	ed 01       	movw	r28, r26
    183e:	08 95       	ret

00001840 <_exit>:
    1840:	f8 94       	cli

00001842 <__stop_program>:
    1842:	ff cf       	rjmp	.-2      	; 0x1842 <__stop_program>
