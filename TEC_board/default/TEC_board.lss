
TEC_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000017a2  00001836  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  00800168  000018aa  0000193e  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  0000193e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  00001941  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000215  00000000  00000000  00001961  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d06  00000000  00000000  00001b76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000366  00000000  00000000  0000287c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc5  00000000  00000000  00002be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000037a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ee  00000000  00000000  00003928  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000693  00000000  00000000  00003c16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  000042a9  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <main>
      8a:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
      92:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
      94:	e1 99       	sbic	0x1c, 1	; 28
      96:	fe cf       	rjmp	.-4      	; 0x94 <eeprom_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
      98:	3f bb       	out	0x1f, r19	; 31
      9a:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
      9c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
      9e:	8d b3       	in	r24, 0x1d	; 29
}
      a0:	08 95       	ret

000000a2 <eeprom_write_byte>:

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
      a2:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
      a4:	e1 99       	sbic	0x1c, 1	; 28
      a6:	fe cf       	rjmp	.-4      	; 0xa4 <eeprom_write_byte+0x2>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
      a8:	3f bb       	out	0x1f, r19	; 31
      aa:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
      ac:	6d bb       	out	0x1d, r22	; 29

    __asm__ __volatile__ (
      ae:	0f b6       	in	r0, 0x3f	; 63
      b0:	f8 94       	cli
      b2:	e2 9a       	sbi	0x1c, 2	; 28
      b4:	e1 9a       	sbi	0x1c, 1	; 28
      b6:	0f be       	out	0x3f, r0	; 63
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
}
      b8:	08 95       	ret

000000ba <uartInit>:

//------------------------------------------------------------------------------------
//UART

void uartInit(void)
{
      ba:	10 bc       	out	0x20, r1	; 32
	UBRRH = (BAUD_PRESCALE >> 8);		// Init UART baudrate
	UBRRL = BAUD_PRESCALE;
      bc:	83 e3       	ldi	r24, 0x33	; 51
      be:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1<<RXEN)|(1<<TXEN)|(1 << RXCIE);	// TX, RX enable, RX interrupt enable
      c0:	88 e9       	ldi	r24, 0x98	; 152
      c2:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
      c4:	86 e8       	ldi	r24, 0x86	; 134
      c6:	80 bd       	out	0x20, r24	; 32
	return;
}
      c8:	08 95       	ret

000000ca <uartTransmitByte>:

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
      ca:	5d 9b       	sbis	0x0b, 5	; 11
      cc:	fe cf       	rjmp	.-4      	; 0xca <uartTransmitByte>
	while ( !( UCSRA & (1<<UDRE)) );
	UDR = data;
      ce:	8c b9       	out	0x0c, r24	; 12
	return;
}
      d0:	08 95       	ret

000000d2 <uartReceiveByte>:

//Receive byte thought UART
unsigned char uartReceiveByte (void)
{
      d2:	5f 9b       	sbis	0x0b, 7	; 11
      d4:	fe cf       	rjmp	.-4      	; 0xd2 <uartReceiveByte>

	while ( !(UCSRA & (1<<RXC)) )
	;
	return UDR;
      d6:	8c b1       	in	r24, 0x0c	; 12
}
      d8:	08 95       	ret

000000da <uartTransmitMessage>:

//Transmit string to UART
void uartTransmitMessage(char* msg)
{ unsigned char i;
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	04 c0       	rjmp	.+8      	; 0xe6 <uartTransmitMessage+0xc>
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
      de:	5d 9b       	sbis	0x0b, 5	; 11
      e0:	fe cf       	rjmp	.-4      	; 0xde <uartTransmitMessage+0x4>
	UDR = data;
      e2:	ec b9       	out	0x0c, r30	; 12
	i=0;

	while ((i<256)&(msg[i]!=0x00) )
	{
		uartTransmitByte(msg[i]);
		i++;
      e4:	2f 5f       	subi	r18, 0xFF	; 255
//Transmit string to UART
void uartTransmitMessage(char* msg)
{ unsigned char i;
	i=0;

	while ((i<256)&(msg[i]!=0x00) )
      e6:	fc 01       	movw	r30, r24
      e8:	e2 0f       	add	r30, r18
      ea:	f1 1d       	adc	r31, r1
      ec:	e0 81       	ld	r30, Z
      ee:	ee 23       	and	r30, r30
      f0:	b1 f7       	brne	.-20     	; 0xde <uartTransmitMessage+0x4>
	{
		uartTransmitByte(msg[i]);
		i++;
	}
	return;
}
      f2:	08 95       	ret

000000f4 <initPWM>:

//------------------------------------------------------------------------------------
//PWM

void initPWM (void)
{
      f4:	95 98       	cbi	0x12, 5	; 18
	TEC_PORT&=~(1<<TEC_PIN);
	TEC_DDR|=(1<<TEC_PIN);
      f6:	8d 9a       	sbi	0x11, 5	; 17

	TCCR1A|=(1<<WGM10);
      f8:	8f b5       	in	r24, 0x2f	; 47
      fa:	81 60       	ori	r24, 0x01	; 1
      fc:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM12)|(1<<CS10);
      fe:	8e b5       	in	r24, 0x2e	; 46
     100:	89 60       	ori	r24, 0x09	; 9
     102:	8e bd       	out	0x2e, r24	; 46

	OCR1AL=0x00;
     104:	1a bc       	out	0x2a, r1	; 42
	OCR1BL=0x00;
     106:	18 bc       	out	0x28, r1	; 40
	return;
}
     108:	08 95       	ret

0000010a <offPWM>:

void offPWM()
{
     10a:	8f b5       	in	r24, 0x2f	; 47
     10c:	8f 77       	andi	r24, 0x7F	; 127
     10e:	8f bd       	out	0x2f, r24	; 47
	TCCR1A&=~(1<<COM1A1);
	return;
}
     110:	08 95       	ret

00000112 <onPWM>:

void onPWM()
{
     112:	8f b5       	in	r24, 0x2f	; 47
     114:	80 68       	ori	r24, 0x80	; 128
     116:	8f bd       	out	0x2f, r24	; 47
	TCCR1A|=(1<<COM1A1);
	return;
}
     118:	08 95       	ret

0000011a <setPWM>:

void setPWM (uint8_t data)
{
     11a:	8a bd       	out	0x2a, r24	; 42
	OCR1AL=data;
	if (data==0) offPWM();
     11c:	88 23       	and	r24, r24
     11e:	19 f4       	brne	.+6      	; 0x126 <setPWM+0xc>
	return;
}

void offPWM()
{
	TCCR1A&=~(1<<COM1A1);
     120:	8f b5       	in	r24, 0x2f	; 47
     122:	8f 77       	andi	r24, 0x7F	; 127
     124:	02 c0       	rjmp	.+4      	; 0x12a <setPWM+0x10>
	return;
}

void onPWM()
{
	TCCR1A|=(1<<COM1A1);
     126:	8f b5       	in	r24, 0x2f	; 47
     128:	80 68       	ori	r24, 0x80	; 128
     12a:	8f bd       	out	0x2f, r24	; 47
     12c:	08 95       	ret

0000012e <getPWM>:

	return;
}

uint8_t getPWM (void)
{
     12e:	8a b5       	in	r24, 0x2a	; 42
	return OCR1AL;
}
     130:	08 95       	ret

00000132 <clearRXBuf>:

//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
     132:	ee e7       	ldi	r30, 0x7E	; 126
     134:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     136:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	e9 38       	cpi	r30, 0x89	; 137
     13c:	f8 07       	cpc	r31, r24
     13e:	d9 f7       	brne	.-10     	; 0x136 <clearRXBuf+0x4>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     140:	10 92 69 01 	sts	0x0169, r1
	return;
}
     144:	08 95       	ret

00000146 <clearTXBuf>:

void clearTXBuf (void)
{
     146:	ec e6       	ldi	r30, 0x6C	; 108
     148:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	txBuf[i]=0;
     14a:	11 92       	st	Z+, r1
}

void clearTXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	e7 37       	cpi	r30, 0x77	; 119
     150:	f8 07       	cpc	r31, r24
     152:	d9 f7       	brne	.-10     	; 0x14a <clearTXBuf+0x4>
	txBuf[i]=0;
	return;
}
     154:	08 95       	ret

00000156 <clearBuf>:

void clearBuf (void)
{
     156:	80 e0       	ldi	r24, 0x00	; 0
     158:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=txBuf[i]=0;
     15a:	fc 01       	movw	r30, r24
     15c:	e4 59       	subi	r30, 0x94	; 148
     15e:	fe 4f       	sbci	r31, 0xFE	; 254
     160:	10 82       	st	Z, r1
     162:	fc 01       	movw	r30, r24
     164:	e2 58       	subi	r30, 0x82	; 130
     166:	fe 4f       	sbci	r31, 0xFE	; 254
     168:	10 82       	st	Z, r1
     16a:	01 96       	adiw	r24, 0x01	; 1
}

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     16c:	8b 30       	cpi	r24, 0x0B	; 11
     16e:	91 05       	cpc	r25, r1
     170:	a1 f7       	brne	.-24     	; 0x15a <clearBuf+0x4>
	rxBuf[i]=txBuf[i]=0;
	return;
}
     172:	08 95       	ret

00000174 <__vector_11>:

//receive packet to RX buffer
ISR(USART_RXC_vect)
{
     174:	1f 92       	push	r1
     176:	0f 92       	push	r0
     178:	0f b6       	in	r0, 0x3f	; 63
     17a:	0f 92       	push	r0
     17c:	11 24       	eor	r1, r1
     17e:	2f 93       	push	r18
     180:	3f 93       	push	r19
     182:	4f 93       	push	r20
     184:	6f 93       	push	r22
     186:	7f 93       	push	r23
     188:	8f 93       	push	r24
     18a:	9f 93       	push	r25
     18c:	ef 93       	push	r30
     18e:	ff 93       	push	r31
	uint16_t i=0;

	if (packetReceived!=0)
     190:	80 91 68 01 	lds	r24, 0x0168
     194:	88 23       	and	r24, r24
     196:	11 f0       	breq	.+4      	; 0x19c <__vector_11+0x28>
	{
		i=UDR;
     198:	8c b1       	in	r24, 0x0c	; 12
     19a:	25 c0       	rjmp	.+74     	; 0x1e6 <__vector_11+0x72>
		return;
	}

	rxBuf[0]=UDR;
     19c:	8c b1       	in	r24, 0x0c	; 12
     19e:	80 93 7e 01 	sts	0x017E, r24
	currentRXPacketLen=1;
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	80 93 69 01 	sts	0x0169, r24
     1a8:	20 e0       	ldi	r18, 0x00	; 0
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	41 e0       	ldi	r20, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1ae:	61 e0       	ldi	r22, 0x01	; 1
     1b0:	70 e0       	ldi	r23, 0x00	; 0
     1b2:	09 c0       	rjmp	.+18     	; 0x1c6 <__vector_11+0x52>

	while (1)
	{
		while ( !(UCSRA & (1<<RXC)) )
		{
			if (i==10000)
     1b4:	87 e2       	ldi	r24, 0x27	; 39
     1b6:	20 31       	cpi	r18, 0x10	; 16
     1b8:	38 07       	cpc	r19, r24
     1ba:	81 f0       	breq	.+32     	; 0x1dc <__vector_11+0x68>
			{
				packetReceived=1;
				return;
			}
			i++;
     1bc:	2f 5f       	subi	r18, 0xFF	; 255
     1be:	3f 4f       	sbci	r19, 0xFF	; 255
     1c0:	cb 01       	movw	r24, r22
     1c2:	01 97       	sbiw	r24, 0x01	; 1
     1c4:	f1 f7       	brne	.-4      	; 0x1c2 <__vector_11+0x4e>
	rxBuf[0]=UDR;
	currentRXPacketLen=1;

	while (1)
	{
		while ( !(UCSRA & (1<<RXC)) )
     1c6:	5f 9b       	sbis	0x0b, 7	; 11
     1c8:	f5 cf       	rjmp	.-22     	; 0x1b4 <__vector_11+0x40>
				return;
			}
			i++;
			_delay_loop_2(1);
		}
		rxBuf[currentRXPacketLen]=UDR;
     1ca:	8c b1       	in	r24, 0x0c	; 12
     1cc:	e4 2f       	mov	r30, r20
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	e2 58       	subi	r30, 0x82	; 130
     1d2:	fe 4f       	sbci	r31, 0xFE	; 254
     1d4:	80 83       	st	Z, r24
		currentRXPacketLen++;
     1d6:	4f 5f       	subi	r20, 0xFF	; 255

		if (currentRXPacketLen>=BUFF_SIZE)
     1d8:	4b 30       	cpi	r20, 0x0B	; 11
     1da:	a8 f3       	brcs	.-22     	; 0x1c6 <__vector_11+0x52>
     1dc:	40 93 69 01 	sts	0x0169, r20
		{
			packetReceived=1;
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	80 93 68 01 	sts	0x0168, r24
			return;
		}
	}
}
     1e6:	ff 91       	pop	r31
     1e8:	ef 91       	pop	r30
     1ea:	9f 91       	pop	r25
     1ec:	8f 91       	pop	r24
     1ee:	7f 91       	pop	r23
     1f0:	6f 91       	pop	r22
     1f2:	4f 91       	pop	r20
     1f4:	3f 91       	pop	r19
     1f6:	2f 91       	pop	r18
     1f8:	0f 90       	pop	r0
     1fa:	0f be       	out	0x3f, r0	; 63
     1fc:	0f 90       	pop	r0
     1fe:	1f 90       	pop	r1
     200:	18 95       	reti

00000202 <uartSendPacket>:

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
     202:	ec e6       	ldi	r30, 0x6C	; 108
     204:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i;
	for (i=0;i<length;i++)
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	6e 0f       	add	r22, r30
     20a:	7f 1f       	adc	r23, r31
     20c:	05 c0       	rjmp	.+10     	; 0x218 <uartSendPacket+0x16>
	uartTransmitByte(txBuf[i]);
     20e:	80 81       	ld	r24, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     210:	5d 9b       	sbis	0x0b, 5	; 11
     212:	fe cf       	rjmp	.-4      	; 0x210 <uartSendPacket+0xe>
	UDR = data;
     214:	8c b9       	out	0x0c, r24	; 12
     216:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     218:	e6 17       	cp	r30, r22
     21a:	f7 07       	cpc	r31, r23
     21c:	c1 f7       	brne	.-16     	; 0x20e <uartSendPacket+0xc>
	uartTransmitByte(txBuf[i]);
	return;
}
     21e:	08 95       	ret

00000220 <crc8Block>:

//crc calculating function
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
     220:	fc 01       	movw	r30, r24
     222:	9f ef       	ldi	r25, 0xFF	; 255
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     224:	21 e3       	ldi	r18, 0x31	; 49
     226:	0e c0       	rjmp	.+28     	; 0x244 <crc8Block+0x24>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     228:	80 81       	ld	r24, Z
     22a:	98 27       	eor	r25, r24
     22c:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     22e:	97 ff       	sbrs	r25, 7
     230:	03 c0       	rjmp	.+6      	; 0x238 <crc8Block+0x18>
     232:	99 0f       	add	r25, r25
     234:	92 27       	eor	r25, r18
     236:	01 c0       	rjmp	.+2      	; 0x23a <crc8Block+0x1a>
     238:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     23a:	8f 5f       	subi	r24, 0xFF	; 255
     23c:	88 30       	cpi	r24, 0x08	; 8
     23e:	b9 f7       	brne	.-18     	; 0x22e <crc8Block+0xe>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     240:	31 96       	adiw	r30, 0x01	; 1
     242:	61 50       	subi	r22, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     244:	66 23       	and	r22, r22
     246:	81 f7       	brne	.-32     	; 0x228 <crc8Block+0x8>
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
	}	
	return crc;
}
     248:	89 2f       	mov	r24, r25
     24a:	08 95       	ret

0000024c <prepareSystemStatus>:

//prepare TX buffer
void prepareSystemStatus (void)
{
     24c:	84 e6       	ldi	r24, 0x64	; 100
     24e:	80 93 6c 01 	sts	0x016C, r24
	txBuf[0]='d';
	txBuf[1]= sensorData[0]>>8;
     252:	90 91 7a 01 	lds	r25, 0x017A
     256:	80 91 7b 01 	lds	r24, 0x017B
     25a:	80 93 6d 01 	sts	0x016D, r24
	txBuf[2]= sensorData[0]&0x00ff;
     25e:	90 93 6e 01 	sts	0x016E, r25
	txBuf[3]= sensorData[1]>>8;
     262:	90 91 7c 01 	lds	r25, 0x017C
     266:	80 91 7d 01 	lds	r24, 0x017D
     26a:	80 93 6f 01 	sts	0x016F, r24
	txBuf[4]= sensorData[1]&0x00ff;
     26e:	90 93 70 01 	sts	0x0170, r25
	txBuf[5]= setData[0]>>8;
     272:	90 91 78 01 	lds	r25, 0x0178
     276:	80 91 79 01 	lds	r24, 0x0179
     27a:	80 93 71 01 	sts	0x0171, r24
	txBuf[6]= setData[0]&0x00ff;
     27e:	90 93 72 01 	sts	0x0172, r25
	#if PWM_MODE == 1
		txBuf[7]= getPWM();
	#else
		txBuf[7]=coolerPower;
     282:	80 91 6b 01 	lds	r24, 0x016B
     286:	80 93 73 01 	sts	0x0173, r24
	#endif
	txBuf[8]= errorCode;
     28a:	80 91 6a 01 	lds	r24, 0x016A
     28e:	80 93 74 01 	sts	0x0174, r24
	txBuf[9]= coolerState;
     292:	80 91 8a 01 	lds	r24, 0x018A
     296:	80 93 75 01 	sts	0x0175, r24
     29a:	9f ef       	ldi	r25, 0xFF	; 255
     29c:	ec e6       	ldi	r30, 0x6C	; 108
     29e:	f1 e0       	ldi	r31, 0x01	; 1
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     2a0:	21 e3       	ldi	r18, 0x31	; 49
     2a2:	0d c0       	rjmp	.+26     	; 0x2be <prepareSystemStatus+0x72>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     2a4:	80 81       	ld	r24, Z
     2a6:	98 27       	eor	r25, r24
     2a8:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     2aa:	97 ff       	sbrs	r25, 7
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <prepareSystemStatus+0x68>
     2ae:	99 0f       	add	r25, r25
     2b0:	92 27       	eor	r25, r18
     2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <prepareSystemStatus+0x6a>
     2b4:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     2b6:	8f 5f       	subi	r24, 0xFF	; 255
     2b8:	88 30       	cpi	r24, 0x08	; 8
     2ba:	b9 f7       	brne	.-18     	; 0x2aa <prepareSystemStatus+0x5e>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     2bc:	31 96       	adiw	r30, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	e6 37       	cpi	r30, 0x76	; 118
     2c2:	f8 07       	cpc	r31, r24
     2c4:	79 f7       	brne	.-34     	; 0x2a4 <prepareSystemStatus+0x58>
	#else
		txBuf[7]=coolerPower;
	#endif
	txBuf[8]= errorCode;
	txBuf[9]= coolerState;
	txBuf[10]=crc8Block(txBuf,10);
     2c6:	90 83       	st	Z, r25
}
     2c8:	08 95       	ret

000002ca <presentDS18b20>:

//------------------------------------------------------------------------------------
//DS18B20

uint8_t presentDS18b20(uint8_t sensor_num)
{	uint8_t res, sensor_pin;
     2ca:	88 23       	and	r24, r24
     2cc:	11 f0       	breq	.+4      	; 0x2d2 <presentDS18b20+0x8>
     2ce:	43 e0       	ldi	r20, 0x03	; 3
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <presentDS18b20+0xa>
     2d2:	42 e0       	ldi	r20, 0x02	; 2

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;
	
	SENSOR_DDR|=(1<<sensor_pin);
     2d4:	84 b3       	in	r24, 0x14	; 20
     2d6:	21 e0       	ldi	r18, 0x01	; 1
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	92 2f       	mov	r25, r18
     2dc:	04 2e       	mov	r0, r20
     2de:	01 c0       	rjmp	.+2      	; 0x2e2 <presentDS18b20+0x18>
     2e0:	99 0f       	add	r25, r25
     2e2:	0a 94       	dec	r0
     2e4:	ea f7       	brpl	.-6      	; 0x2e0 <presentDS18b20+0x16>
     2e6:	89 2b       	or	r24, r25
     2e8:	84 bb       	out	0x14, r24	; 20
     2ea:	e0 e1       	ldi	r30, 0x10	; 16
     2ec:	f4 e0       	ldi	r31, 0x04	; 4
     2ee:	31 97       	sbiw	r30, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <presentDS18b20+0x24>
	_delay_us (520);

	SENSOR_DDR&=~(1<<sensor_pin);
     2f2:	84 b3       	in	r24, 0x14	; 20
     2f4:	90 95       	com	r25
     2f6:	98 23       	and	r25, r24
     2f8:	94 bb       	out	0x14, r25	; 20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2fa:	80 e5       	ldi	r24, 0x50	; 80
     2fc:	8a 95       	dec	r24
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <presentDS18b20+0x32>
	_delay_us(30);
	
	if ((SENSOR_PIN&(1<<sensor_pin)) == 0x00) res=1;  
     300:	83 b3       	in	r24, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     302:	e4 ed       	ldi	r30, 0xD4	; 212
     304:	f3 e0       	ldi	r31, 0x03	; 3
     306:	31 97       	sbiw	r30, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <presentDS18b20+0x3c>
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	02 c0       	rjmp	.+4      	; 0x312 <presentDS18b20+0x48>
     30e:	95 95       	asr	r25
     310:	87 95       	ror	r24
     312:	4a 95       	dec	r20
     314:	e2 f7       	brpl	.-8      	; 0x30e <presentDS18b20+0x44>
     316:	82 27       	eor	r24, r18
     318:	93 27       	eor	r25, r19
	else res=0;  
	
	_delay_us(490);
	return res;
}
     31a:	81 70       	andi	r24, 0x01	; 1
     31c:	08 95       	ret

0000031e <sendDS18b20>:

void sendDS18b20(uint8_t command, uint8_t sensor_num)
{	uint8_t i, data, sensor_pin;
     31e:	48 2f       	mov	r20, r24

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     320:	66 23       	and	r22, r22
     322:	11 f0       	breq	.+4      	; 0x328 <sendDS18b20+0xa>
     324:	23 e0       	ldi	r18, 0x03	; 3
     326:	01 c0       	rjmp	.+2      	; 0x32a <sendDS18b20+0xc>
     328:	22 e0       	ldi	r18, 0x02	; 2
	data=command;

	for(i=0;i<8;i++)
	{
		if ((data&0x01)==0x01) {    //Send 1 on SDA
			SENSOR_DDR|=(1<<sensor_pin);
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	38 2f       	mov	r19, r24
     330:	01 c0       	rjmp	.+2      	; 0x334 <sendDS18b20+0x16>
     332:	33 0f       	add	r19, r19
     334:	2a 95       	dec	r18
     336:	ea f7       	brpl	.-6      	; 0x332 <sendDS18b20+0x14>
			_delay_us(15);
			SENSOR_DDR&=~(1<<sensor_pin);
     338:	53 2f       	mov	r21, r19
     33a:	50 95       	com	r21
     33c:	24 2f       	mov	r18, r20
     33e:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     340:	68 ec       	ldi	r22, 0xC8	; 200
	else sensor_pin=SENSOR1_PIN;
	data=command;

	for(i=0;i<8;i++)
	{
		if ((data&0x01)==0x01) {    //Send 1 on SDA
     342:	48 e2       	ldi	r20, 0x28	; 40
     344:	20 ff       	sbrs	r18, 0
     346:	0b c0       	rjmp	.+22     	; 0x35e <sendDS18b20+0x40>
			SENSOR_DDR|=(1<<sensor_pin);
     348:	84 b3       	in	r24, 0x14	; 20
     34a:	83 2b       	or	r24, r19
     34c:	84 bb       	out	0x14, r24	; 20
     34e:	84 2f       	mov	r24, r20
     350:	8a 95       	dec	r24
     352:	f1 f7       	brne	.-4      	; 0x350 <sendDS18b20+0x32>
			_delay_us(15);
			SENSOR_DDR&=~(1<<sensor_pin);
     354:	84 b3       	in	r24, 0x14	; 20
     356:	85 23       	and	r24, r21
     358:	84 bb       	out	0x14, r24	; 20
     35a:	86 2f       	mov	r24, r22
     35c:	0a c0       	rjmp	.+20     	; 0x372 <sendDS18b20+0x54>
			_delay_us(75);
		}
		else {                   	//Send 0 on SDA
			SENSOR_DDR|=(1<<sensor_pin);
     35e:	84 b3       	in	r24, 0x14	; 20
     360:	83 2b       	or	r24, r19
     362:	84 bb       	out	0x14, r24	; 20
     364:	86 2f       	mov	r24, r22
     366:	8a 95       	dec	r24
     368:	f1 f7       	brne	.-4      	; 0x366 <sendDS18b20+0x48>
			_delay_us(75);
			SENSOR_DDR&=~(1<<sensor_pin);
     36a:	84 b3       	in	r24, 0x14	; 20
     36c:	85 23       	and	r24, r21
     36e:	84 bb       	out	0x14, r24	; 20
     370:	84 2f       	mov	r24, r20
     372:	8a 95       	dec	r24
     374:	f1 f7       	brne	.-4      	; 0x372 <sendDS18b20+0x54>

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;
	data=command;

	for(i=0;i<8;i++)
     376:	9f 5f       	subi	r25, 0xFF	; 255
     378:	98 30       	cpi	r25, 0x08	; 8
     37a:	11 f0       	breq	.+4      	; 0x380 <sendDS18b20+0x62>
			SENSOR_DDR|=(1<<sensor_pin);
			_delay_us(75);
			SENSOR_DDR&=~(1<<sensor_pin);
			_delay_us(15);
		}
		data=data>>1;
     37c:	26 95       	lsr	r18
     37e:	e2 cf       	rjmp	.-60     	; 0x344 <sendDS18b20+0x26>
     380:	08 95       	ret

00000382 <receiveDS18b20>:
	}
	return;
}

uint16_t receiveDS18b20(uint8_t sensor_num)
{	uint8_t i, sensor_pin;
     382:	ff 92       	push	r15
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
	uint16_t res=0;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     388:	88 23       	and	r24, r24
     38a:	11 f0       	breq	.+4      	; 0x390 <receiveDS18b20+0xe>
     38c:	83 e0       	ldi	r24, 0x03	; 3
     38e:	01 c0       	rjmp	.+2      	; 0x392 <receiveDS18b20+0x10>
     390:	82 e0       	ldi	r24, 0x02	; 2
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
	{
		SENSOR_DDR|=(1<<sensor_pin);		
     392:	61 e0       	ldi	r22, 0x01	; 1
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	02 c0       	rjmp	.+4      	; 0x39c <receiveDS18b20+0x1a>
     398:	66 0f       	add	r22, r22
     39a:	77 1f       	adc	r23, r23
     39c:	8a 95       	dec	r24
     39e:	e2 f7       	brpl	.-8      	; 0x398 <receiveDS18b20+0x16>
     3a0:	a6 2f       	mov	r26, r22
		_delay_us(9);
		SENSOR_DDR&=~(1<<sensor_pin);		
     3a2:	b6 2f       	mov	r27, r22
     3a4:	b0 95       	com	r27
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	88 e1       	ldi	r24, 0x18	; 24
     3b0:	f8 2e       	mov	r15, r24
		_delay_us(12);

		if ((SENSOR_PIN & (1<<sensor_pin))==0x00) res&=~_BV(i);	//If 0 on SDA
		else 	res|=_BV(i);	    //IF 1 on SDA
     3b2:	00 e2       	ldi	r16, 0x20	; 32
     3b4:	e1 e0       	ldi	r30, 0x01	; 1
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	18 ec       	ldi	r17, 0xC8	; 200
	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
	{
		SENSOR_DDR|=(1<<sensor_pin);		
     3ba:	84 b3       	in	r24, 0x14	; 20
     3bc:	8a 2b       	or	r24, r26
     3be:	84 bb       	out	0x14, r24	; 20
     3c0:	8f 2d       	mov	r24, r15
     3c2:	8a 95       	dec	r24
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <receiveDS18b20+0x40>
		_delay_us(9);
		SENSOR_DDR&=~(1<<sensor_pin);		
     3c6:	84 b3       	in	r24, 0x14	; 20
     3c8:	8b 23       	and	r24, r27
     3ca:	84 bb       	out	0x14, r24	; 20
     3cc:	80 2f       	mov	r24, r16
     3ce:	8a 95       	dec	r24
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <receiveDS18b20+0x4c>
		_delay_us(12);

		if ((SENSOR_PIN & (1<<sensor_pin))==0x00) res&=~_BV(i);	//If 0 on SDA
     3d2:	83 b3       	in	r24, 0x13	; 19
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	86 23       	and	r24, r22
     3d8:	97 23       	and	r25, r23
     3da:	89 2b       	or	r24, r25
     3dc:	61 f4       	brne	.+24     	; 0x3f6 <receiveDS18b20+0x74>
     3de:	cf 01       	movw	r24, r30
     3e0:	04 2e       	mov	r0, r20
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <receiveDS18b20+0x66>
     3e4:	88 0f       	add	r24, r24
     3e6:	99 1f       	adc	r25, r25
     3e8:	0a 94       	dec	r0
     3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <receiveDS18b20+0x62>
     3ec:	80 95       	com	r24
     3ee:	90 95       	com	r25
     3f0:	28 23       	and	r18, r24
     3f2:	39 23       	and	r19, r25
     3f4:	09 c0       	rjmp	.+18     	; 0x408 <receiveDS18b20+0x86>
		else 	res|=_BV(i);	    //IF 1 on SDA
     3f6:	cf 01       	movw	r24, r30
     3f8:	04 2e       	mov	r0, r20
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <receiveDS18b20+0x7e>
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	0a 94       	dec	r0
     402:	e2 f7       	brpl	.-8      	; 0x3fc <receiveDS18b20+0x7a>
     404:	28 2b       	or	r18, r24
     406:	39 2b       	or	r19, r25
     408:	81 2f       	mov	r24, r17
     40a:	8a 95       	dec	r24
     40c:	f1 f7       	brne	.-4      	; 0x40a <receiveDS18b20+0x88>
     40e:	4f 5f       	subi	r20, 0xFF	; 255
     410:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t res=0;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
     412:	40 31       	cpi	r20, 0x10	; 16
     414:	51 05       	cpc	r21, r1
     416:	89 f6       	brne	.-94     	; 0x3ba <receiveDS18b20+0x38>
		else 	res|=_BV(i);	    //IF 1 on SDA
				
		_delay_us(75);
	}
	return res;
}
     418:	c9 01       	movw	r24, r18
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	ff 90       	pop	r15
     420:	08 95       	ret

00000422 <processPacket>:
	txBuf[10]=crc8Block(txBuf,10);
}

//process received packet
void processPacket(void)
{
     422:	f8 94       	cli
	cli();
	//check CRC
	if (crc8Block(rxBuf,currentRXPacketLen-1)!=rxBuf[currentRXPacketLen-1])
     424:	40 91 69 01 	lds	r20, 0x0169
     428:	41 50       	subi	r20, 0x01	; 1
     42a:	9f ef       	ldi	r25, 0xFF	; 255
     42c:	ee e7       	ldi	r30, 0x7E	; 126
     42e:	f1 e0       	ldi	r31, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     430:	24 2f       	mov	r18, r20
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	4f 5f       	subi	r20, 0xFF	; 255
     436:	2e 0f       	add	r18, r30
     438:	3f 1f       	adc	r19, r31
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     43a:	51 e3       	ldi	r21, 0x31	; 49
     43c:	0d c0       	rjmp	.+26     	; 0x458 <processPacket+0x36>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     43e:	80 81       	ld	r24, Z
     440:	98 27       	eor	r25, r24
     442:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     444:	97 ff       	sbrs	r25, 7
     446:	03 c0       	rjmp	.+6      	; 0x44e <processPacket+0x2c>
     448:	99 0f       	add	r25, r25
     44a:	95 27       	eor	r25, r21
     44c:	01 c0       	rjmp	.+2      	; 0x450 <processPacket+0x2e>
     44e:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     450:	8f 5f       	subi	r24, 0xFF	; 255
     452:	88 30       	cpi	r24, 0x08	; 8
     454:	b9 f7       	brne	.-18     	; 0x444 <processPacket+0x22>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     456:	31 96       	adiw	r30, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     458:	e2 17       	cp	r30, r18
     45a:	f3 07       	cpc	r31, r19
     45c:	81 f7       	brne	.-32     	; 0x43e <processPacket+0x1c>
//process received packet
void processPacket(void)
{
	cli();
	//check CRC
	if (crc8Block(rxBuf,currentRXPacketLen-1)!=rxBuf[currentRXPacketLen-1])
     45e:	e4 2f       	mov	r30, r20
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	e3 58       	subi	r30, 0x83	; 131
     464:	fe 4f       	sbci	r31, 0xFE	; 254
     466:	80 81       	ld	r24, Z
     468:	98 17       	cp	r25, r24
     46a:	69 f0       	breq	.+26     	; 0x486 <__stack+0x27>
	{
		packetReceived=0;
     46c:	10 92 68 01 	sts	0x0168, r1
     470:	ee e7       	ldi	r30, 0x7E	; 126
     472:	f1 e0       	ldi	r31, 0x01	; 1
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     474:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     476:	41 e0       	ldi	r20, 0x01	; 1
     478:	e9 38       	cpi	r30, 0x89	; 137
     47a:	f4 07       	cpc	r31, r20
     47c:	d9 f7       	brne	.-10     	; 0x474 <__stack+0x15>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     47e:	10 92 69 01 	sts	0x0169, r1
	//check CRC
	if (crc8Block(rxBuf,currentRXPacketLen-1)!=rxBuf[currentRXPacketLen-1])
	{
		packetReceived=0;
		clearRXBuf();
		sei();
     482:	78 94       	sei
     484:	08 95       	ret
		return;
	}
	//differentiate and process packet
	switch (rxBuf[0]) {
     486:	80 91 7e 01 	lds	r24, 0x017E
     48a:	89 36       	cpi	r24, 0x69	; 105
     48c:	09 f4       	brne	.+2      	; 0x490 <__stack+0x31>
     48e:	3e c0       	rjmp	.+124    	; 0x50c <__stack+0xad>
     490:	8a 36       	cpi	r24, 0x6A	; 106
     492:	20 f4       	brcc	.+8      	; 0x49c <__stack+0x3d>
     494:	87 36       	cpi	r24, 0x67	; 103
     496:	09 f0       	breq	.+2      	; 0x49a <__stack+0x3b>
     498:	7e c0       	rjmp	.+252    	; 0x596 <__stack+0x137>
     49a:	07 c0       	rjmp	.+14     	; 0x4aa <__stack+0x4b>
     49c:	80 37       	cpi	r24, 0x70	; 112
     49e:	09 f4       	brne	.+2      	; 0x4a2 <__stack+0x43>
     4a0:	66 c0       	rjmp	.+204    	; 0x56e <__stack+0x10f>
     4a2:	83 37       	cpi	r24, 0x73	; 115
     4a4:	09 f0       	breq	.+2      	; 0x4a8 <__stack+0x49>
     4a6:	77 c0       	rjmp	.+238    	; 0x596 <__stack+0x137>
     4a8:	11 c0       	rjmp	.+34     	; 0x4cc <__stack+0x6d>
		//if get command
		case 'g' : 	{
			if (currentRXPacketLen==2)
     4aa:	42 30       	cpi	r20, 0x02	; 2
     4ac:	09 f0       	breq	.+2      	; 0x4b0 <__stack+0x51>
     4ae:	73 c0       	rjmp	.+230    	; 0x596 <__stack+0x137>
			{
				prepareSystemStatus();
     4b0:	0e 94 26 01 	call	0x24c	; 0x24c <prepareSystemStatus>
     4b4:	ec e6       	ldi	r30, 0x6C	; 108
     4b6:	f1 e0       	ldi	r31, 0x01	; 1
//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
	uartTransmitByte(txBuf[i]);
     4b8:	80 81       	ld	r24, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     4ba:	5d 9b       	sbis	0x0b, 5	; 11
     4bc:	fe cf       	rjmp	.-4      	; 0x4ba <__stack+0x5b>
	UDR = data;
     4be:	8c b9       	out	0x0c, r24	; 12
     4c0:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	e7 37       	cpi	r30, 0x77	; 119
     4c6:	f8 07       	cpc	r31, r24
     4c8:	b9 f7       	brne	.-18     	; 0x4b8 <__stack+0x59>
     4ca:	65 c0       	rjmp	.+202    	; 0x596 <__stack+0x137>
			}			
			break;
		}
		//if set command
		case 's' : 	{
			if (currentRXPacketLen==4)
     4cc:	44 30       	cpi	r20, 0x04	; 4
     4ce:	09 f0       	breq	.+2      	; 0x4d2 <__stack+0x73>
     4d0:	62 c0       	rjmp	.+196    	; 0x596 <__stack+0x137>
			{
				uint16_t val;

				val=(rxBuf[1]<<8)|(rxBuf[2]);
     4d2:	90 91 7f 01 	lds	r25, 0x017F
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	20 91 80 01 	lds	r18, 0x0180
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	28 2b       	or	r18, r24
     4e0:	39 2b       	or	r19, r25
				if ((val<=1780)&&(val>=780)) setData[0]=val;
     4e2:	c9 01       	movw	r24, r18
     4e4:	8c 50       	subi	r24, 0x0C	; 12
     4e6:	93 40       	sbci	r25, 0x03	; 3
     4e8:	89 5e       	subi	r24, 0xE9	; 233
     4ea:	93 40       	sbci	r25, 0x03	; 3
     4ec:	20 f4       	brcc	.+8      	; 0x4f6 <__stack+0x97>
     4ee:	30 93 79 01 	sts	0x0179, r19
     4f2:	20 93 78 01 	sts	0x0178, r18
/** \ingroup avr_eeprom
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
    __eewr_word (__p, __value, eeprom_write_byte);
     4f6:	60 91 78 01 	lds	r22, 0x0178
     4fa:	70 91 79 01 	lds	r23, 0x0179
     4fe:	41 e5       	ldi	r20, 0x51	; 81
     500:	50 e0       	ldi	r21, 0x00	; 0
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 6f 0b 	call	0x16de	; 0x16de <__eewr_word>
     50a:	45 c0       	rjmp	.+138    	; 0x596 <__stack+0x137>
			
			break;
		}
		//if info command
		case 'i' :	{
			if (currentRXPacketLen==2)
     50c:	42 30       	cpi	r20, 0x02	; 2
     50e:	09 f0       	breq	.+2      	; 0x512 <__stack+0xb3>
     510:	42 c0       	rjmp	.+132    	; 0x596 <__stack+0x137>
			{
				txBuf[0]='v';
     512:	86 e7       	ldi	r24, 0x76	; 118
     514:	80 93 6c 01 	sts	0x016C, r24
				txBuf[1]=HW_REVISION;
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	80 93 6d 01 	sts	0x016D, r24
				txBuf[2]=SW_REVISION;
     51e:	80 93 6e 01 	sts	0x016E, r24
				txBuf[3]=SENSOR_COUNT;
     522:	40 93 6f 01 	sts	0x016F, r20
				txBuf[4]=VALUE_COUNT;
     526:	80 93 70 01 	sts	0x0170, r24
     52a:	9f ef       	ldi	r25, 0xFF	; 255
     52c:	ec e6       	ldi	r30, 0x6C	; 108
     52e:	f1 e0       	ldi	r31, 0x01	; 1
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     530:	21 e3       	ldi	r18, 0x31	; 49
     532:	0d c0       	rjmp	.+26     	; 0x54e <__stack+0xef>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     534:	80 81       	ld	r24, Z
     536:	98 27       	eor	r25, r24
     538:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     53a:	97 ff       	sbrs	r25, 7
     53c:	03 c0       	rjmp	.+6      	; 0x544 <__stack+0xe5>
     53e:	99 0f       	add	r25, r25
     540:	92 27       	eor	r25, r18
     542:	01 c0       	rjmp	.+2      	; 0x546 <__stack+0xe7>
     544:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     546:	8f 5f       	subi	r24, 0xFF	; 255
     548:	88 30       	cpi	r24, 0x08	; 8
     54a:	b9 f7       	brne	.-18     	; 0x53a <__stack+0xdb>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     54c:	31 96       	adiw	r30, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	e1 37       	cpi	r30, 0x71	; 113
     552:	f8 07       	cpc	r31, r24
     554:	79 f7       	brne	.-34     	; 0x534 <__stack+0xd5>
				txBuf[0]='v';
				txBuf[1]=HW_REVISION;
				txBuf[2]=SW_REVISION;
				txBuf[3]=SENSOR_COUNT;
				txBuf[4]=VALUE_COUNT;
				txBuf[5]=crc8Block(txBuf,5);
     556:	90 83       	st	Z, r25
     558:	35 97       	sbiw	r30, 0x05	; 5
//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
	uartTransmitByte(txBuf[i]);
     55a:	80 81       	ld	r24, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     55c:	5d 9b       	sbis	0x0b, 5	; 11
     55e:	fe cf       	rjmp	.-4      	; 0x55c <__stack+0xfd>
	UDR = data;
     560:	8c b9       	out	0x0c, r24	; 12
     562:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     564:	41 e0       	ldi	r20, 0x01	; 1
     566:	e2 37       	cpi	r30, 0x72	; 114
     568:	f4 07       	cpc	r31, r20
     56a:	b9 f7       	brne	.-18     	; 0x55a <__stack+0xfb>
     56c:	14 c0       	rjmp	.+40     	; 0x596 <__stack+0x137>

			break;
		}
		//if powern ON/OFF PWM
		case 'p' : 	{
		if (currentRXPacketLen==3)
     56e:	43 30       	cpi	r20, 0x03	; 3
     570:	91 f4       	brne	.+36     	; 0x596 <__stack+0x137>
		{
			if ((rxBuf[1]==COOLER_OFF)||(rxBuf[1]==COOLER_ON))
     572:	20 91 7f 01 	lds	r18, 0x017F
     576:	22 30       	cpi	r18, 0x02	; 2
     578:	70 f4       	brcc	.+28     	; 0x596 <__stack+0x137>
			{
				coolerState=rxBuf[1];
     57a:	20 93 8a 01 	sts	0x018A, r18
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     57e:	e1 99       	sbic	0x1c, 1	; 28
     580:	fe cf       	rjmp	.-4      	; 0x57e <__stack+0x11f>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     582:	82 e0       	ldi	r24, 0x02	; 2
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	9f bb       	out	0x1f, r25	; 31
     588:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
     58a:	2d bb       	out	0x1d, r18	; 29

    __asm__ __volatile__ (
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	e2 9a       	sbi	0x1c, 2	; 28
     592:	e1 9a       	sbi	0x1c, 1	; 28
     594:	0f be       	out	0x3f, r0	; 63
		default:
		{
			;
		}
	}
	packetReceived=0;
     596:	10 92 68 01 	sts	0x0168, r1
     59a:	ee e7       	ldi	r30, 0x7E	; 126
     59c:	f1 e0       	ldi	r31, 0x01	; 1
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     59e:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	e9 38       	cpi	r30, 0x89	; 137
     5a4:	f8 07       	cpc	r31, r24
     5a6:	d9 f7       	brne	.-10     	; 0x59e <__stack+0x13f>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     5a8:	10 92 69 01 	sts	0x0169, r1
			;
		}
	}
	packetReceived=0;
	clearRXBuf();
	sei();
     5ac:	78 94       	sei
     5ae:	08 95       	ret

000005b0 <main>:
	return res;
}

//------------------------------------------------------------------------------------
int main(void)
{
     5b0:	2f 92       	push	r2
     5b2:	3f 92       	push	r3
     5b4:	5f 92       	push	r5
     5b6:	6f 92       	push	r6
     5b8:	7f 92       	push	r7
     5ba:	8f 92       	push	r8
     5bc:	9f 92       	push	r9
     5be:	af 92       	push	r10
     5c0:	bf 92       	push	r11
     5c2:	cf 92       	push	r12
     5c4:	df 92       	push	r13
     5c6:	ef 92       	push	r14
     5c8:	ff 92       	push	r15
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    return __eerd_word (__p, eeprom_read_byte);
     5d2:	69 e4       	ldi	r22, 0x49	; 73
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__eerd_word>
     5de:	9c 01       	movw	r18, r24
	uint8_t i, sign, firstConv=_YES;
	uint16_t val, fract;	
	//read from EEPROM saved value & coolerState state
	#if STANDALONE_MODE == 1
		setData[0]= eeprom_read_word (&savedSetData);
     5e0:	90 93 79 01 	sts	0x0179, r25
     5e4:	80 93 78 01 	sts	0x0178, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     5e8:	e1 99       	sbic	0x1c, 1	; 28
     5ea:	fe cf       	rjmp	.-4      	; 0x5e8 <main+0x38>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     5ec:	82 e0       	ldi	r24, 0x02	; 2
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	9f bb       	out	0x1f, r25	; 31
     5f2:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     5f4:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     5f6:	4d b3       	in	r20, 0x1d	; 29
		coolerState = eeprom_read_byte(&savedCoolerState);
     5f8:	40 93 8a 01 	sts	0x018A, r20
		//if saved settings corrupted - set it by default
		if ( (setData[0]<780)||(setData[0]>1780) ) setData[0]=1730;
     5fc:	2c 50       	subi	r18, 0x0C	; 12
     5fe:	33 40       	sbci	r19, 0x03	; 3
     600:	29 5e       	subi	r18, 0xE9	; 233
     602:	33 40       	sbci	r19, 0x03	; 3
     604:	30 f0       	brcs	.+12     	; 0x612 <main+0x62>
     606:	82 ec       	ldi	r24, 0xC2	; 194
     608:	96 e0       	ldi	r25, 0x06	; 6
     60a:	90 93 79 01 	sts	0x0179, r25
     60e:	80 93 78 01 	sts	0x0178, r24
		if ( (coolerState!=COOLER_ON)&&(coolerState!=COOLER_OFF) ) coolerState=COOLER_OFF;
     612:	42 30       	cpi	r20, 0x02	; 2
     614:	10 f0       	brcs	.+4      	; 0x61a <main+0x6a>
     616:	10 92 8a 01 	sts	0x018A, r1
		setData[0]=1730;
		coolerState=COOLER_OFF;
	#endif
	//init variables
	for (i=0;i<SENSOR_COUNT;i++)
		sensorData[i]=0;
     61a:	10 92 7b 01 	sts	0x017B, r1
     61e:	10 92 7a 01 	sts	0x017A, r1
     622:	10 92 7d 01 	sts	0x017D, r1
     626:	10 92 7c 01 	sts	0x017C, r1
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	90 e0       	ldi	r25, 0x00	; 0

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=txBuf[i]=0;
     62e:	fc 01       	movw	r30, r24
     630:	e4 59       	subi	r30, 0x94	; 148
     632:	fe 4f       	sbci	r31, 0xFE	; 254
     634:	10 82       	st	Z, r1
     636:	fc 01       	movw	r30, r24
     638:	e2 58       	subi	r30, 0x82	; 130
     63a:	fe 4f       	sbci	r31, 0xFE	; 254
     63c:	10 82       	st	Z, r1
     63e:	01 96       	adiw	r24, 0x01	; 1
}

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     640:	8b 30       	cpi	r24, 0x0B	; 11
     642:	91 05       	cpc	r25, r1
     644:	a1 f7       	brne	.-24     	; 0x62e <main+0x7e>
	#endif
	//init variables
	for (i=0;i<SENSOR_COUNT;i++)
		sensorData[i]=0;
	clearBuf ();
	U=0.0;
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	a0 e0       	ldi	r26, 0x00	; 0
     64c:	b0 e0       	ldi	r27, 0x00	; 0
     64e:	80 93 8f 01 	sts	0x018F, r24
     652:	90 93 90 01 	sts	0x0190, r25
     656:	a0 93 91 01 	sts	0x0191, r26
     65a:	b0 93 92 01 	sts	0x0192, r27
	E=0;
     65e:	80 93 8b 01 	sts	0x018B, r24
     662:	90 93 8c 01 	sts	0x018C, r25
     666:	a0 93 8d 01 	sts	0x018D, r26
     66a:	b0 93 8e 01 	sts	0x018E, r27
	//Init ports, UART, PWM
	SENSOR_PORT&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));     	
     66e:	85 b3       	in	r24, 0x15	; 21
     670:	83 7f       	andi	r24, 0xF3	; 243
     672:	85 bb       	out	0x15, r24	; 21
	SENSOR_DDR&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));		
     674:	84 b3       	in	r24, 0x14	; 20
     676:	83 7f       	andi	r24, 0xF3	; 243
     678:	84 bb       	out	0x14, r24	; 20
 
	#if PWM_MODE == 1
		initPWM();
	#else
		TEC_PORT&=~(1<<TEC_PIN);
     67a:	95 98       	cbi	0x12, 5	; 18
		TEC_DDR|=(1<<TEC_PIN);
     67c:	8d 9a       	sbi	0x11, 5	; 17
//------------------------------------------------------------------------------------
//UART

void uartInit(void)
{
	UBRRH = (BAUD_PRESCALE >> 8);		// Init UART baudrate
     67e:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;
     680:	83 e3       	ldi	r24, 0x33	; 51
     682:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1<<RXEN)|(1<<TXEN)|(1 << RXCIE);	// TX, RX enable, RX interrupt enable
     684:	88 e9       	ldi	r24, 0x98	; 152
     686:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
     688:	86 e8       	ldi	r24, 0x86	; 134
     68a:	80 bd       	out	0x20, r24	; 32
	#else
		TEC_PORT&=~(1<<TEC_PIN);
		TEC_DDR|=(1<<TEC_PIN);
	#endif
	uartInit();	
	sei();
     68c:	78 94       	sei
     68e:	11 e0       	ldi	r17, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     690:	a8 ec       	ldi	r26, 0xC8	; 200
     692:	2a 2e       	mov	r2, r26
     694:	31 2c       	mov	r3, r1
					E=(double) sensorData[0]-setData[0];

					U=U+KPSLOW*E;

					if (U>255.0) 	U=255.0;
					if (U<=0.0) 	U=0.0;		
     696:	0f 2e       	mov	r0, r31
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	6f 2e       	mov	r6, r31
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	7f 2e       	mov	r7, r31
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	8f 2e       	mov	r8, r31
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	9f 2e       	mov	r9, r31
     6a8:	f0 2d       	mov	r31, r0
     6aa:	01 c0       	rjmp	.+2      	; 0x6ae <main+0xfe>
	#else
		TEC_PORT&=~(1<<TEC_PIN);
		TEC_DDR|=(1<<TEC_PIN);
	#endif
	uartInit();	
	sei();
     6ac:	10 e0       	ldi	r17, 0x00	; 0

//##############################################################
	#if SLOW_PWM_MODE == 1
	while (1)
	{
		if (packetReceived!=0) processPacket();
     6ae:	80 91 68 01 	lds	r24, 0x0168
     6b2:	88 23       	and	r24, r24
     6b4:	11 f0       	breq	.+4      	; 0x6ba <main+0x10a>
     6b6:	0e 94 11 02 	call	0x422	; 0x422 <processPacket>
		errorCode=0;
     6ba:	10 92 6a 01 	sts	0x016A, r1
		for (i=0;i<SENSOR_COUNT;i++)
		{
			if (presentDS18b20(i)==1)
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	0e 94 65 01 	call	0x2ca	; 0x2ca <presentDS18b20>
     6c4:	81 30       	cpi	r24, 0x01	; 1
     6c6:	31 f0       	breq	.+12     	; 0x6d4 <main+0x124>
			{
				sendDS18b20(SKIP_ROM,i);
				sendDS18b20(START_CONVERSION,i);
			}
			else errorCode|=(1<<i);
     6c8:	80 91 6a 01 	lds	r24, 0x016A
     6cc:	81 60       	ori	r24, 0x01	; 1
     6ce:	80 93 6a 01 	sts	0x016A, r24
     6d2:	08 c0       	rjmp	.+16     	; 0x6e4 <main+0x134>
		errorCode=0;
		for (i=0;i<SENSOR_COUNT;i++)
		{
			if (presentDS18b20(i)==1)
			{
				sendDS18b20(SKIP_ROM,i);
     6d4:	60 e0       	ldi	r22, 0x00	; 0
     6d6:	8c ec       	ldi	r24, 0xCC	; 204
     6d8:	0e 94 8f 01 	call	0x31e	; 0x31e <sendDS18b20>
				sendDS18b20(START_CONVERSION,i);
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	84 e4       	ldi	r24, 0x44	; 68
     6e0:	0e 94 8f 01 	call	0x31e	; 0x31e <sendDS18b20>
	{
		if (packetReceived!=0) processPacket();
		errorCode=0;
		for (i=0;i<SENSOR_COUNT;i++)
		{
			if (presentDS18b20(i)==1)
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	0e 94 65 01 	call	0x2ca	; 0x2ca <presentDS18b20>
     6ea:	81 30       	cpi	r24, 0x01	; 1
     6ec:	49 f4       	brne	.+18     	; 0x700 <main+0x150>
			{
				sendDS18b20(SKIP_ROM,i);
     6ee:	61 e0       	ldi	r22, 0x01	; 1
     6f0:	8c ec       	ldi	r24, 0xCC	; 204
     6f2:	0e 94 8f 01 	call	0x31e	; 0x31e <sendDS18b20>
				sendDS18b20(START_CONVERSION,i);
     6f6:	61 e0       	ldi	r22, 0x01	; 1
     6f8:	84 e4       	ldi	r24, 0x44	; 68
     6fa:	0e 94 8f 01 	call	0x31e	; 0x31e <sendDS18b20>
     6fe:	05 c0       	rjmp	.+10     	; 0x70a <main+0x15a>
			}
			else errorCode|=(1<<i);
     700:	80 91 6a 01 	lds	r24, 0x016A
     704:	82 60       	ori	r24, 0x02	; 2
     706:	80 93 6a 01 	sts	0x016A, r24
		}
		if (firstConv==_YES) firstConv=_NO;
     70a:	11 30       	cpi	r17, 0x01	; 1
     70c:	79 f2       	breq	.-98     	; 0x6ac <main+0xfc>
     70e:	ca e7       	ldi	r28, 0x7A	; 122
     710:	d1 e0       	ldi	r29, 0x01	; 1
     712:	00 e0       	ldi	r16, 0x00	; 0
     714:	10 e0       	ldi	r17, 0x00	; 0
		else
		{		 
			//receive measured data from sensors
			for (i=0;i<SENSOR_COUNT;i++)
			{
				if (presentDS18b20(i)==1)
     716:	80 2f       	mov	r24, r16
     718:	0e 94 65 01 	call	0x2ca	; 0x2ca <presentDS18b20>
     71c:	81 30       	cpi	r24, 0x01	; 1
     71e:	09 f0       	breq	.+2      	; 0x722 <main+0x172>
     720:	49 c0       	rjmp	.+146    	; 0x7b4 <main+0x204>
				{
					sendDS18b20(SKIP_ROM,i);
     722:	60 2f       	mov	r22, r16
     724:	8c ec       	ldi	r24, 0xCC	; 204
     726:	0e 94 8f 01 	call	0x31e	; 0x31e <sendDS18b20>
					sendDS18b20(GET_DATA,i);
     72a:	60 2f       	mov	r22, r16
     72c:	8e eb       	ldi	r24, 0xBE	; 190
     72e:	0e 94 8f 01 	call	0x31e	; 0x31e <sendDS18b20>
					val=receiveDS18b20(i);
     732:	80 2f       	mov	r24, r16
     734:	0e 94 c1 01 	call	0x382	; 0x382 <receiveDS18b20>
					if ((val&0x8000)!=0x00)
     738:	97 fd       	sbrc	r25, 7
     73a:	02 c0       	rjmp	.+4      	; 0x740 <main+0x190>
     73c:	e0 e0       	ldi	r30, 0x00	; 0
     73e:	04 c0       	rjmp	.+8      	; 0x748 <main+0x198>
					{
						sign=1;
						val=0xffff-val+1;
     740:	90 95       	com	r25
     742:	81 95       	neg	r24
     744:	9f 4f       	sbci	r25, 0xFF	; 255
     746:	e1 e0       	ldi	r30, 0x01	; 1
					}
					else sign=0;
					fract=0;
					if ((val&0x01)!=0x00) fract=fract+65;
     748:	80 fd       	sbrc	r24, 0
     74a:	03 c0       	rjmp	.+6      	; 0x752 <main+0x1a2>
     74c:	40 e0       	ldi	r20, 0x00	; 0
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	02 c0       	rjmp	.+4      	; 0x756 <main+0x1a6>
     752:	41 e4       	ldi	r20, 0x41	; 65
     754:	50 e0       	ldi	r21, 0x00	; 0
					if ((val&0x02)!=0x00) fract=fract+125;
     756:	81 ff       	sbrs	r24, 1
     758:	02 c0       	rjmp	.+4      	; 0x75e <main+0x1ae>
     75a:	43 58       	subi	r20, 0x83	; 131
     75c:	5f 4f       	sbci	r21, 0xFF	; 255
					if ((val&0x04)!=0x00) fract=fract+250;
     75e:	82 ff       	sbrs	r24, 2
     760:	02 c0       	rjmp	.+4      	; 0x766 <main+0x1b6>
     762:	46 50       	subi	r20, 0x06	; 6
     764:	5f 4f       	sbci	r21, 0xFF	; 255
					if ((val&0x08)!=0x00) fract=fract+500;
     766:	83 ff       	sbrs	r24, 3
     768:	02 c0       	rjmp	.+4      	; 0x76e <main+0x1be>
     76a:	4c 50       	subi	r20, 0x0C	; 12
     76c:	5e 4f       	sbci	r21, 0xFE	; 254
					val=(val>>4)*10+fract/100;
     76e:	f4 e0       	ldi	r31, 0x04	; 4
     770:	96 95       	lsr	r25
     772:	87 95       	ror	r24
     774:	fa 95       	dec	r31
     776:	e1 f7       	brne	.-8      	; 0x770 <main+0x1c0>
     778:	9c 01       	movw	r18, r24
     77a:	73 e0       	ldi	r23, 0x03	; 3
     77c:	22 0f       	add	r18, r18
     77e:	33 1f       	adc	r19, r19
     780:	7a 95       	dec	r23
     782:	e1 f7       	brne	.-8      	; 0x77c <main+0x1cc>
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	28 0f       	add	r18, r24
     78a:	39 1f       	adc	r19, r25
     78c:	ca 01       	movw	r24, r20
     78e:	64 e6       	ldi	r22, 0x64	; 100
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	0e 94 84 0b 	call	0x1708	; 0x1708 <__udivmodhi4>
     796:	62 0f       	add	r22, r18
     798:	73 1f       	adc	r23, r19
					if (sign==1) val=OFFSET-val;
     79a:	e1 30       	cpi	r30, 0x01	; 1
     79c:	31 f4       	brne	.+12     	; 0x7aa <main+0x1fa>
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	95 e0       	ldi	r25, 0x05	; 5
     7a2:	86 1b       	sub	r24, r22
     7a4:	97 0b       	sbc	r25, r23
     7a6:	bc 01       	movw	r22, r24
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <main+0x1fe>
					else val=val+OFFSET;
     7aa:	60 50       	subi	r22, 0x00	; 0
     7ac:	7b 4f       	sbci	r23, 0xFB	; 251
					sensorData[i]=val;
     7ae:	79 83       	std	Y+1, r23	; 0x01
     7b0:	68 83       	st	Y, r22
     7b2:	0d c0       	rjmp	.+26     	; 0x7ce <main+0x21e>
				}
				else errorCode|=(1<<i);
     7b4:	21 e0       	ldi	r18, 0x01	; 1
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	00 2e       	mov	r0, r16
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <main+0x210>
     7bc:	22 0f       	add	r18, r18
     7be:	33 1f       	adc	r19, r19
     7c0:	0a 94       	dec	r0
     7c2:	e2 f7       	brpl	.-8      	; 0x7bc <main+0x20c>
     7c4:	80 91 6a 01 	lds	r24, 0x016A
     7c8:	82 2b       	or	r24, r18
     7ca:	80 93 6a 01 	sts	0x016A, r24
     7ce:	0f 5f       	subi	r16, 0xFF	; 255
     7d0:	1f 4f       	sbci	r17, 0xFF	; 255
     7d2:	22 96       	adiw	r28, 0x02	; 2
		}
		if (firstConv==_YES) firstConv=_NO;
		else
		{		 
			//receive measured data from sensors
			for (i=0;i<SENSOR_COUNT;i++)
     7d4:	02 30       	cpi	r16, 0x02	; 2
     7d6:	11 05       	cpc	r17, r1
     7d8:	09 f0       	breq	.+2      	; 0x7dc <main+0x22c>
     7da:	9d cf       	rjmp	.-198    	; 0x716 <main+0x166>
					sensorData[i]=val;
				}
				else errorCode|=(1<<i);
			}
			//if coolerState is OFF - clear all variables
			if (coolerState==COOLER_OFF) 
     7dc:	80 91 8a 01 	lds	r24, 0x018A
     7e0:	88 23       	and	r24, r24
     7e2:	a1 f4       	brne	.+40     	; 0x80c <main+0x25c>
			{
				coolerPower=0x00;
     7e4:	10 92 6b 01 	sts	0x016B, r1
				U=0.0;
     7e8:	60 92 8f 01 	sts	0x018F, r6
     7ec:	70 92 90 01 	sts	0x0190, r7
     7f0:	80 92 91 01 	sts	0x0191, r8
     7f4:	90 92 92 01 	sts	0x0192, r9
				E=0.0;
     7f8:	60 92 8b 01 	sts	0x018B, r6
     7fc:	70 92 8c 01 	sts	0x018C, r7
     800:	80 92 8d 01 	sts	0x018D, r8
     804:	90 92 8e 01 	sts	0x018E, r9
				TEC_PORT&=~(1<<TEC_PIN);
     808:	95 98       	cbi	0x12, 5	; 18
     80a:	50 cf       	rjmp	.-352    	; 0x6ac <main+0xfc>
			}
			//If no errors at sensor[0] and coolerState is ON - calculate and set software PWM
			if (coolerState==COOLER_ON)
     80c:	81 30       	cpi	r24, 0x01	; 1
     80e:	09 f0       	breq	.+2      	; 0x812 <main+0x262>
     810:	4d cf       	rjmp	.-358    	; 0x6ac <main+0xfc>
				{
					E=(double) sensorData[0]-setData[0];
     812:	60 91 7a 01 	lds	r22, 0x017A
     816:	70 91 7b 01 	lds	r23, 0x017B
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__floatunsisf>
     822:	7b 01       	movw	r14, r22
     824:	8c 01       	movw	r16, r24
     826:	60 91 78 01 	lds	r22, 0x0178
     82a:	70 91 79 01 	lds	r23, 0x0179
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__floatunsisf>
     836:	9b 01       	movw	r18, r22
     838:	ac 01       	movw	r20, r24
     83a:	c8 01       	movw	r24, r16
     83c:	b7 01       	movw	r22, r14
     83e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__subsf3>
     842:	60 93 8b 01 	sts	0x018B, r22
     846:	70 93 8c 01 	sts	0x018C, r23
     84a:	80 93 8d 01 	sts	0x018D, r24
     84e:	90 93 8e 01 	sts	0x018E, r25

					U=U+KPSLOW*E;
     852:	2a e0       	ldi	r18, 0x0A	; 10
     854:	37 ed       	ldi	r19, 0xD7	; 215
     856:	43 e2       	ldi	r20, 0x23	; 35
     858:	5c e3       	ldi	r21, 0x3C	; 60
     85a:	0e 94 dd 06 	call	0xdba	; 0xdba <__mulsf3>
     85e:	20 91 8f 01 	lds	r18, 0x018F
     862:	30 91 90 01 	lds	r19, 0x0190
     866:	40 91 91 01 	lds	r20, 0x0191
     86a:	50 91 92 01 	lds	r21, 0x0192
     86e:	0e 94 b0 06 	call	0xd60	; 0xd60 <__addsf3>
     872:	60 93 8f 01 	sts	0x018F, r22
     876:	70 93 90 01 	sts	0x0190, r23
     87a:	80 93 91 01 	sts	0x0191, r24
     87e:	90 93 92 01 	sts	0x0192, r25

					if (U>255.0) 	U=255.0;
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	4f e7       	ldi	r20, 0x7F	; 127
     888:	53 e4       	ldi	r21, 0x43	; 67
     88a:	0e 94 d7 07 	call	0xfae	; 0xfae <__gtsf2>
     88e:	18 16       	cp	r1, r24
     890:	64 f4       	brge	.+24     	; 0x8aa <main+0x2fa>
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	af e7       	ldi	r26, 0x7F	; 127
     898:	b3 e4       	ldi	r27, 0x43	; 67
     89a:	80 93 8f 01 	sts	0x018F, r24
     89e:	90 93 90 01 	sts	0x0190, r25
     8a2:	a0 93 91 01 	sts	0x0191, r26
     8a6:	b0 93 92 01 	sts	0x0192, r27
					if (U<=0.0) 	U=0.0;		
     8aa:	20 e0       	ldi	r18, 0x00	; 0
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	40 e0       	ldi	r20, 0x00	; 0
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	60 91 8f 01 	lds	r22, 0x018F
     8b6:	70 91 90 01 	lds	r23, 0x0190
     8ba:	80 91 91 01 	lds	r24, 0x0191
     8be:	90 91 92 01 	lds	r25, 0x0192
     8c2:	0e 94 67 08 	call	0x10ce	; 0x10ce <__lesf2>
     8c6:	18 16       	cp	r1, r24
     8c8:	44 f0       	brlt	.+16     	; 0x8da <main+0x32a>
     8ca:	60 92 8f 01 	sts	0x018F, r6
     8ce:	70 92 90 01 	sts	0x0190, r7
     8d2:	80 92 91 01 	sts	0x0191, r8
     8d6:	90 92 92 01 	sts	0x0192, r9
					
					if (U>0.0) TEC_PORT|=(1<<TEC_PIN);	
     8da:	a0 90 8f 01 	lds	r10, 0x018F
     8de:	b0 90 90 01 	lds	r11, 0x0190
     8e2:	c0 90 91 01 	lds	r12, 0x0191
     8e6:	d0 90 92 01 	lds	r13, 0x0192
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	40 e0       	ldi	r20, 0x00	; 0
     8f0:	50 e0       	ldi	r21, 0x00	; 0
     8f2:	c6 01       	movw	r24, r12
     8f4:	b5 01       	movw	r22, r10
     8f6:	0e 94 d7 07 	call	0xfae	; 0xfae <__gtsf2>
     8fa:	18 16       	cp	r1, r24
     8fc:	0c f4       	brge	.+2      	; 0x900 <main+0x350>
     8fe:	95 9a       	sbi	0x12, 5	; 18
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	4a ef       	ldi	r20, 0xFA	; 250
     906:	54 e4       	ldi	r21, 0x44	; 68
     908:	c6 01       	movw	r24, r12
     90a:	b5 01       	movw	r22, r10
     90c:	0e 94 dd 06 	call	0xdba	; 0xdba <__mulsf3>
     910:	7b 01       	movw	r14, r22
     912:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	40 e8       	ldi	r20, 0x80	; 128
     91a:	5f e3       	ldi	r21, 0x3F	; 63
     91c:	0e 94 37 08 	call	0x106e	; 0x106e <__ltsf2>
     920:	88 23       	and	r24, r24
     922:	1c f4       	brge	.+6      	; 0x92a <main+0x37a>
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	22 c0       	rjmp	.+68     	; 0x96e <main+0x3be>
		__ticks = 1;
	else if (__tmp > 65535)
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	3f ef       	ldi	r19, 0xFF	; 255
     92e:	4f e7       	ldi	r20, 0x7F	; 127
     930:	57 e4       	ldi	r21, 0x47	; 71
     932:	c8 01       	movw	r24, r16
     934:	b7 01       	movw	r22, r14
     936:	0e 94 d7 07 	call	0xfae	; 0xfae <__gtsf2>
     93a:	18 16       	cp	r1, r24
     93c:	a4 f4       	brge	.+40     	; 0x966 <main+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e2       	ldi	r20, 0x20	; 32
     944:	51 e4       	ldi	r21, 0x41	; 65
     946:	c6 01       	movw	r24, r12
     948:	b5 01       	movw	r22, r10
     94a:	0e 94 dd 06 	call	0xdba	; 0xdba <__mulsf3>
     94e:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
     952:	05 c0       	rjmp	.+10     	; 0x95e <main+0x3ae>
     954:	c1 01       	movw	r24, r2
     956:	01 97       	sbiw	r24, 0x01	; 1
     958:	f1 f7       	brne	.-4      	; 0x956 <main+0x3a6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     95a:	61 50       	subi	r22, 0x01	; 1
     95c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     95e:	61 15       	cp	r22, r1
     960:	71 05       	cpc	r23, r1
     962:	c1 f7       	brne	.-16     	; 0x954 <main+0x3a4>
     964:	07 c0       	rjmp	.+14     	; 0x974 <main+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     966:	c8 01       	movw	r24, r16
     968:	b7 01       	movw	r22, r14
     96a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
     96e:	cb 01       	movw	r24, r22
     970:	01 97       	sbiw	r24, 0x01	; 1
     972:	f1 f7       	brne	.-4      	; 0x970 <main+0x3c0>
					_delay_ms(U);								
					if (((uint8_t) U)!=255)TEC_PORT&=~(1<<TEC_PIN);
     974:	c6 01       	movw	r24, r12
     976:	b5 01       	movw	r22, r10
     978:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
     97c:	56 2e       	mov	r5, r22
     97e:	9f ef       	ldi	r25, 0xFF	; 255
     980:	59 12       	cpse	r5, r25
     982:	95 98       	cbi	0x12, 5	; 18
					_delay_ms(255-U);
     984:	a6 01       	movw	r20, r12
     986:	95 01       	movw	r18, r10
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	8f e7       	ldi	r24, 0x7F	; 127
     98e:	93 e4       	ldi	r25, 0x43	; 67
     990:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__subsf3>
     994:	5b 01       	movw	r10, r22
     996:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	4a ef       	ldi	r20, 0xFA	; 250
     99e:	54 e4       	ldi	r21, 0x44	; 68
     9a0:	0e 94 dd 06 	call	0xdba	; 0xdba <__mulsf3>
     9a4:	7b 01       	movw	r14, r22
     9a6:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	40 e8       	ldi	r20, 0x80	; 128
     9ae:	5f e3       	ldi	r21, 0x3F	; 63
     9b0:	0e 94 37 08 	call	0x106e	; 0x106e <__ltsf2>
     9b4:	88 23       	and	r24, r24
     9b6:	1c f4       	brge	.+6      	; 0x9be <main+0x40e>
     9b8:	61 e0       	ldi	r22, 0x01	; 1
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	22 c0       	rjmp	.+68     	; 0xa02 <main+0x452>
		__ticks = 1;
	else if (__tmp > 65535)
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	3f ef       	ldi	r19, 0xFF	; 255
     9c2:	4f e7       	ldi	r20, 0x7F	; 127
     9c4:	57 e4       	ldi	r21, 0x47	; 71
     9c6:	c8 01       	movw	r24, r16
     9c8:	b7 01       	movw	r22, r14
     9ca:	0e 94 d7 07 	call	0xfae	; 0xfae <__gtsf2>
     9ce:	18 16       	cp	r1, r24
     9d0:	a4 f4       	brge	.+40     	; 0x9fa <main+0x44a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	40 e2       	ldi	r20, 0x20	; 32
     9d8:	51 e4       	ldi	r21, 0x41	; 65
     9da:	c6 01       	movw	r24, r12
     9dc:	b5 01       	movw	r22, r10
     9de:	0e 94 dd 06 	call	0xdba	; 0xdba <__mulsf3>
     9e2:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
     9e6:	05 c0       	rjmp	.+10     	; 0x9f2 <main+0x442>
     9e8:	c1 01       	movw	r24, r2
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	f1 f7       	brne	.-4      	; 0x9ea <main+0x43a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ee:	61 50       	subi	r22, 0x01	; 1
     9f0:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9f2:	61 15       	cp	r22, r1
     9f4:	71 05       	cpc	r23, r1
     9f6:	c1 f7       	brne	.-16     	; 0x9e8 <main+0x438>
     9f8:	07 c0       	rjmp	.+14     	; 0xa08 <main+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9fa:	c8 01       	movw	r24, r16
     9fc:	b7 01       	movw	r22, r14
     9fe:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fixunssfsi>
     a02:	cb 01       	movw	r24, r22
     a04:	01 97       	sbiw	r24, 0x01	; 1
     a06:	f1 f7       	brne	.-4      	; 0xa04 <main+0x454>

					coolerPower=((uint8_t)U);
     a08:	50 92 6b 01 	sts	0x016B, r5
     a0c:	4f ce       	rjmp	.-866    	; 0x6ac <main+0xfc>

00000a0e <__fixunssfsi>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	40 e0       	ldi	r20, 0x00	; 0
     a20:	5f e4       	ldi	r21, 0x4F	; 79
     a22:	0e 94 07 08 	call	0x100e	; 0x100e <__gesf2>
     a26:	88 23       	and	r24, r24
     a28:	8c f0       	brlt	.+34     	; 0xa4c <__fixunssfsi+0x3e>
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	40 e0       	ldi	r20, 0x00	; 0
     a30:	5f e4       	ldi	r21, 0x4F	; 79
     a32:	c8 01       	movw	r24, r16
     a34:	b7 01       	movw	r22, r14
     a36:	0e 94 7f 06 	call	0xcfe	; 0xcfe <__subsf3>
     a3a:	0e 94 97 08 	call	0x112e	; 0x112e <__fixsfsi>
     a3e:	9b 01       	movw	r18, r22
     a40:	ac 01       	movw	r20, r24
     a42:	20 50       	subi	r18, 0x00	; 0
     a44:	30 40       	sbci	r19, 0x00	; 0
     a46:	40 40       	sbci	r20, 0x00	; 0
     a48:	50 48       	sbci	r21, 0x80	; 128
     a4a:	06 c0       	rjmp	.+12     	; 0xa58 <__fixunssfsi+0x4a>
     a4c:	c8 01       	movw	r24, r16
     a4e:	b7 01       	movw	r22, r14
     a50:	0e 94 97 08 	call	0x112e	; 0x112e <__fixsfsi>
     a54:	9b 01       	movw	r18, r22
     a56:	ac 01       	movw	r20, r24
     a58:	b9 01       	movw	r22, r18
     a5a:	ca 01       	movw	r24, r20
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	ff 90       	pop	r15
     a62:	ef 90       	pop	r14
     a64:	08 95       	ret

00000a66 <_fpadd_parts>:
     a66:	a0 e0       	ldi	r26, 0x00	; 0
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e9 e3       	ldi	r30, 0x39	; 57
     a6c:	f5 e0       	ldi	r31, 0x05	; 5
     a6e:	0c 94 98 0b 	jmp	0x1730	; 0x1730 <__prologue_saves__>
     a72:	dc 01       	movw	r26, r24
     a74:	2b 01       	movw	r4, r22
     a76:	fa 01       	movw	r30, r20
     a78:	9c 91       	ld	r25, X
     a7a:	92 30       	cpi	r25, 0x02	; 2
     a7c:	08 f4       	brcc	.+2      	; 0xa80 <_fpadd_parts+0x1a>
     a7e:	39 c1       	rjmp	.+626    	; 0xcf2 <_fpadd_parts+0x28c>
     a80:	eb 01       	movw	r28, r22
     a82:	88 81       	ld	r24, Y
     a84:	82 30       	cpi	r24, 0x02	; 2
     a86:	08 f4       	brcc	.+2      	; 0xa8a <_fpadd_parts+0x24>
     a88:	33 c1       	rjmp	.+614    	; 0xcf0 <_fpadd_parts+0x28a>
     a8a:	94 30       	cpi	r25, 0x04	; 4
     a8c:	69 f4       	brne	.+26     	; 0xaa8 <_fpadd_parts+0x42>
     a8e:	84 30       	cpi	r24, 0x04	; 4
     a90:	09 f0       	breq	.+2      	; 0xa94 <_fpadd_parts+0x2e>
     a92:	2f c1       	rjmp	.+606    	; 0xcf2 <_fpadd_parts+0x28c>
     a94:	11 96       	adiw	r26, 0x01	; 1
     a96:	9c 91       	ld	r25, X
     a98:	11 97       	sbiw	r26, 0x01	; 1
     a9a:	89 81       	ldd	r24, Y+1	; 0x01
     a9c:	98 17       	cp	r25, r24
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <_fpadd_parts+0x3c>
     aa0:	28 c1       	rjmp	.+592    	; 0xcf2 <_fpadd_parts+0x28c>
     aa2:	a0 e6       	ldi	r26, 0x60	; 96
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	25 c1       	rjmp	.+586    	; 0xcf2 <_fpadd_parts+0x28c>
     aa8:	84 30       	cpi	r24, 0x04	; 4
     aaa:	09 f4       	brne	.+2      	; 0xaae <_fpadd_parts+0x48>
     aac:	21 c1       	rjmp	.+578    	; 0xcf0 <_fpadd_parts+0x28a>
     aae:	82 30       	cpi	r24, 0x02	; 2
     ab0:	a9 f4       	brne	.+42     	; 0xadc <_fpadd_parts+0x76>
     ab2:	92 30       	cpi	r25, 0x02	; 2
     ab4:	09 f0       	breq	.+2      	; 0xab8 <_fpadd_parts+0x52>
     ab6:	1d c1       	rjmp	.+570    	; 0xcf2 <_fpadd_parts+0x28c>
     ab8:	9a 01       	movw	r18, r20
     aba:	ad 01       	movw	r20, r26
     abc:	88 e0       	ldi	r24, 0x08	; 8
     abe:	ea 01       	movw	r28, r20
     ac0:	09 90       	ld	r0, Y+
     ac2:	ae 01       	movw	r20, r28
     ac4:	e9 01       	movw	r28, r18
     ac6:	09 92       	st	Y+, r0
     ac8:	9e 01       	movw	r18, r28
     aca:	81 50       	subi	r24, 0x01	; 1
     acc:	c1 f7       	brne	.-16     	; 0xabe <_fpadd_parts+0x58>
     ace:	e2 01       	movw	r28, r4
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
     ad2:	11 96       	adiw	r26, 0x01	; 1
     ad4:	9c 91       	ld	r25, X
     ad6:	89 23       	and	r24, r25
     ad8:	81 83       	std	Z+1, r24	; 0x01
     ada:	08 c1       	rjmp	.+528    	; 0xcec <_fpadd_parts+0x286>
     adc:	92 30       	cpi	r25, 0x02	; 2
     ade:	09 f4       	brne	.+2      	; 0xae2 <_fpadd_parts+0x7c>
     ae0:	07 c1       	rjmp	.+526    	; 0xcf0 <_fpadd_parts+0x28a>
     ae2:	12 96       	adiw	r26, 0x02	; 2
     ae4:	2d 90       	ld	r2, X+
     ae6:	3c 90       	ld	r3, X
     ae8:	13 97       	sbiw	r26, 0x03	; 3
     aea:	eb 01       	movw	r28, r22
     aec:	8a 81       	ldd	r24, Y+2	; 0x02
     aee:	9b 81       	ldd	r25, Y+3	; 0x03
     af0:	14 96       	adiw	r26, 0x04	; 4
     af2:	ad 90       	ld	r10, X+
     af4:	bd 90       	ld	r11, X+
     af6:	cd 90       	ld	r12, X+
     af8:	dc 90       	ld	r13, X
     afa:	17 97       	sbiw	r26, 0x07	; 7
     afc:	ec 80       	ldd	r14, Y+4	; 0x04
     afe:	fd 80       	ldd	r15, Y+5	; 0x05
     b00:	0e 81       	ldd	r16, Y+6	; 0x06
     b02:	1f 81       	ldd	r17, Y+7	; 0x07
     b04:	91 01       	movw	r18, r2
     b06:	28 1b       	sub	r18, r24
     b08:	39 0b       	sbc	r19, r25
     b0a:	b9 01       	movw	r22, r18
     b0c:	37 ff       	sbrs	r19, 7
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <_fpadd_parts+0xb2>
     b10:	66 27       	eor	r22, r22
     b12:	77 27       	eor	r23, r23
     b14:	62 1b       	sub	r22, r18
     b16:	73 0b       	sbc	r23, r19
     b18:	60 32       	cpi	r22, 0x20	; 32
     b1a:	71 05       	cpc	r23, r1
     b1c:	0c f0       	brlt	.+2      	; 0xb20 <_fpadd_parts+0xba>
     b1e:	61 c0       	rjmp	.+194    	; 0xbe2 <_fpadd_parts+0x17c>
     b20:	12 16       	cp	r1, r18
     b22:	13 06       	cpc	r1, r19
     b24:	6c f5       	brge	.+90     	; 0xb80 <_fpadd_parts+0x11a>
     b26:	37 01       	movw	r6, r14
     b28:	48 01       	movw	r8, r16
     b2a:	06 2e       	mov	r0, r22
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <_fpadd_parts+0xd0>
     b2e:	96 94       	lsr	r9
     b30:	87 94       	ror	r8
     b32:	77 94       	ror	r7
     b34:	67 94       	ror	r6
     b36:	0a 94       	dec	r0
     b38:	d2 f7       	brpl	.-12     	; 0xb2e <_fpadd_parts+0xc8>
     b3a:	21 e0       	ldi	r18, 0x01	; 1
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	40 e0       	ldi	r20, 0x00	; 0
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	04 c0       	rjmp	.+8      	; 0xb4c <_fpadd_parts+0xe6>
     b44:	22 0f       	add	r18, r18
     b46:	33 1f       	adc	r19, r19
     b48:	44 1f       	adc	r20, r20
     b4a:	55 1f       	adc	r21, r21
     b4c:	6a 95       	dec	r22
     b4e:	d2 f7       	brpl	.-12     	; 0xb44 <_fpadd_parts+0xde>
     b50:	21 50       	subi	r18, 0x01	; 1
     b52:	30 40       	sbci	r19, 0x00	; 0
     b54:	40 40       	sbci	r20, 0x00	; 0
     b56:	50 40       	sbci	r21, 0x00	; 0
     b58:	2e 21       	and	r18, r14
     b5a:	3f 21       	and	r19, r15
     b5c:	40 23       	and	r20, r16
     b5e:	51 23       	and	r21, r17
     b60:	21 15       	cp	r18, r1
     b62:	31 05       	cpc	r19, r1
     b64:	41 05       	cpc	r20, r1
     b66:	51 05       	cpc	r21, r1
     b68:	21 f0       	breq	.+8      	; 0xb72 <_fpadd_parts+0x10c>
     b6a:	21 e0       	ldi	r18, 0x01	; 1
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	79 01       	movw	r14, r18
     b74:	8a 01       	movw	r16, r20
     b76:	e6 28       	or	r14, r6
     b78:	f7 28       	or	r15, r7
     b7a:	08 29       	or	r16, r8
     b7c:	19 29       	or	r17, r9
     b7e:	3c c0       	rjmp	.+120    	; 0xbf8 <_fpadd_parts+0x192>
     b80:	23 2b       	or	r18, r19
     b82:	d1 f1       	breq	.+116    	; 0xbf8 <_fpadd_parts+0x192>
     b84:	26 0e       	add	r2, r22
     b86:	37 1e       	adc	r3, r23
     b88:	35 01       	movw	r6, r10
     b8a:	46 01       	movw	r8, r12
     b8c:	06 2e       	mov	r0, r22
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <_fpadd_parts+0x132>
     b90:	96 94       	lsr	r9
     b92:	87 94       	ror	r8
     b94:	77 94       	ror	r7
     b96:	67 94       	ror	r6
     b98:	0a 94       	dec	r0
     b9a:	d2 f7       	brpl	.-12     	; 0xb90 <_fpadd_parts+0x12a>
     b9c:	21 e0       	ldi	r18, 0x01	; 1
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	40 e0       	ldi	r20, 0x00	; 0
     ba2:	50 e0       	ldi	r21, 0x00	; 0
     ba4:	04 c0       	rjmp	.+8      	; 0xbae <_fpadd_parts+0x148>
     ba6:	22 0f       	add	r18, r18
     ba8:	33 1f       	adc	r19, r19
     baa:	44 1f       	adc	r20, r20
     bac:	55 1f       	adc	r21, r21
     bae:	6a 95       	dec	r22
     bb0:	d2 f7       	brpl	.-12     	; 0xba6 <_fpadd_parts+0x140>
     bb2:	21 50       	subi	r18, 0x01	; 1
     bb4:	30 40       	sbci	r19, 0x00	; 0
     bb6:	40 40       	sbci	r20, 0x00	; 0
     bb8:	50 40       	sbci	r21, 0x00	; 0
     bba:	2a 21       	and	r18, r10
     bbc:	3b 21       	and	r19, r11
     bbe:	4c 21       	and	r20, r12
     bc0:	5d 21       	and	r21, r13
     bc2:	21 15       	cp	r18, r1
     bc4:	31 05       	cpc	r19, r1
     bc6:	41 05       	cpc	r20, r1
     bc8:	51 05       	cpc	r21, r1
     bca:	21 f0       	breq	.+8      	; 0xbd4 <_fpadd_parts+0x16e>
     bcc:	21 e0       	ldi	r18, 0x01	; 1
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	59 01       	movw	r10, r18
     bd6:	6a 01       	movw	r12, r20
     bd8:	a6 28       	or	r10, r6
     bda:	b7 28       	or	r11, r7
     bdc:	c8 28       	or	r12, r8
     bde:	d9 28       	or	r13, r9
     be0:	0b c0       	rjmp	.+22     	; 0xbf8 <_fpadd_parts+0x192>
     be2:	82 15       	cp	r24, r2
     be4:	93 05       	cpc	r25, r3
     be6:	2c f0       	brlt	.+10     	; 0xbf2 <_fpadd_parts+0x18c>
     be8:	1c 01       	movw	r2, r24
     bea:	aa 24       	eor	r10, r10
     bec:	bb 24       	eor	r11, r11
     bee:	65 01       	movw	r12, r10
     bf0:	03 c0       	rjmp	.+6      	; 0xbf8 <_fpadd_parts+0x192>
     bf2:	ee 24       	eor	r14, r14
     bf4:	ff 24       	eor	r15, r15
     bf6:	87 01       	movw	r16, r14
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	9c 91       	ld	r25, X
     bfc:	d2 01       	movw	r26, r4
     bfe:	11 96       	adiw	r26, 0x01	; 1
     c00:	8c 91       	ld	r24, X
     c02:	98 17       	cp	r25, r24
     c04:	09 f4       	brne	.+2      	; 0xc08 <_fpadd_parts+0x1a2>
     c06:	45 c0       	rjmp	.+138    	; 0xc92 <_fpadd_parts+0x22c>
     c08:	99 23       	and	r25, r25
     c0a:	39 f0       	breq	.+14     	; 0xc1a <_fpadd_parts+0x1b4>
     c0c:	a8 01       	movw	r20, r16
     c0e:	97 01       	movw	r18, r14
     c10:	2a 19       	sub	r18, r10
     c12:	3b 09       	sbc	r19, r11
     c14:	4c 09       	sbc	r20, r12
     c16:	5d 09       	sbc	r21, r13
     c18:	06 c0       	rjmp	.+12     	; 0xc26 <_fpadd_parts+0x1c0>
     c1a:	a6 01       	movw	r20, r12
     c1c:	95 01       	movw	r18, r10
     c1e:	2e 19       	sub	r18, r14
     c20:	3f 09       	sbc	r19, r15
     c22:	40 0b       	sbc	r20, r16
     c24:	51 0b       	sbc	r21, r17
     c26:	57 fd       	sbrc	r21, 7
     c28:	08 c0       	rjmp	.+16     	; 0xc3a <_fpadd_parts+0x1d4>
     c2a:	11 82       	std	Z+1, r1	; 0x01
     c2c:	33 82       	std	Z+3, r3	; 0x03
     c2e:	22 82       	std	Z+2, r2	; 0x02
     c30:	24 83       	std	Z+4, r18	; 0x04
     c32:	35 83       	std	Z+5, r19	; 0x05
     c34:	46 83       	std	Z+6, r20	; 0x06
     c36:	57 83       	std	Z+7, r21	; 0x07
     c38:	1d c0       	rjmp	.+58     	; 0xc74 <_fpadd_parts+0x20e>
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	81 83       	std	Z+1, r24	; 0x01
     c3e:	33 82       	std	Z+3, r3	; 0x03
     c40:	22 82       	std	Z+2, r2	; 0x02
     c42:	88 27       	eor	r24, r24
     c44:	99 27       	eor	r25, r25
     c46:	dc 01       	movw	r26, r24
     c48:	82 1b       	sub	r24, r18
     c4a:	93 0b       	sbc	r25, r19
     c4c:	a4 0b       	sbc	r26, r20
     c4e:	b5 0b       	sbc	r27, r21
     c50:	84 83       	std	Z+4, r24	; 0x04
     c52:	95 83       	std	Z+5, r25	; 0x05
     c54:	a6 83       	std	Z+6, r26	; 0x06
     c56:	b7 83       	std	Z+7, r27	; 0x07
     c58:	0d c0       	rjmp	.+26     	; 0xc74 <_fpadd_parts+0x20e>
     c5a:	22 0f       	add	r18, r18
     c5c:	33 1f       	adc	r19, r19
     c5e:	44 1f       	adc	r20, r20
     c60:	55 1f       	adc	r21, r21
     c62:	24 83       	std	Z+4, r18	; 0x04
     c64:	35 83       	std	Z+5, r19	; 0x05
     c66:	46 83       	std	Z+6, r20	; 0x06
     c68:	57 83       	std	Z+7, r21	; 0x07
     c6a:	82 81       	ldd	r24, Z+2	; 0x02
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	01 97       	sbiw	r24, 0x01	; 1
     c70:	93 83       	std	Z+3, r25	; 0x03
     c72:	82 83       	std	Z+2, r24	; 0x02
     c74:	24 81       	ldd	r18, Z+4	; 0x04
     c76:	35 81       	ldd	r19, Z+5	; 0x05
     c78:	46 81       	ldd	r20, Z+6	; 0x06
     c7a:	57 81       	ldd	r21, Z+7	; 0x07
     c7c:	da 01       	movw	r26, r20
     c7e:	c9 01       	movw	r24, r18
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	a1 09       	sbc	r26, r1
     c84:	b1 09       	sbc	r27, r1
     c86:	8f 5f       	subi	r24, 0xFF	; 255
     c88:	9f 4f       	sbci	r25, 0xFF	; 255
     c8a:	af 4f       	sbci	r26, 0xFF	; 255
     c8c:	bf 43       	sbci	r27, 0x3F	; 63
     c8e:	28 f3       	brcs	.-54     	; 0xc5a <_fpadd_parts+0x1f4>
     c90:	0b c0       	rjmp	.+22     	; 0xca8 <_fpadd_parts+0x242>
     c92:	91 83       	std	Z+1, r25	; 0x01
     c94:	33 82       	std	Z+3, r3	; 0x03
     c96:	22 82       	std	Z+2, r2	; 0x02
     c98:	ea 0c       	add	r14, r10
     c9a:	fb 1c       	adc	r15, r11
     c9c:	0c 1d       	adc	r16, r12
     c9e:	1d 1d       	adc	r17, r13
     ca0:	e4 82       	std	Z+4, r14	; 0x04
     ca2:	f5 82       	std	Z+5, r15	; 0x05
     ca4:	06 83       	std	Z+6, r16	; 0x06
     ca6:	17 83       	std	Z+7, r17	; 0x07
     ca8:	83 e0       	ldi	r24, 0x03	; 3
     caa:	80 83       	st	Z, r24
     cac:	24 81       	ldd	r18, Z+4	; 0x04
     cae:	35 81       	ldd	r19, Z+5	; 0x05
     cb0:	46 81       	ldd	r20, Z+6	; 0x06
     cb2:	57 81       	ldd	r21, Z+7	; 0x07
     cb4:	57 ff       	sbrs	r21, 7
     cb6:	1a c0       	rjmp	.+52     	; 0xcec <_fpadd_parts+0x286>
     cb8:	c9 01       	movw	r24, r18
     cba:	aa 27       	eor	r26, r26
     cbc:	97 fd       	sbrc	r25, 7
     cbe:	a0 95       	com	r26
     cc0:	ba 2f       	mov	r27, r26
     cc2:	81 70       	andi	r24, 0x01	; 1
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	56 95       	lsr	r21
     ccc:	47 95       	ror	r20
     cce:	37 95       	ror	r19
     cd0:	27 95       	ror	r18
     cd2:	82 2b       	or	r24, r18
     cd4:	93 2b       	or	r25, r19
     cd6:	a4 2b       	or	r26, r20
     cd8:	b5 2b       	or	r27, r21
     cda:	84 83       	std	Z+4, r24	; 0x04
     cdc:	95 83       	std	Z+5, r25	; 0x05
     cde:	a6 83       	std	Z+6, r26	; 0x06
     ce0:	b7 83       	std	Z+7, r27	; 0x07
     ce2:	82 81       	ldd	r24, Z+2	; 0x02
     ce4:	93 81       	ldd	r25, Z+3	; 0x03
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	93 83       	std	Z+3, r25	; 0x03
     cea:	82 83       	std	Z+2, r24	; 0x02
     cec:	df 01       	movw	r26, r30
     cee:	01 c0       	rjmp	.+2      	; 0xcf2 <_fpadd_parts+0x28c>
     cf0:	d2 01       	movw	r26, r4
     cf2:	cd 01       	movw	r24, r26
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	e2 e1       	ldi	r30, 0x12	; 18
     cfa:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <__epilogue_restores__>

00000cfe <__subsf3>:
     cfe:	a0 e2       	ldi	r26, 0x20	; 32
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e5 e8       	ldi	r30, 0x85	; 133
     d04:	f6 e0       	ldi	r31, 0x06	; 6
     d06:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__prologue_saves__+0x18>
     d0a:	69 83       	std	Y+1, r22	; 0x01
     d0c:	7a 83       	std	Y+2, r23	; 0x02
     d0e:	8b 83       	std	Y+3, r24	; 0x03
     d10:	9c 83       	std	Y+4, r25	; 0x04
     d12:	2d 83       	std	Y+5, r18	; 0x05
     d14:	3e 83       	std	Y+6, r19	; 0x06
     d16:	4f 83       	std	Y+7, r20	; 0x07
     d18:	58 87       	std	Y+8, r21	; 0x08
     d1a:	e9 e0       	ldi	r30, 0x09	; 9
     d1c:	ee 2e       	mov	r14, r30
     d1e:	f1 2c       	mov	r15, r1
     d20:	ec 0e       	add	r14, r28
     d22:	fd 1e       	adc	r15, r29
     d24:	b7 01       	movw	r22, r14
     d26:	ce 01       	movw	r24, r28
     d28:	01 96       	adiw	r24, 0x01	; 1
     d2a:	0e 94 88 0a 	call	0x1510	; 0x1510 <__unpack_f>
     d2e:	8e 01       	movw	r16, r28
     d30:	0f 5e       	subi	r16, 0xEF	; 239
     d32:	1f 4f       	sbci	r17, 0xFF	; 255
     d34:	b8 01       	movw	r22, r16
     d36:	ce 01       	movw	r24, r28
     d38:	05 96       	adiw	r24, 0x05	; 5
     d3a:	0e 94 88 0a 	call	0x1510	; 0x1510 <__unpack_f>
     d3e:	8a 89       	ldd	r24, Y+18	; 0x12
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	89 27       	eor	r24, r25
     d44:	8a 8b       	std	Y+18, r24	; 0x12
     d46:	ae 01       	movw	r20, r28
     d48:	47 5e       	subi	r20, 0xE7	; 231
     d4a:	5f 4f       	sbci	r21, 0xFF	; 255
     d4c:	b8 01       	movw	r22, r16
     d4e:	c7 01       	movw	r24, r14
     d50:	0e 94 33 05 	call	0xa66	; 0xa66 <_fpadd_parts>
     d54:	0e 94 b3 09 	call	0x1366	; 0x1366 <__pack_f>
     d58:	a0 96       	adiw	r28, 0x20	; 32
     d5a:	e6 e0       	ldi	r30, 0x06	; 6
     d5c:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__epilogue_restores__+0x18>

00000d60 <__addsf3>:
     d60:	a0 e2       	ldi	r26, 0x20	; 32
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e6 eb       	ldi	r30, 0xB6	; 182
     d66:	f6 e0       	ldi	r31, 0x06	; 6
     d68:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__prologue_saves__+0x18>
     d6c:	69 83       	std	Y+1, r22	; 0x01
     d6e:	7a 83       	std	Y+2, r23	; 0x02
     d70:	8b 83       	std	Y+3, r24	; 0x03
     d72:	9c 83       	std	Y+4, r25	; 0x04
     d74:	2d 83       	std	Y+5, r18	; 0x05
     d76:	3e 83       	std	Y+6, r19	; 0x06
     d78:	4f 83       	std	Y+7, r20	; 0x07
     d7a:	58 87       	std	Y+8, r21	; 0x08
     d7c:	f9 e0       	ldi	r31, 0x09	; 9
     d7e:	ef 2e       	mov	r14, r31
     d80:	f1 2c       	mov	r15, r1
     d82:	ec 0e       	add	r14, r28
     d84:	fd 1e       	adc	r15, r29
     d86:	b7 01       	movw	r22, r14
     d88:	ce 01       	movw	r24, r28
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	0e 94 88 0a 	call	0x1510	; 0x1510 <__unpack_f>
     d90:	8e 01       	movw	r16, r28
     d92:	0f 5e       	subi	r16, 0xEF	; 239
     d94:	1f 4f       	sbci	r17, 0xFF	; 255
     d96:	b8 01       	movw	r22, r16
     d98:	ce 01       	movw	r24, r28
     d9a:	05 96       	adiw	r24, 0x05	; 5
     d9c:	0e 94 88 0a 	call	0x1510	; 0x1510 <__unpack_f>
     da0:	ae 01       	movw	r20, r28
     da2:	47 5e       	subi	r20, 0xE7	; 231
     da4:	5f 4f       	sbci	r21, 0xFF	; 255
     da6:	b8 01       	movw	r22, r16
     da8:	c7 01       	movw	r24, r14
     daa:	0e 94 33 05 	call	0xa66	; 0xa66 <_fpadd_parts>
     dae:	0e 94 b3 09 	call	0x1366	; 0x1366 <__pack_f>
     db2:	a0 96       	adiw	r28, 0x20	; 32
     db4:	e6 e0       	ldi	r30, 0x06	; 6
     db6:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__epilogue_restores__+0x18>

00000dba <__mulsf3>:
     dba:	a0 e2       	ldi	r26, 0x20	; 32
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e3 ee       	ldi	r30, 0xE3	; 227
     dc0:	f6 e0       	ldi	r31, 0x06	; 6
     dc2:	0c 94 98 0b 	jmp	0x1730	; 0x1730 <__prologue_saves__>
     dc6:	69 83       	std	Y+1, r22	; 0x01
     dc8:	7a 83       	std	Y+2, r23	; 0x02
     dca:	8b 83       	std	Y+3, r24	; 0x03
     dcc:	9c 83       	std	Y+4, r25	; 0x04
     dce:	2d 83       	std	Y+5, r18	; 0x05
     dd0:	3e 83       	std	Y+6, r19	; 0x06
     dd2:	4f 83       	std	Y+7, r20	; 0x07
     dd4:	58 87       	std	Y+8, r21	; 0x08
     dd6:	be 01       	movw	r22, r28
     dd8:	67 5f       	subi	r22, 0xF7	; 247
     dda:	7f 4f       	sbci	r23, 0xFF	; 255
     ddc:	ce 01       	movw	r24, r28
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	0e 94 88 0a 	call	0x1510	; 0x1510 <__unpack_f>
     de4:	be 01       	movw	r22, r28
     de6:	6f 5e       	subi	r22, 0xEF	; 239
     de8:	7f 4f       	sbci	r23, 0xFF	; 255
     dea:	ce 01       	movw	r24, r28
     dec:	05 96       	adiw	r24, 0x05	; 5
     dee:	0e 94 88 0a 	call	0x1510	; 0x1510 <__unpack_f>
     df2:	99 85       	ldd	r25, Y+9	; 0x09
     df4:	92 30       	cpi	r25, 0x02	; 2
     df6:	88 f0       	brcs	.+34     	; 0xe1a <__mulsf3+0x60>
     df8:	89 89       	ldd	r24, Y+17	; 0x11
     dfa:	82 30       	cpi	r24, 0x02	; 2
     dfc:	c8 f0       	brcs	.+50     	; 0xe30 <__mulsf3+0x76>
     dfe:	94 30       	cpi	r25, 0x04	; 4
     e00:	19 f4       	brne	.+6      	; 0xe08 <__mulsf3+0x4e>
     e02:	82 30       	cpi	r24, 0x02	; 2
     e04:	51 f4       	brne	.+20     	; 0xe1a <__mulsf3+0x60>
     e06:	04 c0       	rjmp	.+8      	; 0xe10 <__mulsf3+0x56>
     e08:	84 30       	cpi	r24, 0x04	; 4
     e0a:	29 f4       	brne	.+10     	; 0xe16 <__mulsf3+0x5c>
     e0c:	92 30       	cpi	r25, 0x02	; 2
     e0e:	81 f4       	brne	.+32     	; 0xe30 <__mulsf3+0x76>
     e10:	80 e6       	ldi	r24, 0x60	; 96
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	c6 c0       	rjmp	.+396    	; 0xfa2 <__mulsf3+0x1e8>
     e16:	92 30       	cpi	r25, 0x02	; 2
     e18:	49 f4       	brne	.+18     	; 0xe2c <__mulsf3+0x72>
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1e:	8a 89       	ldd	r24, Y+18	; 0x12
     e20:	98 13       	cpse	r25, r24
     e22:	21 e0       	ldi	r18, 0x01	; 1
     e24:	2a 87       	std	Y+10, r18	; 0x0a
     e26:	ce 01       	movw	r24, r28
     e28:	09 96       	adiw	r24, 0x09	; 9
     e2a:	bb c0       	rjmp	.+374    	; 0xfa2 <__mulsf3+0x1e8>
     e2c:	82 30       	cpi	r24, 0x02	; 2
     e2e:	49 f4       	brne	.+18     	; 0xe42 <__mulsf3+0x88>
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	9a 85       	ldd	r25, Y+10	; 0x0a
     e34:	8a 89       	ldd	r24, Y+18	; 0x12
     e36:	98 13       	cpse	r25, r24
     e38:	21 e0       	ldi	r18, 0x01	; 1
     e3a:	2a 8b       	std	Y+18, r18	; 0x12
     e3c:	ce 01       	movw	r24, r28
     e3e:	41 96       	adiw	r24, 0x11	; 17
     e40:	b0 c0       	rjmp	.+352    	; 0xfa2 <__mulsf3+0x1e8>
     e42:	2d 84       	ldd	r2, Y+13	; 0x0d
     e44:	3e 84       	ldd	r3, Y+14	; 0x0e
     e46:	4f 84       	ldd	r4, Y+15	; 0x0f
     e48:	58 88       	ldd	r5, Y+16	; 0x10
     e4a:	6d 88       	ldd	r6, Y+21	; 0x15
     e4c:	7e 88       	ldd	r7, Y+22	; 0x16
     e4e:	8f 88       	ldd	r8, Y+23	; 0x17
     e50:	98 8c       	ldd	r9, Y+24	; 0x18
     e52:	ee 24       	eor	r14, r14
     e54:	ff 24       	eor	r15, r15
     e56:	87 01       	movw	r16, r14
     e58:	aa 24       	eor	r10, r10
     e5a:	bb 24       	eor	r11, r11
     e5c:	65 01       	movw	r12, r10
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	50 e0       	ldi	r21, 0x00	; 0
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	e0 e0       	ldi	r30, 0x00	; 0
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	c1 01       	movw	r24, r2
     e6c:	81 70       	andi	r24, 0x01	; 1
     e6e:	90 70       	andi	r25, 0x00	; 0
     e70:	89 2b       	or	r24, r25
     e72:	e9 f0       	breq	.+58     	; 0xeae <__mulsf3+0xf4>
     e74:	e6 0c       	add	r14, r6
     e76:	f7 1c       	adc	r15, r7
     e78:	08 1d       	adc	r16, r8
     e7a:	19 1d       	adc	r17, r9
     e7c:	9a 01       	movw	r18, r20
     e7e:	ab 01       	movw	r20, r22
     e80:	2a 0d       	add	r18, r10
     e82:	3b 1d       	adc	r19, r11
     e84:	4c 1d       	adc	r20, r12
     e86:	5d 1d       	adc	r21, r13
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a0 e0       	ldi	r26, 0x00	; 0
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e6 14       	cp	r14, r6
     e92:	f7 04       	cpc	r15, r7
     e94:	08 05       	cpc	r16, r8
     e96:	19 05       	cpc	r17, r9
     e98:	20 f4       	brcc	.+8      	; 0xea2 <__mulsf3+0xe8>
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	a0 e0       	ldi	r26, 0x00	; 0
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	ba 01       	movw	r22, r20
     ea4:	a9 01       	movw	r20, r18
     ea6:	48 0f       	add	r20, r24
     ea8:	59 1f       	adc	r21, r25
     eaa:	6a 1f       	adc	r22, r26
     eac:	7b 1f       	adc	r23, r27
     eae:	aa 0c       	add	r10, r10
     eb0:	bb 1c       	adc	r11, r11
     eb2:	cc 1c       	adc	r12, r12
     eb4:	dd 1c       	adc	r13, r13
     eb6:	97 fe       	sbrs	r9, 7
     eb8:	08 c0       	rjmp	.+16     	; 0xeca <__mulsf3+0x110>
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	a0 e0       	ldi	r26, 0x00	; 0
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	a8 2a       	or	r10, r24
     ec4:	b9 2a       	or	r11, r25
     ec6:	ca 2a       	or	r12, r26
     ec8:	db 2a       	or	r13, r27
     eca:	31 96       	adiw	r30, 0x01	; 1
     ecc:	e0 32       	cpi	r30, 0x20	; 32
     ece:	f1 05       	cpc	r31, r1
     ed0:	49 f0       	breq	.+18     	; 0xee4 <__mulsf3+0x12a>
     ed2:	66 0c       	add	r6, r6
     ed4:	77 1c       	adc	r7, r7
     ed6:	88 1c       	adc	r8, r8
     ed8:	99 1c       	adc	r9, r9
     eda:	56 94       	lsr	r5
     edc:	47 94       	ror	r4
     ede:	37 94       	ror	r3
     ee0:	27 94       	ror	r2
     ee2:	c3 cf       	rjmp	.-122    	; 0xe6a <__mulsf3+0xb0>
     ee4:	fa 85       	ldd	r31, Y+10	; 0x0a
     ee6:	ea 89       	ldd	r30, Y+18	; 0x12
     ee8:	2b 89       	ldd	r18, Y+19	; 0x13
     eea:	3c 89       	ldd	r19, Y+20	; 0x14
     eec:	8b 85       	ldd	r24, Y+11	; 0x0b
     eee:	9c 85       	ldd	r25, Y+12	; 0x0c
     ef0:	28 0f       	add	r18, r24
     ef2:	39 1f       	adc	r19, r25
     ef4:	2e 5f       	subi	r18, 0xFE	; 254
     ef6:	3f 4f       	sbci	r19, 0xFF	; 255
     ef8:	17 c0       	rjmp	.+46     	; 0xf28 <__mulsf3+0x16e>
     efa:	ca 01       	movw	r24, r20
     efc:	81 70       	andi	r24, 0x01	; 1
     efe:	90 70       	andi	r25, 0x00	; 0
     f00:	89 2b       	or	r24, r25
     f02:	61 f0       	breq	.+24     	; 0xf1c <__mulsf3+0x162>
     f04:	16 95       	lsr	r17
     f06:	07 95       	ror	r16
     f08:	f7 94       	ror	r15
     f0a:	e7 94       	ror	r14
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	a0 e0       	ldi	r26, 0x00	; 0
     f12:	b0 e8       	ldi	r27, 0x80	; 128
     f14:	e8 2a       	or	r14, r24
     f16:	f9 2a       	or	r15, r25
     f18:	0a 2b       	or	r16, r26
     f1a:	1b 2b       	or	r17, r27
     f1c:	76 95       	lsr	r23
     f1e:	67 95       	ror	r22
     f20:	57 95       	ror	r21
     f22:	47 95       	ror	r20
     f24:	2f 5f       	subi	r18, 0xFF	; 255
     f26:	3f 4f       	sbci	r19, 0xFF	; 255
     f28:	77 fd       	sbrc	r23, 7
     f2a:	e7 cf       	rjmp	.-50     	; 0xefa <__mulsf3+0x140>
     f2c:	0c c0       	rjmp	.+24     	; 0xf46 <__mulsf3+0x18c>
     f2e:	44 0f       	add	r20, r20
     f30:	55 1f       	adc	r21, r21
     f32:	66 1f       	adc	r22, r22
     f34:	77 1f       	adc	r23, r23
     f36:	17 fd       	sbrc	r17, 7
     f38:	41 60       	ori	r20, 0x01	; 1
     f3a:	ee 0c       	add	r14, r14
     f3c:	ff 1c       	adc	r15, r15
     f3e:	00 1f       	adc	r16, r16
     f40:	11 1f       	adc	r17, r17
     f42:	21 50       	subi	r18, 0x01	; 1
     f44:	30 40       	sbci	r19, 0x00	; 0
     f46:	40 30       	cpi	r20, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	59 07       	cpc	r21, r25
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	69 07       	cpc	r22, r25
     f50:	90 e4       	ldi	r25, 0x40	; 64
     f52:	79 07       	cpc	r23, r25
     f54:	60 f3       	brcs	.-40     	; 0xf2e <__mulsf3+0x174>
     f56:	2b 8f       	std	Y+27, r18	; 0x1b
     f58:	3c 8f       	std	Y+28, r19	; 0x1c
     f5a:	db 01       	movw	r26, r22
     f5c:	ca 01       	movw	r24, r20
     f5e:	8f 77       	andi	r24, 0x7F	; 127
     f60:	90 70       	andi	r25, 0x00	; 0
     f62:	a0 70       	andi	r26, 0x00	; 0
     f64:	b0 70       	andi	r27, 0x00	; 0
     f66:	80 34       	cpi	r24, 0x40	; 64
     f68:	91 05       	cpc	r25, r1
     f6a:	a1 05       	cpc	r26, r1
     f6c:	b1 05       	cpc	r27, r1
     f6e:	61 f4       	brne	.+24     	; 0xf88 <__mulsf3+0x1ce>
     f70:	47 fd       	sbrc	r20, 7
     f72:	0a c0       	rjmp	.+20     	; 0xf88 <__mulsf3+0x1ce>
     f74:	e1 14       	cp	r14, r1
     f76:	f1 04       	cpc	r15, r1
     f78:	01 05       	cpc	r16, r1
     f7a:	11 05       	cpc	r17, r1
     f7c:	29 f0       	breq	.+10     	; 0xf88 <__mulsf3+0x1ce>
     f7e:	40 5c       	subi	r20, 0xC0	; 192
     f80:	5f 4f       	sbci	r21, 0xFF	; 255
     f82:	6f 4f       	sbci	r22, 0xFF	; 255
     f84:	7f 4f       	sbci	r23, 0xFF	; 255
     f86:	40 78       	andi	r20, 0x80	; 128
     f88:	1a 8e       	std	Y+26, r1	; 0x1a
     f8a:	fe 17       	cp	r31, r30
     f8c:	11 f0       	breq	.+4      	; 0xf92 <__mulsf3+0x1d8>
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	8a 8f       	std	Y+26, r24	; 0x1a
     f92:	4d 8f       	std	Y+29, r20	; 0x1d
     f94:	5e 8f       	std	Y+30, r21	; 0x1e
     f96:	6f 8f       	std	Y+31, r22	; 0x1f
     f98:	78 a3       	std	Y+32, r23	; 0x20
     f9a:	83 e0       	ldi	r24, 0x03	; 3
     f9c:	89 8f       	std	Y+25, r24	; 0x19
     f9e:	ce 01       	movw	r24, r28
     fa0:	49 96       	adiw	r24, 0x19	; 25
     fa2:	0e 94 b3 09 	call	0x1366	; 0x1366 <__pack_f>
     fa6:	a0 96       	adiw	r28, 0x20	; 32
     fa8:	e2 e1       	ldi	r30, 0x12	; 18
     faa:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <__epilogue_restores__>

00000fae <__gtsf2>:
     fae:	a8 e1       	ldi	r26, 0x18	; 24
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	ed ed       	ldi	r30, 0xDD	; 221
     fb4:	f7 e0       	ldi	r31, 0x07	; 7
     fb6:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__prologue_saves__+0x18>
     fba:	69 83       	std	Y+1, r22	; 0x01
     fbc:	7a 83       	std	Y+2, r23	; 0x02
     fbe:	8b 83       	std	Y+3, r24	; 0x03
     fc0:	9c 83       	std	Y+4, r25	; 0x04
     fc2:	2d 83       	std	Y+5, r18	; 0x05
     fc4:	3e 83       	std	Y+6, r19	; 0x06
     fc6:	4f 83       	std	Y+7, r20	; 0x07
     fc8:	58 87       	std	Y+8, r21	; 0x08
     fca:	89 e0       	ldi	r24, 0x09	; 9
     fcc:	e8 2e       	mov	r14, r24
     fce:	f1 2c       	mov	r15, r1
     fd0:	ec 0e       	add	r14, r28
     fd2:	fd 1e       	adc	r15, r29
     fd4:	b7 01       	movw	r22, r14
     fd6:	ce 01       	movw	r24, r28
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	0e 94 88 0a 	call	0x1510	; 0x1510 <__unpack_f>
     fde:	8e 01       	movw	r16, r28
     fe0:	0f 5e       	subi	r16, 0xEF	; 239
     fe2:	1f 4f       	sbci	r17, 0xFF	; 255
     fe4:	b8 01       	movw	r22, r16
     fe6:	ce 01       	movw	r24, r28
     fe8:	05 96       	adiw	r24, 0x05	; 5
     fea:	0e 94 88 0a 	call	0x1510	; 0x1510 <__unpack_f>
     fee:	89 85       	ldd	r24, Y+9	; 0x09
     ff0:	82 30       	cpi	r24, 0x02	; 2
     ff2:	40 f0       	brcs	.+16     	; 0x1004 <__gtsf2+0x56>
     ff4:	89 89       	ldd	r24, Y+17	; 0x11
     ff6:	82 30       	cpi	r24, 0x02	; 2
     ff8:	28 f0       	brcs	.+10     	; 0x1004 <__gtsf2+0x56>
     ffa:	b8 01       	movw	r22, r16
     ffc:	c7 01       	movw	r24, r14
     ffe:	0e 94 00 0b 	call	0x1600	; 0x1600 <__fpcmp_parts_f>
    1002:	01 c0       	rjmp	.+2      	; 0x1006 <__gtsf2+0x58>
    1004:	8f ef       	ldi	r24, 0xFF	; 255
    1006:	68 96       	adiw	r28, 0x18	; 24
    1008:	e6 e0       	ldi	r30, 0x06	; 6
    100a:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__epilogue_restores__+0x18>

0000100e <__gesf2>:
    100e:	a8 e1       	ldi	r26, 0x18	; 24
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	ed e0       	ldi	r30, 0x0D	; 13
    1014:	f8 e0       	ldi	r31, 0x08	; 8
    1016:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__prologue_saves__+0x18>
    101a:	69 83       	std	Y+1, r22	; 0x01
    101c:	7a 83       	std	Y+2, r23	; 0x02
    101e:	8b 83       	std	Y+3, r24	; 0x03
    1020:	9c 83       	std	Y+4, r25	; 0x04
    1022:	2d 83       	std	Y+5, r18	; 0x05
    1024:	3e 83       	std	Y+6, r19	; 0x06
    1026:	4f 83       	std	Y+7, r20	; 0x07
    1028:	58 87       	std	Y+8, r21	; 0x08
    102a:	89 e0       	ldi	r24, 0x09	; 9
    102c:	e8 2e       	mov	r14, r24
    102e:	f1 2c       	mov	r15, r1
    1030:	ec 0e       	add	r14, r28
    1032:	fd 1e       	adc	r15, r29
    1034:	b7 01       	movw	r22, r14
    1036:	ce 01       	movw	r24, r28
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	0e 94 88 0a 	call	0x1510	; 0x1510 <__unpack_f>
    103e:	8e 01       	movw	r16, r28
    1040:	0f 5e       	subi	r16, 0xEF	; 239
    1042:	1f 4f       	sbci	r17, 0xFF	; 255
    1044:	b8 01       	movw	r22, r16
    1046:	ce 01       	movw	r24, r28
    1048:	05 96       	adiw	r24, 0x05	; 5
    104a:	0e 94 88 0a 	call	0x1510	; 0x1510 <__unpack_f>
    104e:	89 85       	ldd	r24, Y+9	; 0x09
    1050:	82 30       	cpi	r24, 0x02	; 2
    1052:	40 f0       	brcs	.+16     	; 0x1064 <__gesf2+0x56>
    1054:	89 89       	ldd	r24, Y+17	; 0x11
    1056:	82 30       	cpi	r24, 0x02	; 2
    1058:	28 f0       	brcs	.+10     	; 0x1064 <__gesf2+0x56>
    105a:	b8 01       	movw	r22, r16
    105c:	c7 01       	movw	r24, r14
    105e:	0e 94 00 0b 	call	0x1600	; 0x1600 <__fpcmp_parts_f>
    1062:	01 c0       	rjmp	.+2      	; 0x1066 <__gesf2+0x58>
    1064:	8f ef       	ldi	r24, 0xFF	; 255
    1066:	68 96       	adiw	r28, 0x18	; 24
    1068:	e6 e0       	ldi	r30, 0x06	; 6
    106a:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__epilogue_restores__+0x18>

0000106e <__ltsf2>:
    106e:	a8 e1       	ldi	r26, 0x18	; 24
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	ed e3       	ldi	r30, 0x3D	; 61
    1074:	f8 e0       	ldi	r31, 0x08	; 8
    1076:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__prologue_saves__+0x18>
    107a:	69 83       	std	Y+1, r22	; 0x01
    107c:	7a 83       	std	Y+2, r23	; 0x02
    107e:	8b 83       	std	Y+3, r24	; 0x03
    1080:	9c 83       	std	Y+4, r25	; 0x04
    1082:	2d 83       	std	Y+5, r18	; 0x05
    1084:	3e 83       	std	Y+6, r19	; 0x06
    1086:	4f 83       	std	Y+7, r20	; 0x07
    1088:	58 87       	std	Y+8, r21	; 0x08
    108a:	89 e0       	ldi	r24, 0x09	; 9
    108c:	e8 2e       	mov	r14, r24
    108e:	f1 2c       	mov	r15, r1
    1090:	ec 0e       	add	r14, r28
    1092:	fd 1e       	adc	r15, r29
    1094:	b7 01       	movw	r22, r14
    1096:	ce 01       	movw	r24, r28
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	0e 94 88 0a 	call	0x1510	; 0x1510 <__unpack_f>
    109e:	8e 01       	movw	r16, r28
    10a0:	0f 5e       	subi	r16, 0xEF	; 239
    10a2:	1f 4f       	sbci	r17, 0xFF	; 255
    10a4:	b8 01       	movw	r22, r16
    10a6:	ce 01       	movw	r24, r28
    10a8:	05 96       	adiw	r24, 0x05	; 5
    10aa:	0e 94 88 0a 	call	0x1510	; 0x1510 <__unpack_f>
    10ae:	89 85       	ldd	r24, Y+9	; 0x09
    10b0:	82 30       	cpi	r24, 0x02	; 2
    10b2:	40 f0       	brcs	.+16     	; 0x10c4 <__ltsf2+0x56>
    10b4:	89 89       	ldd	r24, Y+17	; 0x11
    10b6:	82 30       	cpi	r24, 0x02	; 2
    10b8:	28 f0       	brcs	.+10     	; 0x10c4 <__ltsf2+0x56>
    10ba:	b8 01       	movw	r22, r16
    10bc:	c7 01       	movw	r24, r14
    10be:	0e 94 00 0b 	call	0x1600	; 0x1600 <__fpcmp_parts_f>
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <__ltsf2+0x58>
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	68 96       	adiw	r28, 0x18	; 24
    10c8:	e6 e0       	ldi	r30, 0x06	; 6
    10ca:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__epilogue_restores__+0x18>

000010ce <__lesf2>:
    10ce:	a8 e1       	ldi	r26, 0x18	; 24
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	ed e6       	ldi	r30, 0x6D	; 109
    10d4:	f8 e0       	ldi	r31, 0x08	; 8
    10d6:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__prologue_saves__+0x18>
    10da:	69 83       	std	Y+1, r22	; 0x01
    10dc:	7a 83       	std	Y+2, r23	; 0x02
    10de:	8b 83       	std	Y+3, r24	; 0x03
    10e0:	9c 83       	std	Y+4, r25	; 0x04
    10e2:	2d 83       	std	Y+5, r18	; 0x05
    10e4:	3e 83       	std	Y+6, r19	; 0x06
    10e6:	4f 83       	std	Y+7, r20	; 0x07
    10e8:	58 87       	std	Y+8, r21	; 0x08
    10ea:	89 e0       	ldi	r24, 0x09	; 9
    10ec:	e8 2e       	mov	r14, r24
    10ee:	f1 2c       	mov	r15, r1
    10f0:	ec 0e       	add	r14, r28
    10f2:	fd 1e       	adc	r15, r29
    10f4:	b7 01       	movw	r22, r14
    10f6:	ce 01       	movw	r24, r28
    10f8:	01 96       	adiw	r24, 0x01	; 1
    10fa:	0e 94 88 0a 	call	0x1510	; 0x1510 <__unpack_f>
    10fe:	8e 01       	movw	r16, r28
    1100:	0f 5e       	subi	r16, 0xEF	; 239
    1102:	1f 4f       	sbci	r17, 0xFF	; 255
    1104:	b8 01       	movw	r22, r16
    1106:	ce 01       	movw	r24, r28
    1108:	05 96       	adiw	r24, 0x05	; 5
    110a:	0e 94 88 0a 	call	0x1510	; 0x1510 <__unpack_f>
    110e:	89 85       	ldd	r24, Y+9	; 0x09
    1110:	82 30       	cpi	r24, 0x02	; 2
    1112:	40 f0       	brcs	.+16     	; 0x1124 <__lesf2+0x56>
    1114:	89 89       	ldd	r24, Y+17	; 0x11
    1116:	82 30       	cpi	r24, 0x02	; 2
    1118:	28 f0       	brcs	.+10     	; 0x1124 <__lesf2+0x56>
    111a:	b8 01       	movw	r22, r16
    111c:	c7 01       	movw	r24, r14
    111e:	0e 94 00 0b 	call	0x1600	; 0x1600 <__fpcmp_parts_f>
    1122:	01 c0       	rjmp	.+2      	; 0x1126 <__lesf2+0x58>
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	68 96       	adiw	r28, 0x18	; 24
    1128:	e6 e0       	ldi	r30, 0x06	; 6
    112a:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__epilogue_restores__+0x18>

0000112e <__fixsfsi>:
    112e:	ac e0       	ldi	r26, 0x0C	; 12
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	ed e9       	ldi	r30, 0x9D	; 157
    1134:	f8 e0       	ldi	r31, 0x08	; 8
    1136:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <__prologue_saves__+0x20>
    113a:	69 83       	std	Y+1, r22	; 0x01
    113c:	7a 83       	std	Y+2, r23	; 0x02
    113e:	8b 83       	std	Y+3, r24	; 0x03
    1140:	9c 83       	std	Y+4, r25	; 0x04
    1142:	be 01       	movw	r22, r28
    1144:	6b 5f       	subi	r22, 0xFB	; 251
    1146:	7f 4f       	sbci	r23, 0xFF	; 255
    1148:	ce 01       	movw	r24, r28
    114a:	01 96       	adiw	r24, 0x01	; 1
    114c:	0e 94 88 0a 	call	0x1510	; 0x1510 <__unpack_f>
    1150:	8d 81       	ldd	r24, Y+5	; 0x05
    1152:	82 30       	cpi	r24, 0x02	; 2
    1154:	61 f1       	breq	.+88     	; 0x11ae <__fixsfsi+0x80>
    1156:	82 30       	cpi	r24, 0x02	; 2
    1158:	50 f1       	brcs	.+84     	; 0x11ae <__fixsfsi+0x80>
    115a:	84 30       	cpi	r24, 0x04	; 4
    115c:	21 f4       	brne	.+8      	; 0x1166 <__fixsfsi+0x38>
    115e:	8e 81       	ldd	r24, Y+6	; 0x06
    1160:	88 23       	and	r24, r24
    1162:	51 f1       	breq	.+84     	; 0x11b8 <__fixsfsi+0x8a>
    1164:	2e c0       	rjmp	.+92     	; 0x11c2 <__fixsfsi+0x94>
    1166:	2f 81       	ldd	r18, Y+7	; 0x07
    1168:	38 85       	ldd	r19, Y+8	; 0x08
    116a:	37 fd       	sbrc	r19, 7
    116c:	20 c0       	rjmp	.+64     	; 0x11ae <__fixsfsi+0x80>
    116e:	6e 81       	ldd	r22, Y+6	; 0x06
    1170:	2f 31       	cpi	r18, 0x1F	; 31
    1172:	31 05       	cpc	r19, r1
    1174:	1c f0       	brlt	.+6      	; 0x117c <__fixsfsi+0x4e>
    1176:	66 23       	and	r22, r22
    1178:	f9 f0       	breq	.+62     	; 0x11b8 <__fixsfsi+0x8a>
    117a:	23 c0       	rjmp	.+70     	; 0x11c2 <__fixsfsi+0x94>
    117c:	8e e1       	ldi	r24, 0x1E	; 30
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	82 1b       	sub	r24, r18
    1182:	93 0b       	sbc	r25, r19
    1184:	29 85       	ldd	r18, Y+9	; 0x09
    1186:	3a 85       	ldd	r19, Y+10	; 0x0a
    1188:	4b 85       	ldd	r20, Y+11	; 0x0b
    118a:	5c 85       	ldd	r21, Y+12	; 0x0c
    118c:	04 c0       	rjmp	.+8      	; 0x1196 <__fixsfsi+0x68>
    118e:	56 95       	lsr	r21
    1190:	47 95       	ror	r20
    1192:	37 95       	ror	r19
    1194:	27 95       	ror	r18
    1196:	8a 95       	dec	r24
    1198:	d2 f7       	brpl	.-12     	; 0x118e <__fixsfsi+0x60>
    119a:	66 23       	and	r22, r22
    119c:	b1 f0       	breq	.+44     	; 0x11ca <__fixsfsi+0x9c>
    119e:	50 95       	com	r21
    11a0:	40 95       	com	r20
    11a2:	30 95       	com	r19
    11a4:	21 95       	neg	r18
    11a6:	3f 4f       	sbci	r19, 0xFF	; 255
    11a8:	4f 4f       	sbci	r20, 0xFF	; 255
    11aa:	5f 4f       	sbci	r21, 0xFF	; 255
    11ac:	0e c0       	rjmp	.+28     	; 0x11ca <__fixsfsi+0x9c>
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e0       	ldi	r20, 0x00	; 0
    11b4:	50 e0       	ldi	r21, 0x00	; 0
    11b6:	09 c0       	rjmp	.+18     	; 0x11ca <__fixsfsi+0x9c>
    11b8:	2f ef       	ldi	r18, 0xFF	; 255
    11ba:	3f ef       	ldi	r19, 0xFF	; 255
    11bc:	4f ef       	ldi	r20, 0xFF	; 255
    11be:	5f e7       	ldi	r21, 0x7F	; 127
    11c0:	04 c0       	rjmp	.+8      	; 0x11ca <__fixsfsi+0x9c>
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	40 e0       	ldi	r20, 0x00	; 0
    11c8:	50 e8       	ldi	r21, 0x80	; 128
    11ca:	b9 01       	movw	r22, r18
    11cc:	ca 01       	movw	r24, r20
    11ce:	2c 96       	adiw	r28, 0x0c	; 12
    11d0:	e2 e0       	ldi	r30, 0x02	; 2
    11d2:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__epilogue_restores__+0x20>

000011d6 <__floatunsisf>:
    11d6:	a8 e0       	ldi	r26, 0x08	; 8
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e1 ef       	ldi	r30, 0xF1	; 241
    11dc:	f8 e0       	ldi	r31, 0x08	; 8
    11de:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <__prologue_saves__+0x14>
    11e2:	7b 01       	movw	r14, r22
    11e4:	8c 01       	movw	r16, r24
    11e6:	61 15       	cp	r22, r1
    11e8:	71 05       	cpc	r23, r1
    11ea:	81 05       	cpc	r24, r1
    11ec:	91 05       	cpc	r25, r1
    11ee:	19 f4       	brne	.+6      	; 0x11f6 <__floatunsisf+0x20>
    11f0:	82 e0       	ldi	r24, 0x02	; 2
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	60 c0       	rjmp	.+192    	; 0x12b6 <__floatunsisf+0xe0>
    11f6:	83 e0       	ldi	r24, 0x03	; 3
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	8e e1       	ldi	r24, 0x1E	; 30
    11fc:	c8 2e       	mov	r12, r24
    11fe:	d1 2c       	mov	r13, r1
    1200:	dc 82       	std	Y+4, r13	; 0x04
    1202:	cb 82       	std	Y+3, r12	; 0x03
    1204:	ed 82       	std	Y+5, r14	; 0x05
    1206:	fe 82       	std	Y+6, r15	; 0x06
    1208:	0f 83       	std	Y+7, r16	; 0x07
    120a:	18 87       	std	Y+8, r17	; 0x08
    120c:	c8 01       	movw	r24, r16
    120e:	b7 01       	movw	r22, r14
    1210:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__clzsi2>
    1214:	bc 01       	movw	r22, r24
    1216:	61 50       	subi	r22, 0x01	; 1
    1218:	70 40       	sbci	r23, 0x00	; 0
    121a:	77 ff       	sbrs	r23, 7
    121c:	39 c0       	rjmp	.+114    	; 0x1290 <__floatunsisf+0xba>
    121e:	ee 27       	eor	r30, r30
    1220:	ff 27       	eor	r31, r31
    1222:	e6 1b       	sub	r30, r22
    1224:	f7 0b       	sbc	r31, r23
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	40 e0       	ldi	r20, 0x00	; 0
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	a0 e0       	ldi	r26, 0x00	; 0
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	0e 2e       	mov	r0, r30
    1238:	04 c0       	rjmp	.+8      	; 0x1242 <__floatunsisf+0x6c>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	aa 1f       	adc	r26, r26
    1240:	bb 1f       	adc	r27, r27
    1242:	0a 94       	dec	r0
    1244:	d2 f7       	brpl	.-12     	; 0x123a <__floatunsisf+0x64>
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	a1 09       	sbc	r26, r1
    124a:	b1 09       	sbc	r27, r1
    124c:	8e 21       	and	r24, r14
    124e:	9f 21       	and	r25, r15
    1250:	a0 23       	and	r26, r16
    1252:	b1 23       	and	r27, r17
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	a1 05       	cpc	r26, r1
    1258:	b1 05       	cpc	r27, r1
    125a:	21 f0       	breq	.+8      	; 0x1264 <__floatunsisf+0x8e>
    125c:	21 e0       	ldi	r18, 0x01	; 1
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	04 c0       	rjmp	.+8      	; 0x126e <__floatunsisf+0x98>
    1266:	16 95       	lsr	r17
    1268:	07 95       	ror	r16
    126a:	f7 94       	ror	r15
    126c:	e7 94       	ror	r14
    126e:	ea 95       	dec	r30
    1270:	d2 f7       	brpl	.-12     	; 0x1266 <__floatunsisf+0x90>
    1272:	2e 29       	or	r18, r14
    1274:	3f 29       	or	r19, r15
    1276:	40 2b       	or	r20, r16
    1278:	51 2b       	or	r21, r17
    127a:	2d 83       	std	Y+5, r18	; 0x05
    127c:	3e 83       	std	Y+6, r19	; 0x06
    127e:	4f 83       	std	Y+7, r20	; 0x07
    1280:	58 87       	std	Y+8, r21	; 0x08
    1282:	8e e1       	ldi	r24, 0x1E	; 30
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	86 1b       	sub	r24, r22
    1288:	97 0b       	sbc	r25, r23
    128a:	9c 83       	std	Y+4, r25	; 0x04
    128c:	8b 83       	std	Y+3, r24	; 0x03
    128e:	13 c0       	rjmp	.+38     	; 0x12b6 <__floatunsisf+0xe0>
    1290:	61 15       	cp	r22, r1
    1292:	71 05       	cpc	r23, r1
    1294:	81 f0       	breq	.+32     	; 0x12b6 <__floatunsisf+0xe0>
    1296:	06 2e       	mov	r0, r22
    1298:	04 c0       	rjmp	.+8      	; 0x12a2 <__floatunsisf+0xcc>
    129a:	ee 0c       	add	r14, r14
    129c:	ff 1c       	adc	r15, r15
    129e:	00 1f       	adc	r16, r16
    12a0:	11 1f       	adc	r17, r17
    12a2:	0a 94       	dec	r0
    12a4:	d2 f7       	brpl	.-12     	; 0x129a <__floatunsisf+0xc4>
    12a6:	ed 82       	std	Y+5, r14	; 0x05
    12a8:	fe 82       	std	Y+6, r15	; 0x06
    12aa:	0f 83       	std	Y+7, r16	; 0x07
    12ac:	18 87       	std	Y+8, r17	; 0x08
    12ae:	c6 1a       	sub	r12, r22
    12b0:	d7 0a       	sbc	r13, r23
    12b2:	dc 82       	std	Y+4, r13	; 0x04
    12b4:	cb 82       	std	Y+3, r12	; 0x03
    12b6:	1a 82       	std	Y+2, r1	; 0x02
    12b8:	ce 01       	movw	r24, r28
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	0e 94 b3 09 	call	0x1366	; 0x1366 <__pack_f>
    12c0:	28 96       	adiw	r28, 0x08	; 8
    12c2:	e8 e0       	ldi	r30, 0x08	; 8
    12c4:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__epilogue_restores__+0x14>

000012c8 <__clzsi2>:
    12c8:	ef 92       	push	r14
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	7b 01       	movw	r14, r22
    12d2:	8c 01       	movw	r16, r24
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	e8 16       	cp	r14, r24
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	f8 06       	cpc	r15, r24
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	08 07       	cpc	r16, r24
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	18 07       	cpc	r17, r24
    12e4:	88 f4       	brcc	.+34     	; 0x1308 <__clzsi2+0x40>
    12e6:	8f ef       	ldi	r24, 0xFF	; 255
    12e8:	e8 16       	cp	r14, r24
    12ea:	f1 04       	cpc	r15, r1
    12ec:	01 05       	cpc	r16, r1
    12ee:	11 05       	cpc	r17, r1
    12f0:	31 f0       	breq	.+12     	; 0x12fe <__clzsi2+0x36>
    12f2:	28 f0       	brcs	.+10     	; 0x12fe <__clzsi2+0x36>
    12f4:	88 e0       	ldi	r24, 0x08	; 8
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	a0 e0       	ldi	r26, 0x00	; 0
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	17 c0       	rjmp	.+46     	; 0x132c <__clzsi2+0x64>
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	a0 e0       	ldi	r26, 0x00	; 0
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	12 c0       	rjmp	.+36     	; 0x132c <__clzsi2+0x64>
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	e8 16       	cp	r14, r24
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	f8 06       	cpc	r15, r24
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	08 07       	cpc	r16, r24
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	18 07       	cpc	r17, r24
    1318:	28 f0       	brcs	.+10     	; 0x1324 <__clzsi2+0x5c>
    131a:	88 e1       	ldi	r24, 0x18	; 24
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	a0 e0       	ldi	r26, 0x00	; 0
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	04 c0       	rjmp	.+8      	; 0x132c <__clzsi2+0x64>
    1324:	80 e1       	ldi	r24, 0x10	; 16
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	a0 e0       	ldi	r26, 0x00	; 0
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	20 e2       	ldi	r18, 0x20	; 32
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	40 e0       	ldi	r20, 0x00	; 0
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	28 1b       	sub	r18, r24
    1336:	39 0b       	sbc	r19, r25
    1338:	4a 0b       	sbc	r20, r26
    133a:	5b 0b       	sbc	r21, r27
    133c:	04 c0       	rjmp	.+8      	; 0x1346 <__clzsi2+0x7e>
    133e:	16 95       	lsr	r17
    1340:	07 95       	ror	r16
    1342:	f7 94       	ror	r15
    1344:	e7 94       	ror	r14
    1346:	8a 95       	dec	r24
    1348:	d2 f7       	brpl	.-12     	; 0x133e <__clzsi2+0x76>
    134a:	f7 01       	movw	r30, r14
    134c:	e8 59       	subi	r30, 0x98	; 152
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	80 81       	ld	r24, Z
    1352:	28 1b       	sub	r18, r24
    1354:	31 09       	sbc	r19, r1
    1356:	41 09       	sbc	r20, r1
    1358:	51 09       	sbc	r21, r1
    135a:	c9 01       	movw	r24, r18
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	ff 90       	pop	r15
    1362:	ef 90       	pop	r14
    1364:	08 95       	ret

00001366 <__pack_f>:
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	fc 01       	movw	r30, r24
    1372:	e4 80       	ldd	r14, Z+4	; 0x04
    1374:	f5 80       	ldd	r15, Z+5	; 0x05
    1376:	06 81       	ldd	r16, Z+6	; 0x06
    1378:	17 81       	ldd	r17, Z+7	; 0x07
    137a:	d1 80       	ldd	r13, Z+1	; 0x01
    137c:	80 81       	ld	r24, Z
    137e:	82 30       	cpi	r24, 0x02	; 2
    1380:	48 f4       	brcc	.+18     	; 0x1394 <__pack_f+0x2e>
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	a0 e1       	ldi	r26, 0x10	; 16
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e8 2a       	or	r14, r24
    138c:	f9 2a       	or	r15, r25
    138e:	0a 2b       	or	r16, r26
    1390:	1b 2b       	or	r17, r27
    1392:	a5 c0       	rjmp	.+330    	; 0x14de <__pack_f+0x178>
    1394:	84 30       	cpi	r24, 0x04	; 4
    1396:	09 f4       	brne	.+2      	; 0x139a <__pack_f+0x34>
    1398:	9f c0       	rjmp	.+318    	; 0x14d8 <__pack_f+0x172>
    139a:	82 30       	cpi	r24, 0x02	; 2
    139c:	21 f4       	brne	.+8      	; 0x13a6 <__pack_f+0x40>
    139e:	ee 24       	eor	r14, r14
    13a0:	ff 24       	eor	r15, r15
    13a2:	87 01       	movw	r16, r14
    13a4:	05 c0       	rjmp	.+10     	; 0x13b0 <__pack_f+0x4a>
    13a6:	e1 14       	cp	r14, r1
    13a8:	f1 04       	cpc	r15, r1
    13aa:	01 05       	cpc	r16, r1
    13ac:	11 05       	cpc	r17, r1
    13ae:	19 f4       	brne	.+6      	; 0x13b6 <__pack_f+0x50>
    13b0:	e0 e0       	ldi	r30, 0x00	; 0
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	96 c0       	rjmp	.+300    	; 0x14e2 <__pack_f+0x17c>
    13b6:	62 81       	ldd	r22, Z+2	; 0x02
    13b8:	73 81       	ldd	r23, Z+3	; 0x03
    13ba:	9f ef       	ldi	r25, 0xFF	; 255
    13bc:	62 38       	cpi	r22, 0x82	; 130
    13be:	79 07       	cpc	r23, r25
    13c0:	0c f0       	brlt	.+2      	; 0x13c4 <__pack_f+0x5e>
    13c2:	5b c0       	rjmp	.+182    	; 0x147a <__pack_f+0x114>
    13c4:	22 e8       	ldi	r18, 0x82	; 130
    13c6:	3f ef       	ldi	r19, 0xFF	; 255
    13c8:	26 1b       	sub	r18, r22
    13ca:	37 0b       	sbc	r19, r23
    13cc:	2a 31       	cpi	r18, 0x1A	; 26
    13ce:	31 05       	cpc	r19, r1
    13d0:	2c f0       	brlt	.+10     	; 0x13dc <__pack_f+0x76>
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	2a c0       	rjmp	.+84     	; 0x1430 <__pack_f+0xca>
    13dc:	b8 01       	movw	r22, r16
    13de:	a7 01       	movw	r20, r14
    13e0:	02 2e       	mov	r0, r18
    13e2:	04 c0       	rjmp	.+8      	; 0x13ec <__pack_f+0x86>
    13e4:	76 95       	lsr	r23
    13e6:	67 95       	ror	r22
    13e8:	57 95       	ror	r21
    13ea:	47 95       	ror	r20
    13ec:	0a 94       	dec	r0
    13ee:	d2 f7       	brpl	.-12     	; 0x13e4 <__pack_f+0x7e>
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	a0 e0       	ldi	r26, 0x00	; 0
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	04 c0       	rjmp	.+8      	; 0x1402 <__pack_f+0x9c>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	aa 1f       	adc	r26, r26
    1400:	bb 1f       	adc	r27, r27
    1402:	2a 95       	dec	r18
    1404:	d2 f7       	brpl	.-12     	; 0x13fa <__pack_f+0x94>
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	a1 09       	sbc	r26, r1
    140a:	b1 09       	sbc	r27, r1
    140c:	8e 21       	and	r24, r14
    140e:	9f 21       	and	r25, r15
    1410:	a0 23       	and	r26, r16
    1412:	b1 23       	and	r27, r17
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	a1 05       	cpc	r26, r1
    1418:	b1 05       	cpc	r27, r1
    141a:	21 f0       	breq	.+8      	; 0x1424 <__pack_f+0xbe>
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	a0 e0       	ldi	r26, 0x00	; 0
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	9a 01       	movw	r18, r20
    1426:	ab 01       	movw	r20, r22
    1428:	28 2b       	or	r18, r24
    142a:	39 2b       	or	r19, r25
    142c:	4a 2b       	or	r20, r26
    142e:	5b 2b       	or	r21, r27
    1430:	da 01       	movw	r26, r20
    1432:	c9 01       	movw	r24, r18
    1434:	8f 77       	andi	r24, 0x7F	; 127
    1436:	90 70       	andi	r25, 0x00	; 0
    1438:	a0 70       	andi	r26, 0x00	; 0
    143a:	b0 70       	andi	r27, 0x00	; 0
    143c:	80 34       	cpi	r24, 0x40	; 64
    143e:	91 05       	cpc	r25, r1
    1440:	a1 05       	cpc	r26, r1
    1442:	b1 05       	cpc	r27, r1
    1444:	39 f4       	brne	.+14     	; 0x1454 <__pack_f+0xee>
    1446:	27 ff       	sbrs	r18, 7
    1448:	09 c0       	rjmp	.+18     	; 0x145c <__pack_f+0xf6>
    144a:	20 5c       	subi	r18, 0xC0	; 192
    144c:	3f 4f       	sbci	r19, 0xFF	; 255
    144e:	4f 4f       	sbci	r20, 0xFF	; 255
    1450:	5f 4f       	sbci	r21, 0xFF	; 255
    1452:	04 c0       	rjmp	.+8      	; 0x145c <__pack_f+0xf6>
    1454:	21 5c       	subi	r18, 0xC1	; 193
    1456:	3f 4f       	sbci	r19, 0xFF	; 255
    1458:	4f 4f       	sbci	r20, 0xFF	; 255
    145a:	5f 4f       	sbci	r21, 0xFF	; 255
    145c:	e0 e0       	ldi	r30, 0x00	; 0
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	20 30       	cpi	r18, 0x00	; 0
    1462:	a0 e0       	ldi	r26, 0x00	; 0
    1464:	3a 07       	cpc	r19, r26
    1466:	a0 e0       	ldi	r26, 0x00	; 0
    1468:	4a 07       	cpc	r20, r26
    146a:	a0 e4       	ldi	r26, 0x40	; 64
    146c:	5a 07       	cpc	r21, r26
    146e:	10 f0       	brcs	.+4      	; 0x1474 <__pack_f+0x10e>
    1470:	e1 e0       	ldi	r30, 0x01	; 1
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	79 01       	movw	r14, r18
    1476:	8a 01       	movw	r16, r20
    1478:	27 c0       	rjmp	.+78     	; 0x14c8 <__pack_f+0x162>
    147a:	60 38       	cpi	r22, 0x80	; 128
    147c:	71 05       	cpc	r23, r1
    147e:	64 f5       	brge	.+88     	; 0x14d8 <__pack_f+0x172>
    1480:	fb 01       	movw	r30, r22
    1482:	e1 58       	subi	r30, 0x81	; 129
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	d8 01       	movw	r26, r16
    1488:	c7 01       	movw	r24, r14
    148a:	8f 77       	andi	r24, 0x7F	; 127
    148c:	90 70       	andi	r25, 0x00	; 0
    148e:	a0 70       	andi	r26, 0x00	; 0
    1490:	b0 70       	andi	r27, 0x00	; 0
    1492:	80 34       	cpi	r24, 0x40	; 64
    1494:	91 05       	cpc	r25, r1
    1496:	a1 05       	cpc	r26, r1
    1498:	b1 05       	cpc	r27, r1
    149a:	39 f4       	brne	.+14     	; 0x14aa <__pack_f+0x144>
    149c:	e7 fe       	sbrs	r14, 7
    149e:	0d c0       	rjmp	.+26     	; 0x14ba <__pack_f+0x154>
    14a0:	80 e4       	ldi	r24, 0x40	; 64
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	a0 e0       	ldi	r26, 0x00	; 0
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	04 c0       	rjmp	.+8      	; 0x14b2 <__pack_f+0x14c>
    14aa:	8f e3       	ldi	r24, 0x3F	; 63
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	a0 e0       	ldi	r26, 0x00	; 0
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e8 0e       	add	r14, r24
    14b4:	f9 1e       	adc	r15, r25
    14b6:	0a 1f       	adc	r16, r26
    14b8:	1b 1f       	adc	r17, r27
    14ba:	17 ff       	sbrs	r17, 7
    14bc:	05 c0       	rjmp	.+10     	; 0x14c8 <__pack_f+0x162>
    14be:	16 95       	lsr	r17
    14c0:	07 95       	ror	r16
    14c2:	f7 94       	ror	r15
    14c4:	e7 94       	ror	r14
    14c6:	31 96       	adiw	r30, 0x01	; 1
    14c8:	87 e0       	ldi	r24, 0x07	; 7
    14ca:	16 95       	lsr	r17
    14cc:	07 95       	ror	r16
    14ce:	f7 94       	ror	r15
    14d0:	e7 94       	ror	r14
    14d2:	8a 95       	dec	r24
    14d4:	d1 f7       	brne	.-12     	; 0x14ca <__pack_f+0x164>
    14d6:	05 c0       	rjmp	.+10     	; 0x14e2 <__pack_f+0x17c>
    14d8:	ee 24       	eor	r14, r14
    14da:	ff 24       	eor	r15, r15
    14dc:	87 01       	movw	r16, r14
    14de:	ef ef       	ldi	r30, 0xFF	; 255
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	6e 2f       	mov	r22, r30
    14e4:	67 95       	ror	r22
    14e6:	66 27       	eor	r22, r22
    14e8:	67 95       	ror	r22
    14ea:	90 2f       	mov	r25, r16
    14ec:	9f 77       	andi	r25, 0x7F	; 127
    14ee:	d7 94       	ror	r13
    14f0:	dd 24       	eor	r13, r13
    14f2:	d7 94       	ror	r13
    14f4:	8e 2f       	mov	r24, r30
    14f6:	86 95       	lsr	r24
    14f8:	49 2f       	mov	r20, r25
    14fa:	46 2b       	or	r20, r22
    14fc:	58 2f       	mov	r21, r24
    14fe:	5d 29       	or	r21, r13
    1500:	b7 01       	movw	r22, r14
    1502:	ca 01       	movw	r24, r20
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	ff 90       	pop	r15
    150a:	ef 90       	pop	r14
    150c:	df 90       	pop	r13
    150e:	08 95       	ret

00001510 <__unpack_f>:
    1510:	fc 01       	movw	r30, r24
    1512:	db 01       	movw	r26, r22
    1514:	40 81       	ld	r20, Z
    1516:	51 81       	ldd	r21, Z+1	; 0x01
    1518:	22 81       	ldd	r18, Z+2	; 0x02
    151a:	62 2f       	mov	r22, r18
    151c:	6f 77       	andi	r22, 0x7F	; 127
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	22 1f       	adc	r18, r18
    1522:	22 27       	eor	r18, r18
    1524:	22 1f       	adc	r18, r18
    1526:	93 81       	ldd	r25, Z+3	; 0x03
    1528:	89 2f       	mov	r24, r25
    152a:	88 0f       	add	r24, r24
    152c:	82 2b       	or	r24, r18
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	99 1f       	adc	r25, r25
    1534:	99 27       	eor	r25, r25
    1536:	99 1f       	adc	r25, r25
    1538:	11 96       	adiw	r26, 0x01	; 1
    153a:	9c 93       	st	X, r25
    153c:	11 97       	sbiw	r26, 0x01	; 1
    153e:	21 15       	cp	r18, r1
    1540:	31 05       	cpc	r19, r1
    1542:	a9 f5       	brne	.+106    	; 0x15ae <__unpack_f+0x9e>
    1544:	41 15       	cp	r20, r1
    1546:	51 05       	cpc	r21, r1
    1548:	61 05       	cpc	r22, r1
    154a:	71 05       	cpc	r23, r1
    154c:	11 f4       	brne	.+4      	; 0x1552 <__unpack_f+0x42>
    154e:	82 e0       	ldi	r24, 0x02	; 2
    1550:	37 c0       	rjmp	.+110    	; 0x15c0 <__unpack_f+0xb0>
    1552:	82 e8       	ldi	r24, 0x82	; 130
    1554:	9f ef       	ldi	r25, 0xFF	; 255
    1556:	13 96       	adiw	r26, 0x03	; 3
    1558:	9c 93       	st	X, r25
    155a:	8e 93       	st	-X, r24
    155c:	12 97       	sbiw	r26, 0x02	; 2
    155e:	9a 01       	movw	r18, r20
    1560:	ab 01       	movw	r20, r22
    1562:	67 e0       	ldi	r22, 0x07	; 7
    1564:	22 0f       	add	r18, r18
    1566:	33 1f       	adc	r19, r19
    1568:	44 1f       	adc	r20, r20
    156a:	55 1f       	adc	r21, r21
    156c:	6a 95       	dec	r22
    156e:	d1 f7       	brne	.-12     	; 0x1564 <__unpack_f+0x54>
    1570:	83 e0       	ldi	r24, 0x03	; 3
    1572:	8c 93       	st	X, r24
    1574:	0d c0       	rjmp	.+26     	; 0x1590 <__unpack_f+0x80>
    1576:	22 0f       	add	r18, r18
    1578:	33 1f       	adc	r19, r19
    157a:	44 1f       	adc	r20, r20
    157c:	55 1f       	adc	r21, r21
    157e:	12 96       	adiw	r26, 0x02	; 2
    1580:	8d 91       	ld	r24, X+
    1582:	9c 91       	ld	r25, X
    1584:	13 97       	sbiw	r26, 0x03	; 3
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	13 96       	adiw	r26, 0x03	; 3
    158a:	9c 93       	st	X, r25
    158c:	8e 93       	st	-X, r24
    158e:	12 97       	sbiw	r26, 0x02	; 2
    1590:	20 30       	cpi	r18, 0x00	; 0
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	38 07       	cpc	r19, r24
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	48 07       	cpc	r20, r24
    159a:	80 e4       	ldi	r24, 0x40	; 64
    159c:	58 07       	cpc	r21, r24
    159e:	58 f3       	brcs	.-42     	; 0x1576 <__unpack_f+0x66>
    15a0:	14 96       	adiw	r26, 0x04	; 4
    15a2:	2d 93       	st	X+, r18
    15a4:	3d 93       	st	X+, r19
    15a6:	4d 93       	st	X+, r20
    15a8:	5c 93       	st	X, r21
    15aa:	17 97       	sbiw	r26, 0x07	; 7
    15ac:	08 95       	ret
    15ae:	2f 3f       	cpi	r18, 0xFF	; 255
    15b0:	31 05       	cpc	r19, r1
    15b2:	79 f4       	brne	.+30     	; 0x15d2 <__unpack_f+0xc2>
    15b4:	41 15       	cp	r20, r1
    15b6:	51 05       	cpc	r21, r1
    15b8:	61 05       	cpc	r22, r1
    15ba:	71 05       	cpc	r23, r1
    15bc:	19 f4       	brne	.+6      	; 0x15c4 <__unpack_f+0xb4>
    15be:	84 e0       	ldi	r24, 0x04	; 4
    15c0:	8c 93       	st	X, r24
    15c2:	08 95       	ret
    15c4:	64 ff       	sbrs	r22, 4
    15c6:	03 c0       	rjmp	.+6      	; 0x15ce <__unpack_f+0xbe>
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	8c 93       	st	X, r24
    15cc:	12 c0       	rjmp	.+36     	; 0x15f2 <__unpack_f+0xe2>
    15ce:	1c 92       	st	X, r1
    15d0:	10 c0       	rjmp	.+32     	; 0x15f2 <__unpack_f+0xe2>
    15d2:	2f 57       	subi	r18, 0x7F	; 127
    15d4:	30 40       	sbci	r19, 0x00	; 0
    15d6:	13 96       	adiw	r26, 0x03	; 3
    15d8:	3c 93       	st	X, r19
    15da:	2e 93       	st	-X, r18
    15dc:	12 97       	sbiw	r26, 0x02	; 2
    15de:	83 e0       	ldi	r24, 0x03	; 3
    15e0:	8c 93       	st	X, r24
    15e2:	87 e0       	ldi	r24, 0x07	; 7
    15e4:	44 0f       	add	r20, r20
    15e6:	55 1f       	adc	r21, r21
    15e8:	66 1f       	adc	r22, r22
    15ea:	77 1f       	adc	r23, r23
    15ec:	8a 95       	dec	r24
    15ee:	d1 f7       	brne	.-12     	; 0x15e4 <__unpack_f+0xd4>
    15f0:	70 64       	ori	r23, 0x40	; 64
    15f2:	14 96       	adiw	r26, 0x04	; 4
    15f4:	4d 93       	st	X+, r20
    15f6:	5d 93       	st	X+, r21
    15f8:	6d 93       	st	X+, r22
    15fa:	7c 93       	st	X, r23
    15fc:	17 97       	sbiw	r26, 0x07	; 7
    15fe:	08 95       	ret

00001600 <__fpcmp_parts_f>:
    1600:	1f 93       	push	r17
    1602:	dc 01       	movw	r26, r24
    1604:	fb 01       	movw	r30, r22
    1606:	9c 91       	ld	r25, X
    1608:	92 30       	cpi	r25, 0x02	; 2
    160a:	08 f4       	brcc	.+2      	; 0x160e <__fpcmp_parts_f+0xe>
    160c:	47 c0       	rjmp	.+142    	; 0x169c <__fpcmp_parts_f+0x9c>
    160e:	80 81       	ld	r24, Z
    1610:	82 30       	cpi	r24, 0x02	; 2
    1612:	08 f4       	brcc	.+2      	; 0x1616 <__fpcmp_parts_f+0x16>
    1614:	43 c0       	rjmp	.+134    	; 0x169c <__fpcmp_parts_f+0x9c>
    1616:	94 30       	cpi	r25, 0x04	; 4
    1618:	51 f4       	brne	.+20     	; 0x162e <__fpcmp_parts_f+0x2e>
    161a:	11 96       	adiw	r26, 0x01	; 1
    161c:	1c 91       	ld	r17, X
    161e:	84 30       	cpi	r24, 0x04	; 4
    1620:	99 f5       	brne	.+102    	; 0x1688 <__fpcmp_parts_f+0x88>
    1622:	81 81       	ldd	r24, Z+1	; 0x01
    1624:	68 2f       	mov	r22, r24
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	61 1b       	sub	r22, r17
    162a:	71 09       	sbc	r23, r1
    162c:	3f c0       	rjmp	.+126    	; 0x16ac <__fpcmp_parts_f+0xac>
    162e:	84 30       	cpi	r24, 0x04	; 4
    1630:	21 f0       	breq	.+8      	; 0x163a <__fpcmp_parts_f+0x3a>
    1632:	92 30       	cpi	r25, 0x02	; 2
    1634:	31 f4       	brne	.+12     	; 0x1642 <__fpcmp_parts_f+0x42>
    1636:	82 30       	cpi	r24, 0x02	; 2
    1638:	b9 f1       	breq	.+110    	; 0x16a8 <__fpcmp_parts_f+0xa8>
    163a:	81 81       	ldd	r24, Z+1	; 0x01
    163c:	88 23       	and	r24, r24
    163e:	89 f1       	breq	.+98     	; 0x16a2 <__fpcmp_parts_f+0xa2>
    1640:	2d c0       	rjmp	.+90     	; 0x169c <__fpcmp_parts_f+0x9c>
    1642:	11 96       	adiw	r26, 0x01	; 1
    1644:	1c 91       	ld	r17, X
    1646:	11 97       	sbiw	r26, 0x01	; 1
    1648:	82 30       	cpi	r24, 0x02	; 2
    164a:	f1 f0       	breq	.+60     	; 0x1688 <__fpcmp_parts_f+0x88>
    164c:	81 81       	ldd	r24, Z+1	; 0x01
    164e:	18 17       	cp	r17, r24
    1650:	d9 f4       	brne	.+54     	; 0x1688 <__fpcmp_parts_f+0x88>
    1652:	12 96       	adiw	r26, 0x02	; 2
    1654:	2d 91       	ld	r18, X+
    1656:	3c 91       	ld	r19, X
    1658:	13 97       	sbiw	r26, 0x03	; 3
    165a:	82 81       	ldd	r24, Z+2	; 0x02
    165c:	93 81       	ldd	r25, Z+3	; 0x03
    165e:	82 17       	cp	r24, r18
    1660:	93 07       	cpc	r25, r19
    1662:	94 f0       	brlt	.+36     	; 0x1688 <__fpcmp_parts_f+0x88>
    1664:	28 17       	cp	r18, r24
    1666:	39 07       	cpc	r19, r25
    1668:	bc f0       	brlt	.+46     	; 0x1698 <__fpcmp_parts_f+0x98>
    166a:	14 96       	adiw	r26, 0x04	; 4
    166c:	8d 91       	ld	r24, X+
    166e:	9d 91       	ld	r25, X+
    1670:	0d 90       	ld	r0, X+
    1672:	bc 91       	ld	r27, X
    1674:	a0 2d       	mov	r26, r0
    1676:	24 81       	ldd	r18, Z+4	; 0x04
    1678:	35 81       	ldd	r19, Z+5	; 0x05
    167a:	46 81       	ldd	r20, Z+6	; 0x06
    167c:	57 81       	ldd	r21, Z+7	; 0x07
    167e:	28 17       	cp	r18, r24
    1680:	39 07       	cpc	r19, r25
    1682:	4a 07       	cpc	r20, r26
    1684:	5b 07       	cpc	r21, r27
    1686:	18 f4       	brcc	.+6      	; 0x168e <__fpcmp_parts_f+0x8e>
    1688:	11 23       	and	r17, r17
    168a:	41 f0       	breq	.+16     	; 0x169c <__fpcmp_parts_f+0x9c>
    168c:	0a c0       	rjmp	.+20     	; 0x16a2 <__fpcmp_parts_f+0xa2>
    168e:	82 17       	cp	r24, r18
    1690:	93 07       	cpc	r25, r19
    1692:	a4 07       	cpc	r26, r20
    1694:	b5 07       	cpc	r27, r21
    1696:	40 f4       	brcc	.+16     	; 0x16a8 <__fpcmp_parts_f+0xa8>
    1698:	11 23       	and	r17, r17
    169a:	19 f0       	breq	.+6      	; 0x16a2 <__fpcmp_parts_f+0xa2>
    169c:	61 e0       	ldi	r22, 0x01	; 1
    169e:	70 e0       	ldi	r23, 0x00	; 0
    16a0:	05 c0       	rjmp	.+10     	; 0x16ac <__fpcmp_parts_f+0xac>
    16a2:	6f ef       	ldi	r22, 0xFF	; 255
    16a4:	7f ef       	ldi	r23, 0xFF	; 255
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <__fpcmp_parts_f+0xac>
    16a8:	60 e0       	ldi	r22, 0x00	; 0
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	cb 01       	movw	r24, r22
    16ae:	1f 91       	pop	r17
    16b0:	08 95       	ret

000016b2 <__eerd_word>:
    16b2:	df 92       	push	r13
    16b4:	ef 92       	push	r14
    16b6:	ff 92       	push	r15
    16b8:	0f 93       	push	r16
    16ba:	1f 93       	push	r17
    16bc:	7b 01       	movw	r14, r22
    16be:	8c 01       	movw	r16, r24
    16c0:	fb 01       	movw	r30, r22
    16c2:	09 95       	icall
    16c4:	d8 2e       	mov	r13, r24
    16c6:	c8 01       	movw	r24, r16
    16c8:	01 96       	adiw	r24, 0x01	; 1
    16ca:	f7 01       	movw	r30, r14
    16cc:	09 95       	icall
    16ce:	98 2f       	mov	r25, r24
    16d0:	8d 2d       	mov	r24, r13
    16d2:	1f 91       	pop	r17
    16d4:	0f 91       	pop	r16
    16d6:	ff 90       	pop	r15
    16d8:	ef 90       	pop	r14
    16da:	df 90       	pop	r13
    16dc:	08 95       	ret

000016de <__eewr_word>:
    16de:	df 92       	push	r13
    16e0:	ef 92       	push	r14
    16e2:	ff 92       	push	r15
    16e4:	0f 93       	push	r16
    16e6:	1f 93       	push	r17
    16e8:	d7 2e       	mov	r13, r23
    16ea:	7a 01       	movw	r14, r20
    16ec:	8c 01       	movw	r16, r24
    16ee:	fa 01       	movw	r30, r20
    16f0:	09 95       	icall
    16f2:	6d 2d       	mov	r22, r13
    16f4:	c8 01       	movw	r24, r16
    16f6:	01 96       	adiw	r24, 0x01	; 1
    16f8:	f7 01       	movw	r30, r14
    16fa:	09 95       	icall
    16fc:	1f 91       	pop	r17
    16fe:	0f 91       	pop	r16
    1700:	ff 90       	pop	r15
    1702:	ef 90       	pop	r14
    1704:	df 90       	pop	r13
    1706:	08 95       	ret

00001708 <__udivmodhi4>:
    1708:	aa 1b       	sub	r26, r26
    170a:	bb 1b       	sub	r27, r27
    170c:	51 e1       	ldi	r21, 0x11	; 17
    170e:	07 c0       	rjmp	.+14     	; 0x171e <__udivmodhi4_ep>

00001710 <__udivmodhi4_loop>:
    1710:	aa 1f       	adc	r26, r26
    1712:	bb 1f       	adc	r27, r27
    1714:	a6 17       	cp	r26, r22
    1716:	b7 07       	cpc	r27, r23
    1718:	10 f0       	brcs	.+4      	; 0x171e <__udivmodhi4_ep>
    171a:	a6 1b       	sub	r26, r22
    171c:	b7 0b       	sbc	r27, r23

0000171e <__udivmodhi4_ep>:
    171e:	88 1f       	adc	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	5a 95       	dec	r21
    1724:	a9 f7       	brne	.-22     	; 0x1710 <__udivmodhi4_loop>
    1726:	80 95       	com	r24
    1728:	90 95       	com	r25
    172a:	bc 01       	movw	r22, r24
    172c:	cd 01       	movw	r24, r26
    172e:	08 95       	ret

00001730 <__prologue_saves__>:
    1730:	2f 92       	push	r2
    1732:	3f 92       	push	r3
    1734:	4f 92       	push	r4
    1736:	5f 92       	push	r5
    1738:	6f 92       	push	r6
    173a:	7f 92       	push	r7
    173c:	8f 92       	push	r8
    173e:	9f 92       	push	r9
    1740:	af 92       	push	r10
    1742:	bf 92       	push	r11
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	ca 1b       	sub	r28, r26
    175a:	db 0b       	sbc	r29, r27
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	09 94       	ijmp

00001768 <__epilogue_restores__>:
    1768:	2a 88       	ldd	r2, Y+18	; 0x12
    176a:	39 88       	ldd	r3, Y+17	; 0x11
    176c:	48 88       	ldd	r4, Y+16	; 0x10
    176e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1770:	6e 84       	ldd	r6, Y+14	; 0x0e
    1772:	7d 84       	ldd	r7, Y+13	; 0x0d
    1774:	8c 84       	ldd	r8, Y+12	; 0x0c
    1776:	9b 84       	ldd	r9, Y+11	; 0x0b
    1778:	aa 84       	ldd	r10, Y+10	; 0x0a
    177a:	b9 84       	ldd	r11, Y+9	; 0x09
    177c:	c8 84       	ldd	r12, Y+8	; 0x08
    177e:	df 80       	ldd	r13, Y+7	; 0x07
    1780:	ee 80       	ldd	r14, Y+6	; 0x06
    1782:	fd 80       	ldd	r15, Y+5	; 0x05
    1784:	0c 81       	ldd	r16, Y+4	; 0x04
    1786:	1b 81       	ldd	r17, Y+3	; 0x03
    1788:	aa 81       	ldd	r26, Y+2	; 0x02
    178a:	b9 81       	ldd	r27, Y+1	; 0x01
    178c:	ce 0f       	add	r28, r30
    178e:	d1 1d       	adc	r29, r1
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	f8 94       	cli
    1794:	de bf       	out	0x3e, r29	; 62
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	cd bf       	out	0x3d, r28	; 61
    179a:	ed 01       	movw	r28, r26
    179c:	08 95       	ret

0000179e <_exit>:
    179e:	f8 94       	cli

000017a0 <__stop_program>:
    17a0:	ff cf       	rjmp	.-2      	; 0x17a0 <__stop_program>
