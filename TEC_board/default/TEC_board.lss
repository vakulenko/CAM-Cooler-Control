
TEC_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000017b8  0000184c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800168  000018c0  00001954  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  00001954  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  00001957  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001fa  00000000  00000000  00001977  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c9d  00000000  00000000  00001b71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000315  00000000  00000000  0000280e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b43  00000000  00000000  00002b23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00003668  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d9  00000000  00000000  00003798  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000651  00000000  00000000  00003a71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  000040c2  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bb 02 	call	0x576	; 0x576 <main>
      8a:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
      92:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
      94:	e1 99       	sbic	0x1c, 1	; 28
      96:	fe cf       	rjmp	.-4      	; 0x94 <eeprom_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
      98:	3f bb       	out	0x1f, r19	; 31
      9a:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
      9c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
      9e:	8d b3       	in	r24, 0x1d	; 29
}
      a0:	08 95       	ret

000000a2 <eeprom_write_byte>:

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
      a2:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
      a4:	e1 99       	sbic	0x1c, 1	; 28
      a6:	fe cf       	rjmp	.-4      	; 0xa4 <eeprom_write_byte+0x2>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
      a8:	3f bb       	out	0x1f, r19	; 31
      aa:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
      ac:	6d bb       	out	0x1d, r22	; 29

    __asm__ __volatile__ (
      ae:	0f b6       	in	r0, 0x3f	; 63
      b0:	f8 94       	cli
      b2:	e2 9a       	sbi	0x1c, 2	; 28
      b4:	e1 9a       	sbi	0x1c, 1	; 28
      b6:	0f be       	out	0x3f, r0	; 63
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
}
      b8:	08 95       	ret

000000ba <uartInit>:

//------------------------------------------------------------------------------------
//UART

void uartInit(void)
{
      ba:	10 bc       	out	0x20, r1	; 32
	UBRRH = (BAUD_PRESCALE >> 8);		// Init UART baudrate
	UBRRL = BAUD_PRESCALE;
      bc:	83 e3       	ldi	r24, 0x33	; 51
      be:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1<<RXEN)|(1<<TXEN)|(1 << RXCIE);	// TX, RX enable, RX interrupt enable
      c0:	88 e9       	ldi	r24, 0x98	; 152
      c2:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
      c4:	86 e8       	ldi	r24, 0x86	; 134
      c6:	80 bd       	out	0x20, r24	; 32
	return;
}
      c8:	08 95       	ret

000000ca <uartTransmitByte>:

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
      ca:	5d 9b       	sbis	0x0b, 5	; 11
      cc:	fe cf       	rjmp	.-4      	; 0xca <uartTransmitByte>
	while ( !( UCSRA & (1<<UDRE)) );
	UDR = data;
      ce:	8c b9       	out	0x0c, r24	; 12
	return;
}
      d0:	08 95       	ret

000000d2 <uartReceiveByte>:

//Receive byte thought UART
unsigned char uartReceiveByte (void)
{
      d2:	5f 9b       	sbis	0x0b, 7	; 11
      d4:	fe cf       	rjmp	.-4      	; 0xd2 <uartReceiveByte>

	while ( !(UCSRA & (1<<RXC)) )
	;
	return UDR;
      d6:	8c b1       	in	r24, 0x0c	; 12
}
      d8:	08 95       	ret

000000da <uartTransmitMessage>:

//Transmit string to UART
void uartTransmitMessage(char* msg)
{ unsigned char i;
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	04 c0       	rjmp	.+8      	; 0xe6 <uartTransmitMessage+0xc>
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
      de:	5d 9b       	sbis	0x0b, 5	; 11
      e0:	fe cf       	rjmp	.-4      	; 0xde <uartTransmitMessage+0x4>
	UDR = data;
      e2:	ec b9       	out	0x0c, r30	; 12
	i=0;

	while ((i<256)&(msg[i]!=0x00) )
	{
		uartTransmitByte(msg[i]);
		i++;
      e4:	2f 5f       	subi	r18, 0xFF	; 255
//Transmit string to UART
void uartTransmitMessage(char* msg)
{ unsigned char i;
	i=0;

	while ((i<256)&(msg[i]!=0x00) )
      e6:	fc 01       	movw	r30, r24
      e8:	e2 0f       	add	r30, r18
      ea:	f1 1d       	adc	r31, r1
      ec:	e0 81       	ld	r30, Z
      ee:	ee 23       	and	r30, r30
      f0:	b1 f7       	brne	.-20     	; 0xde <uartTransmitMessage+0x4>
	{
		uartTransmitByte(msg[i]);
		i++;
	}
	return;
}
      f2:	08 95       	ret

000000f4 <clearRXBuf>:

//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
      f4:	ef e7       	ldi	r30, 0x7F	; 127
      f6:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
      f8:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	ea 38       	cpi	r30, 0x8A	; 138
      fe:	f8 07       	cpc	r31, r24
     100:	d9 f7       	brne	.-10     	; 0xf8 <clearRXBuf+0x4>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     102:	10 92 69 01 	sts	0x0169, r1
	return;
}
     106:	08 95       	ret

00000108 <clearTXBuf>:

void clearTXBuf (void)
{
     108:	ed e6       	ldi	r30, 0x6D	; 109
     10a:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	txBuf[i]=0;
     10c:	11 92       	st	Z+, r1
}

void clearTXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	e8 37       	cpi	r30, 0x78	; 120
     112:	f8 07       	cpc	r31, r24
     114:	d9 f7       	brne	.-10     	; 0x10c <clearTXBuf+0x4>
	txBuf[i]=0;
	return;
}
     116:	08 95       	ret

00000118 <clearBuf>:

void clearBuf (void)
{
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=txBuf[i]=0;
     11c:	fc 01       	movw	r30, r24
     11e:	e3 59       	subi	r30, 0x93	; 147
     120:	fe 4f       	sbci	r31, 0xFE	; 254
     122:	10 82       	st	Z, r1
     124:	fc 01       	movw	r30, r24
     126:	e1 58       	subi	r30, 0x81	; 129
     128:	fe 4f       	sbci	r31, 0xFE	; 254
     12a:	10 82       	st	Z, r1
     12c:	01 96       	adiw	r24, 0x01	; 1
}

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     12e:	8b 30       	cpi	r24, 0x0B	; 11
     130:	91 05       	cpc	r25, r1
     132:	a1 f7       	brne	.-24     	; 0x11c <clearBuf+0x4>
	rxBuf[i]=txBuf[i]=0;
	return;
}
     134:	08 95       	ret

00000136 <__vector_11>:

//receive packet to RX buffer
ISR(USART_RXC_vect)
{
     136:	1f 92       	push	r1
     138:	0f 92       	push	r0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	0f 92       	push	r0
     13e:	11 24       	eor	r1, r1
     140:	2f 93       	push	r18
     142:	3f 93       	push	r19
     144:	4f 93       	push	r20
     146:	6f 93       	push	r22
     148:	7f 93       	push	r23
     14a:	8f 93       	push	r24
     14c:	9f 93       	push	r25
     14e:	ef 93       	push	r30
     150:	ff 93       	push	r31
	uint16_t i=0;

	if (packetReceived!=0)
     152:	80 91 68 01 	lds	r24, 0x0168
     156:	88 23       	and	r24, r24
     158:	11 f0       	breq	.+4      	; 0x15e <__vector_11+0x28>
	{
		i=UDR;
     15a:	8c b1       	in	r24, 0x0c	; 12
     15c:	25 c0       	rjmp	.+74     	; 0x1a8 <__vector_11+0x72>
		return;
	}

	rxBuf[0]=UDR;
     15e:	8c b1       	in	r24, 0x0c	; 12
     160:	80 93 7f 01 	sts	0x017F, r24
	currentRXPacketLen=1;
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	80 93 69 01 	sts	0x0169, r24
     16a:	20 e0       	ldi	r18, 0x00	; 0
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	41 e0       	ldi	r20, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     170:	61 e0       	ldi	r22, 0x01	; 1
     172:	70 e0       	ldi	r23, 0x00	; 0
     174:	09 c0       	rjmp	.+18     	; 0x188 <__vector_11+0x52>

	while (1)
	{
		while ( !(UCSRA & (1<<RXC)) )
		{
			if (i==10000)
     176:	87 e2       	ldi	r24, 0x27	; 39
     178:	20 31       	cpi	r18, 0x10	; 16
     17a:	38 07       	cpc	r19, r24
     17c:	81 f0       	breq	.+32     	; 0x19e <__vector_11+0x68>
			{
				packetReceived=1;
				return;
			}
			i++;
     17e:	2f 5f       	subi	r18, 0xFF	; 255
     180:	3f 4f       	sbci	r19, 0xFF	; 255
     182:	cb 01       	movw	r24, r22
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <__vector_11+0x4e>
	rxBuf[0]=UDR;
	currentRXPacketLen=1;

	while (1)
	{
		while ( !(UCSRA & (1<<RXC)) )
     188:	5f 9b       	sbis	0x0b, 7	; 11
     18a:	f5 cf       	rjmp	.-22     	; 0x176 <__vector_11+0x40>
				return;
			}
			i++;
			_delay_loop_2(1);
		}
		rxBuf[currentRXPacketLen]=UDR;
     18c:	8c b1       	in	r24, 0x0c	; 12
     18e:	e4 2f       	mov	r30, r20
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	e1 58       	subi	r30, 0x81	; 129
     194:	fe 4f       	sbci	r31, 0xFE	; 254
     196:	80 83       	st	Z, r24
		currentRXPacketLen++;
     198:	4f 5f       	subi	r20, 0xFF	; 255

		if (currentRXPacketLen>=BUFF_SIZE)
     19a:	4b 30       	cpi	r20, 0x0B	; 11
     19c:	a8 f3       	brcs	.-22     	; 0x188 <__vector_11+0x52>
     19e:	40 93 69 01 	sts	0x0169, r20
		{
			packetReceived=1;
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	80 93 68 01 	sts	0x0168, r24
			return;
		}
	}
}
     1a8:	ff 91       	pop	r31
     1aa:	ef 91       	pop	r30
     1ac:	9f 91       	pop	r25
     1ae:	8f 91       	pop	r24
     1b0:	7f 91       	pop	r23
     1b2:	6f 91       	pop	r22
     1b4:	4f 91       	pop	r20
     1b6:	3f 91       	pop	r19
     1b8:	2f 91       	pop	r18
     1ba:	0f 90       	pop	r0
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	0f 90       	pop	r0
     1c0:	1f 90       	pop	r1
     1c2:	18 95       	reti

000001c4 <uartSendPacket>:

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
     1c4:	ed e6       	ldi	r30, 0x6D	; 109
     1c6:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i;
	for (i=0;i<length;i++)
     1c8:	70 e0       	ldi	r23, 0x00	; 0
     1ca:	6e 0f       	add	r22, r30
     1cc:	7f 1f       	adc	r23, r31
     1ce:	05 c0       	rjmp	.+10     	; 0x1da <uartSendPacket+0x16>
	uartTransmitByte(txBuf[i]);
     1d0:	80 81       	ld	r24, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     1d2:	5d 9b       	sbis	0x0b, 5	; 11
     1d4:	fe cf       	rjmp	.-4      	; 0x1d2 <uartSendPacket+0xe>
	UDR = data;
     1d6:	8c b9       	out	0x0c, r24	; 12
     1d8:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     1da:	e6 17       	cp	r30, r22
     1dc:	f7 07       	cpc	r31, r23
     1de:	c1 f7       	brne	.-16     	; 0x1d0 <uartSendPacket+0xc>
	uartTransmitByte(txBuf[i]);
	return;
}
     1e0:	08 95       	ret

000001e2 <crc8Block>:

//crc calculating function
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
     1e2:	fc 01       	movw	r30, r24
     1e4:	9f ef       	ldi	r25, 0xFF	; 255
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     1e6:	21 e3       	ldi	r18, 0x31	; 49
     1e8:	0e c0       	rjmp	.+28     	; 0x206 <crc8Block+0x24>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     1ea:	80 81       	ld	r24, Z
     1ec:	98 27       	eor	r25, r24
     1ee:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     1f0:	97 ff       	sbrs	r25, 7
     1f2:	03 c0       	rjmp	.+6      	; 0x1fa <crc8Block+0x18>
     1f4:	99 0f       	add	r25, r25
     1f6:	92 27       	eor	r25, r18
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <crc8Block+0x1a>
     1fa:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     1fc:	8f 5f       	subi	r24, 0xFF	; 255
     1fe:	88 30       	cpi	r24, 0x08	; 8
     200:	b9 f7       	brne	.-18     	; 0x1f0 <crc8Block+0xe>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     202:	31 96       	adiw	r30, 0x01	; 1
     204:	61 50       	subi	r22, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     206:	66 23       	and	r22, r22
     208:	81 f7       	brne	.-32     	; 0x1ea <crc8Block+0x8>
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
	}	
	return crc;
}
     20a:	89 2f       	mov	r24, r25
     20c:	08 95       	ret

0000020e <prepareSystemStatus>:

//prepare TX buffer
void prepareSystemStatus (void)
{
     20e:	84 e6       	ldi	r24, 0x64	; 100
     210:	80 93 6d 01 	sts	0x016D, r24
	txBuf[0]='d';
	txBuf[1]= sensorData[0]>>8;
     214:	90 91 7b 01 	lds	r25, 0x017B
     218:	80 91 7c 01 	lds	r24, 0x017C
     21c:	80 93 6e 01 	sts	0x016E, r24
	txBuf[2]= sensorData[0]&0x00ff;
     220:	90 93 6f 01 	sts	0x016F, r25
	txBuf[3]= sensorData[1]>>8;
     224:	90 91 7d 01 	lds	r25, 0x017D
     228:	80 91 7e 01 	lds	r24, 0x017E
     22c:	80 93 70 01 	sts	0x0170, r24
	txBuf[4]= sensorData[1]&0x00ff;
     230:	90 93 71 01 	sts	0x0171, r25
	txBuf[5]= setData[0]>>8;
     234:	90 91 79 01 	lds	r25, 0x0179
     238:	80 91 7a 01 	lds	r24, 0x017A
     23c:	80 93 72 01 	sts	0x0172, r24
	txBuf[6]= setData[0]&0x00ff;
     240:	90 93 73 01 	sts	0x0173, r25
	txBuf[7]= coolerPower;
     244:	80 91 6c 01 	lds	r24, 0x016C
     248:	80 93 74 01 	sts	0x0174, r24
	txBuf[8]= errorCode;
     24c:	80 91 6a 01 	lds	r24, 0x016A
     250:	80 93 75 01 	sts	0x0175, r24
	txBuf[9]= coolerState;
     254:	80 91 8b 01 	lds	r24, 0x018B
     258:	80 93 76 01 	sts	0x0176, r24
     25c:	9f ef       	ldi	r25, 0xFF	; 255
     25e:	ed e6       	ldi	r30, 0x6D	; 109
     260:	f1 e0       	ldi	r31, 0x01	; 1
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     262:	21 e3       	ldi	r18, 0x31	; 49
     264:	0d c0       	rjmp	.+26     	; 0x280 <prepareSystemStatus+0x72>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     266:	80 81       	ld	r24, Z
     268:	98 27       	eor	r25, r24
     26a:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     26c:	97 ff       	sbrs	r25, 7
     26e:	03 c0       	rjmp	.+6      	; 0x276 <prepareSystemStatus+0x68>
     270:	99 0f       	add	r25, r25
     272:	92 27       	eor	r25, r18
     274:	01 c0       	rjmp	.+2      	; 0x278 <prepareSystemStatus+0x6a>
     276:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     278:	8f 5f       	subi	r24, 0xFF	; 255
     27a:	88 30       	cpi	r24, 0x08	; 8
     27c:	b9 f7       	brne	.-18     	; 0x26c <prepareSystemStatus+0x5e>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     27e:	31 96       	adiw	r30, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	e7 37       	cpi	r30, 0x77	; 119
     284:	f8 07       	cpc	r31, r24
     286:	79 f7       	brne	.-34     	; 0x266 <prepareSystemStatus+0x58>
	txBuf[5]= setData[0]>>8;
	txBuf[6]= setData[0]&0x00ff;
	txBuf[7]= coolerPower;
	txBuf[8]= errorCode;
	txBuf[9]= coolerState;
	txBuf[10]=crc8Block(txBuf,10);
     288:	90 83       	st	Z, r25
}
     28a:	08 95       	ret

0000028c <presentDS18b20>:

//------------------------------------------------------------------------------------
//DS18B20

uint8_t presentDS18b20(uint8_t sensor_num)
{	uint8_t res, sensor_pin;
     28c:	88 23       	and	r24, r24
     28e:	11 f0       	breq	.+4      	; 0x294 <presentDS18b20+0x8>
     290:	43 e0       	ldi	r20, 0x03	; 3
     292:	01 c0       	rjmp	.+2      	; 0x296 <presentDS18b20+0xa>
     294:	42 e0       	ldi	r20, 0x02	; 2

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;
	
	SENSOR_DDR|=(1<<sensor_pin);
     296:	84 b3       	in	r24, 0x14	; 20
     298:	21 e0       	ldi	r18, 0x01	; 1
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	92 2f       	mov	r25, r18
     29e:	04 2e       	mov	r0, r20
     2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <presentDS18b20+0x18>
     2a2:	99 0f       	add	r25, r25
     2a4:	0a 94       	dec	r0
     2a6:	ea f7       	brpl	.-6      	; 0x2a2 <presentDS18b20+0x16>
     2a8:	89 2b       	or	r24, r25
     2aa:	84 bb       	out	0x14, r24	; 20
     2ac:	e8 ee       	ldi	r30, 0xE8	; 232
     2ae:	f3 e0       	ldi	r31, 0x03	; 3
     2b0:	31 97       	sbiw	r30, 0x01	; 1
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <presentDS18b20+0x24>
	_delay_us (500);

	SENSOR_DDR&=~(1<<sensor_pin);
     2b4:	84 b3       	in	r24, 0x14	; 20
     2b6:	90 95       	com	r25
     2b8:	98 23       	and	r25, r24
     2ba:	94 bb       	out	0x14, r25	; 20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2bc:	85 ed       	ldi	r24, 0xD5	; 213
     2be:	8a 95       	dec	r24
     2c0:	f1 f7       	brne	.-4      	; 0x2be <presentDS18b20+0x32>
	_delay_us(80);
	
	if ((SENSOR_PIN&(1<<sensor_pin)) == 0x00) res=1;  
     2c2:	83 b3       	in	r24, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2c4:	e8 e4       	ldi	r30, 0x48	; 72
     2c6:	f3 e0       	ldi	r31, 0x03	; 3
     2c8:	31 97       	sbiw	r30, 0x01	; 1
     2ca:	f1 f7       	brne	.-4      	; 0x2c8 <presentDS18b20+0x3c>
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <presentDS18b20+0x48>
     2d0:	95 95       	asr	r25
     2d2:	87 95       	ror	r24
     2d4:	4a 95       	dec	r20
     2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <presentDS18b20+0x44>
     2d8:	82 27       	eor	r24, r18
     2da:	93 27       	eor	r25, r19
	else res=0;  
	
	_delay_us(420);
	return res;
}
     2dc:	81 70       	andi	r24, 0x01	; 1
     2de:	08 95       	ret

000002e0 <sendDS18b20>:

void sendDS18b20(uint8_t command, uint8_t sensor_num)
{	uint8_t i, data, sensor_pin;
     2e0:	48 2f       	mov	r20, r24

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     2e2:	66 23       	and	r22, r22
     2e4:	11 f0       	breq	.+4      	; 0x2ea <sendDS18b20+0xa>
     2e6:	23 e0       	ldi	r18, 0x03	; 3
     2e8:	01 c0       	rjmp	.+2      	; 0x2ec <sendDS18b20+0xc>
     2ea:	22 e0       	ldi	r18, 0x02	; 2
	data=command;

	for(i=0;i<8;i++)
	{
		if ((data&0x01)==0x01) {    //Send 1 on SDA
			SENSOR_DDR|=(1<<sensor_pin);
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	38 2f       	mov	r19, r24
     2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <sendDS18b20+0x16>
     2f4:	33 0f       	add	r19, r19
     2f6:	2a 95       	dec	r18
     2f8:	ea f7       	brpl	.-6      	; 0x2f4 <sendDS18b20+0x14>
			_delay_us(10);
			SENSOR_DDR&=~(1<<sensor_pin);
     2fa:	53 2f       	mov	r21, r19
     2fc:	50 95       	com	r21
     2fe:	24 2f       	mov	r18, r20
     300:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     302:	e0 ea       	ldi	r30, 0xA0	; 160
	else sensor_pin=SENSOR1_PIN;
	data=command;

	for(i=0;i<8;i++)
	{
		if ((data&0x01)==0x01) {    //Send 1 on SDA
     304:	75 e1       	ldi	r23, 0x15	; 21
     306:	6a e1       	ldi	r22, 0x1A	; 26
     308:	4a e9       	ldi	r20, 0x9A	; 154
     30a:	20 ff       	sbrs	r18, 0
     30c:	0b c0       	rjmp	.+22     	; 0x324 <sendDS18b20+0x44>
			SENSOR_DDR|=(1<<sensor_pin);
     30e:	84 b3       	in	r24, 0x14	; 20
     310:	83 2b       	or	r24, r19
     312:	84 bb       	out	0x14, r24	; 20
     314:	86 2f       	mov	r24, r22
     316:	8a 95       	dec	r24
     318:	f1 f7       	brne	.-4      	; 0x316 <sendDS18b20+0x36>
			_delay_us(10);
			SENSOR_DDR&=~(1<<sensor_pin);
     31a:	84 b3       	in	r24, 0x14	; 20
     31c:	85 23       	and	r24, r21
     31e:	84 bb       	out	0x14, r24	; 20
     320:	84 2f       	mov	r24, r20
     322:	0a c0       	rjmp	.+20     	; 0x338 <sendDS18b20+0x58>
			_delay_us(58);
		}
		else {                   	//Send 0 on SDA
			SENSOR_DDR|=(1<<sensor_pin);
     324:	84 b3       	in	r24, 0x14	; 20
     326:	83 2b       	or	r24, r19
     328:	84 bb       	out	0x14, r24	; 20
     32a:	8e 2f       	mov	r24, r30
     32c:	8a 95       	dec	r24
     32e:	f1 f7       	brne	.-4      	; 0x32c <sendDS18b20+0x4c>
			_delay_us(60);
			SENSOR_DDR&=~(1<<sensor_pin);
     330:	84 b3       	in	r24, 0x14	; 20
     332:	85 23       	and	r24, r21
     334:	84 bb       	out	0x14, r24	; 20
     336:	87 2f       	mov	r24, r23
     338:	8a 95       	dec	r24
     33a:	f1 f7       	brne	.-4      	; 0x338 <sendDS18b20+0x58>

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;
	data=command;

	for(i=0;i<8;i++)
     33c:	9f 5f       	subi	r25, 0xFF	; 255
     33e:	98 30       	cpi	r25, 0x08	; 8
     340:	11 f0       	breq	.+4      	; 0x346 <sendDS18b20+0x66>
			SENSOR_DDR|=(1<<sensor_pin);
			_delay_us(60);
			SENSOR_DDR&=~(1<<sensor_pin);
			_delay_us(8);
		}
		data=data>>1;
     342:	26 95       	lsr	r18
     344:	e2 cf       	rjmp	.-60     	; 0x30a <sendDS18b20+0x2a>
     346:	08 95       	ret

00000348 <receiveDS18b20>:
	}
	return;
}

uint16_t receiveDS18b20(uint8_t sensor_num)
{	uint8_t i, sensor_pin;
     348:	ff 92       	push	r15
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
	uint16_t res=0;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     34e:	88 23       	and	r24, r24
     350:	11 f0       	breq	.+4      	; 0x356 <receiveDS18b20+0xe>
     352:	83 e0       	ldi	r24, 0x03	; 3
     354:	01 c0       	rjmp	.+2      	; 0x358 <receiveDS18b20+0x10>
     356:	82 e0       	ldi	r24, 0x02	; 2
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
	{
		SENSOR_DDR|=(1<<sensor_pin);		
     358:	61 e0       	ldi	r22, 0x01	; 1
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	02 c0       	rjmp	.+4      	; 0x362 <receiveDS18b20+0x1a>
     35e:	66 0f       	add	r22, r22
     360:	77 1f       	adc	r23, r23
     362:	8a 95       	dec	r24
     364:	e2 f7       	brpl	.-8      	; 0x35e <receiveDS18b20+0x16>
     366:	a6 2f       	mov	r26, r22
		_delay_us(8);
		SENSOR_DDR&=~(1<<sensor_pin);		
     368:	b6 2f       	mov	r27, r22
     36a:	b0 95       	com	r27
     36c:	20 e0       	ldi	r18, 0x00	; 0
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	40 e0       	ldi	r20, 0x00	; 0
     372:	50 e0       	ldi	r21, 0x00	; 0
     374:	85 e1       	ldi	r24, 0x15	; 21
     376:	f8 2e       	mov	r15, r24
		_delay_us(12);

		if ((SENSOR_PIN & (1<<sensor_pin))==0x00) res&=~_BV(i);	//If 0 on SDA
		else 	res|=_BV(i);	    //IF 1 on SDA
     378:	00 e2       	ldi	r16, 0x20	; 32
     37a:	e1 e0       	ldi	r30, 0x01	; 1
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	18 ea       	ldi	r17, 0xA8	; 168
	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
	{
		SENSOR_DDR|=(1<<sensor_pin);		
     380:	84 b3       	in	r24, 0x14	; 20
     382:	8a 2b       	or	r24, r26
     384:	84 bb       	out	0x14, r24	; 20
     386:	8f 2d       	mov	r24, r15
     388:	8a 95       	dec	r24
     38a:	f1 f7       	brne	.-4      	; 0x388 <receiveDS18b20+0x40>
		_delay_us(8);
		SENSOR_DDR&=~(1<<sensor_pin);		
     38c:	84 b3       	in	r24, 0x14	; 20
     38e:	8b 23       	and	r24, r27
     390:	84 bb       	out	0x14, r24	; 20
     392:	80 2f       	mov	r24, r16
     394:	8a 95       	dec	r24
     396:	f1 f7       	brne	.-4      	; 0x394 <receiveDS18b20+0x4c>
		_delay_us(12);

		if ((SENSOR_PIN & (1<<sensor_pin))==0x00) res&=~_BV(i);	//If 0 on SDA
     398:	83 b3       	in	r24, 0x13	; 19
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	86 23       	and	r24, r22
     39e:	97 23       	and	r25, r23
     3a0:	89 2b       	or	r24, r25
     3a2:	61 f4       	brne	.+24     	; 0x3bc <receiveDS18b20+0x74>
     3a4:	cf 01       	movw	r24, r30
     3a6:	04 2e       	mov	r0, r20
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <receiveDS18b20+0x66>
     3aa:	88 0f       	add	r24, r24
     3ac:	99 1f       	adc	r25, r25
     3ae:	0a 94       	dec	r0
     3b0:	e2 f7       	brpl	.-8      	; 0x3aa <receiveDS18b20+0x62>
     3b2:	80 95       	com	r24
     3b4:	90 95       	com	r25
     3b6:	28 23       	and	r18, r24
     3b8:	39 23       	and	r19, r25
     3ba:	09 c0       	rjmp	.+18     	; 0x3ce <receiveDS18b20+0x86>
		else 	res|=_BV(i);	    //IF 1 on SDA
     3bc:	cf 01       	movw	r24, r30
     3be:	04 2e       	mov	r0, r20
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <receiveDS18b20+0x7e>
     3c2:	88 0f       	add	r24, r24
     3c4:	99 1f       	adc	r25, r25
     3c6:	0a 94       	dec	r0
     3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <receiveDS18b20+0x7a>
     3ca:	28 2b       	or	r18, r24
     3cc:	39 2b       	or	r19, r25
     3ce:	81 2f       	mov	r24, r17
     3d0:	8a 95       	dec	r24
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <receiveDS18b20+0x88>
     3d4:	4f 5f       	subi	r20, 0xFF	; 255
     3d6:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t res=0;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
     3d8:	40 31       	cpi	r20, 0x10	; 16
     3da:	51 05       	cpc	r21, r1
     3dc:	89 f6       	brne	.-94     	; 0x380 <receiveDS18b20+0x38>
		else 	res|=_BV(i);	    //IF 1 on SDA
				
		_delay_us(63);
	}
	return res;
}
     3de:	c9 01       	movw	r24, r18
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	08 95       	ret

000003e8 <processPacket>:
	txBuf[10]=crc8Block(txBuf,10);
}

//process received packet
void processPacket(void)
{
     3e8:	f8 94       	cli
	cli();
	//check CRC
	if (crc8Block(rxBuf,currentRXPacketLen-1)!=rxBuf[currentRXPacketLen-1])
     3ea:	40 91 69 01 	lds	r20, 0x0169
     3ee:	41 50       	subi	r20, 0x01	; 1
     3f0:	9f ef       	ldi	r25, 0xFF	; 255
     3f2:	ef e7       	ldi	r30, 0x7F	; 127
     3f4:	f1 e0       	ldi	r31, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     3f6:	24 2f       	mov	r18, r20
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	4f 5f       	subi	r20, 0xFF	; 255
     3fc:	2e 0f       	add	r18, r30
     3fe:	3f 1f       	adc	r19, r31
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     400:	51 e3       	ldi	r21, 0x31	; 49
     402:	0d c0       	rjmp	.+26     	; 0x41e <processPacket+0x36>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     404:	80 81       	ld	r24, Z
     406:	98 27       	eor	r25, r24
     408:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     40a:	97 ff       	sbrs	r25, 7
     40c:	03 c0       	rjmp	.+6      	; 0x414 <processPacket+0x2c>
     40e:	99 0f       	add	r25, r25
     410:	95 27       	eor	r25, r21
     412:	01 c0       	rjmp	.+2      	; 0x416 <processPacket+0x2e>
     414:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     416:	8f 5f       	subi	r24, 0xFF	; 255
     418:	88 30       	cpi	r24, 0x08	; 8
     41a:	b9 f7       	brne	.-18     	; 0x40a <processPacket+0x22>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     41c:	31 96       	adiw	r30, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     41e:	e2 17       	cp	r30, r18
     420:	f3 07       	cpc	r31, r19
     422:	81 f7       	brne	.-32     	; 0x404 <processPacket+0x1c>
//process received packet
void processPacket(void)
{
	cli();
	//check CRC
	if (crc8Block(rxBuf,currentRXPacketLen-1)!=rxBuf[currentRXPacketLen-1])
     424:	e4 2f       	mov	r30, r20
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	e2 58       	subi	r30, 0x82	; 130
     42a:	fe 4f       	sbci	r31, 0xFE	; 254
     42c:	80 81       	ld	r24, Z
     42e:	98 17       	cp	r25, r24
     430:	69 f0       	breq	.+26     	; 0x44c <processPacket+0x64>
	{
		packetReceived=0;
     432:	10 92 68 01 	sts	0x0168, r1
     436:	ef e7       	ldi	r30, 0x7F	; 127
     438:	f1 e0       	ldi	r31, 0x01	; 1
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     43a:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     43c:	41 e0       	ldi	r20, 0x01	; 1
     43e:	ea 38       	cpi	r30, 0x8A	; 138
     440:	f4 07       	cpc	r31, r20
     442:	d9 f7       	brne	.-10     	; 0x43a <processPacket+0x52>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     444:	10 92 69 01 	sts	0x0169, r1
	//check CRC
	if (crc8Block(rxBuf,currentRXPacketLen-1)!=rxBuf[currentRXPacketLen-1])
	{
		packetReceived=0;
		clearRXBuf();
		sei();
     448:	78 94       	sei
     44a:	08 95       	ret
		return;
	}
	//differentiate and process packet
	switch (rxBuf[0]) {
     44c:	80 91 7f 01 	lds	r24, 0x017F
     450:	89 36       	cpi	r24, 0x69	; 105
     452:	09 f4       	brne	.+2      	; 0x456 <processPacket+0x6e>
     454:	3e c0       	rjmp	.+124    	; 0x4d2 <__stack+0x73>
     456:	8a 36       	cpi	r24, 0x6A	; 106
     458:	20 f4       	brcc	.+8      	; 0x462 <__stack+0x3>
     45a:	87 36       	cpi	r24, 0x67	; 103
     45c:	09 f0       	breq	.+2      	; 0x460 <__stack+0x1>
     45e:	7e c0       	rjmp	.+252    	; 0x55c <__stack+0xfd>
     460:	07 c0       	rjmp	.+14     	; 0x470 <__stack+0x11>
     462:	80 37       	cpi	r24, 0x70	; 112
     464:	09 f4       	brne	.+2      	; 0x468 <__stack+0x9>
     466:	66 c0       	rjmp	.+204    	; 0x534 <__stack+0xd5>
     468:	83 37       	cpi	r24, 0x73	; 115
     46a:	09 f0       	breq	.+2      	; 0x46e <__stack+0xf>
     46c:	77 c0       	rjmp	.+238    	; 0x55c <__stack+0xfd>
     46e:	11 c0       	rjmp	.+34     	; 0x492 <__stack+0x33>
		//if get command
		case 'g' : 	{
			if (currentRXPacketLen==2)
     470:	42 30       	cpi	r20, 0x02	; 2
     472:	09 f0       	breq	.+2      	; 0x476 <__stack+0x17>
     474:	73 c0       	rjmp	.+230    	; 0x55c <__stack+0xfd>
			{
				prepareSystemStatus();
     476:	0e 94 07 01 	call	0x20e	; 0x20e <prepareSystemStatus>
     47a:	ed e6       	ldi	r30, 0x6D	; 109
     47c:	f1 e0       	ldi	r31, 0x01	; 1
//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
	uartTransmitByte(txBuf[i]);
     47e:	80 81       	ld	r24, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     480:	5d 9b       	sbis	0x0b, 5	; 11
     482:	fe cf       	rjmp	.-4      	; 0x480 <__stack+0x21>
	UDR = data;
     484:	8c b9       	out	0x0c, r24	; 12
     486:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	e8 37       	cpi	r30, 0x78	; 120
     48c:	f8 07       	cpc	r31, r24
     48e:	b9 f7       	brne	.-18     	; 0x47e <__stack+0x1f>
     490:	65 c0       	rjmp	.+202    	; 0x55c <__stack+0xfd>
			}			
			break;
		}
		//if set command
		case 's' : 	{
			if (currentRXPacketLen==4)
     492:	44 30       	cpi	r20, 0x04	; 4
     494:	09 f0       	breq	.+2      	; 0x498 <__stack+0x39>
     496:	62 c0       	rjmp	.+196    	; 0x55c <__stack+0xfd>
			{
				uint16_t val;

				val=(rxBuf[1]<<8)|(rxBuf[2]);
     498:	90 91 80 01 	lds	r25, 0x0180
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	20 91 81 01 	lds	r18, 0x0181
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	28 2b       	or	r18, r24
     4a6:	39 2b       	or	r19, r25
				if ((val<=1780)&&(val>=780)) setData[0]=val;
     4a8:	c9 01       	movw	r24, r18
     4aa:	8c 50       	subi	r24, 0x0C	; 12
     4ac:	93 40       	sbci	r25, 0x03	; 3
     4ae:	89 5e       	subi	r24, 0xE9	; 233
     4b0:	93 40       	sbci	r25, 0x03	; 3
     4b2:	20 f4       	brcc	.+8      	; 0x4bc <__stack+0x5d>
     4b4:	30 93 7a 01 	sts	0x017A, r19
     4b8:	20 93 79 01 	sts	0x0179, r18
/** \ingroup avr_eeprom
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
    __eewr_word (__p, __value, eeprom_write_byte);
     4bc:	60 91 79 01 	lds	r22, 0x0179
     4c0:	70 91 7a 01 	lds	r23, 0x017A
     4c4:	41 e5       	ldi	r20, 0x51	; 81
     4c6:	50 e0       	ldi	r21, 0x00	; 0
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__eewr_word>
     4d0:	45 c0       	rjmp	.+138    	; 0x55c <__stack+0xfd>
			
			break;
		}
		//if info command
		case 'i' :	{
			if (currentRXPacketLen==2)
     4d2:	42 30       	cpi	r20, 0x02	; 2
     4d4:	09 f0       	breq	.+2      	; 0x4d8 <__stack+0x79>
     4d6:	42 c0       	rjmp	.+132    	; 0x55c <__stack+0xfd>
			{
				txBuf[0]='v';
     4d8:	86 e7       	ldi	r24, 0x76	; 118
     4da:	80 93 6d 01 	sts	0x016D, r24
				txBuf[1]=HW_REVISION;
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	80 93 6e 01 	sts	0x016E, r24
				txBuf[2]=SW_REVISION;
     4e4:	80 93 6f 01 	sts	0x016F, r24
				txBuf[3]=SENSOR_COUNT;
     4e8:	40 93 70 01 	sts	0x0170, r20
				txBuf[4]=VALUE_COUNT;
     4ec:	80 93 71 01 	sts	0x0171, r24
     4f0:	9f ef       	ldi	r25, 0xFF	; 255
     4f2:	ed e6       	ldi	r30, 0x6D	; 109
     4f4:	f1 e0       	ldi	r31, 0x01	; 1
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     4f6:	21 e3       	ldi	r18, 0x31	; 49
     4f8:	0d c0       	rjmp	.+26     	; 0x514 <__stack+0xb5>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     4fa:	80 81       	ld	r24, Z
     4fc:	98 27       	eor	r25, r24
     4fe:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     500:	97 ff       	sbrs	r25, 7
     502:	03 c0       	rjmp	.+6      	; 0x50a <__stack+0xab>
     504:	99 0f       	add	r25, r25
     506:	92 27       	eor	r25, r18
     508:	01 c0       	rjmp	.+2      	; 0x50c <__stack+0xad>
     50a:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     50c:	8f 5f       	subi	r24, 0xFF	; 255
     50e:	88 30       	cpi	r24, 0x08	; 8
     510:	b9 f7       	brne	.-18     	; 0x500 <__stack+0xa1>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     512:	31 96       	adiw	r30, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	e2 37       	cpi	r30, 0x72	; 114
     518:	f8 07       	cpc	r31, r24
     51a:	79 f7       	brne	.-34     	; 0x4fa <__stack+0x9b>
				txBuf[0]='v';
				txBuf[1]=HW_REVISION;
				txBuf[2]=SW_REVISION;
				txBuf[3]=SENSOR_COUNT;
				txBuf[4]=VALUE_COUNT;
				txBuf[5]=crc8Block(txBuf,5);
     51c:	90 83       	st	Z, r25
     51e:	35 97       	sbiw	r30, 0x05	; 5
//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
	uartTransmitByte(txBuf[i]);
     520:	80 81       	ld	r24, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     522:	5d 9b       	sbis	0x0b, 5	; 11
     524:	fe cf       	rjmp	.-4      	; 0x522 <__stack+0xc3>
	UDR = data;
     526:	8c b9       	out	0x0c, r24	; 12
     528:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     52a:	41 e0       	ldi	r20, 0x01	; 1
     52c:	e3 37       	cpi	r30, 0x73	; 115
     52e:	f4 07       	cpc	r31, r20
     530:	b9 f7       	brne	.-18     	; 0x520 <__stack+0xc1>
     532:	14 c0       	rjmp	.+40     	; 0x55c <__stack+0xfd>

			break;
		}
		//if powern ON/OFF PWM
		case 'p' : 	{
		if (currentRXPacketLen==3)
     534:	43 30       	cpi	r20, 0x03	; 3
     536:	91 f4       	brne	.+36     	; 0x55c <__stack+0xfd>
		{
			if ((rxBuf[1]==COOLER_OFF)||(rxBuf[1]==COOLER_ON))
     538:	20 91 80 01 	lds	r18, 0x0180
     53c:	22 30       	cpi	r18, 0x02	; 2
     53e:	70 f4       	brcc	.+28     	; 0x55c <__stack+0xfd>
			{
				coolerState=rxBuf[1];
     540:	20 93 8b 01 	sts	0x018B, r18
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     544:	e1 99       	sbic	0x1c, 1	; 28
     546:	fe cf       	rjmp	.-4      	; 0x544 <__stack+0xe5>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     548:	82 e0       	ldi	r24, 0x02	; 2
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	9f bb       	out	0x1f, r25	; 31
     54e:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
     550:	2d bb       	out	0x1d, r18	; 29

    __asm__ __volatile__ (
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	f8 94       	cli
     556:	e2 9a       	sbi	0x1c, 2	; 28
     558:	e1 9a       	sbi	0x1c, 1	; 28
     55a:	0f be       	out	0x3f, r0	; 63
		default:
		{
			;
		}
	}
	packetReceived=0;
     55c:	10 92 68 01 	sts	0x0168, r1
     560:	ef e7       	ldi	r30, 0x7F	; 127
     562:	f1 e0       	ldi	r31, 0x01	; 1
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     564:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	ea 38       	cpi	r30, 0x8A	; 138
     56a:	f8 07       	cpc	r31, r24
     56c:	d9 f7       	brne	.-10     	; 0x564 <__stack+0x105>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     56e:	10 92 69 01 	sts	0x0169, r1
			;
		}
	}
	packetReceived=0;
	clearRXBuf();
	sei();
     572:	78 94       	sei
     574:	08 95       	ret

00000576 <main>:
	return res;
}

//------------------------------------------------------------------------------------
int main(void)
{
     576:	2f 92       	push	r2
     578:	3f 92       	push	r3
     57a:	4f 92       	push	r4
     57c:	5f 92       	push	r5
     57e:	6f 92       	push	r6
     580:	7f 92       	push	r7
     582:	8f 92       	push	r8
     584:	9f 92       	push	r9
     586:	af 92       	push	r10
     588:	bf 92       	push	r11
     58a:	cf 92       	push	r12
     58c:	df 92       	push	r13
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    return __eerd_word (__p, eeprom_read_byte);
     59a:	69 e4       	ldi	r22, 0x49	; 73
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__eerd_word>
     5a6:	9c 01       	movw	r18, r24
	uint8_t i, sign;
	uint16_t val, fract;	
	//read from EEPROM saved value & coolerState state
#ifdef STANDALONE_MODE
		setData[0]= eeprom_read_word (&savedSetData);
     5a8:	90 93 7a 01 	sts	0x017A, r25
     5ac:	80 93 79 01 	sts	0x0179, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     5b0:	e1 99       	sbic	0x1c, 1	; 28
     5b2:	fe cf       	rjmp	.-4      	; 0x5b0 <main+0x3a>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     5b4:	82 e0       	ldi	r24, 0x02	; 2
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	9f bb       	out	0x1f, r25	; 31
     5ba:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     5bc:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     5be:	4d b3       	in	r20, 0x1d	; 29
		coolerState = eeprom_read_byte(&savedCoolerState);
     5c0:	40 93 8b 01 	sts	0x018B, r20
		//if saved settings corrupted - set it by default
		if ( (setData[0]<780)||(setData[0]>1780) ) setData[0]=1730;
     5c4:	2c 50       	subi	r18, 0x0C	; 12
     5c6:	33 40       	sbci	r19, 0x03	; 3
     5c8:	29 5e       	subi	r18, 0xE9	; 233
     5ca:	33 40       	sbci	r19, 0x03	; 3
     5cc:	30 f0       	brcs	.+12     	; 0x5da <main+0x64>
     5ce:	82 ec       	ldi	r24, 0xC2	; 194
     5d0:	96 e0       	ldi	r25, 0x06	; 6
     5d2:	90 93 7a 01 	sts	0x017A, r25
     5d6:	80 93 79 01 	sts	0x0179, r24
		if ( (coolerState!=COOLER_ON)&&(coolerState!=COOLER_OFF) ) coolerState=COOLER_OFF;
     5da:	42 30       	cpi	r20, 0x02	; 2
     5dc:	10 f0       	brcs	.+4      	; 0x5e2 <main+0x6c>
     5de:	10 92 8b 01 	sts	0x018B, r1
		setData[0]=1730;
		coolerState=COOLER_OFF;
#endif
	//init variables
	for (i=0;i<SENSOR_COUNT;i++)
		sensorData[i]=0;
     5e2:	10 92 7c 01 	sts	0x017C, r1
     5e6:	10 92 7b 01 	sts	0x017B, r1
     5ea:	10 92 7e 01 	sts	0x017E, r1
     5ee:	10 92 7d 01 	sts	0x017D, r1
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=txBuf[i]=0;
     5f6:	fc 01       	movw	r30, r24
     5f8:	e3 59       	subi	r30, 0x93	; 147
     5fa:	fe 4f       	sbci	r31, 0xFE	; 254
     5fc:	10 82       	st	Z, r1
     5fe:	fc 01       	movw	r30, r24
     600:	e1 58       	subi	r30, 0x81	; 129
     602:	fe 4f       	sbci	r31, 0xFE	; 254
     604:	10 82       	st	Z, r1
     606:	01 96       	adiw	r24, 0x01	; 1
}

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     608:	8b 30       	cpi	r24, 0x0B	; 11
     60a:	91 05       	cpc	r25, r1
     60c:	a1 f7       	brne	.-24     	; 0x5f6 <main+0x80>
#endif
	//init variables
	for (i=0;i<SENSOR_COUNT;i++)
		sensorData[i]=0;
	clearBuf ();
	U=0.0;
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	a0 e0       	ldi	r26, 0x00	; 0
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	80 93 90 01 	sts	0x0190, r24
     61a:	90 93 91 01 	sts	0x0191, r25
     61e:	a0 93 92 01 	sts	0x0192, r26
     622:	b0 93 93 01 	sts	0x0193, r27
	E=0;
     626:	80 93 8c 01 	sts	0x018C, r24
     62a:	90 93 8d 01 	sts	0x018D, r25
     62e:	a0 93 8e 01 	sts	0x018E, r26
     632:	b0 93 8f 01 	sts	0x018F, r27
	//Init ports, UART, PWM
	SENSOR_PORT&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));     	
     636:	85 b3       	in	r24, 0x15	; 21
     638:	83 7f       	andi	r24, 0xF3	; 243
     63a:	85 bb       	out	0x15, r24	; 21
	SENSOR_DDR&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));		
     63c:	84 b3       	in	r24, 0x14	; 20
     63e:	83 7f       	andi	r24, 0xF3	; 243
     640:	84 bb       	out	0x14, r24	; 20
 
	TEC_PORT&=~(1<<TEC_PIN);
     642:	95 98       	cbi	0x12, 5	; 18
	TEC_DDR|=(1<<TEC_PIN);
     644:	8d 9a       	sbi	0x11, 5	; 17
//------------------------------------------------------------------------------------
//UART

void uartInit(void)
{
	UBRRH = (BAUD_PRESCALE >> 8);		// Init UART baudrate
     646:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;
     648:	83 e3       	ldi	r24, 0x33	; 51
     64a:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1<<RXEN)|(1<<TXEN)|(1 << RXCIE);	// TX, RX enable, RX interrupt enable
     64c:	88 e9       	ldi	r24, 0x98	; 152
     64e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
     650:	86 e8       	ldi	r24, 0x86	; 134
     652:	80 bd       	out	0x20, r24	; 32
     654:	10 e0       	ldi	r17, 0x00	; 0
	uartInit();

    //set 12 bit resolution
	for (i=0;i<SENSOR_COUNT;i++)
	{
		if (presentDS18b20(i)==1)
     656:	81 2f       	mov	r24, r17
     658:	0e 94 46 01 	call	0x28c	; 0x28c <presentDS18b20>
     65c:	81 30       	cpi	r24, 0x01	; 1
     65e:	a9 f4       	brne	.+42     	; 0x68a <main+0x114>
		{
			sendDS18b20(SKIP_ROM,i);
     660:	61 2f       	mov	r22, r17
     662:	8c ec       	ldi	r24, 0xCC	; 204
     664:	0e 94 70 01 	call	0x2e0	; 0x2e0 <sendDS18b20>
			// write on scratchPad
			sendDS18b20(0x4E,i);
     668:	61 2f       	mov	r22, r17
     66a:	8e e4       	ldi	r24, 0x4E	; 78
     66c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <sendDS18b20>
			// User byte 0 - Unused
			sendDS18b20(0x00,i);
     670:	61 2f       	mov	r22, r17
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	0e 94 70 01 	call	0x2e0	; 0x2e0 <sendDS18b20>
			// User byte 1 - Unused
			sendDS18b20(0x00,i);
     678:	61 2f       	mov	r22, r17
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <sendDS18b20>
			// set up en 12 bits (0x7F)
			sendDS18b20(0x7F,i);
     680:	61 2f       	mov	r22, r17
     682:	8f e7       	ldi	r24, 0x7F	; 127
     684:	0e 94 70 01 	call	0x2e0	; 0x2e0 <sendDS18b20>
     688:	07 c0       	rjmp	.+14     	; 0x698 <main+0x122>
		}
		else
		{
		    if (i==0) initializationErrorCode|=(1<<i);
     68a:	11 23       	and	r17, r17
     68c:	29 f4       	brne	.+10     	; 0x698 <main+0x122>
     68e:	80 91 6b 01 	lds	r24, 0x016B
     692:	81 60       	ori	r24, 0x01	; 1
     694:	80 93 6b 01 	sts	0x016B, r24
	TEC_PORT&=~(1<<TEC_PIN);
	TEC_DDR|=(1<<TEC_PIN);
	uartInit();

    //set 12 bit resolution
	for (i=0;i<SENSOR_COUNT;i++)
     698:	1f 5f       	subi	r17, 0xFF	; 255
     69a:	12 30       	cpi	r17, 0x02	; 2
     69c:	e1 f6       	brne	.-72     	; 0x656 <main+0xe0>
		else
		{
		    if (i==0) initializationErrorCode|=(1<<i);
		}
	}
	sei();
     69e:	78 94       	sei
		}

        if (coolerState==COOLER_OFF) 
		{
		    coolerPower=0x00;
			U=0.0;
     6a0:	0f 2e       	mov	r0, r31
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	2f 2e       	mov	r2, r31
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	3f 2e       	mov	r3, r31
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	4f 2e       	mov	r4, r31
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	5f 2e       	mov	r5, r31
     6b2:	f0 2d       	mov	r31, r0
     6b4:	b1 c1       	rjmp	.+866    	; 0xa18 <main+0x4a2>
	}
	sei();

	while (initializationErrorCode==0)
	{
		errorCode=0;
     6b6:	10 92 6a 01 	sts	0x016A, r1
		//process packet
		if (packetReceived!=0)
     6ba:	80 91 68 01 	lds	r24, 0x0168
     6be:	88 23       	and	r24, r24
     6c0:	11 f0       	breq	.+4      	; 0x6c6 <main+0x150>
		{
		    processPacket();
     6c2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <processPacket>
     6c6:	10 e0       	ldi	r17, 0x00	; 0
	    }
		//start measurement
		for (i=0;i<SENSOR_COUNT;i++)
		{
			if (presentDS18b20(i)==1)
     6c8:	81 2f       	mov	r24, r17
     6ca:	0e 94 46 01 	call	0x28c	; 0x28c <presentDS18b20>
     6ce:	81 30       	cpi	r24, 0x01	; 1
     6d0:	49 f4       	brne	.+18     	; 0x6e4 <main+0x16e>
			{
				sendDS18b20(SKIP_ROM,i);
     6d2:	61 2f       	mov	r22, r17
     6d4:	8c ec       	ldi	r24, 0xCC	; 204
     6d6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <sendDS18b20>
				sendDS18b20(START_CONVERSION,i);
     6da:	61 2f       	mov	r22, r17
     6dc:	84 e4       	ldi	r24, 0x44	; 68
     6de:	0e 94 70 01 	call	0x2e0	; 0x2e0 <sendDS18b20>
     6e2:	07 c0       	rjmp	.+14     	; 0x6f2 <main+0x17c>
			}
			else
			{
			    if (i==0) errorCode|=(1<<i);
     6e4:	11 23       	and	r17, r17
     6e6:	29 f4       	brne	.+10     	; 0x6f2 <main+0x17c>
     6e8:	80 91 6a 01 	lds	r24, 0x016A
     6ec:	81 60       	ori	r24, 0x01	; 1
     6ee:	80 93 6a 01 	sts	0x016A, r24
		if (packetReceived!=0)
		{
		    processPacket();
	    }
		//start measurement
		for (i=0;i<SENSOR_COUNT;i++)
     6f2:	1f 5f       	subi	r17, 0xFF	; 255
     6f4:	12 30       	cpi	r17, 0x02	; 2
     6f6:	41 f7       	brne	.-48     	; 0x6c8 <main+0x152>
			{
			    if (i==0) errorCode|=(1<<i);
			}
		}

        if (coolerState==COOLER_OFF) 
     6f8:	90 91 8b 01 	lds	r25, 0x018B
     6fc:	99 23       	and	r25, r25
     6fe:	99 f4       	brne	.+38     	; 0x726 <main+0x1b0>
		{
		    coolerPower=0x00;
     700:	10 92 6c 01 	sts	0x016C, r1
			U=0.0;
     704:	20 92 90 01 	sts	0x0190, r2
     708:	30 92 91 01 	sts	0x0191, r3
     70c:	40 92 92 01 	sts	0x0192, r4
     710:	50 92 93 01 	sts	0x0193, r5
			E=0.0;
     714:	20 92 8c 01 	sts	0x018C, r2
     718:	30 92 8d 01 	sts	0x018D, r3
     71c:	40 92 8e 01 	sts	0x018E, r4
     720:	50 92 8f 01 	sts	0x018F, r5
			TEC_PORT&=~(1<<TEC_PIN);
     724:	95 98       	cbi	0x12, 5	; 18
		}
		
		//P algo, do to put temperature reading to algo if error occured
		if ( (errorCode == 0) && (coolerState == COOLER_ON) )
     726:	80 91 6a 01 	lds	r24, 0x016A
     72a:	88 23       	and	r24, r24
     72c:	09 f0       	breq	.+2      	; 0x730 <main+0x1ba>
     72e:	10 c1       	rjmp	.+544    	; 0x950 <main+0x3da>
     730:	91 30       	cpi	r25, 0x01	; 1
     732:	09 f0       	breq	.+2      	; 0x736 <main+0x1c0>
     734:	0d c1       	rjmp	.+538    	; 0x950 <main+0x3da>
		{
		    E=(double) sensorData[0]-setData[0];
     736:	60 91 7b 01 	lds	r22, 0x017B
     73a:	70 91 7c 01 	lds	r23, 0x017C
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__floatunsisf>
     746:	7b 01       	movw	r14, r22
     748:	8c 01       	movw	r16, r24
     74a:	60 91 79 01 	lds	r22, 0x0179
     74e:	70 91 7a 01 	lds	r23, 0x017A
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__floatunsisf>
     75a:	9b 01       	movw	r18, r22
     75c:	ac 01       	movw	r20, r24
     75e:	c8 01       	movw	r24, r16
     760:	b7 01       	movw	r22, r14
     762:	0e 94 8a 06 	call	0xd14	; 0xd14 <__subsf3>
     766:	60 93 8c 01 	sts	0x018C, r22
     76a:	70 93 8d 01 	sts	0x018D, r23
     76e:	80 93 8e 01 	sts	0x018E, r24
     772:	90 93 8f 01 	sts	0x018F, r25
			U=U+KP*E;
     776:	2a e0       	ldi	r18, 0x0A	; 10
     778:	37 ed       	ldi	r19, 0xD7	; 215
     77a:	43 e2       	ldi	r20, 0x23	; 35
     77c:	5d e3       	ldi	r21, 0x3D	; 61
     77e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__mulsf3>
     782:	20 91 90 01 	lds	r18, 0x0190
     786:	30 91 91 01 	lds	r19, 0x0191
     78a:	40 91 92 01 	lds	r20, 0x0192
     78e:	50 91 93 01 	lds	r21, 0x0193
     792:	0e 94 bb 06 	call	0xd76	; 0xd76 <__addsf3>
     796:	60 93 90 01 	sts	0x0190, r22
     79a:	70 93 91 01 	sts	0x0191, r23
     79e:	80 93 92 01 	sts	0x0192, r24
     7a2:	90 93 93 01 	sts	0x0193, r25
			if (U>CYCLE) 	U=CYCLE;
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	4f e7       	ldi	r20, 0x7F	; 127
     7ac:	54 e4       	ldi	r21, 0x44	; 68
     7ae:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__gtsf2>
     7b2:	18 16       	cp	r1, r24
     7b4:	64 f4       	brge	.+24     	; 0x7ce <main+0x258>
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	af e7       	ldi	r26, 0x7F	; 127
     7bc:	b4 e4       	ldi	r27, 0x44	; 68
     7be:	80 93 90 01 	sts	0x0190, r24
     7c2:	90 93 91 01 	sts	0x0191, r25
     7c6:	a0 93 92 01 	sts	0x0192, r26
     7ca:	b0 93 93 01 	sts	0x0193, r27
			if (U<=0.0) 	U=0.0;		
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	60 91 90 01 	lds	r22, 0x0190
     7da:	70 91 91 01 	lds	r23, 0x0191
     7de:	80 91 92 01 	lds	r24, 0x0192
     7e2:	90 91 93 01 	lds	r25, 0x0193
     7e6:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__lesf2>
     7ea:	18 16       	cp	r1, r24
     7ec:	44 f0       	brlt	.+16     	; 0x7fe <main+0x288>
     7ee:	20 92 90 01 	sts	0x0190, r2
     7f2:	30 92 91 01 	sts	0x0191, r3
     7f6:	40 92 92 01 	sts	0x0192, r4
     7fa:	50 92 93 01 	sts	0x0193, r5
			if (U>0.0) TEC_PORT|=(1<<TEC_PIN);	
     7fe:	60 90 90 01 	lds	r6, 0x0190
     802:	70 90 91 01 	lds	r7, 0x0191
     806:	80 90 92 01 	lds	r8, 0x0192
     80a:	90 90 93 01 	lds	r9, 0x0193
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	c4 01       	movw	r24, r8
     818:	b3 01       	movw	r22, r6
     81a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__gtsf2>
     81e:	18 16       	cp	r1, r24
     820:	0c f4       	brge	.+2      	; 0x824 <main+0x2ae>
     822:	95 9a       	sbi	0x12, 5	; 18
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	4a ef       	ldi	r20, 0xFA	; 250
     82a:	54 e4       	ldi	r21, 0x44	; 68
     82c:	c4 01       	movw	r24, r8
     82e:	b3 01       	movw	r22, r6
     830:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__mulsf3>
     834:	7b 01       	movw	r14, r22
     836:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	40 e8       	ldi	r20, 0x80	; 128
     83e:	5f e3       	ldi	r21, 0x3F	; 63
     840:	0e 94 42 08 	call	0x1084	; 0x1084 <__ltsf2>
     844:	88 23       	and	r24, r24
     846:	1c f4       	brge	.+6      	; 0x84e <main+0x2d8>
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	23 c0       	rjmp	.+70     	; 0x894 <main+0x31e>
		__ticks = 1;
	else if (__tmp > 65535)
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	3f ef       	ldi	r19, 0xFF	; 255
     852:	4f e7       	ldi	r20, 0x7F	; 127
     854:	57 e4       	ldi	r21, 0x47	; 71
     856:	c8 01       	movw	r24, r16
     858:	b7 01       	movw	r22, r14
     85a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__gtsf2>
     85e:	18 16       	cp	r1, r24
     860:	ac f4       	brge	.+42     	; 0x88c <main+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	40 e2       	ldi	r20, 0x20	; 32
     868:	51 e4       	ldi	r21, 0x41	; 65
     86a:	c4 01       	movw	r24, r8
     86c:	b3 01       	movw	r22, r6
     86e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__mulsf3>
     872:	0e 94 12 05 	call	0xa24	; 0xa24 <__fixunssfsi>
     876:	06 c0       	rjmp	.+12     	; 0x884 <main+0x30e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     878:	88 ec       	ldi	r24, 0xC8	; 200
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	f1 f7       	brne	.-4      	; 0x87c <main+0x306>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     880:	61 50       	subi	r22, 0x01	; 1
     882:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     884:	61 15       	cp	r22, r1
     886:	71 05       	cpc	r23, r1
     888:	b9 f7       	brne	.-18     	; 0x878 <main+0x302>
     88a:	07 c0       	rjmp	.+14     	; 0x89a <main+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     88c:	c8 01       	movw	r24, r16
     88e:	b7 01       	movw	r22, r14
     890:	0e 94 12 05 	call	0xa24	; 0xa24 <__fixunssfsi>
     894:	cb 01       	movw	r24, r22
     896:	01 97       	sbiw	r24, 0x01	; 1
     898:	f1 f7       	brne	.-4      	; 0x896 <main+0x320>
			_delay_ms(U);								
			if (((uint16_t) U)!=CYCLE)TEC_PORT&=~(1<<TEC_PIN);
     89a:	c4 01       	movw	r24, r8
     89c:	b3 01       	movw	r22, r6
     89e:	0e 94 12 05 	call	0xa24	; 0xa24 <__fixunssfsi>
     8a2:	6c 5f       	subi	r22, 0xFC	; 252
     8a4:	73 40       	sbci	r23, 0x03	; 3
     8a6:	09 f0       	breq	.+2      	; 0x8aa <main+0x334>
     8a8:	95 98       	cbi	0x12, 5	; 18
			_delay_ms(CYCLE-U);
     8aa:	a4 01       	movw	r20, r8
     8ac:	93 01       	movw	r18, r6
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	8f e7       	ldi	r24, 0x7F	; 127
     8b4:	94 e4       	ldi	r25, 0x44	; 68
     8b6:	0e 94 8a 06 	call	0xd14	; 0xd14 <__subsf3>
     8ba:	5b 01       	movw	r10, r22
     8bc:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	4a ef       	ldi	r20, 0xFA	; 250
     8c4:	54 e4       	ldi	r21, 0x44	; 68
     8c6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__mulsf3>
     8ca:	7b 01       	movw	r14, r22
     8cc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	40 e8       	ldi	r20, 0x80	; 128
     8d4:	5f e3       	ldi	r21, 0x3F	; 63
     8d6:	0e 94 42 08 	call	0x1084	; 0x1084 <__ltsf2>
     8da:	88 23       	and	r24, r24
     8dc:	1c f4       	brge	.+6      	; 0x8e4 <main+0x36e>
     8de:	61 e0       	ldi	r22, 0x01	; 1
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	23 c0       	rjmp	.+70     	; 0x92a <main+0x3b4>
		__ticks = 1;
	else if (__tmp > 65535)
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	3f ef       	ldi	r19, 0xFF	; 255
     8e8:	4f e7       	ldi	r20, 0x7F	; 127
     8ea:	57 e4       	ldi	r21, 0x47	; 71
     8ec:	c8 01       	movw	r24, r16
     8ee:	b7 01       	movw	r22, r14
     8f0:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__gtsf2>
     8f4:	18 16       	cp	r1, r24
     8f6:	ac f4       	brge	.+42     	; 0x922 <main+0x3ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	40 e2       	ldi	r20, 0x20	; 32
     8fe:	51 e4       	ldi	r21, 0x41	; 65
     900:	c6 01       	movw	r24, r12
     902:	b5 01       	movw	r22, r10
     904:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__mulsf3>
     908:	0e 94 12 05 	call	0xa24	; 0xa24 <__fixunssfsi>
     90c:	06 c0       	rjmp	.+12     	; 0x91a <main+0x3a4>
     90e:	88 ec       	ldi	r24, 0xC8	; 200
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	f1 f7       	brne	.-4      	; 0x912 <main+0x39c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     916:	61 50       	subi	r22, 0x01	; 1
     918:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     91a:	61 15       	cp	r22, r1
     91c:	71 05       	cpc	r23, r1
     91e:	b9 f7       	brne	.-18     	; 0x90e <main+0x398>
     920:	07 c0       	rjmp	.+14     	; 0x930 <main+0x3ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     922:	c8 01       	movw	r24, r16
     924:	b7 01       	movw	r22, r14
     926:	0e 94 12 05 	call	0xa24	; 0xa24 <__fixunssfsi>
     92a:	cb 01       	movw	r24, r22
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	f1 f7       	brne	.-4      	; 0x92c <main+0x3b6>
			
			coolerPower=((uint8_t)(U/4));
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e8       	ldi	r20, 0x80	; 128
     936:	5e e3       	ldi	r21, 0x3E	; 62
     938:	c4 01       	movw	r24, r8
     93a:	b3 01       	movw	r22, r6
     93c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__mulsf3>
     940:	0e 94 12 05 	call	0xa24	; 0xa24 <__fixunssfsi>
     944:	60 93 6c 01 	sts	0x016C, r22
     948:	cb e7       	ldi	r28, 0x7B	; 123
     94a:	d1 e0       	ldi	r29, 0x01	; 1
     94c:	10 e0       	ldi	r17, 0x00	; 0
     94e:	09 c0       	rjmp	.+18     	; 0x962 <main+0x3ec>
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	98 e2       	ldi	r25, 0x28	; 40
     954:	e8 ec       	ldi	r30, 0xC8	; 200
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	31 97       	sbiw	r30, 0x01	; 1
     95a:	f1 f7       	brne	.-4      	; 0x958 <main+0x3e2>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     95c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     95e:	d1 f7       	brne	.-12     	; 0x954 <main+0x3de>
     960:	f3 cf       	rjmp	.-26     	; 0x948 <main+0x3d2>
		}

		//receive measured data from sensors
		for (i=0;i<SENSOR_COUNT;i++)
		{
		    if (presentDS18b20(i)==1)
     962:	81 2f       	mov	r24, r17
     964:	0e 94 46 01 	call	0x28c	; 0x28c <presentDS18b20>
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	09 f0       	breq	.+2      	; 0x96e <main+0x3f8>
     96c:	49 c0       	rjmp	.+146    	; 0xa00 <main+0x48a>
			{
				sendDS18b20(SKIP_ROM,i);
     96e:	61 2f       	mov	r22, r17
     970:	8c ec       	ldi	r24, 0xCC	; 204
     972:	0e 94 70 01 	call	0x2e0	; 0x2e0 <sendDS18b20>
				sendDS18b20(GET_DATA,i);
     976:	61 2f       	mov	r22, r17
     978:	8e eb       	ldi	r24, 0xBE	; 190
     97a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <sendDS18b20>
				val=receiveDS18b20(i);
     97e:	81 2f       	mov	r24, r17
     980:	0e 94 a4 01 	call	0x348	; 0x348 <receiveDS18b20>
				if ((val&0x8000)!=0x00)
     984:	97 fd       	sbrc	r25, 7
     986:	02 c0       	rjmp	.+4      	; 0x98c <main+0x416>
     988:	e0 e0       	ldi	r30, 0x00	; 0
     98a:	04 c0       	rjmp	.+8      	; 0x994 <main+0x41e>
				{
				    sign=1;
					val=0xffff-val+1;
     98c:	90 95       	com	r25
     98e:	81 95       	neg	r24
     990:	9f 4f       	sbci	r25, 0xFF	; 255
     992:	e1 e0       	ldi	r30, 0x01	; 1
				}
				else sign=0;
				fract=0;
				if ((val&0x01)!=0x00) fract=fract+65;
     994:	80 fd       	sbrc	r24, 0
     996:	03 c0       	rjmp	.+6      	; 0x99e <main+0x428>
     998:	40 e0       	ldi	r20, 0x00	; 0
     99a:	50 e0       	ldi	r21, 0x00	; 0
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <main+0x42c>
     99e:	41 e4       	ldi	r20, 0x41	; 65
     9a0:	50 e0       	ldi	r21, 0x00	; 0
				if ((val&0x02)!=0x00) fract=fract+125;
     9a2:	81 ff       	sbrs	r24, 1
     9a4:	02 c0       	rjmp	.+4      	; 0x9aa <main+0x434>
     9a6:	43 58       	subi	r20, 0x83	; 131
     9a8:	5f 4f       	sbci	r21, 0xFF	; 255
				if ((val&0x04)!=0x00) fract=fract+250;
     9aa:	82 ff       	sbrs	r24, 2
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <main+0x43c>
     9ae:	46 50       	subi	r20, 0x06	; 6
     9b0:	5f 4f       	sbci	r21, 0xFF	; 255
				if ((val&0x08)!=0x00) fract=fract+500;
     9b2:	83 ff       	sbrs	r24, 3
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <main+0x444>
     9b6:	4c 50       	subi	r20, 0x0C	; 12
     9b8:	5e 4f       	sbci	r21, 0xFE	; 254
				val=(val>>4)*10+fract/100;
     9ba:	f4 e0       	ldi	r31, 0x04	; 4
     9bc:	96 95       	lsr	r25
     9be:	87 95       	ror	r24
     9c0:	fa 95       	dec	r31
     9c2:	e1 f7       	brne	.-8      	; 0x9bc <main+0x446>
     9c4:	9c 01       	movw	r18, r24
     9c6:	73 e0       	ldi	r23, 0x03	; 3
     9c8:	22 0f       	add	r18, r18
     9ca:	33 1f       	adc	r19, r19
     9cc:	7a 95       	dec	r23
     9ce:	e1 f7       	brne	.-8      	; 0x9c8 <main+0x452>
     9d0:	88 0f       	add	r24, r24
     9d2:	99 1f       	adc	r25, r25
     9d4:	28 0f       	add	r18, r24
     9d6:	39 1f       	adc	r19, r25
     9d8:	ca 01       	movw	r24, r20
     9da:	64 e6       	ldi	r22, 0x64	; 100
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	0e 94 8f 0b 	call	0x171e	; 0x171e <__udivmodhi4>
     9e2:	62 0f       	add	r22, r18
     9e4:	73 1f       	adc	r23, r19
				if (sign==1) val=OFFSET-val;
     9e6:	e1 30       	cpi	r30, 0x01	; 1
     9e8:	31 f4       	brne	.+12     	; 0x9f6 <main+0x480>
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	95 e0       	ldi	r25, 0x05	; 5
     9ee:	86 1b       	sub	r24, r22
     9f0:	97 0b       	sbc	r25, r23
     9f2:	bc 01       	movw	r22, r24
     9f4:	02 c0       	rjmp	.+4      	; 0x9fa <main+0x484>
				else val=val+OFFSET;
     9f6:	60 50       	subi	r22, 0x00	; 0
     9f8:	7b 4f       	sbci	r23, 0xFB	; 251
				sensorData[i]=val;
     9fa:	79 83       	std	Y+1, r23	; 0x01
     9fc:	68 83       	st	Y, r22
     9fe:	07 c0       	rjmp	.+14     	; 0xa0e <main+0x498>
			}
			else
			{
			    if (i==0) errorCode|=(1<<i);
     a00:	11 23       	and	r17, r17
     a02:	29 f4       	brne	.+10     	; 0xa0e <main+0x498>
     a04:	80 91 6a 01 	lds	r24, 0x016A
     a08:	81 60       	ori	r24, 0x01	; 1
     a0a:	80 93 6a 01 	sts	0x016A, r24
		{
			_delay_ms(1024);
		}

		//receive measured data from sensors
		for (i=0;i<SENSOR_COUNT;i++)
     a0e:	1f 5f       	subi	r17, 0xFF	; 255
     a10:	22 96       	adiw	r28, 0x02	; 2
     a12:	12 30       	cpi	r17, 0x02	; 2
     a14:	09 f0       	breq	.+2      	; 0xa18 <main+0x4a2>
     a16:	a5 cf       	rjmp	.-182    	; 0x962 <main+0x3ec>
		    if (i==0) initializationErrorCode|=(1<<i);
		}
	}
	sei();

	while (initializationErrorCode==0)
     a18:	80 91 6b 01 	lds	r24, 0x016B
     a1c:	88 23       	and	r24, r24
     a1e:	09 f4       	brne	.+2      	; 0xa22 <main+0x4ac>
     a20:	4a ce       	rjmp	.-876    	; 0x6b6 <main+0x140>
     a22:	ff cf       	rjmp	.-2      	; 0xa22 <main+0x4ac>

00000a24 <__fixunssfsi>:
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	7b 01       	movw	r14, r22
     a2e:	8c 01       	movw	r16, r24
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	40 e0       	ldi	r20, 0x00	; 0
     a36:	5f e4       	ldi	r21, 0x4F	; 79
     a38:	0e 94 12 08 	call	0x1024	; 0x1024 <__gesf2>
     a3c:	88 23       	and	r24, r24
     a3e:	8c f0       	brlt	.+34     	; 0xa62 <__fixunssfsi+0x3e>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 e0       	ldi	r20, 0x00	; 0
     a46:	5f e4       	ldi	r21, 0x4F	; 79
     a48:	c8 01       	movw	r24, r16
     a4a:	b7 01       	movw	r22, r14
     a4c:	0e 94 8a 06 	call	0xd14	; 0xd14 <__subsf3>
     a50:	0e 94 a2 08 	call	0x1144	; 0x1144 <__fixsfsi>
     a54:	9b 01       	movw	r18, r22
     a56:	ac 01       	movw	r20, r24
     a58:	20 50       	subi	r18, 0x00	; 0
     a5a:	30 40       	sbci	r19, 0x00	; 0
     a5c:	40 40       	sbci	r20, 0x00	; 0
     a5e:	50 48       	sbci	r21, 0x80	; 128
     a60:	06 c0       	rjmp	.+12     	; 0xa6e <__fixunssfsi+0x4a>
     a62:	c8 01       	movw	r24, r16
     a64:	b7 01       	movw	r22, r14
     a66:	0e 94 a2 08 	call	0x1144	; 0x1144 <__fixsfsi>
     a6a:	9b 01       	movw	r18, r22
     a6c:	ac 01       	movw	r20, r24
     a6e:	b9 01       	movw	r22, r18
     a70:	ca 01       	movw	r24, r20
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	ff 90       	pop	r15
     a78:	ef 90       	pop	r14
     a7a:	08 95       	ret

00000a7c <_fpadd_parts>:
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	e4 e4       	ldi	r30, 0x44	; 68
     a82:	f5 e0       	ldi	r31, 0x05	; 5
     a84:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <__prologue_saves__>
     a88:	dc 01       	movw	r26, r24
     a8a:	2b 01       	movw	r4, r22
     a8c:	fa 01       	movw	r30, r20
     a8e:	9c 91       	ld	r25, X
     a90:	92 30       	cpi	r25, 0x02	; 2
     a92:	08 f4       	brcc	.+2      	; 0xa96 <_fpadd_parts+0x1a>
     a94:	39 c1       	rjmp	.+626    	; 0xd08 <_fpadd_parts+0x28c>
     a96:	eb 01       	movw	r28, r22
     a98:	88 81       	ld	r24, Y
     a9a:	82 30       	cpi	r24, 0x02	; 2
     a9c:	08 f4       	brcc	.+2      	; 0xaa0 <_fpadd_parts+0x24>
     a9e:	33 c1       	rjmp	.+614    	; 0xd06 <_fpadd_parts+0x28a>
     aa0:	94 30       	cpi	r25, 0x04	; 4
     aa2:	69 f4       	brne	.+26     	; 0xabe <_fpadd_parts+0x42>
     aa4:	84 30       	cpi	r24, 0x04	; 4
     aa6:	09 f0       	breq	.+2      	; 0xaaa <_fpadd_parts+0x2e>
     aa8:	2f c1       	rjmp	.+606    	; 0xd08 <_fpadd_parts+0x28c>
     aaa:	11 96       	adiw	r26, 0x01	; 1
     aac:	9c 91       	ld	r25, X
     aae:	11 97       	sbiw	r26, 0x01	; 1
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	98 17       	cp	r25, r24
     ab4:	09 f4       	brne	.+2      	; 0xab8 <_fpadd_parts+0x3c>
     ab6:	28 c1       	rjmp	.+592    	; 0xd08 <_fpadd_parts+0x28c>
     ab8:	a0 e6       	ldi	r26, 0x60	; 96
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	25 c1       	rjmp	.+586    	; 0xd08 <_fpadd_parts+0x28c>
     abe:	84 30       	cpi	r24, 0x04	; 4
     ac0:	09 f4       	brne	.+2      	; 0xac4 <_fpadd_parts+0x48>
     ac2:	21 c1       	rjmp	.+578    	; 0xd06 <_fpadd_parts+0x28a>
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	a9 f4       	brne	.+42     	; 0xaf2 <_fpadd_parts+0x76>
     ac8:	92 30       	cpi	r25, 0x02	; 2
     aca:	09 f0       	breq	.+2      	; 0xace <_fpadd_parts+0x52>
     acc:	1d c1       	rjmp	.+570    	; 0xd08 <_fpadd_parts+0x28c>
     ace:	9a 01       	movw	r18, r20
     ad0:	ad 01       	movw	r20, r26
     ad2:	88 e0       	ldi	r24, 0x08	; 8
     ad4:	ea 01       	movw	r28, r20
     ad6:	09 90       	ld	r0, Y+
     ad8:	ae 01       	movw	r20, r28
     ada:	e9 01       	movw	r28, r18
     adc:	09 92       	st	Y+, r0
     ade:	9e 01       	movw	r18, r28
     ae0:	81 50       	subi	r24, 0x01	; 1
     ae2:	c1 f7       	brne	.-16     	; 0xad4 <_fpadd_parts+0x58>
     ae4:	e2 01       	movw	r28, r4
     ae6:	89 81       	ldd	r24, Y+1	; 0x01
     ae8:	11 96       	adiw	r26, 0x01	; 1
     aea:	9c 91       	ld	r25, X
     aec:	89 23       	and	r24, r25
     aee:	81 83       	std	Z+1, r24	; 0x01
     af0:	08 c1       	rjmp	.+528    	; 0xd02 <_fpadd_parts+0x286>
     af2:	92 30       	cpi	r25, 0x02	; 2
     af4:	09 f4       	brne	.+2      	; 0xaf8 <_fpadd_parts+0x7c>
     af6:	07 c1       	rjmp	.+526    	; 0xd06 <_fpadd_parts+0x28a>
     af8:	12 96       	adiw	r26, 0x02	; 2
     afa:	2d 90       	ld	r2, X+
     afc:	3c 90       	ld	r3, X
     afe:	13 97       	sbiw	r26, 0x03	; 3
     b00:	eb 01       	movw	r28, r22
     b02:	8a 81       	ldd	r24, Y+2	; 0x02
     b04:	9b 81       	ldd	r25, Y+3	; 0x03
     b06:	14 96       	adiw	r26, 0x04	; 4
     b08:	ad 90       	ld	r10, X+
     b0a:	bd 90       	ld	r11, X+
     b0c:	cd 90       	ld	r12, X+
     b0e:	dc 90       	ld	r13, X
     b10:	17 97       	sbiw	r26, 0x07	; 7
     b12:	ec 80       	ldd	r14, Y+4	; 0x04
     b14:	fd 80       	ldd	r15, Y+5	; 0x05
     b16:	0e 81       	ldd	r16, Y+6	; 0x06
     b18:	1f 81       	ldd	r17, Y+7	; 0x07
     b1a:	91 01       	movw	r18, r2
     b1c:	28 1b       	sub	r18, r24
     b1e:	39 0b       	sbc	r19, r25
     b20:	b9 01       	movw	r22, r18
     b22:	37 ff       	sbrs	r19, 7
     b24:	04 c0       	rjmp	.+8      	; 0xb2e <_fpadd_parts+0xb2>
     b26:	66 27       	eor	r22, r22
     b28:	77 27       	eor	r23, r23
     b2a:	62 1b       	sub	r22, r18
     b2c:	73 0b       	sbc	r23, r19
     b2e:	60 32       	cpi	r22, 0x20	; 32
     b30:	71 05       	cpc	r23, r1
     b32:	0c f0       	brlt	.+2      	; 0xb36 <_fpadd_parts+0xba>
     b34:	61 c0       	rjmp	.+194    	; 0xbf8 <_fpadd_parts+0x17c>
     b36:	12 16       	cp	r1, r18
     b38:	13 06       	cpc	r1, r19
     b3a:	6c f5       	brge	.+90     	; 0xb96 <_fpadd_parts+0x11a>
     b3c:	37 01       	movw	r6, r14
     b3e:	48 01       	movw	r8, r16
     b40:	06 2e       	mov	r0, r22
     b42:	04 c0       	rjmp	.+8      	; 0xb4c <_fpadd_parts+0xd0>
     b44:	96 94       	lsr	r9
     b46:	87 94       	ror	r8
     b48:	77 94       	ror	r7
     b4a:	67 94       	ror	r6
     b4c:	0a 94       	dec	r0
     b4e:	d2 f7       	brpl	.-12     	; 0xb44 <_fpadd_parts+0xc8>
     b50:	21 e0       	ldi	r18, 0x01	; 1
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	04 c0       	rjmp	.+8      	; 0xb62 <_fpadd_parts+0xe6>
     b5a:	22 0f       	add	r18, r18
     b5c:	33 1f       	adc	r19, r19
     b5e:	44 1f       	adc	r20, r20
     b60:	55 1f       	adc	r21, r21
     b62:	6a 95       	dec	r22
     b64:	d2 f7       	brpl	.-12     	; 0xb5a <_fpadd_parts+0xde>
     b66:	21 50       	subi	r18, 0x01	; 1
     b68:	30 40       	sbci	r19, 0x00	; 0
     b6a:	40 40       	sbci	r20, 0x00	; 0
     b6c:	50 40       	sbci	r21, 0x00	; 0
     b6e:	2e 21       	and	r18, r14
     b70:	3f 21       	and	r19, r15
     b72:	40 23       	and	r20, r16
     b74:	51 23       	and	r21, r17
     b76:	21 15       	cp	r18, r1
     b78:	31 05       	cpc	r19, r1
     b7a:	41 05       	cpc	r20, r1
     b7c:	51 05       	cpc	r21, r1
     b7e:	21 f0       	breq	.+8      	; 0xb88 <_fpadd_parts+0x10c>
     b80:	21 e0       	ldi	r18, 0x01	; 1
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	40 e0       	ldi	r20, 0x00	; 0
     b86:	50 e0       	ldi	r21, 0x00	; 0
     b88:	79 01       	movw	r14, r18
     b8a:	8a 01       	movw	r16, r20
     b8c:	e6 28       	or	r14, r6
     b8e:	f7 28       	or	r15, r7
     b90:	08 29       	or	r16, r8
     b92:	19 29       	or	r17, r9
     b94:	3c c0       	rjmp	.+120    	; 0xc0e <_fpadd_parts+0x192>
     b96:	23 2b       	or	r18, r19
     b98:	d1 f1       	breq	.+116    	; 0xc0e <_fpadd_parts+0x192>
     b9a:	26 0e       	add	r2, r22
     b9c:	37 1e       	adc	r3, r23
     b9e:	35 01       	movw	r6, r10
     ba0:	46 01       	movw	r8, r12
     ba2:	06 2e       	mov	r0, r22
     ba4:	04 c0       	rjmp	.+8      	; 0xbae <_fpadd_parts+0x132>
     ba6:	96 94       	lsr	r9
     ba8:	87 94       	ror	r8
     baa:	77 94       	ror	r7
     bac:	67 94       	ror	r6
     bae:	0a 94       	dec	r0
     bb0:	d2 f7       	brpl	.-12     	; 0xba6 <_fpadd_parts+0x12a>
     bb2:	21 e0       	ldi	r18, 0x01	; 1
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	50 e0       	ldi	r21, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <_fpadd_parts+0x148>
     bbc:	22 0f       	add	r18, r18
     bbe:	33 1f       	adc	r19, r19
     bc0:	44 1f       	adc	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	6a 95       	dec	r22
     bc6:	d2 f7       	brpl	.-12     	; 0xbbc <_fpadd_parts+0x140>
     bc8:	21 50       	subi	r18, 0x01	; 1
     bca:	30 40       	sbci	r19, 0x00	; 0
     bcc:	40 40       	sbci	r20, 0x00	; 0
     bce:	50 40       	sbci	r21, 0x00	; 0
     bd0:	2a 21       	and	r18, r10
     bd2:	3b 21       	and	r19, r11
     bd4:	4c 21       	and	r20, r12
     bd6:	5d 21       	and	r21, r13
     bd8:	21 15       	cp	r18, r1
     bda:	31 05       	cpc	r19, r1
     bdc:	41 05       	cpc	r20, r1
     bde:	51 05       	cpc	r21, r1
     be0:	21 f0       	breq	.+8      	; 0xbea <_fpadd_parts+0x16e>
     be2:	21 e0       	ldi	r18, 0x01	; 1
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e0       	ldi	r20, 0x00	; 0
     be8:	50 e0       	ldi	r21, 0x00	; 0
     bea:	59 01       	movw	r10, r18
     bec:	6a 01       	movw	r12, r20
     bee:	a6 28       	or	r10, r6
     bf0:	b7 28       	or	r11, r7
     bf2:	c8 28       	or	r12, r8
     bf4:	d9 28       	or	r13, r9
     bf6:	0b c0       	rjmp	.+22     	; 0xc0e <_fpadd_parts+0x192>
     bf8:	82 15       	cp	r24, r2
     bfa:	93 05       	cpc	r25, r3
     bfc:	2c f0       	brlt	.+10     	; 0xc08 <_fpadd_parts+0x18c>
     bfe:	1c 01       	movw	r2, r24
     c00:	aa 24       	eor	r10, r10
     c02:	bb 24       	eor	r11, r11
     c04:	65 01       	movw	r12, r10
     c06:	03 c0       	rjmp	.+6      	; 0xc0e <_fpadd_parts+0x192>
     c08:	ee 24       	eor	r14, r14
     c0a:	ff 24       	eor	r15, r15
     c0c:	87 01       	movw	r16, r14
     c0e:	11 96       	adiw	r26, 0x01	; 1
     c10:	9c 91       	ld	r25, X
     c12:	d2 01       	movw	r26, r4
     c14:	11 96       	adiw	r26, 0x01	; 1
     c16:	8c 91       	ld	r24, X
     c18:	98 17       	cp	r25, r24
     c1a:	09 f4       	brne	.+2      	; 0xc1e <_fpadd_parts+0x1a2>
     c1c:	45 c0       	rjmp	.+138    	; 0xca8 <_fpadd_parts+0x22c>
     c1e:	99 23       	and	r25, r25
     c20:	39 f0       	breq	.+14     	; 0xc30 <_fpadd_parts+0x1b4>
     c22:	a8 01       	movw	r20, r16
     c24:	97 01       	movw	r18, r14
     c26:	2a 19       	sub	r18, r10
     c28:	3b 09       	sbc	r19, r11
     c2a:	4c 09       	sbc	r20, r12
     c2c:	5d 09       	sbc	r21, r13
     c2e:	06 c0       	rjmp	.+12     	; 0xc3c <_fpadd_parts+0x1c0>
     c30:	a6 01       	movw	r20, r12
     c32:	95 01       	movw	r18, r10
     c34:	2e 19       	sub	r18, r14
     c36:	3f 09       	sbc	r19, r15
     c38:	40 0b       	sbc	r20, r16
     c3a:	51 0b       	sbc	r21, r17
     c3c:	57 fd       	sbrc	r21, 7
     c3e:	08 c0       	rjmp	.+16     	; 0xc50 <_fpadd_parts+0x1d4>
     c40:	11 82       	std	Z+1, r1	; 0x01
     c42:	33 82       	std	Z+3, r3	; 0x03
     c44:	22 82       	std	Z+2, r2	; 0x02
     c46:	24 83       	std	Z+4, r18	; 0x04
     c48:	35 83       	std	Z+5, r19	; 0x05
     c4a:	46 83       	std	Z+6, r20	; 0x06
     c4c:	57 83       	std	Z+7, r21	; 0x07
     c4e:	1d c0       	rjmp	.+58     	; 0xc8a <_fpadd_parts+0x20e>
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	81 83       	std	Z+1, r24	; 0x01
     c54:	33 82       	std	Z+3, r3	; 0x03
     c56:	22 82       	std	Z+2, r2	; 0x02
     c58:	88 27       	eor	r24, r24
     c5a:	99 27       	eor	r25, r25
     c5c:	dc 01       	movw	r26, r24
     c5e:	82 1b       	sub	r24, r18
     c60:	93 0b       	sbc	r25, r19
     c62:	a4 0b       	sbc	r26, r20
     c64:	b5 0b       	sbc	r27, r21
     c66:	84 83       	std	Z+4, r24	; 0x04
     c68:	95 83       	std	Z+5, r25	; 0x05
     c6a:	a6 83       	std	Z+6, r26	; 0x06
     c6c:	b7 83       	std	Z+7, r27	; 0x07
     c6e:	0d c0       	rjmp	.+26     	; 0xc8a <_fpadd_parts+0x20e>
     c70:	22 0f       	add	r18, r18
     c72:	33 1f       	adc	r19, r19
     c74:	44 1f       	adc	r20, r20
     c76:	55 1f       	adc	r21, r21
     c78:	24 83       	std	Z+4, r18	; 0x04
     c7a:	35 83       	std	Z+5, r19	; 0x05
     c7c:	46 83       	std	Z+6, r20	; 0x06
     c7e:	57 83       	std	Z+7, r21	; 0x07
     c80:	82 81       	ldd	r24, Z+2	; 0x02
     c82:	93 81       	ldd	r25, Z+3	; 0x03
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	93 83       	std	Z+3, r25	; 0x03
     c88:	82 83       	std	Z+2, r24	; 0x02
     c8a:	24 81       	ldd	r18, Z+4	; 0x04
     c8c:	35 81       	ldd	r19, Z+5	; 0x05
     c8e:	46 81       	ldd	r20, Z+6	; 0x06
     c90:	57 81       	ldd	r21, Z+7	; 0x07
     c92:	da 01       	movw	r26, r20
     c94:	c9 01       	movw	r24, r18
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	a1 09       	sbc	r26, r1
     c9a:	b1 09       	sbc	r27, r1
     c9c:	8f 5f       	subi	r24, 0xFF	; 255
     c9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ca0:	af 4f       	sbci	r26, 0xFF	; 255
     ca2:	bf 43       	sbci	r27, 0x3F	; 63
     ca4:	28 f3       	brcs	.-54     	; 0xc70 <_fpadd_parts+0x1f4>
     ca6:	0b c0       	rjmp	.+22     	; 0xcbe <_fpadd_parts+0x242>
     ca8:	91 83       	std	Z+1, r25	; 0x01
     caa:	33 82       	std	Z+3, r3	; 0x03
     cac:	22 82       	std	Z+2, r2	; 0x02
     cae:	ea 0c       	add	r14, r10
     cb0:	fb 1c       	adc	r15, r11
     cb2:	0c 1d       	adc	r16, r12
     cb4:	1d 1d       	adc	r17, r13
     cb6:	e4 82       	std	Z+4, r14	; 0x04
     cb8:	f5 82       	std	Z+5, r15	; 0x05
     cba:	06 83       	std	Z+6, r16	; 0x06
     cbc:	17 83       	std	Z+7, r17	; 0x07
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	80 83       	st	Z, r24
     cc2:	24 81       	ldd	r18, Z+4	; 0x04
     cc4:	35 81       	ldd	r19, Z+5	; 0x05
     cc6:	46 81       	ldd	r20, Z+6	; 0x06
     cc8:	57 81       	ldd	r21, Z+7	; 0x07
     cca:	57 ff       	sbrs	r21, 7
     ccc:	1a c0       	rjmp	.+52     	; 0xd02 <_fpadd_parts+0x286>
     cce:	c9 01       	movw	r24, r18
     cd0:	aa 27       	eor	r26, r26
     cd2:	97 fd       	sbrc	r25, 7
     cd4:	a0 95       	com	r26
     cd6:	ba 2f       	mov	r27, r26
     cd8:	81 70       	andi	r24, 0x01	; 1
     cda:	90 70       	andi	r25, 0x00	; 0
     cdc:	a0 70       	andi	r26, 0x00	; 0
     cde:	b0 70       	andi	r27, 0x00	; 0
     ce0:	56 95       	lsr	r21
     ce2:	47 95       	ror	r20
     ce4:	37 95       	ror	r19
     ce6:	27 95       	ror	r18
     ce8:	82 2b       	or	r24, r18
     cea:	93 2b       	or	r25, r19
     cec:	a4 2b       	or	r26, r20
     cee:	b5 2b       	or	r27, r21
     cf0:	84 83       	std	Z+4, r24	; 0x04
     cf2:	95 83       	std	Z+5, r25	; 0x05
     cf4:	a6 83       	std	Z+6, r26	; 0x06
     cf6:	b7 83       	std	Z+7, r27	; 0x07
     cf8:	82 81       	ldd	r24, Z+2	; 0x02
     cfa:	93 81       	ldd	r25, Z+3	; 0x03
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	93 83       	std	Z+3, r25	; 0x03
     d00:	82 83       	std	Z+2, r24	; 0x02
     d02:	df 01       	movw	r26, r30
     d04:	01 c0       	rjmp	.+2      	; 0xd08 <_fpadd_parts+0x28c>
     d06:	d2 01       	movw	r26, r4
     d08:	cd 01       	movw	r24, r26
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	e2 e1       	ldi	r30, 0x12	; 18
     d10:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__epilogue_restores__>

00000d14 <__subsf3>:
     d14:	a0 e2       	ldi	r26, 0x20	; 32
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e0 e9       	ldi	r30, 0x90	; 144
     d1a:	f6 e0       	ldi	r31, 0x06	; 6
     d1c:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__prologue_saves__+0x18>
     d20:	69 83       	std	Y+1, r22	; 0x01
     d22:	7a 83       	std	Y+2, r23	; 0x02
     d24:	8b 83       	std	Y+3, r24	; 0x03
     d26:	9c 83       	std	Y+4, r25	; 0x04
     d28:	2d 83       	std	Y+5, r18	; 0x05
     d2a:	3e 83       	std	Y+6, r19	; 0x06
     d2c:	4f 83       	std	Y+7, r20	; 0x07
     d2e:	58 87       	std	Y+8, r21	; 0x08
     d30:	e9 e0       	ldi	r30, 0x09	; 9
     d32:	ee 2e       	mov	r14, r30
     d34:	f1 2c       	mov	r15, r1
     d36:	ec 0e       	add	r14, r28
     d38:	fd 1e       	adc	r15, r29
     d3a:	b7 01       	movw	r22, r14
     d3c:	ce 01       	movw	r24, r28
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
     d44:	8e 01       	movw	r16, r28
     d46:	0f 5e       	subi	r16, 0xEF	; 239
     d48:	1f 4f       	sbci	r17, 0xFF	; 255
     d4a:	b8 01       	movw	r22, r16
     d4c:	ce 01       	movw	r24, r28
     d4e:	05 96       	adiw	r24, 0x05	; 5
     d50:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
     d54:	8a 89       	ldd	r24, Y+18	; 0x12
     d56:	91 e0       	ldi	r25, 0x01	; 1
     d58:	89 27       	eor	r24, r25
     d5a:	8a 8b       	std	Y+18, r24	; 0x12
     d5c:	ae 01       	movw	r20, r28
     d5e:	47 5e       	subi	r20, 0xE7	; 231
     d60:	5f 4f       	sbci	r21, 0xFF	; 255
     d62:	b8 01       	movw	r22, r16
     d64:	c7 01       	movw	r24, r14
     d66:	0e 94 3e 05 	call	0xa7c	; 0xa7c <_fpadd_parts>
     d6a:	0e 94 be 09 	call	0x137c	; 0x137c <__pack_f>
     d6e:	a0 96       	adiw	r28, 0x20	; 32
     d70:	e6 e0       	ldi	r30, 0x06	; 6
     d72:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__epilogue_restores__+0x18>

00000d76 <__addsf3>:
     d76:	a0 e2       	ldi	r26, 0x20	; 32
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e1 ec       	ldi	r30, 0xC1	; 193
     d7c:	f6 e0       	ldi	r31, 0x06	; 6
     d7e:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__prologue_saves__+0x18>
     d82:	69 83       	std	Y+1, r22	; 0x01
     d84:	7a 83       	std	Y+2, r23	; 0x02
     d86:	8b 83       	std	Y+3, r24	; 0x03
     d88:	9c 83       	std	Y+4, r25	; 0x04
     d8a:	2d 83       	std	Y+5, r18	; 0x05
     d8c:	3e 83       	std	Y+6, r19	; 0x06
     d8e:	4f 83       	std	Y+7, r20	; 0x07
     d90:	58 87       	std	Y+8, r21	; 0x08
     d92:	f9 e0       	ldi	r31, 0x09	; 9
     d94:	ef 2e       	mov	r14, r31
     d96:	f1 2c       	mov	r15, r1
     d98:	ec 0e       	add	r14, r28
     d9a:	fd 1e       	adc	r15, r29
     d9c:	b7 01       	movw	r22, r14
     d9e:	ce 01       	movw	r24, r28
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
     da6:	8e 01       	movw	r16, r28
     da8:	0f 5e       	subi	r16, 0xEF	; 239
     daa:	1f 4f       	sbci	r17, 0xFF	; 255
     dac:	b8 01       	movw	r22, r16
     dae:	ce 01       	movw	r24, r28
     db0:	05 96       	adiw	r24, 0x05	; 5
     db2:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
     db6:	ae 01       	movw	r20, r28
     db8:	47 5e       	subi	r20, 0xE7	; 231
     dba:	5f 4f       	sbci	r21, 0xFF	; 255
     dbc:	b8 01       	movw	r22, r16
     dbe:	c7 01       	movw	r24, r14
     dc0:	0e 94 3e 05 	call	0xa7c	; 0xa7c <_fpadd_parts>
     dc4:	0e 94 be 09 	call	0x137c	; 0x137c <__pack_f>
     dc8:	a0 96       	adiw	r28, 0x20	; 32
     dca:	e6 e0       	ldi	r30, 0x06	; 6
     dcc:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__epilogue_restores__+0x18>

00000dd0 <__mulsf3>:
     dd0:	a0 e2       	ldi	r26, 0x20	; 32
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	ee ee       	ldi	r30, 0xEE	; 238
     dd6:	f6 e0       	ldi	r31, 0x06	; 6
     dd8:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <__prologue_saves__>
     ddc:	69 83       	std	Y+1, r22	; 0x01
     dde:	7a 83       	std	Y+2, r23	; 0x02
     de0:	8b 83       	std	Y+3, r24	; 0x03
     de2:	9c 83       	std	Y+4, r25	; 0x04
     de4:	2d 83       	std	Y+5, r18	; 0x05
     de6:	3e 83       	std	Y+6, r19	; 0x06
     de8:	4f 83       	std	Y+7, r20	; 0x07
     dea:	58 87       	std	Y+8, r21	; 0x08
     dec:	be 01       	movw	r22, r28
     dee:	67 5f       	subi	r22, 0xF7	; 247
     df0:	7f 4f       	sbci	r23, 0xFF	; 255
     df2:	ce 01       	movw	r24, r28
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
     dfa:	be 01       	movw	r22, r28
     dfc:	6f 5e       	subi	r22, 0xEF	; 239
     dfe:	7f 4f       	sbci	r23, 0xFF	; 255
     e00:	ce 01       	movw	r24, r28
     e02:	05 96       	adiw	r24, 0x05	; 5
     e04:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
     e08:	99 85       	ldd	r25, Y+9	; 0x09
     e0a:	92 30       	cpi	r25, 0x02	; 2
     e0c:	88 f0       	brcs	.+34     	; 0xe30 <__mulsf3+0x60>
     e0e:	89 89       	ldd	r24, Y+17	; 0x11
     e10:	82 30       	cpi	r24, 0x02	; 2
     e12:	c8 f0       	brcs	.+50     	; 0xe46 <__mulsf3+0x76>
     e14:	94 30       	cpi	r25, 0x04	; 4
     e16:	19 f4       	brne	.+6      	; 0xe1e <__mulsf3+0x4e>
     e18:	82 30       	cpi	r24, 0x02	; 2
     e1a:	51 f4       	brne	.+20     	; 0xe30 <__mulsf3+0x60>
     e1c:	04 c0       	rjmp	.+8      	; 0xe26 <__mulsf3+0x56>
     e1e:	84 30       	cpi	r24, 0x04	; 4
     e20:	29 f4       	brne	.+10     	; 0xe2c <__mulsf3+0x5c>
     e22:	92 30       	cpi	r25, 0x02	; 2
     e24:	81 f4       	brne	.+32     	; 0xe46 <__mulsf3+0x76>
     e26:	80 e6       	ldi	r24, 0x60	; 96
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	c6 c0       	rjmp	.+396    	; 0xfb8 <__mulsf3+0x1e8>
     e2c:	92 30       	cpi	r25, 0x02	; 2
     e2e:	49 f4       	brne	.+18     	; 0xe42 <__mulsf3+0x72>
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	9a 85       	ldd	r25, Y+10	; 0x0a
     e34:	8a 89       	ldd	r24, Y+18	; 0x12
     e36:	98 13       	cpse	r25, r24
     e38:	21 e0       	ldi	r18, 0x01	; 1
     e3a:	2a 87       	std	Y+10, r18	; 0x0a
     e3c:	ce 01       	movw	r24, r28
     e3e:	09 96       	adiw	r24, 0x09	; 9
     e40:	bb c0       	rjmp	.+374    	; 0xfb8 <__mulsf3+0x1e8>
     e42:	82 30       	cpi	r24, 0x02	; 2
     e44:	49 f4       	brne	.+18     	; 0xe58 <__mulsf3+0x88>
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	9a 85       	ldd	r25, Y+10	; 0x0a
     e4a:	8a 89       	ldd	r24, Y+18	; 0x12
     e4c:	98 13       	cpse	r25, r24
     e4e:	21 e0       	ldi	r18, 0x01	; 1
     e50:	2a 8b       	std	Y+18, r18	; 0x12
     e52:	ce 01       	movw	r24, r28
     e54:	41 96       	adiw	r24, 0x11	; 17
     e56:	b0 c0       	rjmp	.+352    	; 0xfb8 <__mulsf3+0x1e8>
     e58:	2d 84       	ldd	r2, Y+13	; 0x0d
     e5a:	3e 84       	ldd	r3, Y+14	; 0x0e
     e5c:	4f 84       	ldd	r4, Y+15	; 0x0f
     e5e:	58 88       	ldd	r5, Y+16	; 0x10
     e60:	6d 88       	ldd	r6, Y+21	; 0x15
     e62:	7e 88       	ldd	r7, Y+22	; 0x16
     e64:	8f 88       	ldd	r8, Y+23	; 0x17
     e66:	98 8c       	ldd	r9, Y+24	; 0x18
     e68:	ee 24       	eor	r14, r14
     e6a:	ff 24       	eor	r15, r15
     e6c:	87 01       	movw	r16, r14
     e6e:	aa 24       	eor	r10, r10
     e70:	bb 24       	eor	r11, r11
     e72:	65 01       	movw	r12, r10
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	e0 e0       	ldi	r30, 0x00	; 0
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	c1 01       	movw	r24, r2
     e82:	81 70       	andi	r24, 0x01	; 1
     e84:	90 70       	andi	r25, 0x00	; 0
     e86:	89 2b       	or	r24, r25
     e88:	e9 f0       	breq	.+58     	; 0xec4 <__mulsf3+0xf4>
     e8a:	e6 0c       	add	r14, r6
     e8c:	f7 1c       	adc	r15, r7
     e8e:	08 1d       	adc	r16, r8
     e90:	19 1d       	adc	r17, r9
     e92:	9a 01       	movw	r18, r20
     e94:	ab 01       	movw	r20, r22
     e96:	2a 0d       	add	r18, r10
     e98:	3b 1d       	adc	r19, r11
     e9a:	4c 1d       	adc	r20, r12
     e9c:	5d 1d       	adc	r21, r13
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	a0 e0       	ldi	r26, 0x00	; 0
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e6 14       	cp	r14, r6
     ea8:	f7 04       	cpc	r15, r7
     eaa:	08 05       	cpc	r16, r8
     eac:	19 05       	cpc	r17, r9
     eae:	20 f4       	brcc	.+8      	; 0xeb8 <__mulsf3+0xe8>
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	a0 e0       	ldi	r26, 0x00	; 0
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	ba 01       	movw	r22, r20
     eba:	a9 01       	movw	r20, r18
     ebc:	48 0f       	add	r20, r24
     ebe:	59 1f       	adc	r21, r25
     ec0:	6a 1f       	adc	r22, r26
     ec2:	7b 1f       	adc	r23, r27
     ec4:	aa 0c       	add	r10, r10
     ec6:	bb 1c       	adc	r11, r11
     ec8:	cc 1c       	adc	r12, r12
     eca:	dd 1c       	adc	r13, r13
     ecc:	97 fe       	sbrs	r9, 7
     ece:	08 c0       	rjmp	.+16     	; 0xee0 <__mulsf3+0x110>
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	a0 e0       	ldi	r26, 0x00	; 0
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	a8 2a       	or	r10, r24
     eda:	b9 2a       	or	r11, r25
     edc:	ca 2a       	or	r12, r26
     ede:	db 2a       	or	r13, r27
     ee0:	31 96       	adiw	r30, 0x01	; 1
     ee2:	e0 32       	cpi	r30, 0x20	; 32
     ee4:	f1 05       	cpc	r31, r1
     ee6:	49 f0       	breq	.+18     	; 0xefa <__mulsf3+0x12a>
     ee8:	66 0c       	add	r6, r6
     eea:	77 1c       	adc	r7, r7
     eec:	88 1c       	adc	r8, r8
     eee:	99 1c       	adc	r9, r9
     ef0:	56 94       	lsr	r5
     ef2:	47 94       	ror	r4
     ef4:	37 94       	ror	r3
     ef6:	27 94       	ror	r2
     ef8:	c3 cf       	rjmp	.-122    	; 0xe80 <__mulsf3+0xb0>
     efa:	fa 85       	ldd	r31, Y+10	; 0x0a
     efc:	ea 89       	ldd	r30, Y+18	; 0x12
     efe:	2b 89       	ldd	r18, Y+19	; 0x13
     f00:	3c 89       	ldd	r19, Y+20	; 0x14
     f02:	8b 85       	ldd	r24, Y+11	; 0x0b
     f04:	9c 85       	ldd	r25, Y+12	; 0x0c
     f06:	28 0f       	add	r18, r24
     f08:	39 1f       	adc	r19, r25
     f0a:	2e 5f       	subi	r18, 0xFE	; 254
     f0c:	3f 4f       	sbci	r19, 0xFF	; 255
     f0e:	17 c0       	rjmp	.+46     	; 0xf3e <__mulsf3+0x16e>
     f10:	ca 01       	movw	r24, r20
     f12:	81 70       	andi	r24, 0x01	; 1
     f14:	90 70       	andi	r25, 0x00	; 0
     f16:	89 2b       	or	r24, r25
     f18:	61 f0       	breq	.+24     	; 0xf32 <__mulsf3+0x162>
     f1a:	16 95       	lsr	r17
     f1c:	07 95       	ror	r16
     f1e:	f7 94       	ror	r15
     f20:	e7 94       	ror	r14
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	a0 e0       	ldi	r26, 0x00	; 0
     f28:	b0 e8       	ldi	r27, 0x80	; 128
     f2a:	e8 2a       	or	r14, r24
     f2c:	f9 2a       	or	r15, r25
     f2e:	0a 2b       	or	r16, r26
     f30:	1b 2b       	or	r17, r27
     f32:	76 95       	lsr	r23
     f34:	67 95       	ror	r22
     f36:	57 95       	ror	r21
     f38:	47 95       	ror	r20
     f3a:	2f 5f       	subi	r18, 0xFF	; 255
     f3c:	3f 4f       	sbci	r19, 0xFF	; 255
     f3e:	77 fd       	sbrc	r23, 7
     f40:	e7 cf       	rjmp	.-50     	; 0xf10 <__mulsf3+0x140>
     f42:	0c c0       	rjmp	.+24     	; 0xf5c <__mulsf3+0x18c>
     f44:	44 0f       	add	r20, r20
     f46:	55 1f       	adc	r21, r21
     f48:	66 1f       	adc	r22, r22
     f4a:	77 1f       	adc	r23, r23
     f4c:	17 fd       	sbrc	r17, 7
     f4e:	41 60       	ori	r20, 0x01	; 1
     f50:	ee 0c       	add	r14, r14
     f52:	ff 1c       	adc	r15, r15
     f54:	00 1f       	adc	r16, r16
     f56:	11 1f       	adc	r17, r17
     f58:	21 50       	subi	r18, 0x01	; 1
     f5a:	30 40       	sbci	r19, 0x00	; 0
     f5c:	40 30       	cpi	r20, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	59 07       	cpc	r21, r25
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	69 07       	cpc	r22, r25
     f66:	90 e4       	ldi	r25, 0x40	; 64
     f68:	79 07       	cpc	r23, r25
     f6a:	60 f3       	brcs	.-40     	; 0xf44 <__mulsf3+0x174>
     f6c:	2b 8f       	std	Y+27, r18	; 0x1b
     f6e:	3c 8f       	std	Y+28, r19	; 0x1c
     f70:	db 01       	movw	r26, r22
     f72:	ca 01       	movw	r24, r20
     f74:	8f 77       	andi	r24, 0x7F	; 127
     f76:	90 70       	andi	r25, 0x00	; 0
     f78:	a0 70       	andi	r26, 0x00	; 0
     f7a:	b0 70       	andi	r27, 0x00	; 0
     f7c:	80 34       	cpi	r24, 0x40	; 64
     f7e:	91 05       	cpc	r25, r1
     f80:	a1 05       	cpc	r26, r1
     f82:	b1 05       	cpc	r27, r1
     f84:	61 f4       	brne	.+24     	; 0xf9e <__mulsf3+0x1ce>
     f86:	47 fd       	sbrc	r20, 7
     f88:	0a c0       	rjmp	.+20     	; 0xf9e <__mulsf3+0x1ce>
     f8a:	e1 14       	cp	r14, r1
     f8c:	f1 04       	cpc	r15, r1
     f8e:	01 05       	cpc	r16, r1
     f90:	11 05       	cpc	r17, r1
     f92:	29 f0       	breq	.+10     	; 0xf9e <__mulsf3+0x1ce>
     f94:	40 5c       	subi	r20, 0xC0	; 192
     f96:	5f 4f       	sbci	r21, 0xFF	; 255
     f98:	6f 4f       	sbci	r22, 0xFF	; 255
     f9a:	7f 4f       	sbci	r23, 0xFF	; 255
     f9c:	40 78       	andi	r20, 0x80	; 128
     f9e:	1a 8e       	std	Y+26, r1	; 0x1a
     fa0:	fe 17       	cp	r31, r30
     fa2:	11 f0       	breq	.+4      	; 0xfa8 <__mulsf3+0x1d8>
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	8a 8f       	std	Y+26, r24	; 0x1a
     fa8:	4d 8f       	std	Y+29, r20	; 0x1d
     faa:	5e 8f       	std	Y+30, r21	; 0x1e
     fac:	6f 8f       	std	Y+31, r22	; 0x1f
     fae:	78 a3       	std	Y+32, r23	; 0x20
     fb0:	83 e0       	ldi	r24, 0x03	; 3
     fb2:	89 8f       	std	Y+25, r24	; 0x19
     fb4:	ce 01       	movw	r24, r28
     fb6:	49 96       	adiw	r24, 0x19	; 25
     fb8:	0e 94 be 09 	call	0x137c	; 0x137c <__pack_f>
     fbc:	a0 96       	adiw	r28, 0x20	; 32
     fbe:	e2 e1       	ldi	r30, 0x12	; 18
     fc0:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__epilogue_restores__>

00000fc4 <__gtsf2>:
     fc4:	a8 e1       	ldi	r26, 0x18	; 24
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e8 ee       	ldi	r30, 0xE8	; 232
     fca:	f7 e0       	ldi	r31, 0x07	; 7
     fcc:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__prologue_saves__+0x18>
     fd0:	69 83       	std	Y+1, r22	; 0x01
     fd2:	7a 83       	std	Y+2, r23	; 0x02
     fd4:	8b 83       	std	Y+3, r24	; 0x03
     fd6:	9c 83       	std	Y+4, r25	; 0x04
     fd8:	2d 83       	std	Y+5, r18	; 0x05
     fda:	3e 83       	std	Y+6, r19	; 0x06
     fdc:	4f 83       	std	Y+7, r20	; 0x07
     fde:	58 87       	std	Y+8, r21	; 0x08
     fe0:	89 e0       	ldi	r24, 0x09	; 9
     fe2:	e8 2e       	mov	r14, r24
     fe4:	f1 2c       	mov	r15, r1
     fe6:	ec 0e       	add	r14, r28
     fe8:	fd 1e       	adc	r15, r29
     fea:	b7 01       	movw	r22, r14
     fec:	ce 01       	movw	r24, r28
     fee:	01 96       	adiw	r24, 0x01	; 1
     ff0:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
     ff4:	8e 01       	movw	r16, r28
     ff6:	0f 5e       	subi	r16, 0xEF	; 239
     ff8:	1f 4f       	sbci	r17, 0xFF	; 255
     ffa:	b8 01       	movw	r22, r16
     ffc:	ce 01       	movw	r24, r28
     ffe:	05 96       	adiw	r24, 0x05	; 5
    1000:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
    1004:	89 85       	ldd	r24, Y+9	; 0x09
    1006:	82 30       	cpi	r24, 0x02	; 2
    1008:	40 f0       	brcs	.+16     	; 0x101a <__gtsf2+0x56>
    100a:	89 89       	ldd	r24, Y+17	; 0x11
    100c:	82 30       	cpi	r24, 0x02	; 2
    100e:	28 f0       	brcs	.+10     	; 0x101a <__gtsf2+0x56>
    1010:	b8 01       	movw	r22, r16
    1012:	c7 01       	movw	r24, r14
    1014:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__fpcmp_parts_f>
    1018:	01 c0       	rjmp	.+2      	; 0x101c <__gtsf2+0x58>
    101a:	8f ef       	ldi	r24, 0xFF	; 255
    101c:	68 96       	adiw	r28, 0x18	; 24
    101e:	e6 e0       	ldi	r30, 0x06	; 6
    1020:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__epilogue_restores__+0x18>

00001024 <__gesf2>:
    1024:	a8 e1       	ldi	r26, 0x18	; 24
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e8 e1       	ldi	r30, 0x18	; 24
    102a:	f8 e0       	ldi	r31, 0x08	; 8
    102c:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__prologue_saves__+0x18>
    1030:	69 83       	std	Y+1, r22	; 0x01
    1032:	7a 83       	std	Y+2, r23	; 0x02
    1034:	8b 83       	std	Y+3, r24	; 0x03
    1036:	9c 83       	std	Y+4, r25	; 0x04
    1038:	2d 83       	std	Y+5, r18	; 0x05
    103a:	3e 83       	std	Y+6, r19	; 0x06
    103c:	4f 83       	std	Y+7, r20	; 0x07
    103e:	58 87       	std	Y+8, r21	; 0x08
    1040:	89 e0       	ldi	r24, 0x09	; 9
    1042:	e8 2e       	mov	r14, r24
    1044:	f1 2c       	mov	r15, r1
    1046:	ec 0e       	add	r14, r28
    1048:	fd 1e       	adc	r15, r29
    104a:	b7 01       	movw	r22, r14
    104c:	ce 01       	movw	r24, r28
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
    1054:	8e 01       	movw	r16, r28
    1056:	0f 5e       	subi	r16, 0xEF	; 239
    1058:	1f 4f       	sbci	r17, 0xFF	; 255
    105a:	b8 01       	movw	r22, r16
    105c:	ce 01       	movw	r24, r28
    105e:	05 96       	adiw	r24, 0x05	; 5
    1060:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
    1064:	89 85       	ldd	r24, Y+9	; 0x09
    1066:	82 30       	cpi	r24, 0x02	; 2
    1068:	40 f0       	brcs	.+16     	; 0x107a <__gesf2+0x56>
    106a:	89 89       	ldd	r24, Y+17	; 0x11
    106c:	82 30       	cpi	r24, 0x02	; 2
    106e:	28 f0       	brcs	.+10     	; 0x107a <__gesf2+0x56>
    1070:	b8 01       	movw	r22, r16
    1072:	c7 01       	movw	r24, r14
    1074:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__fpcmp_parts_f>
    1078:	01 c0       	rjmp	.+2      	; 0x107c <__gesf2+0x58>
    107a:	8f ef       	ldi	r24, 0xFF	; 255
    107c:	68 96       	adiw	r28, 0x18	; 24
    107e:	e6 e0       	ldi	r30, 0x06	; 6
    1080:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__epilogue_restores__+0x18>

00001084 <__ltsf2>:
    1084:	a8 e1       	ldi	r26, 0x18	; 24
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e8 e4       	ldi	r30, 0x48	; 72
    108a:	f8 e0       	ldi	r31, 0x08	; 8
    108c:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__prologue_saves__+0x18>
    1090:	69 83       	std	Y+1, r22	; 0x01
    1092:	7a 83       	std	Y+2, r23	; 0x02
    1094:	8b 83       	std	Y+3, r24	; 0x03
    1096:	9c 83       	std	Y+4, r25	; 0x04
    1098:	2d 83       	std	Y+5, r18	; 0x05
    109a:	3e 83       	std	Y+6, r19	; 0x06
    109c:	4f 83       	std	Y+7, r20	; 0x07
    109e:	58 87       	std	Y+8, r21	; 0x08
    10a0:	89 e0       	ldi	r24, 0x09	; 9
    10a2:	e8 2e       	mov	r14, r24
    10a4:	f1 2c       	mov	r15, r1
    10a6:	ec 0e       	add	r14, r28
    10a8:	fd 1e       	adc	r15, r29
    10aa:	b7 01       	movw	r22, r14
    10ac:	ce 01       	movw	r24, r28
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
    10b4:	8e 01       	movw	r16, r28
    10b6:	0f 5e       	subi	r16, 0xEF	; 239
    10b8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ba:	b8 01       	movw	r22, r16
    10bc:	ce 01       	movw	r24, r28
    10be:	05 96       	adiw	r24, 0x05	; 5
    10c0:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
    10c4:	89 85       	ldd	r24, Y+9	; 0x09
    10c6:	82 30       	cpi	r24, 0x02	; 2
    10c8:	40 f0       	brcs	.+16     	; 0x10da <__ltsf2+0x56>
    10ca:	89 89       	ldd	r24, Y+17	; 0x11
    10cc:	82 30       	cpi	r24, 0x02	; 2
    10ce:	28 f0       	brcs	.+10     	; 0x10da <__ltsf2+0x56>
    10d0:	b8 01       	movw	r22, r16
    10d2:	c7 01       	movw	r24, r14
    10d4:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__fpcmp_parts_f>
    10d8:	01 c0       	rjmp	.+2      	; 0x10dc <__ltsf2+0x58>
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	68 96       	adiw	r28, 0x18	; 24
    10de:	e6 e0       	ldi	r30, 0x06	; 6
    10e0:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__epilogue_restores__+0x18>

000010e4 <__lesf2>:
    10e4:	a8 e1       	ldi	r26, 0x18	; 24
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e8 e7       	ldi	r30, 0x78	; 120
    10ea:	f8 e0       	ldi	r31, 0x08	; 8
    10ec:	0c 94 af 0b 	jmp	0x175e	; 0x175e <__prologue_saves__+0x18>
    10f0:	69 83       	std	Y+1, r22	; 0x01
    10f2:	7a 83       	std	Y+2, r23	; 0x02
    10f4:	8b 83       	std	Y+3, r24	; 0x03
    10f6:	9c 83       	std	Y+4, r25	; 0x04
    10f8:	2d 83       	std	Y+5, r18	; 0x05
    10fa:	3e 83       	std	Y+6, r19	; 0x06
    10fc:	4f 83       	std	Y+7, r20	; 0x07
    10fe:	58 87       	std	Y+8, r21	; 0x08
    1100:	89 e0       	ldi	r24, 0x09	; 9
    1102:	e8 2e       	mov	r14, r24
    1104:	f1 2c       	mov	r15, r1
    1106:	ec 0e       	add	r14, r28
    1108:	fd 1e       	adc	r15, r29
    110a:	b7 01       	movw	r22, r14
    110c:	ce 01       	movw	r24, r28
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
    1114:	8e 01       	movw	r16, r28
    1116:	0f 5e       	subi	r16, 0xEF	; 239
    1118:	1f 4f       	sbci	r17, 0xFF	; 255
    111a:	b8 01       	movw	r22, r16
    111c:	ce 01       	movw	r24, r28
    111e:	05 96       	adiw	r24, 0x05	; 5
    1120:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
    1124:	89 85       	ldd	r24, Y+9	; 0x09
    1126:	82 30       	cpi	r24, 0x02	; 2
    1128:	40 f0       	brcs	.+16     	; 0x113a <__lesf2+0x56>
    112a:	89 89       	ldd	r24, Y+17	; 0x11
    112c:	82 30       	cpi	r24, 0x02	; 2
    112e:	28 f0       	brcs	.+10     	; 0x113a <__lesf2+0x56>
    1130:	b8 01       	movw	r22, r16
    1132:	c7 01       	movw	r24, r14
    1134:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__fpcmp_parts_f>
    1138:	01 c0       	rjmp	.+2      	; 0x113c <__lesf2+0x58>
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	68 96       	adiw	r28, 0x18	; 24
    113e:	e6 e0       	ldi	r30, 0x06	; 6
    1140:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__epilogue_restores__+0x18>

00001144 <__fixsfsi>:
    1144:	ac e0       	ldi	r26, 0x0C	; 12
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e8 ea       	ldi	r30, 0xA8	; 168
    114a:	f8 e0       	ldi	r31, 0x08	; 8
    114c:	0c 94 b3 0b 	jmp	0x1766	; 0x1766 <__prologue_saves__+0x20>
    1150:	69 83       	std	Y+1, r22	; 0x01
    1152:	7a 83       	std	Y+2, r23	; 0x02
    1154:	8b 83       	std	Y+3, r24	; 0x03
    1156:	9c 83       	std	Y+4, r25	; 0x04
    1158:	be 01       	movw	r22, r28
    115a:	6b 5f       	subi	r22, 0xFB	; 251
    115c:	7f 4f       	sbci	r23, 0xFF	; 255
    115e:	ce 01       	movw	r24, r28
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	0e 94 93 0a 	call	0x1526	; 0x1526 <__unpack_f>
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	82 30       	cpi	r24, 0x02	; 2
    116a:	61 f1       	breq	.+88     	; 0x11c4 <__fixsfsi+0x80>
    116c:	82 30       	cpi	r24, 0x02	; 2
    116e:	50 f1       	brcs	.+84     	; 0x11c4 <__fixsfsi+0x80>
    1170:	84 30       	cpi	r24, 0x04	; 4
    1172:	21 f4       	brne	.+8      	; 0x117c <__fixsfsi+0x38>
    1174:	8e 81       	ldd	r24, Y+6	; 0x06
    1176:	88 23       	and	r24, r24
    1178:	51 f1       	breq	.+84     	; 0x11ce <__fixsfsi+0x8a>
    117a:	2e c0       	rjmp	.+92     	; 0x11d8 <__fixsfsi+0x94>
    117c:	2f 81       	ldd	r18, Y+7	; 0x07
    117e:	38 85       	ldd	r19, Y+8	; 0x08
    1180:	37 fd       	sbrc	r19, 7
    1182:	20 c0       	rjmp	.+64     	; 0x11c4 <__fixsfsi+0x80>
    1184:	6e 81       	ldd	r22, Y+6	; 0x06
    1186:	2f 31       	cpi	r18, 0x1F	; 31
    1188:	31 05       	cpc	r19, r1
    118a:	1c f0       	brlt	.+6      	; 0x1192 <__fixsfsi+0x4e>
    118c:	66 23       	and	r22, r22
    118e:	f9 f0       	breq	.+62     	; 0x11ce <__fixsfsi+0x8a>
    1190:	23 c0       	rjmp	.+70     	; 0x11d8 <__fixsfsi+0x94>
    1192:	8e e1       	ldi	r24, 0x1E	; 30
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	82 1b       	sub	r24, r18
    1198:	93 0b       	sbc	r25, r19
    119a:	29 85       	ldd	r18, Y+9	; 0x09
    119c:	3a 85       	ldd	r19, Y+10	; 0x0a
    119e:	4b 85       	ldd	r20, Y+11	; 0x0b
    11a0:	5c 85       	ldd	r21, Y+12	; 0x0c
    11a2:	04 c0       	rjmp	.+8      	; 0x11ac <__fixsfsi+0x68>
    11a4:	56 95       	lsr	r21
    11a6:	47 95       	ror	r20
    11a8:	37 95       	ror	r19
    11aa:	27 95       	ror	r18
    11ac:	8a 95       	dec	r24
    11ae:	d2 f7       	brpl	.-12     	; 0x11a4 <__fixsfsi+0x60>
    11b0:	66 23       	and	r22, r22
    11b2:	b1 f0       	breq	.+44     	; 0x11e0 <__fixsfsi+0x9c>
    11b4:	50 95       	com	r21
    11b6:	40 95       	com	r20
    11b8:	30 95       	com	r19
    11ba:	21 95       	neg	r18
    11bc:	3f 4f       	sbci	r19, 0xFF	; 255
    11be:	4f 4f       	sbci	r20, 0xFF	; 255
    11c0:	5f 4f       	sbci	r21, 0xFF	; 255
    11c2:	0e c0       	rjmp	.+28     	; 0x11e0 <__fixsfsi+0x9c>
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e0       	ldi	r20, 0x00	; 0
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	09 c0       	rjmp	.+18     	; 0x11e0 <__fixsfsi+0x9c>
    11ce:	2f ef       	ldi	r18, 0xFF	; 255
    11d0:	3f ef       	ldi	r19, 0xFF	; 255
    11d2:	4f ef       	ldi	r20, 0xFF	; 255
    11d4:	5f e7       	ldi	r21, 0x7F	; 127
    11d6:	04 c0       	rjmp	.+8      	; 0x11e0 <__fixsfsi+0x9c>
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	50 e8       	ldi	r21, 0x80	; 128
    11e0:	b9 01       	movw	r22, r18
    11e2:	ca 01       	movw	r24, r20
    11e4:	2c 96       	adiw	r28, 0x0c	; 12
    11e6:	e2 e0       	ldi	r30, 0x02	; 2
    11e8:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <__epilogue_restores__+0x20>

000011ec <__floatunsisf>:
    11ec:	a8 e0       	ldi	r26, 0x08	; 8
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	ec ef       	ldi	r30, 0xFC	; 252
    11f2:	f8 e0       	ldi	r31, 0x08	; 8
    11f4:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__prologue_saves__+0x14>
    11f8:	7b 01       	movw	r14, r22
    11fa:	8c 01       	movw	r16, r24
    11fc:	61 15       	cp	r22, r1
    11fe:	71 05       	cpc	r23, r1
    1200:	81 05       	cpc	r24, r1
    1202:	91 05       	cpc	r25, r1
    1204:	19 f4       	brne	.+6      	; 0x120c <__floatunsisf+0x20>
    1206:	82 e0       	ldi	r24, 0x02	; 2
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	60 c0       	rjmp	.+192    	; 0x12cc <__floatunsisf+0xe0>
    120c:	83 e0       	ldi	r24, 0x03	; 3
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	8e e1       	ldi	r24, 0x1E	; 30
    1212:	c8 2e       	mov	r12, r24
    1214:	d1 2c       	mov	r13, r1
    1216:	dc 82       	std	Y+4, r13	; 0x04
    1218:	cb 82       	std	Y+3, r12	; 0x03
    121a:	ed 82       	std	Y+5, r14	; 0x05
    121c:	fe 82       	std	Y+6, r15	; 0x06
    121e:	0f 83       	std	Y+7, r16	; 0x07
    1220:	18 87       	std	Y+8, r17	; 0x08
    1222:	c8 01       	movw	r24, r16
    1224:	b7 01       	movw	r22, r14
    1226:	0e 94 6f 09 	call	0x12de	; 0x12de <__clzsi2>
    122a:	bc 01       	movw	r22, r24
    122c:	61 50       	subi	r22, 0x01	; 1
    122e:	70 40       	sbci	r23, 0x00	; 0
    1230:	77 ff       	sbrs	r23, 7
    1232:	39 c0       	rjmp	.+114    	; 0x12a6 <__floatunsisf+0xba>
    1234:	ee 27       	eor	r30, r30
    1236:	ff 27       	eor	r31, r31
    1238:	e6 1b       	sub	r30, r22
    123a:	f7 0b       	sbc	r31, r23
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	50 e0       	ldi	r21, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	a0 e0       	ldi	r26, 0x00	; 0
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	0e 2e       	mov	r0, r30
    124e:	04 c0       	rjmp	.+8      	; 0x1258 <__floatunsisf+0x6c>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	aa 1f       	adc	r26, r26
    1256:	bb 1f       	adc	r27, r27
    1258:	0a 94       	dec	r0
    125a:	d2 f7       	brpl	.-12     	; 0x1250 <__floatunsisf+0x64>
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	a1 09       	sbc	r26, r1
    1260:	b1 09       	sbc	r27, r1
    1262:	8e 21       	and	r24, r14
    1264:	9f 21       	and	r25, r15
    1266:	a0 23       	and	r26, r16
    1268:	b1 23       	and	r27, r17
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	a1 05       	cpc	r26, r1
    126e:	b1 05       	cpc	r27, r1
    1270:	21 f0       	breq	.+8      	; 0x127a <__floatunsisf+0x8e>
    1272:	21 e0       	ldi	r18, 0x01	; 1
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	40 e0       	ldi	r20, 0x00	; 0
    1278:	50 e0       	ldi	r21, 0x00	; 0
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <__floatunsisf+0x98>
    127c:	16 95       	lsr	r17
    127e:	07 95       	ror	r16
    1280:	f7 94       	ror	r15
    1282:	e7 94       	ror	r14
    1284:	ea 95       	dec	r30
    1286:	d2 f7       	brpl	.-12     	; 0x127c <__floatunsisf+0x90>
    1288:	2e 29       	or	r18, r14
    128a:	3f 29       	or	r19, r15
    128c:	40 2b       	or	r20, r16
    128e:	51 2b       	or	r21, r17
    1290:	2d 83       	std	Y+5, r18	; 0x05
    1292:	3e 83       	std	Y+6, r19	; 0x06
    1294:	4f 83       	std	Y+7, r20	; 0x07
    1296:	58 87       	std	Y+8, r21	; 0x08
    1298:	8e e1       	ldi	r24, 0x1E	; 30
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	86 1b       	sub	r24, r22
    129e:	97 0b       	sbc	r25, r23
    12a0:	9c 83       	std	Y+4, r25	; 0x04
    12a2:	8b 83       	std	Y+3, r24	; 0x03
    12a4:	13 c0       	rjmp	.+38     	; 0x12cc <__floatunsisf+0xe0>
    12a6:	61 15       	cp	r22, r1
    12a8:	71 05       	cpc	r23, r1
    12aa:	81 f0       	breq	.+32     	; 0x12cc <__floatunsisf+0xe0>
    12ac:	06 2e       	mov	r0, r22
    12ae:	04 c0       	rjmp	.+8      	; 0x12b8 <__floatunsisf+0xcc>
    12b0:	ee 0c       	add	r14, r14
    12b2:	ff 1c       	adc	r15, r15
    12b4:	00 1f       	adc	r16, r16
    12b6:	11 1f       	adc	r17, r17
    12b8:	0a 94       	dec	r0
    12ba:	d2 f7       	brpl	.-12     	; 0x12b0 <__floatunsisf+0xc4>
    12bc:	ed 82       	std	Y+5, r14	; 0x05
    12be:	fe 82       	std	Y+6, r15	; 0x06
    12c0:	0f 83       	std	Y+7, r16	; 0x07
    12c2:	18 87       	std	Y+8, r17	; 0x08
    12c4:	c6 1a       	sub	r12, r22
    12c6:	d7 0a       	sbc	r13, r23
    12c8:	dc 82       	std	Y+4, r13	; 0x04
    12ca:	cb 82       	std	Y+3, r12	; 0x03
    12cc:	1a 82       	std	Y+2, r1	; 0x02
    12ce:	ce 01       	movw	r24, r28
    12d0:	01 96       	adiw	r24, 0x01	; 1
    12d2:	0e 94 be 09 	call	0x137c	; 0x137c <__pack_f>
    12d6:	28 96       	adiw	r28, 0x08	; 8
    12d8:	e8 e0       	ldi	r30, 0x08	; 8
    12da:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__epilogue_restores__+0x14>

000012de <__clzsi2>:
    12de:	ef 92       	push	r14
    12e0:	ff 92       	push	r15
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	7b 01       	movw	r14, r22
    12e8:	8c 01       	movw	r16, r24
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	e8 16       	cp	r14, r24
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	f8 06       	cpc	r15, r24
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	08 07       	cpc	r16, r24
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	18 07       	cpc	r17, r24
    12fa:	88 f4       	brcc	.+34     	; 0x131e <__clzsi2+0x40>
    12fc:	8f ef       	ldi	r24, 0xFF	; 255
    12fe:	e8 16       	cp	r14, r24
    1300:	f1 04       	cpc	r15, r1
    1302:	01 05       	cpc	r16, r1
    1304:	11 05       	cpc	r17, r1
    1306:	31 f0       	breq	.+12     	; 0x1314 <__clzsi2+0x36>
    1308:	28 f0       	brcs	.+10     	; 0x1314 <__clzsi2+0x36>
    130a:	88 e0       	ldi	r24, 0x08	; 8
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	a0 e0       	ldi	r26, 0x00	; 0
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	17 c0       	rjmp	.+46     	; 0x1342 <__clzsi2+0x64>
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	a0 e0       	ldi	r26, 0x00	; 0
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	12 c0       	rjmp	.+36     	; 0x1342 <__clzsi2+0x64>
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	e8 16       	cp	r14, r24
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	f8 06       	cpc	r15, r24
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	08 07       	cpc	r16, r24
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	18 07       	cpc	r17, r24
    132e:	28 f0       	brcs	.+10     	; 0x133a <__clzsi2+0x5c>
    1330:	88 e1       	ldi	r24, 0x18	; 24
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	a0 e0       	ldi	r26, 0x00	; 0
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	04 c0       	rjmp	.+8      	; 0x1342 <__clzsi2+0x64>
    133a:	80 e1       	ldi	r24, 0x10	; 16
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	a0 e0       	ldi	r26, 0x00	; 0
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	20 e2       	ldi	r18, 0x20	; 32
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	50 e0       	ldi	r21, 0x00	; 0
    134a:	28 1b       	sub	r18, r24
    134c:	39 0b       	sbc	r19, r25
    134e:	4a 0b       	sbc	r20, r26
    1350:	5b 0b       	sbc	r21, r27
    1352:	04 c0       	rjmp	.+8      	; 0x135c <__clzsi2+0x7e>
    1354:	16 95       	lsr	r17
    1356:	07 95       	ror	r16
    1358:	f7 94       	ror	r15
    135a:	e7 94       	ror	r14
    135c:	8a 95       	dec	r24
    135e:	d2 f7       	brpl	.-12     	; 0x1354 <__clzsi2+0x76>
    1360:	f7 01       	movw	r30, r14
    1362:	e8 59       	subi	r30, 0x98	; 152
    1364:	ff 4f       	sbci	r31, 0xFF	; 255
    1366:	80 81       	ld	r24, Z
    1368:	28 1b       	sub	r18, r24
    136a:	31 09       	sbc	r19, r1
    136c:	41 09       	sbc	r20, r1
    136e:	51 09       	sbc	r21, r1
    1370:	c9 01       	movw	r24, r18
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	ff 90       	pop	r15
    1378:	ef 90       	pop	r14
    137a:	08 95       	ret

0000137c <__pack_f>:
    137c:	df 92       	push	r13
    137e:	ef 92       	push	r14
    1380:	ff 92       	push	r15
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	fc 01       	movw	r30, r24
    1388:	e4 80       	ldd	r14, Z+4	; 0x04
    138a:	f5 80       	ldd	r15, Z+5	; 0x05
    138c:	06 81       	ldd	r16, Z+6	; 0x06
    138e:	17 81       	ldd	r17, Z+7	; 0x07
    1390:	d1 80       	ldd	r13, Z+1	; 0x01
    1392:	80 81       	ld	r24, Z
    1394:	82 30       	cpi	r24, 0x02	; 2
    1396:	48 f4       	brcc	.+18     	; 0x13aa <__pack_f+0x2e>
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	a0 e1       	ldi	r26, 0x10	; 16
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e8 2a       	or	r14, r24
    13a2:	f9 2a       	or	r15, r25
    13a4:	0a 2b       	or	r16, r26
    13a6:	1b 2b       	or	r17, r27
    13a8:	a5 c0       	rjmp	.+330    	; 0x14f4 <__pack_f+0x178>
    13aa:	84 30       	cpi	r24, 0x04	; 4
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <__pack_f+0x34>
    13ae:	9f c0       	rjmp	.+318    	; 0x14ee <__pack_f+0x172>
    13b0:	82 30       	cpi	r24, 0x02	; 2
    13b2:	21 f4       	brne	.+8      	; 0x13bc <__pack_f+0x40>
    13b4:	ee 24       	eor	r14, r14
    13b6:	ff 24       	eor	r15, r15
    13b8:	87 01       	movw	r16, r14
    13ba:	05 c0       	rjmp	.+10     	; 0x13c6 <__pack_f+0x4a>
    13bc:	e1 14       	cp	r14, r1
    13be:	f1 04       	cpc	r15, r1
    13c0:	01 05       	cpc	r16, r1
    13c2:	11 05       	cpc	r17, r1
    13c4:	19 f4       	brne	.+6      	; 0x13cc <__pack_f+0x50>
    13c6:	e0 e0       	ldi	r30, 0x00	; 0
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	96 c0       	rjmp	.+300    	; 0x14f8 <__pack_f+0x17c>
    13cc:	62 81       	ldd	r22, Z+2	; 0x02
    13ce:	73 81       	ldd	r23, Z+3	; 0x03
    13d0:	9f ef       	ldi	r25, 0xFF	; 255
    13d2:	62 38       	cpi	r22, 0x82	; 130
    13d4:	79 07       	cpc	r23, r25
    13d6:	0c f0       	brlt	.+2      	; 0x13da <__pack_f+0x5e>
    13d8:	5b c0       	rjmp	.+182    	; 0x1490 <__pack_f+0x114>
    13da:	22 e8       	ldi	r18, 0x82	; 130
    13dc:	3f ef       	ldi	r19, 0xFF	; 255
    13de:	26 1b       	sub	r18, r22
    13e0:	37 0b       	sbc	r19, r23
    13e2:	2a 31       	cpi	r18, 0x1A	; 26
    13e4:	31 05       	cpc	r19, r1
    13e6:	2c f0       	brlt	.+10     	; 0x13f2 <__pack_f+0x76>
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 e0       	ldi	r20, 0x00	; 0
    13ee:	50 e0       	ldi	r21, 0x00	; 0
    13f0:	2a c0       	rjmp	.+84     	; 0x1446 <__pack_f+0xca>
    13f2:	b8 01       	movw	r22, r16
    13f4:	a7 01       	movw	r20, r14
    13f6:	02 2e       	mov	r0, r18
    13f8:	04 c0       	rjmp	.+8      	; 0x1402 <__pack_f+0x86>
    13fa:	76 95       	lsr	r23
    13fc:	67 95       	ror	r22
    13fe:	57 95       	ror	r21
    1400:	47 95       	ror	r20
    1402:	0a 94       	dec	r0
    1404:	d2 f7       	brpl	.-12     	; 0x13fa <__pack_f+0x7e>
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a0 e0       	ldi	r26, 0x00	; 0
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	04 c0       	rjmp	.+8      	; 0x1418 <__pack_f+0x9c>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	aa 1f       	adc	r26, r26
    1416:	bb 1f       	adc	r27, r27
    1418:	2a 95       	dec	r18
    141a:	d2 f7       	brpl	.-12     	; 0x1410 <__pack_f+0x94>
    141c:	01 97       	sbiw	r24, 0x01	; 1
    141e:	a1 09       	sbc	r26, r1
    1420:	b1 09       	sbc	r27, r1
    1422:	8e 21       	and	r24, r14
    1424:	9f 21       	and	r25, r15
    1426:	a0 23       	and	r26, r16
    1428:	b1 23       	and	r27, r17
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	a1 05       	cpc	r26, r1
    142e:	b1 05       	cpc	r27, r1
    1430:	21 f0       	breq	.+8      	; 0x143a <__pack_f+0xbe>
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	a0 e0       	ldi	r26, 0x00	; 0
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	9a 01       	movw	r18, r20
    143c:	ab 01       	movw	r20, r22
    143e:	28 2b       	or	r18, r24
    1440:	39 2b       	or	r19, r25
    1442:	4a 2b       	or	r20, r26
    1444:	5b 2b       	or	r21, r27
    1446:	da 01       	movw	r26, r20
    1448:	c9 01       	movw	r24, r18
    144a:	8f 77       	andi	r24, 0x7F	; 127
    144c:	90 70       	andi	r25, 0x00	; 0
    144e:	a0 70       	andi	r26, 0x00	; 0
    1450:	b0 70       	andi	r27, 0x00	; 0
    1452:	80 34       	cpi	r24, 0x40	; 64
    1454:	91 05       	cpc	r25, r1
    1456:	a1 05       	cpc	r26, r1
    1458:	b1 05       	cpc	r27, r1
    145a:	39 f4       	brne	.+14     	; 0x146a <__pack_f+0xee>
    145c:	27 ff       	sbrs	r18, 7
    145e:	09 c0       	rjmp	.+18     	; 0x1472 <__pack_f+0xf6>
    1460:	20 5c       	subi	r18, 0xC0	; 192
    1462:	3f 4f       	sbci	r19, 0xFF	; 255
    1464:	4f 4f       	sbci	r20, 0xFF	; 255
    1466:	5f 4f       	sbci	r21, 0xFF	; 255
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <__pack_f+0xf6>
    146a:	21 5c       	subi	r18, 0xC1	; 193
    146c:	3f 4f       	sbci	r19, 0xFF	; 255
    146e:	4f 4f       	sbci	r20, 0xFF	; 255
    1470:	5f 4f       	sbci	r21, 0xFF	; 255
    1472:	e0 e0       	ldi	r30, 0x00	; 0
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	20 30       	cpi	r18, 0x00	; 0
    1478:	a0 e0       	ldi	r26, 0x00	; 0
    147a:	3a 07       	cpc	r19, r26
    147c:	a0 e0       	ldi	r26, 0x00	; 0
    147e:	4a 07       	cpc	r20, r26
    1480:	a0 e4       	ldi	r26, 0x40	; 64
    1482:	5a 07       	cpc	r21, r26
    1484:	10 f0       	brcs	.+4      	; 0x148a <__pack_f+0x10e>
    1486:	e1 e0       	ldi	r30, 0x01	; 1
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	79 01       	movw	r14, r18
    148c:	8a 01       	movw	r16, r20
    148e:	27 c0       	rjmp	.+78     	; 0x14de <__pack_f+0x162>
    1490:	60 38       	cpi	r22, 0x80	; 128
    1492:	71 05       	cpc	r23, r1
    1494:	64 f5       	brge	.+88     	; 0x14ee <__pack_f+0x172>
    1496:	fb 01       	movw	r30, r22
    1498:	e1 58       	subi	r30, 0x81	; 129
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	d8 01       	movw	r26, r16
    149e:	c7 01       	movw	r24, r14
    14a0:	8f 77       	andi	r24, 0x7F	; 127
    14a2:	90 70       	andi	r25, 0x00	; 0
    14a4:	a0 70       	andi	r26, 0x00	; 0
    14a6:	b0 70       	andi	r27, 0x00	; 0
    14a8:	80 34       	cpi	r24, 0x40	; 64
    14aa:	91 05       	cpc	r25, r1
    14ac:	a1 05       	cpc	r26, r1
    14ae:	b1 05       	cpc	r27, r1
    14b0:	39 f4       	brne	.+14     	; 0x14c0 <__pack_f+0x144>
    14b2:	e7 fe       	sbrs	r14, 7
    14b4:	0d c0       	rjmp	.+26     	; 0x14d0 <__pack_f+0x154>
    14b6:	80 e4       	ldi	r24, 0x40	; 64
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	a0 e0       	ldi	r26, 0x00	; 0
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	04 c0       	rjmp	.+8      	; 0x14c8 <__pack_f+0x14c>
    14c0:	8f e3       	ldi	r24, 0x3F	; 63
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	a0 e0       	ldi	r26, 0x00	; 0
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e8 0e       	add	r14, r24
    14ca:	f9 1e       	adc	r15, r25
    14cc:	0a 1f       	adc	r16, r26
    14ce:	1b 1f       	adc	r17, r27
    14d0:	17 ff       	sbrs	r17, 7
    14d2:	05 c0       	rjmp	.+10     	; 0x14de <__pack_f+0x162>
    14d4:	16 95       	lsr	r17
    14d6:	07 95       	ror	r16
    14d8:	f7 94       	ror	r15
    14da:	e7 94       	ror	r14
    14dc:	31 96       	adiw	r30, 0x01	; 1
    14de:	87 e0       	ldi	r24, 0x07	; 7
    14e0:	16 95       	lsr	r17
    14e2:	07 95       	ror	r16
    14e4:	f7 94       	ror	r15
    14e6:	e7 94       	ror	r14
    14e8:	8a 95       	dec	r24
    14ea:	d1 f7       	brne	.-12     	; 0x14e0 <__pack_f+0x164>
    14ec:	05 c0       	rjmp	.+10     	; 0x14f8 <__pack_f+0x17c>
    14ee:	ee 24       	eor	r14, r14
    14f0:	ff 24       	eor	r15, r15
    14f2:	87 01       	movw	r16, r14
    14f4:	ef ef       	ldi	r30, 0xFF	; 255
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	6e 2f       	mov	r22, r30
    14fa:	67 95       	ror	r22
    14fc:	66 27       	eor	r22, r22
    14fe:	67 95       	ror	r22
    1500:	90 2f       	mov	r25, r16
    1502:	9f 77       	andi	r25, 0x7F	; 127
    1504:	d7 94       	ror	r13
    1506:	dd 24       	eor	r13, r13
    1508:	d7 94       	ror	r13
    150a:	8e 2f       	mov	r24, r30
    150c:	86 95       	lsr	r24
    150e:	49 2f       	mov	r20, r25
    1510:	46 2b       	or	r20, r22
    1512:	58 2f       	mov	r21, r24
    1514:	5d 29       	or	r21, r13
    1516:	b7 01       	movw	r22, r14
    1518:	ca 01       	movw	r24, r20
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	ff 90       	pop	r15
    1520:	ef 90       	pop	r14
    1522:	df 90       	pop	r13
    1524:	08 95       	ret

00001526 <__unpack_f>:
    1526:	fc 01       	movw	r30, r24
    1528:	db 01       	movw	r26, r22
    152a:	40 81       	ld	r20, Z
    152c:	51 81       	ldd	r21, Z+1	; 0x01
    152e:	22 81       	ldd	r18, Z+2	; 0x02
    1530:	62 2f       	mov	r22, r18
    1532:	6f 77       	andi	r22, 0x7F	; 127
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	22 1f       	adc	r18, r18
    1538:	22 27       	eor	r18, r18
    153a:	22 1f       	adc	r18, r18
    153c:	93 81       	ldd	r25, Z+3	; 0x03
    153e:	89 2f       	mov	r24, r25
    1540:	88 0f       	add	r24, r24
    1542:	82 2b       	or	r24, r18
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	99 1f       	adc	r25, r25
    154a:	99 27       	eor	r25, r25
    154c:	99 1f       	adc	r25, r25
    154e:	11 96       	adiw	r26, 0x01	; 1
    1550:	9c 93       	st	X, r25
    1552:	11 97       	sbiw	r26, 0x01	; 1
    1554:	21 15       	cp	r18, r1
    1556:	31 05       	cpc	r19, r1
    1558:	a9 f5       	brne	.+106    	; 0x15c4 <__unpack_f+0x9e>
    155a:	41 15       	cp	r20, r1
    155c:	51 05       	cpc	r21, r1
    155e:	61 05       	cpc	r22, r1
    1560:	71 05       	cpc	r23, r1
    1562:	11 f4       	brne	.+4      	; 0x1568 <__unpack_f+0x42>
    1564:	82 e0       	ldi	r24, 0x02	; 2
    1566:	37 c0       	rjmp	.+110    	; 0x15d6 <__unpack_f+0xb0>
    1568:	82 e8       	ldi	r24, 0x82	; 130
    156a:	9f ef       	ldi	r25, 0xFF	; 255
    156c:	13 96       	adiw	r26, 0x03	; 3
    156e:	9c 93       	st	X, r25
    1570:	8e 93       	st	-X, r24
    1572:	12 97       	sbiw	r26, 0x02	; 2
    1574:	9a 01       	movw	r18, r20
    1576:	ab 01       	movw	r20, r22
    1578:	67 e0       	ldi	r22, 0x07	; 7
    157a:	22 0f       	add	r18, r18
    157c:	33 1f       	adc	r19, r19
    157e:	44 1f       	adc	r20, r20
    1580:	55 1f       	adc	r21, r21
    1582:	6a 95       	dec	r22
    1584:	d1 f7       	brne	.-12     	; 0x157a <__unpack_f+0x54>
    1586:	83 e0       	ldi	r24, 0x03	; 3
    1588:	8c 93       	st	X, r24
    158a:	0d c0       	rjmp	.+26     	; 0x15a6 <__unpack_f+0x80>
    158c:	22 0f       	add	r18, r18
    158e:	33 1f       	adc	r19, r19
    1590:	44 1f       	adc	r20, r20
    1592:	55 1f       	adc	r21, r21
    1594:	12 96       	adiw	r26, 0x02	; 2
    1596:	8d 91       	ld	r24, X+
    1598:	9c 91       	ld	r25, X
    159a:	13 97       	sbiw	r26, 0x03	; 3
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	13 96       	adiw	r26, 0x03	; 3
    15a0:	9c 93       	st	X, r25
    15a2:	8e 93       	st	-X, r24
    15a4:	12 97       	sbiw	r26, 0x02	; 2
    15a6:	20 30       	cpi	r18, 0x00	; 0
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	38 07       	cpc	r19, r24
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	48 07       	cpc	r20, r24
    15b0:	80 e4       	ldi	r24, 0x40	; 64
    15b2:	58 07       	cpc	r21, r24
    15b4:	58 f3       	brcs	.-42     	; 0x158c <__unpack_f+0x66>
    15b6:	14 96       	adiw	r26, 0x04	; 4
    15b8:	2d 93       	st	X+, r18
    15ba:	3d 93       	st	X+, r19
    15bc:	4d 93       	st	X+, r20
    15be:	5c 93       	st	X, r21
    15c0:	17 97       	sbiw	r26, 0x07	; 7
    15c2:	08 95       	ret
    15c4:	2f 3f       	cpi	r18, 0xFF	; 255
    15c6:	31 05       	cpc	r19, r1
    15c8:	79 f4       	brne	.+30     	; 0x15e8 <__unpack_f+0xc2>
    15ca:	41 15       	cp	r20, r1
    15cc:	51 05       	cpc	r21, r1
    15ce:	61 05       	cpc	r22, r1
    15d0:	71 05       	cpc	r23, r1
    15d2:	19 f4       	brne	.+6      	; 0x15da <__unpack_f+0xb4>
    15d4:	84 e0       	ldi	r24, 0x04	; 4
    15d6:	8c 93       	st	X, r24
    15d8:	08 95       	ret
    15da:	64 ff       	sbrs	r22, 4
    15dc:	03 c0       	rjmp	.+6      	; 0x15e4 <__unpack_f+0xbe>
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	8c 93       	st	X, r24
    15e2:	12 c0       	rjmp	.+36     	; 0x1608 <__unpack_f+0xe2>
    15e4:	1c 92       	st	X, r1
    15e6:	10 c0       	rjmp	.+32     	; 0x1608 <__unpack_f+0xe2>
    15e8:	2f 57       	subi	r18, 0x7F	; 127
    15ea:	30 40       	sbci	r19, 0x00	; 0
    15ec:	13 96       	adiw	r26, 0x03	; 3
    15ee:	3c 93       	st	X, r19
    15f0:	2e 93       	st	-X, r18
    15f2:	12 97       	sbiw	r26, 0x02	; 2
    15f4:	83 e0       	ldi	r24, 0x03	; 3
    15f6:	8c 93       	st	X, r24
    15f8:	87 e0       	ldi	r24, 0x07	; 7
    15fa:	44 0f       	add	r20, r20
    15fc:	55 1f       	adc	r21, r21
    15fe:	66 1f       	adc	r22, r22
    1600:	77 1f       	adc	r23, r23
    1602:	8a 95       	dec	r24
    1604:	d1 f7       	brne	.-12     	; 0x15fa <__unpack_f+0xd4>
    1606:	70 64       	ori	r23, 0x40	; 64
    1608:	14 96       	adiw	r26, 0x04	; 4
    160a:	4d 93       	st	X+, r20
    160c:	5d 93       	st	X+, r21
    160e:	6d 93       	st	X+, r22
    1610:	7c 93       	st	X, r23
    1612:	17 97       	sbiw	r26, 0x07	; 7
    1614:	08 95       	ret

00001616 <__fpcmp_parts_f>:
    1616:	1f 93       	push	r17
    1618:	dc 01       	movw	r26, r24
    161a:	fb 01       	movw	r30, r22
    161c:	9c 91       	ld	r25, X
    161e:	92 30       	cpi	r25, 0x02	; 2
    1620:	08 f4       	brcc	.+2      	; 0x1624 <__fpcmp_parts_f+0xe>
    1622:	47 c0       	rjmp	.+142    	; 0x16b2 <__fpcmp_parts_f+0x9c>
    1624:	80 81       	ld	r24, Z
    1626:	82 30       	cpi	r24, 0x02	; 2
    1628:	08 f4       	brcc	.+2      	; 0x162c <__fpcmp_parts_f+0x16>
    162a:	43 c0       	rjmp	.+134    	; 0x16b2 <__fpcmp_parts_f+0x9c>
    162c:	94 30       	cpi	r25, 0x04	; 4
    162e:	51 f4       	brne	.+20     	; 0x1644 <__fpcmp_parts_f+0x2e>
    1630:	11 96       	adiw	r26, 0x01	; 1
    1632:	1c 91       	ld	r17, X
    1634:	84 30       	cpi	r24, 0x04	; 4
    1636:	99 f5       	brne	.+102    	; 0x169e <__fpcmp_parts_f+0x88>
    1638:	81 81       	ldd	r24, Z+1	; 0x01
    163a:	68 2f       	mov	r22, r24
    163c:	70 e0       	ldi	r23, 0x00	; 0
    163e:	61 1b       	sub	r22, r17
    1640:	71 09       	sbc	r23, r1
    1642:	3f c0       	rjmp	.+126    	; 0x16c2 <__fpcmp_parts_f+0xac>
    1644:	84 30       	cpi	r24, 0x04	; 4
    1646:	21 f0       	breq	.+8      	; 0x1650 <__fpcmp_parts_f+0x3a>
    1648:	92 30       	cpi	r25, 0x02	; 2
    164a:	31 f4       	brne	.+12     	; 0x1658 <__fpcmp_parts_f+0x42>
    164c:	82 30       	cpi	r24, 0x02	; 2
    164e:	b9 f1       	breq	.+110    	; 0x16be <__fpcmp_parts_f+0xa8>
    1650:	81 81       	ldd	r24, Z+1	; 0x01
    1652:	88 23       	and	r24, r24
    1654:	89 f1       	breq	.+98     	; 0x16b8 <__fpcmp_parts_f+0xa2>
    1656:	2d c0       	rjmp	.+90     	; 0x16b2 <__fpcmp_parts_f+0x9c>
    1658:	11 96       	adiw	r26, 0x01	; 1
    165a:	1c 91       	ld	r17, X
    165c:	11 97       	sbiw	r26, 0x01	; 1
    165e:	82 30       	cpi	r24, 0x02	; 2
    1660:	f1 f0       	breq	.+60     	; 0x169e <__fpcmp_parts_f+0x88>
    1662:	81 81       	ldd	r24, Z+1	; 0x01
    1664:	18 17       	cp	r17, r24
    1666:	d9 f4       	brne	.+54     	; 0x169e <__fpcmp_parts_f+0x88>
    1668:	12 96       	adiw	r26, 0x02	; 2
    166a:	2d 91       	ld	r18, X+
    166c:	3c 91       	ld	r19, X
    166e:	13 97       	sbiw	r26, 0x03	; 3
    1670:	82 81       	ldd	r24, Z+2	; 0x02
    1672:	93 81       	ldd	r25, Z+3	; 0x03
    1674:	82 17       	cp	r24, r18
    1676:	93 07       	cpc	r25, r19
    1678:	94 f0       	brlt	.+36     	; 0x169e <__fpcmp_parts_f+0x88>
    167a:	28 17       	cp	r18, r24
    167c:	39 07       	cpc	r19, r25
    167e:	bc f0       	brlt	.+46     	; 0x16ae <__fpcmp_parts_f+0x98>
    1680:	14 96       	adiw	r26, 0x04	; 4
    1682:	8d 91       	ld	r24, X+
    1684:	9d 91       	ld	r25, X+
    1686:	0d 90       	ld	r0, X+
    1688:	bc 91       	ld	r27, X
    168a:	a0 2d       	mov	r26, r0
    168c:	24 81       	ldd	r18, Z+4	; 0x04
    168e:	35 81       	ldd	r19, Z+5	; 0x05
    1690:	46 81       	ldd	r20, Z+6	; 0x06
    1692:	57 81       	ldd	r21, Z+7	; 0x07
    1694:	28 17       	cp	r18, r24
    1696:	39 07       	cpc	r19, r25
    1698:	4a 07       	cpc	r20, r26
    169a:	5b 07       	cpc	r21, r27
    169c:	18 f4       	brcc	.+6      	; 0x16a4 <__fpcmp_parts_f+0x8e>
    169e:	11 23       	and	r17, r17
    16a0:	41 f0       	breq	.+16     	; 0x16b2 <__fpcmp_parts_f+0x9c>
    16a2:	0a c0       	rjmp	.+20     	; 0x16b8 <__fpcmp_parts_f+0xa2>
    16a4:	82 17       	cp	r24, r18
    16a6:	93 07       	cpc	r25, r19
    16a8:	a4 07       	cpc	r26, r20
    16aa:	b5 07       	cpc	r27, r21
    16ac:	40 f4       	brcc	.+16     	; 0x16be <__fpcmp_parts_f+0xa8>
    16ae:	11 23       	and	r17, r17
    16b0:	19 f0       	breq	.+6      	; 0x16b8 <__fpcmp_parts_f+0xa2>
    16b2:	61 e0       	ldi	r22, 0x01	; 1
    16b4:	70 e0       	ldi	r23, 0x00	; 0
    16b6:	05 c0       	rjmp	.+10     	; 0x16c2 <__fpcmp_parts_f+0xac>
    16b8:	6f ef       	ldi	r22, 0xFF	; 255
    16ba:	7f ef       	ldi	r23, 0xFF	; 255
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <__fpcmp_parts_f+0xac>
    16be:	60 e0       	ldi	r22, 0x00	; 0
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	cb 01       	movw	r24, r22
    16c4:	1f 91       	pop	r17
    16c6:	08 95       	ret

000016c8 <__eerd_word>:
    16c8:	df 92       	push	r13
    16ca:	ef 92       	push	r14
    16cc:	ff 92       	push	r15
    16ce:	0f 93       	push	r16
    16d0:	1f 93       	push	r17
    16d2:	7b 01       	movw	r14, r22
    16d4:	8c 01       	movw	r16, r24
    16d6:	fb 01       	movw	r30, r22
    16d8:	09 95       	icall
    16da:	d8 2e       	mov	r13, r24
    16dc:	c8 01       	movw	r24, r16
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	f7 01       	movw	r30, r14
    16e2:	09 95       	icall
    16e4:	98 2f       	mov	r25, r24
    16e6:	8d 2d       	mov	r24, r13
    16e8:	1f 91       	pop	r17
    16ea:	0f 91       	pop	r16
    16ec:	ff 90       	pop	r15
    16ee:	ef 90       	pop	r14
    16f0:	df 90       	pop	r13
    16f2:	08 95       	ret

000016f4 <__eewr_word>:
    16f4:	df 92       	push	r13
    16f6:	ef 92       	push	r14
    16f8:	ff 92       	push	r15
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	d7 2e       	mov	r13, r23
    1700:	7a 01       	movw	r14, r20
    1702:	8c 01       	movw	r16, r24
    1704:	fa 01       	movw	r30, r20
    1706:	09 95       	icall
    1708:	6d 2d       	mov	r22, r13
    170a:	c8 01       	movw	r24, r16
    170c:	01 96       	adiw	r24, 0x01	; 1
    170e:	f7 01       	movw	r30, r14
    1710:	09 95       	icall
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	ff 90       	pop	r15
    1718:	ef 90       	pop	r14
    171a:	df 90       	pop	r13
    171c:	08 95       	ret

0000171e <__udivmodhi4>:
    171e:	aa 1b       	sub	r26, r26
    1720:	bb 1b       	sub	r27, r27
    1722:	51 e1       	ldi	r21, 0x11	; 17
    1724:	07 c0       	rjmp	.+14     	; 0x1734 <__udivmodhi4_ep>

00001726 <__udivmodhi4_loop>:
    1726:	aa 1f       	adc	r26, r26
    1728:	bb 1f       	adc	r27, r27
    172a:	a6 17       	cp	r26, r22
    172c:	b7 07       	cpc	r27, r23
    172e:	10 f0       	brcs	.+4      	; 0x1734 <__udivmodhi4_ep>
    1730:	a6 1b       	sub	r26, r22
    1732:	b7 0b       	sbc	r27, r23

00001734 <__udivmodhi4_ep>:
    1734:	88 1f       	adc	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	5a 95       	dec	r21
    173a:	a9 f7       	brne	.-22     	; 0x1726 <__udivmodhi4_loop>
    173c:	80 95       	com	r24
    173e:	90 95       	com	r25
    1740:	bc 01       	movw	r22, r24
    1742:	cd 01       	movw	r24, r26
    1744:	08 95       	ret

00001746 <__prologue_saves__>:
    1746:	2f 92       	push	r2
    1748:	3f 92       	push	r3
    174a:	4f 92       	push	r4
    174c:	5f 92       	push	r5
    174e:	6f 92       	push	r6
    1750:	7f 92       	push	r7
    1752:	8f 92       	push	r8
    1754:	9f 92       	push	r9
    1756:	af 92       	push	r10
    1758:	bf 92       	push	r11
    175a:	cf 92       	push	r12
    175c:	df 92       	push	r13
    175e:	ef 92       	push	r14
    1760:	ff 92       	push	r15
    1762:	0f 93       	push	r16
    1764:	1f 93       	push	r17
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	ca 1b       	sub	r28, r26
    1770:	db 0b       	sbc	r29, r27
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	f8 94       	cli
    1776:	de bf       	out	0x3e, r29	; 62
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	cd bf       	out	0x3d, r28	; 61
    177c:	09 94       	ijmp

0000177e <__epilogue_restores__>:
    177e:	2a 88       	ldd	r2, Y+18	; 0x12
    1780:	39 88       	ldd	r3, Y+17	; 0x11
    1782:	48 88       	ldd	r4, Y+16	; 0x10
    1784:	5f 84       	ldd	r5, Y+15	; 0x0f
    1786:	6e 84       	ldd	r6, Y+14	; 0x0e
    1788:	7d 84       	ldd	r7, Y+13	; 0x0d
    178a:	8c 84       	ldd	r8, Y+12	; 0x0c
    178c:	9b 84       	ldd	r9, Y+11	; 0x0b
    178e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1790:	b9 84       	ldd	r11, Y+9	; 0x09
    1792:	c8 84       	ldd	r12, Y+8	; 0x08
    1794:	df 80       	ldd	r13, Y+7	; 0x07
    1796:	ee 80       	ldd	r14, Y+6	; 0x06
    1798:	fd 80       	ldd	r15, Y+5	; 0x05
    179a:	0c 81       	ldd	r16, Y+4	; 0x04
    179c:	1b 81       	ldd	r17, Y+3	; 0x03
    179e:	aa 81       	ldd	r26, Y+2	; 0x02
    17a0:	b9 81       	ldd	r27, Y+1	; 0x01
    17a2:	ce 0f       	add	r28, r30
    17a4:	d1 1d       	adc	r29, r1
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	cd bf       	out	0x3d, r28	; 61
    17b0:	ed 01       	movw	r28, r26
    17b2:	08 95       	ret

000017b4 <_exit>:
    17b4:	f8 94       	cli

000017b6 <__stop_program>:
    17b6:	ff cf       	rjmp	.-2      	; 0x17b6 <__stop_program>
