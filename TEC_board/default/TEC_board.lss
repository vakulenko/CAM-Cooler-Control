
TEC_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001712  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00001712  000017c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  00800168  00800168  000018ce  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  000018ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000001c0  00000000  00000000  000018d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000406  00000000  00000000  00001a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d41  00000000  00000000  00001e97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015ee  00000000  00000000  00004bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ad8  00000000  00000000  000061c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  00007ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000518  00000000  00000000  00007fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000daf  00000000  00000000  000084d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  00009287  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a3 39       	cpi	r26, 0x93	; 147
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e1       	ldi	r30, 0x12	; 18
      78:	f7 e1       	ldi	r31, 0x17	; 23
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 87 02 	call	0x50e	; 0x50e <main>
      8a:	0c 94 87 0b 	jmp	0x170e	; 0x170e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <uartInit>:
//------------------------------------------------------------------------------------
//UART

void uartInit(void)
{
	UBRRH = UART_BAUDRATE_H;		// Init UART baudrate
      92:	10 bc       	out	0x20, r1	; 32
	UBRRL = UART_BAUDRATE_L;
      94:	83 e3       	ldi	r24, 0x33	; 51
      96:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1<<RXEN)|(1<<TXEN)|(1 << RXCIE);	// TX, RX enable, RX interrupt enable
      98:	88 e9       	ldi	r24, 0x98	; 152
      9a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
      9c:	86 e8       	ldi	r24, 0x86	; 134
      9e:	80 bd       	out	0x20, r24	; 32
	return;
}
      a0:	08 95       	ret

000000a2 <uartTransmitByte>:

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
      a2:	5d 9b       	sbis	0x0b, 5	; 11
      a4:	fe cf       	rjmp	.-4      	; 0xa2 <uartTransmitByte>
	UDR = data;
      a6:	8c b9       	out	0x0c, r24	; 12
	return;
}
      a8:	08 95       	ret

000000aa <uartReceiveByte>:

//Receive byte thought UART
unsigned char uartReceiveByte (void)
{

	while ( !(UCSRA & (1<<RXC)) )
      aa:	5f 9b       	sbis	0x0b, 7	; 11
      ac:	fe cf       	rjmp	.-4      	; 0xaa <uartReceiveByte>
	;
	return UDR;
      ae:	8c b1       	in	r24, 0x0c	; 12
}
      b0:	08 95       	ret

000000b2 <uartTransmitMessage>:

//Transmit string to UART
void uartTransmitMessage(char* msg)
{ unsigned char i;
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	04 c0       	rjmp	.+8      	; 0xbe <uartTransmitMessage+0xc>
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
      b6:	5d 9b       	sbis	0x0b, 5	; 11
      b8:	fe cf       	rjmp	.-4      	; 0xb6 <uartTransmitMessage+0x4>
	UDR = data;
      ba:	ec b9       	out	0x0c, r30	; 12
	i=0;

	while ((i<256)&(msg[i]!=0x00) )
	{
		uartTransmitByte(msg[i]);
		i++;
      bc:	2f 5f       	subi	r18, 0xFF	; 255
//Transmit string to UART
void uartTransmitMessage(char* msg)
{ unsigned char i;
	i=0;

	while ((i<256)&(msg[i]!=0x00) )
      be:	fc 01       	movw	r30, r24
      c0:	e2 0f       	add	r30, r18
      c2:	f1 1d       	adc	r31, r1
      c4:	e0 81       	ld	r30, Z
      c6:	ee 23       	and	r30, r30
      c8:	b1 f7       	brne	.-20     	; 0xb6 <uartTransmitMessage+0x4>
	{
		uartTransmitByte(msg[i]);
		i++;
	}
	return;
}
      ca:	08 95       	ret

000000cc <initPWM>:
//------------------------------------------------------------------------------------
//PWM

void initPWM (void)
{
	TEC_PORT&=~(1<<TEC_PIN);
      cc:	95 98       	cbi	0x12, 5	; 18
	TEC_DDR|=(1<<TEC_PIN);
      ce:	8d 9a       	sbi	0x11, 5	; 17

	TCCR1A|=(1<<WGM10);
      d0:	8f b5       	in	r24, 0x2f	; 47
      d2:	81 60       	ori	r24, 0x01	; 1
      d4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM12)|(1<<CS10);
      d6:	8e b5       	in	r24, 0x2e	; 46
      d8:	89 60       	ori	r24, 0x09	; 9
      da:	8e bd       	out	0x2e, r24	; 46

	OCR1AL=0x00;
      dc:	1a bc       	out	0x2a, r1	; 42
	OCR1BL=0x00;
      de:	18 bc       	out	0x28, r1	; 40
	return;
}
      e0:	08 95       	ret

000000e2 <offPWM>:

void offPWM()
{
	TCCR1A&=~(1<<COM1A1);
      e2:	8f b5       	in	r24, 0x2f	; 47
      e4:	8f 77       	andi	r24, 0x7F	; 127
      e6:	8f bd       	out	0x2f, r24	; 47
	return;
}
      e8:	08 95       	ret

000000ea <onPWM>:

void onPWM()
{
	TCCR1A|=(1<<COM1A1);
      ea:	8f b5       	in	r24, 0x2f	; 47
      ec:	80 68       	ori	r24, 0x80	; 128
      ee:	8f bd       	out	0x2f, r24	; 47
	return;
}
      f0:	08 95       	ret

000000f2 <setPWM>:

void setPWM (uint8_t data)
{
	OCR1AL=data;
      f2:	8a bd       	out	0x2a, r24	; 42
	if (data==0) offPWM();
      f4:	88 23       	and	r24, r24
      f6:	19 f4       	brne	.+6      	; 0xfe <setPWM+0xc>
	return;
}

void offPWM()
{
	TCCR1A&=~(1<<COM1A1);
      f8:	8f b5       	in	r24, 0x2f	; 47
      fa:	8f 77       	andi	r24, 0x7F	; 127
      fc:	02 c0       	rjmp	.+4      	; 0x102 <setPWM+0x10>
	return;
}

void onPWM()
{
	TCCR1A|=(1<<COM1A1);
      fe:	8f b5       	in	r24, 0x2f	; 47
     100:	80 68       	ori	r24, 0x80	; 128
     102:	8f bd       	out	0x2f, r24	; 47
     104:	08 95       	ret

00000106 <getPWM>:
	return;
}

uint8_t getPWM (void)
{
	return OCR1AL;
     106:	8a b5       	in	r24, 0x2a	; 42
}
     108:	08 95       	ret

0000010a <clearRXBuf>:

//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
     10a:	ee e7       	ldi	r30, 0x7E	; 126
     10c:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     10e:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	e9 38       	cpi	r30, 0x89	; 137
     114:	f8 07       	cpc	r31, r24
     116:	d9 f7       	brne	.-10     	; 0x10e <clearRXBuf+0x4>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     118:	10 92 69 01 	sts	0x0169, r1
	return;
}
     11c:	08 95       	ret

0000011e <clearTXBuf>:

void clearTXBuf (void)
{
     11e:	ec e6       	ldi	r30, 0x6C	; 108
     120:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	txBuf[i]=0;
     122:	11 92       	st	Z+, r1
}

void clearTXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	e7 37       	cpi	r30, 0x77	; 119
     128:	f8 07       	cpc	r31, r24
     12a:	d9 f7       	brne	.-10     	; 0x122 <clearTXBuf+0x4>
	txBuf[i]=0;
	return;
}
     12c:	08 95       	ret

0000012e <clearBuf>:

void clearBuf (void)
{
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=txBuf[i]=0;
     132:	fc 01       	movw	r30, r24
     134:	e4 59       	subi	r30, 0x94	; 148
     136:	fe 4f       	sbci	r31, 0xFE	; 254
     138:	10 82       	st	Z, r1
     13a:	fc 01       	movw	r30, r24
     13c:	e2 58       	subi	r30, 0x82	; 130
     13e:	fe 4f       	sbci	r31, 0xFE	; 254
     140:	10 82       	st	Z, r1
     142:	01 96       	adiw	r24, 0x01	; 1
}

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     144:	8b 30       	cpi	r24, 0x0B	; 11
     146:	91 05       	cpc	r25, r1
     148:	a1 f7       	brne	.-24     	; 0x132 <clearBuf+0x4>
	rxBuf[i]=txBuf[i]=0;
	return;
}
     14a:	08 95       	ret

0000014c <__vector_11>:

//receive packet to RX buffer
ISR(USART_RXC_vect)
{
     14c:	1f 92       	push	r1
     14e:	0f 92       	push	r0
     150:	0f b6       	in	r0, 0x3f	; 63
     152:	0f 92       	push	r0
     154:	11 24       	eor	r1, r1
     156:	2f 93       	push	r18
     158:	3f 93       	push	r19
     15a:	4f 93       	push	r20
     15c:	6f 93       	push	r22
     15e:	7f 93       	push	r23
     160:	8f 93       	push	r24
     162:	9f 93       	push	r25
     164:	ef 93       	push	r30
     166:	ff 93       	push	r31
	uint16_t i=0;

	if (packetReceived!=0)
     168:	80 91 68 01 	lds	r24, 0x0168
     16c:	88 23       	and	r24, r24
     16e:	11 f0       	breq	.+4      	; 0x174 <__vector_11+0x28>
	{
		i=UDR;
     170:	8c b1       	in	r24, 0x0c	; 12
     172:	25 c0       	rjmp	.+74     	; 0x1be <__vector_11+0x72>
		return;
	}

	rxBuf[0]=UDR;
     174:	8c b1       	in	r24, 0x0c	; 12
     176:	80 93 7e 01 	sts	0x017E, r24
	currentRXPacketLen=1;
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	80 93 69 01 	sts	0x0169, r24
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	41 e0       	ldi	r20, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     186:	61 e0       	ldi	r22, 0x01	; 1
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	09 c0       	rjmp	.+18     	; 0x19e <__vector_11+0x52>

	while (1)
	{
		while ( !(UCSRA & (1<<RXC)) )
		{
			if (i==10000)
     18c:	87 e2       	ldi	r24, 0x27	; 39
     18e:	20 31       	cpi	r18, 0x10	; 16
     190:	38 07       	cpc	r19, r24
     192:	81 f0       	breq	.+32     	; 0x1b4 <__vector_11+0x68>
			{
				packetReceived=1;
				return;
			}
			i++;
     194:	2f 5f       	subi	r18, 0xFF	; 255
     196:	3f 4f       	sbci	r19, 0xFF	; 255
     198:	cb 01       	movw	r24, r22
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <__vector_11+0x4e>
	rxBuf[0]=UDR;
	currentRXPacketLen=1;

	while (1)
	{
		while ( !(UCSRA & (1<<RXC)) )
     19e:	5f 9b       	sbis	0x0b, 7	; 11
     1a0:	f5 cf       	rjmp	.-22     	; 0x18c <__vector_11+0x40>
				return;
			}
			i++;
			_delay_loop_2(1);
		}
		rxBuf[currentRXPacketLen]=UDR;
     1a2:	8c b1       	in	r24, 0x0c	; 12
     1a4:	e4 2f       	mov	r30, r20
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	e2 58       	subi	r30, 0x82	; 130
     1aa:	fe 4f       	sbci	r31, 0xFE	; 254
     1ac:	80 83       	st	Z, r24
		currentRXPacketLen++;
     1ae:	4f 5f       	subi	r20, 0xFF	; 255

		if (currentRXPacketLen>=BUFF_SIZE)
     1b0:	4b 30       	cpi	r20, 0x0B	; 11
     1b2:	a8 f3       	brcs	.-22     	; 0x19e <__vector_11+0x52>
     1b4:	40 93 69 01 	sts	0x0169, r20
		{
			packetReceived=1;
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	80 93 68 01 	sts	0x0168, r24
			return;
		}
	}
}
     1be:	ff 91       	pop	r31
     1c0:	ef 91       	pop	r30
     1c2:	9f 91       	pop	r25
     1c4:	8f 91       	pop	r24
     1c6:	7f 91       	pop	r23
     1c8:	6f 91       	pop	r22
     1ca:	4f 91       	pop	r20
     1cc:	3f 91       	pop	r19
     1ce:	2f 91       	pop	r18
     1d0:	0f 90       	pop	r0
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	0f 90       	pop	r0
     1d6:	1f 90       	pop	r1
     1d8:	18 95       	reti

000001da <uartSendPacket>:

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
     1da:	ec e6       	ldi	r30, 0x6C	; 108
     1dc:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i;
	for (i=0;i<length;i++)
     1de:	70 e0       	ldi	r23, 0x00	; 0
     1e0:	6e 0f       	add	r22, r30
     1e2:	7f 1f       	adc	r23, r31
     1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <uartSendPacket+0x16>
	uartTransmitByte(txBuf[i]);
     1e6:	80 81       	ld	r24, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     1e8:	5d 9b       	sbis	0x0b, 5	; 11
     1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <uartSendPacket+0xe>
	UDR = data;
     1ec:	8c b9       	out	0x0c, r24	; 12
     1ee:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     1f0:	e6 17       	cp	r30, r22
     1f2:	f7 07       	cpc	r31, r23
     1f4:	c1 f7       	brne	.-16     	; 0x1e6 <uartSendPacket+0xc>
	uartTransmitByte(txBuf[i]);
	return;
}
     1f6:	08 95       	ret

000001f8 <crc8Block>:

//crc calculating function
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
     1f8:	fc 01       	movw	r30, r24
     1fa:	9f ef       	ldi	r25, 0xFF	; 255
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     1fc:	21 e3       	ldi	r18, 0x31	; 49
     1fe:	0e c0       	rjmp	.+28     	; 0x21c <crc8Block+0x24>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     200:	80 81       	ld	r24, Z
     202:	98 27       	eor	r25, r24
     204:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     206:	97 ff       	sbrs	r25, 7
     208:	03 c0       	rjmp	.+6      	; 0x210 <crc8Block+0x18>
     20a:	99 0f       	add	r25, r25
     20c:	92 27       	eor	r25, r18
     20e:	01 c0       	rjmp	.+2      	; 0x212 <crc8Block+0x1a>
     210:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     212:	8f 5f       	subi	r24, 0xFF	; 255
     214:	88 30       	cpi	r24, 0x08	; 8
     216:	b9 f7       	brne	.-18     	; 0x206 <crc8Block+0xe>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     218:	31 96       	adiw	r30, 0x01	; 1
     21a:	61 50       	subi	r22, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     21c:	66 23       	and	r22, r22
     21e:	81 f7       	brne	.-32     	; 0x200 <crc8Block+0x8>
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
	}	
	return crc;
}
     220:	89 2f       	mov	r24, r25
     222:	08 95       	ret

00000224 <prepareSystemStatus>:

//prepare TX buffer
void prepareSystemStatus (void)
{
	txBuf[0]='d';
     224:	84 e6       	ldi	r24, 0x64	; 100
     226:	80 93 6c 01 	sts	0x016C, r24
	txBuf[1]= sensorData[0]>>8;
     22a:	90 91 7a 01 	lds	r25, 0x017A
     22e:	80 91 7b 01 	lds	r24, 0x017B
     232:	80 93 6d 01 	sts	0x016D, r24
	txBuf[2]= sensorData[0]&0x00ff;
     236:	90 93 6e 01 	sts	0x016E, r25
	txBuf[3]= sensorData[1]>>8;
     23a:	90 91 7c 01 	lds	r25, 0x017C
     23e:	80 91 7d 01 	lds	r24, 0x017D
     242:	80 93 6f 01 	sts	0x016F, r24
	txBuf[4]= sensorData[1]&0x00ff;
     246:	90 93 70 01 	sts	0x0170, r25
	txBuf[5]= setData[0]>>8;
     24a:	90 91 78 01 	lds	r25, 0x0178
     24e:	80 91 79 01 	lds	r24, 0x0179
     252:	80 93 71 01 	sts	0x0171, r24
	txBuf[6]= setData[0]&0x00ff;
     256:	90 93 72 01 	sts	0x0172, r25
	#if PWM_MODE == 1
		txBuf[7]= getPWM();
	#else
		txBuf[7]=coolerPower;
     25a:	80 91 6b 01 	lds	r24, 0x016B
     25e:	80 93 73 01 	sts	0x0173, r24
	#endif
	txBuf[8]= errorCode;
     262:	80 91 6a 01 	lds	r24, 0x016A
     266:	80 93 74 01 	sts	0x0174, r24
	txBuf[9]= coolerState;
     26a:	80 91 8a 01 	lds	r24, 0x018A
     26e:	80 93 75 01 	sts	0x0175, r24
	txBuf[10]=crc8Block(txBuf,10);
     272:	8c e6       	ldi	r24, 0x6C	; 108
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	6a e0       	ldi	r22, 0x0A	; 10
     278:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <crc8Block>
     27c:	80 93 76 01 	sts	0x0176, r24
}
     280:	08 95       	ret

00000282 <presentDS18b20>:
//DS18B20

uint8_t presentDS18b20(uint8_t sensor_num)
{	uint8_t res, sensor_pin;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     282:	88 23       	and	r24, r24
     284:	11 f0       	breq	.+4      	; 0x28a <presentDS18b20+0x8>
     286:	43 e0       	ldi	r20, 0x03	; 3
     288:	01 c0       	rjmp	.+2      	; 0x28c <presentDS18b20+0xa>
     28a:	42 e0       	ldi	r20, 0x02	; 2
	else sensor_pin=SENSOR1_PIN;
	
	SENSOR_DDR|=(1<<sensor_pin);
     28c:	84 b3       	in	r24, 0x14	; 20
     28e:	21 e0       	ldi	r18, 0x01	; 1
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	92 2f       	mov	r25, r18
     294:	04 2e       	mov	r0, r20
     296:	01 c0       	rjmp	.+2      	; 0x29a <presentDS18b20+0x18>
     298:	99 0f       	add	r25, r25
     29a:	0a 94       	dec	r0
     29c:	ea f7       	brpl	.-6      	; 0x298 <presentDS18b20+0x16>
     29e:	89 2b       	or	r24, r25
     2a0:	84 bb       	out	0x14, r24	; 20
     2a2:	e4 ed       	ldi	r30, 0xD4	; 212
     2a4:	f3 e0       	ldi	r31, 0x03	; 3
     2a6:	31 97       	sbiw	r30, 0x01	; 1
     2a8:	f1 f7       	brne	.-4      	; 0x2a6 <presentDS18b20+0x24>
	_delay_us (490);

	SENSOR_DDR&=~(1<<sensor_pin);
     2aa:	84 b3       	in	r24, 0x14	; 20
     2ac:	90 95       	com	r25
     2ae:	98 23       	and	r25, r24
     2b0:	94 bb       	out	0x14, r25	; 20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2b2:	85 ed       	ldi	r24, 0xD5	; 213
     2b4:	8a 95       	dec	r24
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <presentDS18b20+0x32>
	_delay_us(80);
	
	if ((SENSOR_PIN&(1<<sensor_pin)) == 0x00) res=1;  
     2b8:	83 b3       	in	r24, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2ba:	e8 e4       	ldi	r30, 0x48	; 72
     2bc:	f3 e0       	ldi	r31, 0x03	; 3
     2be:	31 97       	sbiw	r30, 0x01	; 1
     2c0:	f1 f7       	brne	.-4      	; 0x2be <presentDS18b20+0x3c>
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <presentDS18b20+0x48>
     2c6:	95 95       	asr	r25
     2c8:	87 95       	ror	r24
     2ca:	4a 95       	dec	r20
     2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <presentDS18b20+0x44>
     2ce:	82 27       	eor	r24, r18
     2d0:	93 27       	eor	r25, r19
	else res=0;  
	
	_delay_us(420);
	return res;
}
     2d2:	81 70       	andi	r24, 0x01	; 1
     2d4:	08 95       	ret

000002d6 <sendDS18b20>:

void sendDS18b20(uint8_t command, uint8_t sensor_num)
{	uint8_t i, data, sensor_pin;
     2d6:	48 2f       	mov	r20, r24

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     2d8:	66 23       	and	r22, r22
     2da:	11 f0       	breq	.+4      	; 0x2e0 <sendDS18b20+0xa>
     2dc:	23 e0       	ldi	r18, 0x03	; 3
     2de:	01 c0       	rjmp	.+2      	; 0x2e2 <sendDS18b20+0xc>
     2e0:	22 e0       	ldi	r18, 0x02	; 2
	data=command;

	for(i=0;i<8;i++)
	{
		if ((data&0x01)==0x01) {    //Send 1 on SDA
			SENSOR_DDR|=(1<<sensor_pin);
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	38 2f       	mov	r19, r24
     2e8:	01 c0       	rjmp	.+2      	; 0x2ec <sendDS18b20+0x16>
     2ea:	33 0f       	add	r19, r19
     2ec:	2a 95       	dec	r18
     2ee:	ea f7       	brpl	.-6      	; 0x2ea <sendDS18b20+0x14>
			_delay_us(9);
			SENSOR_DDR&=~(1<<sensor_pin);
     2f0:	53 2f       	mov	r21, r19
     2f2:	50 95       	com	r21
     2f4:	24 2f       	mov	r18, r20
     2f6:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2f8:	ea eb       	ldi	r30, 0xBA	; 186
	else sensor_pin=SENSOR1_PIN;
	data=command;

	for(i=0;i<8;i++)
	{
		if ((data&0x01)==0x01) {    //Send 1 on SDA
     2fa:	78 e2       	ldi	r23, 0x28	; 40
     2fc:	68 e1       	ldi	r22, 0x18	; 24
     2fe:	48 ec       	ldi	r20, 0xC8	; 200
     300:	20 ff       	sbrs	r18, 0
     302:	0b c0       	rjmp	.+22     	; 0x31a <sendDS18b20+0x44>
			SENSOR_DDR|=(1<<sensor_pin);
     304:	84 b3       	in	r24, 0x14	; 20
     306:	83 2b       	or	r24, r19
     308:	84 bb       	out	0x14, r24	; 20
     30a:	86 2f       	mov	r24, r22
     30c:	8a 95       	dec	r24
     30e:	f1 f7       	brne	.-4      	; 0x30c <sendDS18b20+0x36>
			_delay_us(9);
			SENSOR_DDR&=~(1<<sensor_pin);
     310:	84 b3       	in	r24, 0x14	; 20
     312:	85 23       	and	r24, r21
     314:	84 bb       	out	0x14, r24	; 20
     316:	84 2f       	mov	r24, r20
     318:	0a c0       	rjmp	.+20     	; 0x32e <sendDS18b20+0x58>
			_delay_us(75);
		}
		else {                   	//Send 0 on SDA
			SENSOR_DDR|=(1<<sensor_pin);
     31a:	84 b3       	in	r24, 0x14	; 20
     31c:	83 2b       	or	r24, r19
     31e:	84 bb       	out	0x14, r24	; 20
     320:	8e 2f       	mov	r24, r30
     322:	8a 95       	dec	r24
     324:	f1 f7       	brne	.-4      	; 0x322 <sendDS18b20+0x4c>
			_delay_us(70);
			SENSOR_DDR&=~(1<<sensor_pin);
     326:	84 b3       	in	r24, 0x14	; 20
     328:	85 23       	and	r24, r21
     32a:	84 bb       	out	0x14, r24	; 20
     32c:	87 2f       	mov	r24, r23
     32e:	8a 95       	dec	r24
     330:	f1 f7       	brne	.-4      	; 0x32e <sendDS18b20+0x58>

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;
	data=command;

	for(i=0;i<8;i++)
     332:	9f 5f       	subi	r25, 0xFF	; 255
     334:	98 30       	cpi	r25, 0x08	; 8
     336:	11 f0       	breq	.+4      	; 0x33c <sendDS18b20+0x66>
			SENSOR_DDR|=(1<<sensor_pin);
			_delay_us(70);
			SENSOR_DDR&=~(1<<sensor_pin);
			_delay_us(15);
		}
		data=data>>1;
     338:	26 95       	lsr	r18
     33a:	e2 cf       	rjmp	.-60     	; 0x300 <sendDS18b20+0x2a>
     33c:	08 95       	ret

0000033e <receiveDS18b20>:
	}
	return;
}

uint16_t receiveDS18b20(uint8_t sensor_num)
{	uint8_t i, sensor_pin;
     33e:	ff 92       	push	r15
     340:	0f 93       	push	r16
     342:	1f 93       	push	r17
	uint16_t res=0;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     344:	88 23       	and	r24, r24
     346:	11 f0       	breq	.+4      	; 0x34c <receiveDS18b20+0xe>
     348:	83 e0       	ldi	r24, 0x03	; 3
     34a:	01 c0       	rjmp	.+2      	; 0x34e <receiveDS18b20+0x10>
     34c:	82 e0       	ldi	r24, 0x02	; 2
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
	{
		SENSOR_DDR|=(1<<sensor_pin);		
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	02 c0       	rjmp	.+4      	; 0x358 <receiveDS18b20+0x1a>
     354:	66 0f       	add	r22, r22
     356:	77 1f       	adc	r23, r23
     358:	8a 95       	dec	r24
     35a:	e2 f7       	brpl	.-8      	; 0x354 <receiveDS18b20+0x16>
     35c:	a6 2f       	mov	r26, r22
		_delay_us(9);
		SENSOR_DDR&=~(1<<sensor_pin);		
     35e:	b6 2f       	mov	r27, r22
     360:	b0 95       	com	r27
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	40 e0       	ldi	r20, 0x00	; 0
     368:	50 e0       	ldi	r21, 0x00	; 0
     36a:	88 e1       	ldi	r24, 0x18	; 24
     36c:	f8 2e       	mov	r15, r24
		_delay_us(12);

		if ((SENSOR_PIN & (1<<sensor_pin))==0x00) res&=~_BV(i);	//If 0 on SDA
		else 	res|=_BV(i);	    //IF 1 on SDA
     36e:	00 e2       	ldi	r16, 0x20	; 32
     370:	e1 e0       	ldi	r30, 0x01	; 1
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	1d ea       	ldi	r17, 0xAD	; 173
	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
	{
		SENSOR_DDR|=(1<<sensor_pin);		
     376:	84 b3       	in	r24, 0x14	; 20
     378:	8a 2b       	or	r24, r26
     37a:	84 bb       	out	0x14, r24	; 20
     37c:	8f 2d       	mov	r24, r15
     37e:	8a 95       	dec	r24
     380:	f1 f7       	brne	.-4      	; 0x37e <receiveDS18b20+0x40>
		_delay_us(9);
		SENSOR_DDR&=~(1<<sensor_pin);		
     382:	84 b3       	in	r24, 0x14	; 20
     384:	8b 23       	and	r24, r27
     386:	84 bb       	out	0x14, r24	; 20
     388:	80 2f       	mov	r24, r16
     38a:	8a 95       	dec	r24
     38c:	f1 f7       	brne	.-4      	; 0x38a <receiveDS18b20+0x4c>
		_delay_us(12);

		if ((SENSOR_PIN & (1<<sensor_pin))==0x00) res&=~_BV(i);	//If 0 on SDA
     38e:	83 b3       	in	r24, 0x13	; 19
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	86 23       	and	r24, r22
     394:	97 23       	and	r25, r23
     396:	89 2b       	or	r24, r25
     398:	61 f4       	brne	.+24     	; 0x3b2 <receiveDS18b20+0x74>
     39a:	cf 01       	movw	r24, r30
     39c:	04 2e       	mov	r0, r20
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <receiveDS18b20+0x66>
     3a0:	88 0f       	add	r24, r24
     3a2:	99 1f       	adc	r25, r25
     3a4:	0a 94       	dec	r0
     3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <receiveDS18b20+0x62>
     3a8:	80 95       	com	r24
     3aa:	90 95       	com	r25
     3ac:	28 23       	and	r18, r24
     3ae:	39 23       	and	r19, r25
     3b0:	09 c0       	rjmp	.+18     	; 0x3c4 <receiveDS18b20+0x86>
		else 	res|=_BV(i);	    //IF 1 on SDA
     3b2:	cf 01       	movw	r24, r30
     3b4:	04 2e       	mov	r0, r20
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <receiveDS18b20+0x7e>
     3b8:	88 0f       	add	r24, r24
     3ba:	99 1f       	adc	r25, r25
     3bc:	0a 94       	dec	r0
     3be:	e2 f7       	brpl	.-8      	; 0x3b8 <receiveDS18b20+0x7a>
     3c0:	28 2b       	or	r18, r24
     3c2:	39 2b       	or	r19, r25
     3c4:	81 2f       	mov	r24, r17
     3c6:	8a 95       	dec	r24
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <receiveDS18b20+0x88>
     3ca:	4f 5f       	subi	r20, 0xFF	; 255
     3cc:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t res=0;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
     3ce:	40 31       	cpi	r20, 0x10	; 16
     3d0:	51 05       	cpc	r21, r1
     3d2:	89 f6       	brne	.-94     	; 0x376 <receiveDS18b20+0x38>
		else 	res|=_BV(i);	    //IF 1 on SDA
				
		_delay_us(65);
	}
	return res;
}
     3d4:	c9 01       	movw	r24, r18
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	ff 90       	pop	r15
     3dc:	08 95       	ret

000003de <processPacket>:
}

//process received packet
void processPacket(void)
{
	cli();
     3de:	f8 94       	cli
	//check CRC
	if (crc8Block(rxBuf,currentRXPacketLen-1)!=rxBuf[currentRXPacketLen-1])
     3e0:	60 91 69 01 	lds	r22, 0x0169
     3e4:	61 50       	subi	r22, 0x01	; 1
     3e6:	8e e7       	ldi	r24, 0x7E	; 126
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <crc8Block>
     3ee:	20 91 69 01 	lds	r18, 0x0169
     3f2:	e2 2f       	mov	r30, r18
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	e3 58       	subi	r30, 0x83	; 131
     3f8:	fe 4f       	sbci	r31, 0xFE	; 254
     3fa:	90 81       	ld	r25, Z
     3fc:	89 17       	cp	r24, r25
     3fe:	69 f0       	breq	.+26     	; 0x41a <processPacket+0x3c>
	{
		packetReceived=0;
     400:	10 92 68 01 	sts	0x0168, r1
     404:	ee e7       	ldi	r30, 0x7E	; 126
     406:	f1 e0       	ldi	r31, 0x01	; 1
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     408:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     40a:	41 e0       	ldi	r20, 0x01	; 1
     40c:	e9 38       	cpi	r30, 0x89	; 137
     40e:	f4 07       	cpc	r31, r20
     410:	d9 f7       	brne	.-10     	; 0x408 <processPacket+0x2a>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     412:	10 92 69 01 	sts	0x0169, r1
	//check CRC
	if (crc8Block(rxBuf,currentRXPacketLen-1)!=rxBuf[currentRXPacketLen-1])
	{
		packetReceived=0;
		clearRXBuf();
		sei();
     416:	78 94       	sei
     418:	08 95       	ret
		return;
	}
	//differentiate and process packet
	switch (rxBuf[0]) {
     41a:	80 91 7e 01 	lds	r24, 0x017E
     41e:	89 36       	cpi	r24, 0x69	; 105
     420:	e1 f1       	breq	.+120    	; 0x49a <__stack+0x3b>
     422:	8a 36       	cpi	r24, 0x6A	; 106
     424:	20 f4       	brcc	.+8      	; 0x42e <processPacket+0x50>
     426:	87 36       	cpi	r24, 0x67	; 103
     428:	09 f0       	breq	.+2      	; 0x42c <processPacket+0x4e>
     42a:	64 c0       	rjmp	.+200    	; 0x4f4 <__stack+0x95>
     42c:	07 c0       	rjmp	.+14     	; 0x43c <processPacket+0x5e>
     42e:	80 37       	cpi	r24, 0x70	; 112
     430:	09 f4       	brne	.+2      	; 0x434 <processPacket+0x56>
     432:	54 c0       	rjmp	.+168    	; 0x4dc <__stack+0x7d>
     434:	83 37       	cpi	r24, 0x73	; 115
     436:	09 f0       	breq	.+2      	; 0x43a <processPacket+0x5c>
     438:	5d c0       	rjmp	.+186    	; 0x4f4 <__stack+0x95>
     43a:	11 c0       	rjmp	.+34     	; 0x45e <processPacket+0x80>
		//if get command
		case 'g' : 	{
			if (currentRXPacketLen==2)
     43c:	22 30       	cpi	r18, 0x02	; 2
     43e:	09 f0       	breq	.+2      	; 0x442 <processPacket+0x64>
     440:	59 c0       	rjmp	.+178    	; 0x4f4 <__stack+0x95>
			{
				prepareSystemStatus();
     442:	0e 94 12 01 	call	0x224	; 0x224 <prepareSystemStatus>
     446:	ec e6       	ldi	r30, 0x6C	; 108
     448:	f1 e0       	ldi	r31, 0x01	; 1
//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
	uartTransmitByte(txBuf[i]);
     44a:	80 81       	ld	r24, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     44c:	5d 9b       	sbis	0x0b, 5	; 11
     44e:	fe cf       	rjmp	.-4      	; 0x44c <processPacket+0x6e>
	UDR = data;
     450:	8c b9       	out	0x0c, r24	; 12
     452:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	e7 37       	cpi	r30, 0x77	; 119
     458:	f8 07       	cpc	r31, r24
     45a:	b9 f7       	brne	.-18     	; 0x44a <processPacket+0x6c>
     45c:	4b c0       	rjmp	.+150    	; 0x4f4 <__stack+0x95>
			}			
			break;
		}
		//if set command
		case 's' : 	{
			if (currentRXPacketLen==4)
     45e:	24 30       	cpi	r18, 0x04	; 4
     460:	09 f0       	breq	.+2      	; 0x464 <__stack+0x5>
     462:	48 c0       	rjmp	.+144    	; 0x4f4 <__stack+0x95>
			{
				uint16_t val;

				val=(rxBuf[1]<<8)|(rxBuf[2]);
     464:	90 91 7f 01 	lds	r25, 0x017F
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	20 91 80 01 	lds	r18, 0x0180
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	28 2b       	or	r18, r24
     472:	39 2b       	or	r19, r25
				if ((val<=1780)&&(val>=780)) setData[0]=val;
     474:	c9 01       	movw	r24, r18
     476:	8c 50       	subi	r24, 0x0C	; 12
     478:	93 40       	sbci	r25, 0x03	; 3
     47a:	89 5e       	subi	r24, 0xE9	; 233
     47c:	93 40       	sbci	r25, 0x03	; 3
     47e:	20 f4       	brcc	.+8      	; 0x488 <__stack+0x29>
     480:	30 93 79 01 	sts	0x0179, r19
     484:	20 93 78 01 	sts	0x0178, r18
				#if STANDALONE_MODE == 1
					eeprom_write_word (&savedSetData, setData[0]);
     488:	60 91 78 01 	lds	r22, 0x0178
     48c:	70 91 79 01 	lds	r23, 0x0179
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__eewr_word_m16>
     498:	2d c0       	rjmp	.+90     	; 0x4f4 <__stack+0x95>
			
			break;
		}
		//if info command
		case 'i' :	{
			if (currentRXPacketLen==2)
     49a:	22 30       	cpi	r18, 0x02	; 2
     49c:	59 f5       	brne	.+86     	; 0x4f4 <__stack+0x95>
			{
				txBuf[0]='v';
     49e:	86 e7       	ldi	r24, 0x76	; 118
     4a0:	80 93 6c 01 	sts	0x016C, r24
				txBuf[1]=HW_REVISION;
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	80 93 6d 01 	sts	0x016D, r24
				txBuf[2]=SW_REVISION;
     4aa:	80 93 6e 01 	sts	0x016E, r24
				txBuf[3]=SENSOR_COUNT;
     4ae:	20 93 6f 01 	sts	0x016F, r18
				txBuf[4]=VALUE_COUNT;
     4b2:	80 93 70 01 	sts	0x0170, r24
				txBuf[5]=crc8Block(txBuf,5);
     4b6:	8c e6       	ldi	r24, 0x6C	; 108
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	65 e0       	ldi	r22, 0x05	; 5
     4bc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <crc8Block>
     4c0:	80 93 71 01 	sts	0x0171, r24
     4c4:	ec e6       	ldi	r30, 0x6C	; 108
     4c6:	f1 e0       	ldi	r31, 0x01	; 1
//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
	uartTransmitByte(txBuf[i]);
     4c8:	80 81       	ld	r24, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     4ca:	5d 9b       	sbis	0x0b, 5	; 11
     4cc:	fe cf       	rjmp	.-4      	; 0x4ca <__stack+0x6b>
	UDR = data;
     4ce:	8c b9       	out	0x0c, r24	; 12
     4d0:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	e2 37       	cpi	r30, 0x72	; 114
     4d6:	f8 07       	cpc	r31, r24
     4d8:	b9 f7       	brne	.-18     	; 0x4c8 <__stack+0x69>
     4da:	0c c0       	rjmp	.+24     	; 0x4f4 <__stack+0x95>

			break;
		}
		//if powern ON/OFF PWM
		case 'p' : 	{
		if (currentRXPacketLen==3)
     4dc:	23 30       	cpi	r18, 0x03	; 3
     4de:	51 f4       	brne	.+20     	; 0x4f4 <__stack+0x95>
		{
			if ((rxBuf[1]==COOLER_OFF)||(rxBuf[1]==COOLER_ON))
     4e0:	60 91 7f 01 	lds	r22, 0x017F
     4e4:	62 30       	cpi	r22, 0x02	; 2
     4e6:	30 f4       	brcc	.+12     	; 0x4f4 <__stack+0x95>
			{
				coolerState=rxBuf[1];
     4e8:	60 93 8a 01 	sts	0x018A, r22
				#if STANDALONE_MODE == 1 
					eeprom_write_byte(&savedCoolerState, coolerState);	
     4ec:	82 e0       	ldi	r24, 0x02	; 2
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__eewr_byte_m16>
		default:
		{
			;
		}
	}
	packetReceived=0;
     4f4:	10 92 68 01 	sts	0x0168, r1
     4f8:	ee e7       	ldi	r30, 0x7E	; 126
     4fa:	f1 e0       	ldi	r31, 0x01	; 1
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     4fc:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     4fe:	41 e0       	ldi	r20, 0x01	; 1
     500:	e9 38       	cpi	r30, 0x89	; 137
     502:	f4 07       	cpc	r31, r20
     504:	d9 f7       	brne	.-10     	; 0x4fc <__stack+0x9d>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     506:	10 92 69 01 	sts	0x0169, r1
			;
		}
	}
	packetReceived=0;
	clearRXBuf();
	sei();
     50a:	78 94       	sei
     50c:	08 95       	ret

0000050e <main>:
	return res;
}

//------------------------------------------------------------------------------------
int main(void)
{
     50e:	2f 92       	push	r2
     510:	3f 92       	push	r3
     512:	4f 92       	push	r4
     514:	5f 92       	push	r5
     516:	6f 92       	push	r6
     518:	7f 92       	push	r7
     51a:	9f 92       	push	r9
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	df 93       	push	r29
     52e:	cf 93       	push	r28
     530:	0f 92       	push	r0
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
	uint8_t i, sign, firstConv=_YES;
	uint16_t val, fract;	
	//read from EEPROM saved value & coolerState state
	#if STANDALONE_MODE == 1
		setData[0]= eeprom_read_word (&savedSetData);
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 5f 0b 	call	0x16be	; 0x16be <__eerd_word_m16>
     53e:	8c 01       	movw	r16, r24
     540:	90 93 79 01 	sts	0x0179, r25
     544:	80 93 78 01 	sts	0x0178, r24
		coolerState = eeprom_read_byte(&savedCoolerState);
     548:	82 e0       	ldi	r24, 0x02	; 2
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <__eerd_byte_m16>
     550:	28 2f       	mov	r18, r24
     552:	80 93 8a 01 	sts	0x018A, r24
		//if saved settings corrupted - set it by default
		if ( (setData[0]<780)||(setData[0]>1780) ) setData[0]=1730;
     556:	0c 50       	subi	r16, 0x0C	; 12
     558:	13 40       	sbci	r17, 0x03	; 3
     55a:	09 5e       	subi	r16, 0xE9	; 233
     55c:	13 40       	sbci	r17, 0x03	; 3
     55e:	30 f0       	brcs	.+12     	; 0x56c <main+0x5e>
     560:	82 ec       	ldi	r24, 0xC2	; 194
     562:	96 e0       	ldi	r25, 0x06	; 6
     564:	90 93 79 01 	sts	0x0179, r25
     568:	80 93 78 01 	sts	0x0178, r24
		if ( (coolerState!=COOLER_ON)&&(coolerState!=COOLER_OFF) ) coolerState=COOLER_OFF;
     56c:	22 30       	cpi	r18, 0x02	; 2
     56e:	10 f0       	brcs	.+4      	; 0x574 <main+0x66>
     570:	10 92 8a 01 	sts	0x018A, r1
		setData[0]=1730;
		coolerState=COOLER_OFF;
	#endif
	//init variables
	for (i=0;i<SENSOR_COUNT;i++)
		sensorData[i]=0;
     574:	10 92 7b 01 	sts	0x017B, r1
     578:	10 92 7a 01 	sts	0x017A, r1
     57c:	10 92 7d 01 	sts	0x017D, r1
     580:	10 92 7c 01 	sts	0x017C, r1
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=txBuf[i]=0;
     588:	fc 01       	movw	r30, r24
     58a:	e4 59       	subi	r30, 0x94	; 148
     58c:	fe 4f       	sbci	r31, 0xFE	; 254
     58e:	10 82       	st	Z, r1
     590:	fc 01       	movw	r30, r24
     592:	e2 58       	subi	r30, 0x82	; 130
     594:	fe 4f       	sbci	r31, 0xFE	; 254
     596:	10 82       	st	Z, r1
     598:	01 96       	adiw	r24, 0x01	; 1
}

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     59a:	8b 30       	cpi	r24, 0x0B	; 11
     59c:	91 05       	cpc	r25, r1
     59e:	a1 f7       	brne	.-24     	; 0x588 <main+0x7a>
	#endif
	//init variables
	for (i=0;i<SENSOR_COUNT;i++)
		sensorData[i]=0;
	clearBuf ();
	U=0.0;
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	a0 e0       	ldi	r26, 0x00	; 0
     5a6:	b0 e0       	ldi	r27, 0x00	; 0
     5a8:	80 93 8f 01 	sts	0x018F, r24
     5ac:	90 93 90 01 	sts	0x0190, r25
     5b0:	a0 93 91 01 	sts	0x0191, r26
     5b4:	b0 93 92 01 	sts	0x0192, r27
	E=0;
     5b8:	80 93 8b 01 	sts	0x018B, r24
     5bc:	90 93 8c 01 	sts	0x018C, r25
     5c0:	a0 93 8d 01 	sts	0x018D, r26
     5c4:	b0 93 8e 01 	sts	0x018E, r27
	//Init ports, UART, PWM
	SENSOR_PORT&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));     	
     5c8:	85 b3       	in	r24, 0x15	; 21
     5ca:	83 7f       	andi	r24, 0xF3	; 243
     5cc:	85 bb       	out	0x15, r24	; 21
	SENSOR_DDR&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));		
     5ce:	84 b3       	in	r24, 0x14	; 20
     5d0:	83 7f       	andi	r24, 0xF3	; 243
     5d2:	84 bb       	out	0x14, r24	; 20
 
	#if PWM_MODE == 1
		initPWM();
	#else
		TEC_PORT&=~(1<<TEC_PIN);
     5d4:	95 98       	cbi	0x12, 5	; 18
		TEC_DDR|=(1<<TEC_PIN);
     5d6:	8d 9a       	sbi	0x11, 5	; 17
//------------------------------------------------------------------------------------
//UART

void uartInit(void)
{
	UBRRH = UART_BAUDRATE_H;		// Init UART baudrate
     5d8:	10 bc       	out	0x20, r1	; 32
	UBRRL = UART_BAUDRATE_L;
     5da:	83 e3       	ldi	r24, 0x33	; 51
     5dc:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1<<RXEN)|(1<<TXEN)|(1 << RXCIE);	// TX, RX enable, RX interrupt enable
     5de:	88 e9       	ldi	r24, 0x98	; 152
     5e0:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
     5e2:	86 e8       	ldi	r24, 0x86	; 134
     5e4:	80 bd       	out	0x20, r24	; 32
	#else
		TEC_PORT&=~(1<<TEC_PIN);
		TEC_DDR|=(1<<TEC_PIN);
	#endif
	uartInit();	
	sei();
     5e6:	78 94       	sei
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	99 83       	std	Y+1, r25	; 0x01
			{
				sendDS18b20(SKIP_ROM,i);
				sendDS18b20(START_CONVERSION,i);
				errorCode=0;
			}
			else errorCode|=(1<<i);
     5ec:	01 e0       	ldi	r16, 0x01	; 1
     5ee:	40 2e       	mov	r4, r16
     5f0:	51 2c       	mov	r5, r1
					if ((val&0x01)!=0x00) fract=fract+65;
					if ((val&0x02)!=0x00) fract=fract+125;
					if ((val&0x04)!=0x00) fract=fract+250;
					if ((val&0x08)!=0x00) fract=fract+500;
					val=(val>>4)*10+fract/100;
					if (sign==1) val=OFFSET-val;
     5f2:	21 2c       	mov	r2, r1
     5f4:	15 e0       	ldi	r17, 0x05	; 5
     5f6:	31 2e       	mov	r3, r17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5f8:	b8 ec       	ldi	r27, 0xC8	; 200
     5fa:	6b 2e       	mov	r6, r27
     5fc:	71 2c       	mov	r7, r1
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <main+0xf4>
	#else
		TEC_PORT&=~(1<<TEC_PIN);
		TEC_DDR|=(1<<TEC_PIN);
	#endif
	uartInit();	
	sei();
     600:	19 82       	std	Y+1, r1	; 0x01

//##############################################################
	#if SLOW_PWM_MODE == 1
	while (1)
	{
		if (packetReceived!=0) processPacket();
     602:	80 91 68 01 	lds	r24, 0x0168
     606:	88 23       	and	r24, r24
     608:	11 f0       	breq	.+4      	; 0x60e <main+0x100>
     60a:	0e 94 ef 01 	call	0x3de	; 0x3de <processPacket>
		errorCode=0;
     60e:	10 92 6a 01 	sts	0x016A, r1
     612:	00 e0       	ldi	r16, 0x00	; 0
     614:	10 e0       	ldi	r17, 0x00	; 0
		for (i=0;i<SENSOR_COUNT;i++)
		{
			if (presentDS18b20(i)==1)
     616:	80 2f       	mov	r24, r16
     618:	0e 94 41 01 	call	0x282	; 0x282 <presentDS18b20>
     61c:	81 30       	cpi	r24, 0x01	; 1
     61e:	59 f4       	brne	.+22     	; 0x636 <main+0x128>
			{
				sendDS18b20(SKIP_ROM,i);
     620:	8c ec       	ldi	r24, 0xCC	; 204
     622:	60 2f       	mov	r22, r16
     624:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <sendDS18b20>
				sendDS18b20(START_CONVERSION,i);
     628:	84 e4       	ldi	r24, 0x44	; 68
     62a:	60 2f       	mov	r22, r16
     62c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <sendDS18b20>
				errorCode=0;
     630:	10 92 6a 01 	sts	0x016A, r1
     634:	0c c0       	rjmp	.+24     	; 0x64e <main+0x140>
			}
			else errorCode|=(1<<i);
     636:	92 01       	movw	r18, r4
     638:	00 2e       	mov	r0, r16
     63a:	02 c0       	rjmp	.+4      	; 0x640 <main+0x132>
     63c:	22 0f       	add	r18, r18
     63e:	33 1f       	adc	r19, r19
     640:	0a 94       	dec	r0
     642:	e2 f7       	brpl	.-8      	; 0x63c <main+0x12e>
     644:	80 91 6a 01 	lds	r24, 0x016A
     648:	82 2b       	or	r24, r18
     64a:	80 93 6a 01 	sts	0x016A, r24
     64e:	0f 5f       	subi	r16, 0xFF	; 255
     650:	1f 4f       	sbci	r17, 0xFF	; 255
	#if SLOW_PWM_MODE == 1
	while (1)
	{
		if (packetReceived!=0) processPacket();
		errorCode=0;
		for (i=0;i<SENSOR_COUNT;i++)
     652:	02 30       	cpi	r16, 0x02	; 2
     654:	11 05       	cpc	r17, r1
     656:	f9 f6       	brne	.-66     	; 0x616 <main+0x108>
				sendDS18b20(START_CONVERSION,i);
				errorCode=0;
			}
			else errorCode|=(1<<i);
		}
		if (firstConv==_YES) firstConv=_NO;
     658:	e9 81       	ldd	r30, Y+1	; 0x01
     65a:	e1 30       	cpi	r30, 0x01	; 1
     65c:	89 f2       	breq	.-94     	; 0x600 <main+0xf2>
     65e:	aa e7       	ldi	r26, 0x7A	; 122
     660:	ea 2e       	mov	r14, r26
     662:	a1 e0       	ldi	r26, 0x01	; 1
     664:	fa 2e       	mov	r15, r26
     666:	00 e0       	ldi	r16, 0x00	; 0
     668:	10 e0       	ldi	r17, 0x00	; 0
		else
		{		 
			//receive measured data from sensors
			for (i=0;i<SENSOR_COUNT;i++)
			{
				if (presentDS18b20(i)==1)
     66a:	80 2f       	mov	r24, r16
     66c:	0e 94 41 01 	call	0x282	; 0x282 <presentDS18b20>
     670:	81 30       	cpi	r24, 0x01	; 1
     672:	09 f0       	breq	.+2      	; 0x676 <main+0x168>
     674:	49 c0       	rjmp	.+146    	; 0x708 <main+0x1fa>
				{
					sendDS18b20(SKIP_ROM,i);
     676:	8c ec       	ldi	r24, 0xCC	; 204
     678:	60 2f       	mov	r22, r16
     67a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <sendDS18b20>
					sendDS18b20(GET_DATA,i);
     67e:	8e eb       	ldi	r24, 0xBE	; 190
     680:	60 2f       	mov	r22, r16
     682:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <sendDS18b20>
					val=receiveDS18b20(i);
     686:	80 2f       	mov	r24, r16
     688:	0e 94 9f 01 	call	0x33e	; 0x33e <receiveDS18b20>
					if ((val&0x8000)!=0x00)
     68c:	97 fd       	sbrc	r25, 7
     68e:	02 c0       	rjmp	.+4      	; 0x694 <main+0x186>
     690:	e0 e0       	ldi	r30, 0x00	; 0
     692:	04 c0       	rjmp	.+8      	; 0x69c <main+0x18e>
					{
						sign=1;
						val=0xffff-val+1;
     694:	90 95       	com	r25
     696:	81 95       	neg	r24
     698:	9f 4f       	sbci	r25, 0xFF	; 255
     69a:	e1 e0       	ldi	r30, 0x01	; 1
					}
					else sign=0;
					fract=0;
					if ((val&0x01)!=0x00) fract=fract+65;
     69c:	80 fd       	sbrc	r24, 0
     69e:	03 c0       	rjmp	.+6      	; 0x6a6 <main+0x198>
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	02 c0       	rjmp	.+4      	; 0x6aa <main+0x19c>
     6a6:	41 e4       	ldi	r20, 0x41	; 65
     6a8:	50 e0       	ldi	r21, 0x00	; 0
					if ((val&0x02)!=0x00) fract=fract+125;
     6aa:	81 ff       	sbrs	r24, 1
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <main+0x1a4>
     6ae:	43 58       	subi	r20, 0x83	; 131
     6b0:	5f 4f       	sbci	r21, 0xFF	; 255
					if ((val&0x04)!=0x00) fract=fract+250;
     6b2:	82 ff       	sbrs	r24, 2
     6b4:	02 c0       	rjmp	.+4      	; 0x6ba <main+0x1ac>
     6b6:	46 50       	subi	r20, 0x06	; 6
     6b8:	5f 4f       	sbci	r21, 0xFF	; 255
					if ((val&0x08)!=0x00) fract=fract+500;
     6ba:	83 ff       	sbrs	r24, 3
     6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <main+0x1b4>
     6be:	4c 50       	subi	r20, 0x0C	; 12
     6c0:	5e 4f       	sbci	r21, 0xFE	; 254
					val=(val>>4)*10+fract/100;
     6c2:	f4 e0       	ldi	r31, 0x04	; 4
     6c4:	96 95       	lsr	r25
     6c6:	87 95       	ror	r24
     6c8:	fa 95       	dec	r31
     6ca:	e1 f7       	brne	.-8      	; 0x6c4 <main+0x1b6>
     6cc:	9c 01       	movw	r18, r24
     6ce:	73 e0       	ldi	r23, 0x03	; 3
     6d0:	22 0f       	add	r18, r18
     6d2:	33 1f       	adc	r19, r19
     6d4:	7a 95       	dec	r23
     6d6:	e1 f7       	brne	.-8      	; 0x6d0 <main+0x1c2>
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	28 0f       	add	r18, r24
     6de:	39 1f       	adc	r19, r25
     6e0:	ca 01       	movw	r24, r20
     6e2:	64 e6       	ldi	r22, 0x64	; 100
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	0e 94 0c 0b 	call	0x1618	; 0x1618 <__udivmodhi4>
     6ea:	62 0f       	add	r22, r18
     6ec:	73 1f       	adc	r23, r19
					if (sign==1) val=OFFSET-val;
     6ee:	e1 30       	cpi	r30, 0x01	; 1
     6f0:	29 f4       	brne	.+10     	; 0x6fc <main+0x1ee>
     6f2:	c1 01       	movw	r24, r2
     6f4:	86 1b       	sub	r24, r22
     6f6:	97 0b       	sbc	r25, r23
     6f8:	bc 01       	movw	r22, r24
     6fa:	02 c0       	rjmp	.+4      	; 0x700 <main+0x1f2>
					else val=val+OFFSET;
     6fc:	60 50       	subi	r22, 0x00	; 0
     6fe:	7b 4f       	sbci	r23, 0xFB	; 251
					sensorData[i]=val;
     700:	f7 01       	movw	r30, r14
     702:	71 83       	std	Z+1, r23	; 0x01
     704:	60 83       	st	Z, r22
     706:	0c c0       	rjmp	.+24     	; 0x720 <main+0x212>
				}
				else errorCode|=(1<<i);
     708:	92 01       	movw	r18, r4
     70a:	00 2e       	mov	r0, r16
     70c:	02 c0       	rjmp	.+4      	; 0x712 <main+0x204>
     70e:	22 0f       	add	r18, r18
     710:	33 1f       	adc	r19, r19
     712:	0a 94       	dec	r0
     714:	e2 f7       	brpl	.-8      	; 0x70e <main+0x200>
     716:	80 91 6a 01 	lds	r24, 0x016A
     71a:	82 2b       	or	r24, r18
     71c:	80 93 6a 01 	sts	0x016A, r24
     720:	0f 5f       	subi	r16, 0xFF	; 255
     722:	1f 4f       	sbci	r17, 0xFF	; 255
     724:	82 e0       	ldi	r24, 0x02	; 2
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	e8 0e       	add	r14, r24
     72a:	f9 1e       	adc	r15, r25
		}
		if (firstConv==_YES) firstConv=_NO;
		else
		{		 
			//receive measured data from sensors
			for (i=0;i<SENSOR_COUNT;i++)
     72c:	02 30       	cpi	r16, 0x02	; 2
     72e:	11 05       	cpc	r17, r1
     730:	09 f0       	breq	.+2      	; 0x734 <main+0x226>
     732:	9b cf       	rjmp	.-202    	; 0x66a <main+0x15c>
					sensorData[i]=val;
				}
				else errorCode|=(1<<i);
			}
			//if coolerState is OFF - clear all variables
			if (coolerState==COOLER_OFF) 
     734:	80 91 8a 01 	lds	r24, 0x018A
     738:	88 23       	and	r24, r24
     73a:	b9 f4       	brne	.+46     	; 0x76a <main+0x25c>
			{
				coolerPower=0x00;
     73c:	10 92 6b 01 	sts	0x016B, r1
				U=0.0;
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	a0 e0       	ldi	r26, 0x00	; 0
     746:	b0 e0       	ldi	r27, 0x00	; 0
     748:	80 93 8f 01 	sts	0x018F, r24
     74c:	90 93 90 01 	sts	0x0190, r25
     750:	a0 93 91 01 	sts	0x0191, r26
     754:	b0 93 92 01 	sts	0x0192, r27
				E=0.0;
     758:	80 93 8b 01 	sts	0x018B, r24
     75c:	90 93 8c 01 	sts	0x018C, r25
     760:	a0 93 8d 01 	sts	0x018D, r26
     764:	b0 93 8e 01 	sts	0x018E, r27
     768:	4b cf       	rjmp	.-362    	; 0x600 <main+0xf2>
			}
			//If no errors at sensor[0] and coolerState is ON - calculate and set software PWM
			if (coolerState==COOLER_ON)
     76a:	81 30       	cpi	r24, 0x01	; 1
     76c:	09 f0       	breq	.+2      	; 0x770 <main+0x262>
     76e:	48 cf       	rjmp	.-368    	; 0x600 <main+0xf2>
				{
					E=(double) sensorData[0]-setData[0];
     770:	60 91 7a 01 	lds	r22, 0x017A
     774:	70 91 7b 01 	lds	r23, 0x017B
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 9e 08 	call	0x113c	; 0x113c <__floatunsisf>
     780:	7b 01       	movw	r14, r22
     782:	8c 01       	movw	r16, r24
     784:	60 91 78 01 	lds	r22, 0x0178
     788:	70 91 79 01 	lds	r23, 0x0179
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	0e 94 9e 08 	call	0x113c	; 0x113c <__floatunsisf>
     794:	9b 01       	movw	r18, r22
     796:	ac 01       	movw	r20, r24
     798:	c8 01       	movw	r24, r16
     79a:	b7 01       	movw	r22, r14
     79c:	0e 94 32 06 	call	0xc64	; 0xc64 <__subsf3>
     7a0:	60 93 8b 01 	sts	0x018B, r22
     7a4:	70 93 8c 01 	sts	0x018C, r23
     7a8:	80 93 8d 01 	sts	0x018D, r24
     7ac:	90 93 8e 01 	sts	0x018E, r25

					U=U+KPSLOW*E;
     7b0:	2a e0       	ldi	r18, 0x0A	; 10
     7b2:	37 ed       	ldi	r19, 0xD7	; 215
     7b4:	43 e2       	ldi	r20, 0x23	; 35
     7b6:	5c e3       	ldi	r21, 0x3C	; 60
     7b8:	0e 94 90 06 	call	0xd20	; 0xd20 <__mulsf3>
     7bc:	20 91 8f 01 	lds	r18, 0x018F
     7c0:	30 91 90 01 	lds	r19, 0x0190
     7c4:	40 91 91 01 	lds	r20, 0x0191
     7c8:	50 91 92 01 	lds	r21, 0x0192
     7cc:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__addsf3>
     7d0:	60 93 8f 01 	sts	0x018F, r22
     7d4:	70 93 90 01 	sts	0x0190, r23
     7d8:	80 93 91 01 	sts	0x0191, r24
     7dc:	90 93 92 01 	sts	0x0192, r25

					if (U>255.0) 	U=255.0;
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	4f e7       	ldi	r20, 0x7F	; 127
     7e6:	53 e4       	ldi	r21, 0x43	; 67
     7e8:	0e 94 8a 07 	call	0xf14	; 0xf14 <__gtsf2>
     7ec:	18 16       	cp	r1, r24
     7ee:	64 f4       	brge	.+24     	; 0x808 <main+0x2fa>
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	af e7       	ldi	r26, 0x7F	; 127
     7f6:	b3 e4       	ldi	r27, 0x43	; 67
     7f8:	80 93 8f 01 	sts	0x018F, r24
     7fc:	90 93 90 01 	sts	0x0190, r25
     800:	a0 93 91 01 	sts	0x0191, r26
     804:	b0 93 92 01 	sts	0x0192, r27
					if (U<=0.0) 	U=0.0;		
     808:	60 91 8f 01 	lds	r22, 0x018F
     80c:	70 91 90 01 	lds	r23, 0x0190
     810:	80 91 91 01 	lds	r24, 0x0191
     814:	90 91 92 01 	lds	r25, 0x0192
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	40 e0       	ldi	r20, 0x00	; 0
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	0e 94 1a 08 	call	0x1034	; 0x1034 <__lesf2>
     824:	18 16       	cp	r1, r24
     826:	64 f0       	brlt	.+24     	; 0x840 <main+0x332>
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	a0 e0       	ldi	r26, 0x00	; 0
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	80 93 8f 01 	sts	0x018F, r24
     834:	90 93 90 01 	sts	0x0190, r25
     838:	a0 93 91 01 	sts	0x0191, r26
     83c:	b0 93 92 01 	sts	0x0192, r27
					
					if (U>0.0) TEC_PORT|=(1<<TEC_PIN);	
     840:	a0 90 8f 01 	lds	r10, 0x018F
     844:	b0 90 90 01 	lds	r11, 0x0190
     848:	c0 90 91 01 	lds	r12, 0x0191
     84c:	d0 90 92 01 	lds	r13, 0x0192
     850:	c6 01       	movw	r24, r12
     852:	b5 01       	movw	r22, r10
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	0e 94 8a 07 	call	0xf14	; 0xf14 <__gtsf2>
     860:	18 16       	cp	r1, r24
     862:	0c f4       	brge	.+2      	; 0x866 <main+0x358>
     864:	95 9a       	sbi	0x12, 5	; 18
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     866:	c6 01       	movw	r24, r12
     868:	b5 01       	movw	r22, r10
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	4a ef       	ldi	r20, 0xFA	; 250
     870:	54 e4       	ldi	r21, 0x44	; 68
     872:	0e 94 90 06 	call	0xd20	; 0xd20 <__mulsf3>
     876:	7b 01       	movw	r14, r22
     878:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	40 e8       	ldi	r20, 0x80	; 128
     880:	5f e3       	ldi	r21, 0x3F	; 63
     882:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__ltsf2>
     886:	88 23       	and	r24, r24
     888:	1c f4       	brge	.+6      	; 0x890 <main+0x382>
     88a:	61 e0       	ldi	r22, 0x01	; 1
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	22 c0       	rjmp	.+68     	; 0x8d4 <main+0x3c6>
		__ticks = 1;
	else if (__tmp > 65535)
     890:	c8 01       	movw	r24, r16
     892:	b7 01       	movw	r22, r14
     894:	20 e0       	ldi	r18, 0x00	; 0
     896:	3f ef       	ldi	r19, 0xFF	; 255
     898:	4f e7       	ldi	r20, 0x7F	; 127
     89a:	57 e4       	ldi	r21, 0x47	; 71
     89c:	0e 94 8a 07 	call	0xf14	; 0xf14 <__gtsf2>
     8a0:	18 16       	cp	r1, r24
     8a2:	a4 f4       	brge	.+40     	; 0x8cc <main+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8a4:	c6 01       	movw	r24, r12
     8a6:	b5 01       	movw	r22, r10
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	40 e2       	ldi	r20, 0x20	; 32
     8ae:	51 e4       	ldi	r21, 0x41	; 65
     8b0:	0e 94 90 06 	call	0xd20	; 0xd20 <__mulsf3>
     8b4:	0e 94 ba 04 	call	0x974	; 0x974 <__fixunssfsi>
     8b8:	05 c0       	rjmp	.+10     	; 0x8c4 <main+0x3b6>
     8ba:	c3 01       	movw	r24, r6
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	f1 f7       	brne	.-4      	; 0x8bc <main+0x3ae>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8c0:	61 50       	subi	r22, 0x01	; 1
     8c2:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c4:	61 15       	cp	r22, r1
     8c6:	71 05       	cpc	r23, r1
     8c8:	c1 f7       	brne	.-16     	; 0x8ba <main+0x3ac>
     8ca:	07 c0       	rjmp	.+14     	; 0x8da <main+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8cc:	c8 01       	movw	r24, r16
     8ce:	b7 01       	movw	r22, r14
     8d0:	0e 94 ba 04 	call	0x974	; 0x974 <__fixunssfsi>
     8d4:	cb 01       	movw	r24, r22
     8d6:	01 97       	sbiw	r24, 0x01	; 1
     8d8:	f1 f7       	brne	.-4      	; 0x8d6 <main+0x3c8>
					_delay_ms(U);								
					if (((uint8_t) U)!=255)TEC_PORT&=~(1<<TEC_PIN);
     8da:	c6 01       	movw	r24, r12
     8dc:	b5 01       	movw	r22, r10
     8de:	0e 94 ba 04 	call	0x974	; 0x974 <__fixunssfsi>
     8e2:	96 2e       	mov	r9, r22
     8e4:	9f ef       	ldi	r25, 0xFF	; 255
     8e6:	99 12       	cpse	r9, r25
     8e8:	95 98       	cbi	0x12, 5	; 18
					_delay_ms(255-U);
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	8f e7       	ldi	r24, 0x7F	; 127
     8f0:	93 e4       	ldi	r25, 0x43	; 67
     8f2:	a6 01       	movw	r20, r12
     8f4:	95 01       	movw	r18, r10
     8f6:	0e 94 32 06 	call	0xc64	; 0xc64 <__subsf3>
     8fa:	5b 01       	movw	r10, r22
     8fc:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	4a ef       	ldi	r20, 0xFA	; 250
     904:	54 e4       	ldi	r21, 0x44	; 68
     906:	0e 94 90 06 	call	0xd20	; 0xd20 <__mulsf3>
     90a:	7b 01       	movw	r14, r22
     90c:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	40 e8       	ldi	r20, 0x80	; 128
     914:	5f e3       	ldi	r21, 0x3F	; 63
     916:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__ltsf2>
     91a:	88 23       	and	r24, r24
     91c:	1c f4       	brge	.+6      	; 0x924 <main+0x416>
     91e:	61 e0       	ldi	r22, 0x01	; 1
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	22 c0       	rjmp	.+68     	; 0x968 <main+0x45a>
		__ticks = 1;
	else if (__tmp > 65535)
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	3f ef       	ldi	r19, 0xFF	; 255
     92c:	4f e7       	ldi	r20, 0x7F	; 127
     92e:	57 e4       	ldi	r21, 0x47	; 71
     930:	0e 94 8a 07 	call	0xf14	; 0xf14 <__gtsf2>
     934:	18 16       	cp	r1, r24
     936:	a4 f4       	brge	.+40     	; 0x960 <main+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     938:	c6 01       	movw	r24, r12
     93a:	b5 01       	movw	r22, r10
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	40 e2       	ldi	r20, 0x20	; 32
     942:	51 e4       	ldi	r21, 0x41	; 65
     944:	0e 94 90 06 	call	0xd20	; 0xd20 <__mulsf3>
     948:	0e 94 ba 04 	call	0x974	; 0x974 <__fixunssfsi>
     94c:	05 c0       	rjmp	.+10     	; 0x958 <main+0x44a>
     94e:	c3 01       	movw	r24, r6
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	f1 f7       	brne	.-4      	; 0x950 <main+0x442>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     954:	61 50       	subi	r22, 0x01	; 1
     956:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     958:	61 15       	cp	r22, r1
     95a:	71 05       	cpc	r23, r1
     95c:	c1 f7       	brne	.-16     	; 0x94e <main+0x440>
     95e:	07 c0       	rjmp	.+14     	; 0x96e <main+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     960:	c8 01       	movw	r24, r16
     962:	b7 01       	movw	r22, r14
     964:	0e 94 ba 04 	call	0x974	; 0x974 <__fixunssfsi>
     968:	cb 01       	movw	r24, r22
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	f1 f7       	brne	.-4      	; 0x96a <main+0x45c>

					coolerPower=((uint8_t)U);
     96e:	90 92 6b 01 	sts	0x016B, r9
     972:	46 ce       	rjmp	.-884    	; 0x600 <main+0xf2>

00000974 <__fixunssfsi>:
     974:	ef 92       	push	r14
     976:	ff 92       	push	r15
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	7b 01       	movw	r14, r22
     97e:	8c 01       	movw	r16, r24
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	40 e0       	ldi	r20, 0x00	; 0
     986:	5f e4       	ldi	r21, 0x4F	; 79
     988:	0e 94 ba 07 	call	0xf74	; 0xf74 <__gesf2>
     98c:	88 23       	and	r24, r24
     98e:	8c f0       	brlt	.+34     	; 0x9b2 <__fixunssfsi+0x3e>
     990:	c8 01       	movw	r24, r16
     992:	b7 01       	movw	r22, r14
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	40 e0       	ldi	r20, 0x00	; 0
     99a:	5f e4       	ldi	r21, 0x4F	; 79
     99c:	0e 94 32 06 	call	0xc64	; 0xc64 <__subsf3>
     9a0:	0e 94 4a 08 	call	0x1094	; 0x1094 <__fixsfsi>
     9a4:	9b 01       	movw	r18, r22
     9a6:	ac 01       	movw	r20, r24
     9a8:	20 50       	subi	r18, 0x00	; 0
     9aa:	30 40       	sbci	r19, 0x00	; 0
     9ac:	40 40       	sbci	r20, 0x00	; 0
     9ae:	50 48       	sbci	r21, 0x80	; 128
     9b0:	06 c0       	rjmp	.+12     	; 0x9be <__fixunssfsi+0x4a>
     9b2:	c8 01       	movw	r24, r16
     9b4:	b7 01       	movw	r22, r14
     9b6:	0e 94 4a 08 	call	0x1094	; 0x1094 <__fixsfsi>
     9ba:	9b 01       	movw	r18, r22
     9bc:	ac 01       	movw	r20, r24
     9be:	b9 01       	movw	r22, r18
     9c0:	ca 01       	movw	r24, r20
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	08 95       	ret

000009cc <_fpadd_parts>:
     9cc:	a0 e0       	ldi	r26, 0x00	; 0
     9ce:	b0 e0       	ldi	r27, 0x00	; 0
     9d0:	ec ee       	ldi	r30, 0xEC	; 236
     9d2:	f4 e0       	ldi	r31, 0x04	; 4
     9d4:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__prologue_saves__>
     9d8:	dc 01       	movw	r26, r24
     9da:	2b 01       	movw	r4, r22
     9dc:	fa 01       	movw	r30, r20
     9de:	9c 91       	ld	r25, X
     9e0:	92 30       	cpi	r25, 0x02	; 2
     9e2:	08 f4       	brcc	.+2      	; 0x9e6 <_fpadd_parts+0x1a>
     9e4:	39 c1       	rjmp	.+626    	; 0xc58 <_fpadd_parts+0x28c>
     9e6:	eb 01       	movw	r28, r22
     9e8:	88 81       	ld	r24, Y
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	08 f4       	brcc	.+2      	; 0x9f0 <_fpadd_parts+0x24>
     9ee:	33 c1       	rjmp	.+614    	; 0xc56 <_fpadd_parts+0x28a>
     9f0:	94 30       	cpi	r25, 0x04	; 4
     9f2:	69 f4       	brne	.+26     	; 0xa0e <_fpadd_parts+0x42>
     9f4:	84 30       	cpi	r24, 0x04	; 4
     9f6:	09 f0       	breq	.+2      	; 0x9fa <_fpadd_parts+0x2e>
     9f8:	2f c1       	rjmp	.+606    	; 0xc58 <_fpadd_parts+0x28c>
     9fa:	11 96       	adiw	r26, 0x01	; 1
     9fc:	9c 91       	ld	r25, X
     9fe:	11 97       	sbiw	r26, 0x01	; 1
     a00:	89 81       	ldd	r24, Y+1	; 0x01
     a02:	98 17       	cp	r25, r24
     a04:	09 f4       	brne	.+2      	; 0xa08 <_fpadd_parts+0x3c>
     a06:	28 c1       	rjmp	.+592    	; 0xc58 <_fpadd_parts+0x28c>
     a08:	a0 e6       	ldi	r26, 0x60	; 96
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	25 c1       	rjmp	.+586    	; 0xc58 <_fpadd_parts+0x28c>
     a0e:	84 30       	cpi	r24, 0x04	; 4
     a10:	09 f4       	brne	.+2      	; 0xa14 <_fpadd_parts+0x48>
     a12:	21 c1       	rjmp	.+578    	; 0xc56 <_fpadd_parts+0x28a>
     a14:	82 30       	cpi	r24, 0x02	; 2
     a16:	a9 f4       	brne	.+42     	; 0xa42 <_fpadd_parts+0x76>
     a18:	92 30       	cpi	r25, 0x02	; 2
     a1a:	09 f0       	breq	.+2      	; 0xa1e <_fpadd_parts+0x52>
     a1c:	1d c1       	rjmp	.+570    	; 0xc58 <_fpadd_parts+0x28c>
     a1e:	9a 01       	movw	r18, r20
     a20:	ad 01       	movw	r20, r26
     a22:	88 e0       	ldi	r24, 0x08	; 8
     a24:	ea 01       	movw	r28, r20
     a26:	09 90       	ld	r0, Y+
     a28:	ae 01       	movw	r20, r28
     a2a:	e9 01       	movw	r28, r18
     a2c:	09 92       	st	Y+, r0
     a2e:	9e 01       	movw	r18, r28
     a30:	81 50       	subi	r24, 0x01	; 1
     a32:	c1 f7       	brne	.-16     	; 0xa24 <_fpadd_parts+0x58>
     a34:	e2 01       	movw	r28, r4
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	11 96       	adiw	r26, 0x01	; 1
     a3a:	9c 91       	ld	r25, X
     a3c:	89 23       	and	r24, r25
     a3e:	81 83       	std	Z+1, r24	; 0x01
     a40:	08 c1       	rjmp	.+528    	; 0xc52 <_fpadd_parts+0x286>
     a42:	92 30       	cpi	r25, 0x02	; 2
     a44:	09 f4       	brne	.+2      	; 0xa48 <_fpadd_parts+0x7c>
     a46:	07 c1       	rjmp	.+526    	; 0xc56 <_fpadd_parts+0x28a>
     a48:	12 96       	adiw	r26, 0x02	; 2
     a4a:	2d 90       	ld	r2, X+
     a4c:	3c 90       	ld	r3, X
     a4e:	13 97       	sbiw	r26, 0x03	; 3
     a50:	eb 01       	movw	r28, r22
     a52:	8a 81       	ldd	r24, Y+2	; 0x02
     a54:	9b 81       	ldd	r25, Y+3	; 0x03
     a56:	14 96       	adiw	r26, 0x04	; 4
     a58:	ad 90       	ld	r10, X+
     a5a:	bd 90       	ld	r11, X+
     a5c:	cd 90       	ld	r12, X+
     a5e:	dc 90       	ld	r13, X
     a60:	17 97       	sbiw	r26, 0x07	; 7
     a62:	ec 80       	ldd	r14, Y+4	; 0x04
     a64:	fd 80       	ldd	r15, Y+5	; 0x05
     a66:	0e 81       	ldd	r16, Y+6	; 0x06
     a68:	1f 81       	ldd	r17, Y+7	; 0x07
     a6a:	91 01       	movw	r18, r2
     a6c:	28 1b       	sub	r18, r24
     a6e:	39 0b       	sbc	r19, r25
     a70:	b9 01       	movw	r22, r18
     a72:	37 ff       	sbrs	r19, 7
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <_fpadd_parts+0xb2>
     a76:	66 27       	eor	r22, r22
     a78:	77 27       	eor	r23, r23
     a7a:	62 1b       	sub	r22, r18
     a7c:	73 0b       	sbc	r23, r19
     a7e:	60 32       	cpi	r22, 0x20	; 32
     a80:	71 05       	cpc	r23, r1
     a82:	0c f0       	brlt	.+2      	; 0xa86 <_fpadd_parts+0xba>
     a84:	61 c0       	rjmp	.+194    	; 0xb48 <_fpadd_parts+0x17c>
     a86:	12 16       	cp	r1, r18
     a88:	13 06       	cpc	r1, r19
     a8a:	6c f5       	brge	.+90     	; 0xae6 <_fpadd_parts+0x11a>
     a8c:	37 01       	movw	r6, r14
     a8e:	48 01       	movw	r8, r16
     a90:	06 2e       	mov	r0, r22
     a92:	04 c0       	rjmp	.+8      	; 0xa9c <_fpadd_parts+0xd0>
     a94:	96 94       	lsr	r9
     a96:	87 94       	ror	r8
     a98:	77 94       	ror	r7
     a9a:	67 94       	ror	r6
     a9c:	0a 94       	dec	r0
     a9e:	d2 f7       	brpl	.-12     	; 0xa94 <_fpadd_parts+0xc8>
     aa0:	21 e0       	ldi	r18, 0x01	; 1
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	40 e0       	ldi	r20, 0x00	; 0
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <_fpadd_parts+0xe6>
     aaa:	22 0f       	add	r18, r18
     aac:	33 1f       	adc	r19, r19
     aae:	44 1f       	adc	r20, r20
     ab0:	55 1f       	adc	r21, r21
     ab2:	6a 95       	dec	r22
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <_fpadd_parts+0xde>
     ab6:	21 50       	subi	r18, 0x01	; 1
     ab8:	30 40       	sbci	r19, 0x00	; 0
     aba:	40 40       	sbci	r20, 0x00	; 0
     abc:	50 40       	sbci	r21, 0x00	; 0
     abe:	2e 21       	and	r18, r14
     ac0:	3f 21       	and	r19, r15
     ac2:	40 23       	and	r20, r16
     ac4:	51 23       	and	r21, r17
     ac6:	21 15       	cp	r18, r1
     ac8:	31 05       	cpc	r19, r1
     aca:	41 05       	cpc	r20, r1
     acc:	51 05       	cpc	r21, r1
     ace:	21 f0       	breq	.+8      	; 0xad8 <_fpadd_parts+0x10c>
     ad0:	21 e0       	ldi	r18, 0x01	; 1
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	79 01       	movw	r14, r18
     ada:	8a 01       	movw	r16, r20
     adc:	e6 28       	or	r14, r6
     ade:	f7 28       	or	r15, r7
     ae0:	08 29       	or	r16, r8
     ae2:	19 29       	or	r17, r9
     ae4:	3c c0       	rjmp	.+120    	; 0xb5e <_fpadd_parts+0x192>
     ae6:	23 2b       	or	r18, r19
     ae8:	d1 f1       	breq	.+116    	; 0xb5e <_fpadd_parts+0x192>
     aea:	26 0e       	add	r2, r22
     aec:	37 1e       	adc	r3, r23
     aee:	35 01       	movw	r6, r10
     af0:	46 01       	movw	r8, r12
     af2:	06 2e       	mov	r0, r22
     af4:	04 c0       	rjmp	.+8      	; 0xafe <_fpadd_parts+0x132>
     af6:	96 94       	lsr	r9
     af8:	87 94       	ror	r8
     afa:	77 94       	ror	r7
     afc:	67 94       	ror	r6
     afe:	0a 94       	dec	r0
     b00:	d2 f7       	brpl	.-12     	; 0xaf6 <_fpadd_parts+0x12a>
     b02:	21 e0       	ldi	r18, 0x01	; 1
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	04 c0       	rjmp	.+8      	; 0xb14 <_fpadd_parts+0x148>
     b0c:	22 0f       	add	r18, r18
     b0e:	33 1f       	adc	r19, r19
     b10:	44 1f       	adc	r20, r20
     b12:	55 1f       	adc	r21, r21
     b14:	6a 95       	dec	r22
     b16:	d2 f7       	brpl	.-12     	; 0xb0c <_fpadd_parts+0x140>
     b18:	21 50       	subi	r18, 0x01	; 1
     b1a:	30 40       	sbci	r19, 0x00	; 0
     b1c:	40 40       	sbci	r20, 0x00	; 0
     b1e:	50 40       	sbci	r21, 0x00	; 0
     b20:	2a 21       	and	r18, r10
     b22:	3b 21       	and	r19, r11
     b24:	4c 21       	and	r20, r12
     b26:	5d 21       	and	r21, r13
     b28:	21 15       	cp	r18, r1
     b2a:	31 05       	cpc	r19, r1
     b2c:	41 05       	cpc	r20, r1
     b2e:	51 05       	cpc	r21, r1
     b30:	21 f0       	breq	.+8      	; 0xb3a <_fpadd_parts+0x16e>
     b32:	21 e0       	ldi	r18, 0x01	; 1
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	40 e0       	ldi	r20, 0x00	; 0
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	59 01       	movw	r10, r18
     b3c:	6a 01       	movw	r12, r20
     b3e:	a6 28       	or	r10, r6
     b40:	b7 28       	or	r11, r7
     b42:	c8 28       	or	r12, r8
     b44:	d9 28       	or	r13, r9
     b46:	0b c0       	rjmp	.+22     	; 0xb5e <_fpadd_parts+0x192>
     b48:	82 15       	cp	r24, r2
     b4a:	93 05       	cpc	r25, r3
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <_fpadd_parts+0x18c>
     b4e:	1c 01       	movw	r2, r24
     b50:	aa 24       	eor	r10, r10
     b52:	bb 24       	eor	r11, r11
     b54:	65 01       	movw	r12, r10
     b56:	03 c0       	rjmp	.+6      	; 0xb5e <_fpadd_parts+0x192>
     b58:	ee 24       	eor	r14, r14
     b5a:	ff 24       	eor	r15, r15
     b5c:	87 01       	movw	r16, r14
     b5e:	11 96       	adiw	r26, 0x01	; 1
     b60:	9c 91       	ld	r25, X
     b62:	d2 01       	movw	r26, r4
     b64:	11 96       	adiw	r26, 0x01	; 1
     b66:	8c 91       	ld	r24, X
     b68:	98 17       	cp	r25, r24
     b6a:	09 f4       	brne	.+2      	; 0xb6e <_fpadd_parts+0x1a2>
     b6c:	45 c0       	rjmp	.+138    	; 0xbf8 <_fpadd_parts+0x22c>
     b6e:	99 23       	and	r25, r25
     b70:	39 f0       	breq	.+14     	; 0xb80 <_fpadd_parts+0x1b4>
     b72:	a8 01       	movw	r20, r16
     b74:	97 01       	movw	r18, r14
     b76:	2a 19       	sub	r18, r10
     b78:	3b 09       	sbc	r19, r11
     b7a:	4c 09       	sbc	r20, r12
     b7c:	5d 09       	sbc	r21, r13
     b7e:	06 c0       	rjmp	.+12     	; 0xb8c <_fpadd_parts+0x1c0>
     b80:	a6 01       	movw	r20, r12
     b82:	95 01       	movw	r18, r10
     b84:	2e 19       	sub	r18, r14
     b86:	3f 09       	sbc	r19, r15
     b88:	40 0b       	sbc	r20, r16
     b8a:	51 0b       	sbc	r21, r17
     b8c:	57 fd       	sbrc	r21, 7
     b8e:	08 c0       	rjmp	.+16     	; 0xba0 <_fpadd_parts+0x1d4>
     b90:	11 82       	std	Z+1, r1	; 0x01
     b92:	33 82       	std	Z+3, r3	; 0x03
     b94:	22 82       	std	Z+2, r2	; 0x02
     b96:	24 83       	std	Z+4, r18	; 0x04
     b98:	35 83       	std	Z+5, r19	; 0x05
     b9a:	46 83       	std	Z+6, r20	; 0x06
     b9c:	57 83       	std	Z+7, r21	; 0x07
     b9e:	1d c0       	rjmp	.+58     	; 0xbda <_fpadd_parts+0x20e>
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	81 83       	std	Z+1, r24	; 0x01
     ba4:	33 82       	std	Z+3, r3	; 0x03
     ba6:	22 82       	std	Z+2, r2	; 0x02
     ba8:	88 27       	eor	r24, r24
     baa:	99 27       	eor	r25, r25
     bac:	dc 01       	movw	r26, r24
     bae:	82 1b       	sub	r24, r18
     bb0:	93 0b       	sbc	r25, r19
     bb2:	a4 0b       	sbc	r26, r20
     bb4:	b5 0b       	sbc	r27, r21
     bb6:	84 83       	std	Z+4, r24	; 0x04
     bb8:	95 83       	std	Z+5, r25	; 0x05
     bba:	a6 83       	std	Z+6, r26	; 0x06
     bbc:	b7 83       	std	Z+7, r27	; 0x07
     bbe:	0d c0       	rjmp	.+26     	; 0xbda <_fpadd_parts+0x20e>
     bc0:	22 0f       	add	r18, r18
     bc2:	33 1f       	adc	r19, r19
     bc4:	44 1f       	adc	r20, r20
     bc6:	55 1f       	adc	r21, r21
     bc8:	24 83       	std	Z+4, r18	; 0x04
     bca:	35 83       	std	Z+5, r19	; 0x05
     bcc:	46 83       	std	Z+6, r20	; 0x06
     bce:	57 83       	std	Z+7, r21	; 0x07
     bd0:	82 81       	ldd	r24, Z+2	; 0x02
     bd2:	93 81       	ldd	r25, Z+3	; 0x03
     bd4:	01 97       	sbiw	r24, 0x01	; 1
     bd6:	93 83       	std	Z+3, r25	; 0x03
     bd8:	82 83       	std	Z+2, r24	; 0x02
     bda:	24 81       	ldd	r18, Z+4	; 0x04
     bdc:	35 81       	ldd	r19, Z+5	; 0x05
     bde:	46 81       	ldd	r20, Z+6	; 0x06
     be0:	57 81       	ldd	r21, Z+7	; 0x07
     be2:	da 01       	movw	r26, r20
     be4:	c9 01       	movw	r24, r18
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	a1 09       	sbc	r26, r1
     bea:	b1 09       	sbc	r27, r1
     bec:	8f 5f       	subi	r24, 0xFF	; 255
     bee:	9f 4f       	sbci	r25, 0xFF	; 255
     bf0:	af 4f       	sbci	r26, 0xFF	; 255
     bf2:	bf 43       	sbci	r27, 0x3F	; 63
     bf4:	28 f3       	brcs	.-54     	; 0xbc0 <_fpadd_parts+0x1f4>
     bf6:	0b c0       	rjmp	.+22     	; 0xc0e <_fpadd_parts+0x242>
     bf8:	91 83       	std	Z+1, r25	; 0x01
     bfa:	33 82       	std	Z+3, r3	; 0x03
     bfc:	22 82       	std	Z+2, r2	; 0x02
     bfe:	ea 0c       	add	r14, r10
     c00:	fb 1c       	adc	r15, r11
     c02:	0c 1d       	adc	r16, r12
     c04:	1d 1d       	adc	r17, r13
     c06:	e4 82       	std	Z+4, r14	; 0x04
     c08:	f5 82       	std	Z+5, r15	; 0x05
     c0a:	06 83       	std	Z+6, r16	; 0x06
     c0c:	17 83       	std	Z+7, r17	; 0x07
     c0e:	83 e0       	ldi	r24, 0x03	; 3
     c10:	80 83       	st	Z, r24
     c12:	24 81       	ldd	r18, Z+4	; 0x04
     c14:	35 81       	ldd	r19, Z+5	; 0x05
     c16:	46 81       	ldd	r20, Z+6	; 0x06
     c18:	57 81       	ldd	r21, Z+7	; 0x07
     c1a:	57 ff       	sbrs	r21, 7
     c1c:	1a c0       	rjmp	.+52     	; 0xc52 <_fpadd_parts+0x286>
     c1e:	c9 01       	movw	r24, r18
     c20:	aa 27       	eor	r26, r26
     c22:	97 fd       	sbrc	r25, 7
     c24:	a0 95       	com	r26
     c26:	ba 2f       	mov	r27, r26
     c28:	81 70       	andi	r24, 0x01	; 1
     c2a:	90 70       	andi	r25, 0x00	; 0
     c2c:	a0 70       	andi	r26, 0x00	; 0
     c2e:	b0 70       	andi	r27, 0x00	; 0
     c30:	56 95       	lsr	r21
     c32:	47 95       	ror	r20
     c34:	37 95       	ror	r19
     c36:	27 95       	ror	r18
     c38:	82 2b       	or	r24, r18
     c3a:	93 2b       	or	r25, r19
     c3c:	a4 2b       	or	r26, r20
     c3e:	b5 2b       	or	r27, r21
     c40:	84 83       	std	Z+4, r24	; 0x04
     c42:	95 83       	std	Z+5, r25	; 0x05
     c44:	a6 83       	std	Z+6, r26	; 0x06
     c46:	b7 83       	std	Z+7, r27	; 0x07
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	93 83       	std	Z+3, r25	; 0x03
     c50:	82 83       	std	Z+2, r24	; 0x02
     c52:	df 01       	movw	r26, r30
     c54:	01 c0       	rjmp	.+2      	; 0xc58 <_fpadd_parts+0x28c>
     c56:	d2 01       	movw	r26, r4
     c58:	cd 01       	movw	r24, r26
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	e2 e1       	ldi	r30, 0x12	; 18
     c60:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__epilogue_restores__>

00000c64 <__subsf3>:
     c64:	a0 e2       	ldi	r26, 0x20	; 32
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e8 e3       	ldi	r30, 0x38	; 56
     c6a:	f6 e0       	ldi	r31, 0x06	; 6
     c6c:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__prologue_saves__+0x18>
     c70:	69 83       	std	Y+1, r22	; 0x01
     c72:	7a 83       	std	Y+2, r23	; 0x02
     c74:	8b 83       	std	Y+3, r24	; 0x03
     c76:	9c 83       	std	Y+4, r25	; 0x04
     c78:	2d 83       	std	Y+5, r18	; 0x05
     c7a:	3e 83       	std	Y+6, r19	; 0x06
     c7c:	4f 83       	std	Y+7, r20	; 0x07
     c7e:	58 87       	std	Y+8, r21	; 0x08
     c80:	e9 e0       	ldi	r30, 0x09	; 9
     c82:	ee 2e       	mov	r14, r30
     c84:	f1 2c       	mov	r15, r1
     c86:	ec 0e       	add	r14, r28
     c88:	fd 1e       	adc	r15, r29
     c8a:	ce 01       	movw	r24, r28
     c8c:	01 96       	adiw	r24, 0x01	; 1
     c8e:	b7 01       	movw	r22, r14
     c90:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__unpack_f>
     c94:	8e 01       	movw	r16, r28
     c96:	0f 5e       	subi	r16, 0xEF	; 239
     c98:	1f 4f       	sbci	r17, 0xFF	; 255
     c9a:	ce 01       	movw	r24, r28
     c9c:	05 96       	adiw	r24, 0x05	; 5
     c9e:	b8 01       	movw	r22, r16
     ca0:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__unpack_f>
     ca4:	8a 89       	ldd	r24, Y+18	; 0x12
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	89 27       	eor	r24, r25
     caa:	8a 8b       	std	Y+18, r24	; 0x12
     cac:	c7 01       	movw	r24, r14
     cae:	b8 01       	movw	r22, r16
     cb0:	ae 01       	movw	r20, r28
     cb2:	47 5e       	subi	r20, 0xE7	; 231
     cb4:	5f 4f       	sbci	r21, 0xFF	; 255
     cb6:	0e 94 e6 04 	call	0x9cc	; 0x9cc <_fpadd_parts>
     cba:	0e 94 66 09 	call	0x12cc	; 0x12cc <__pack_f>
     cbe:	a0 96       	adiw	r28, 0x20	; 32
     cc0:	e6 e0       	ldi	r30, 0x06	; 6
     cc2:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__epilogue_restores__+0x18>

00000cc6 <__addsf3>:
     cc6:	a0 e2       	ldi	r26, 0x20	; 32
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e9 e6       	ldi	r30, 0x69	; 105
     ccc:	f6 e0       	ldi	r31, 0x06	; 6
     cce:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__prologue_saves__+0x18>
     cd2:	69 83       	std	Y+1, r22	; 0x01
     cd4:	7a 83       	std	Y+2, r23	; 0x02
     cd6:	8b 83       	std	Y+3, r24	; 0x03
     cd8:	9c 83       	std	Y+4, r25	; 0x04
     cda:	2d 83       	std	Y+5, r18	; 0x05
     cdc:	3e 83       	std	Y+6, r19	; 0x06
     cde:	4f 83       	std	Y+7, r20	; 0x07
     ce0:	58 87       	std	Y+8, r21	; 0x08
     ce2:	f9 e0       	ldi	r31, 0x09	; 9
     ce4:	ef 2e       	mov	r14, r31
     ce6:	f1 2c       	mov	r15, r1
     ce8:	ec 0e       	add	r14, r28
     cea:	fd 1e       	adc	r15, r29
     cec:	ce 01       	movw	r24, r28
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	b7 01       	movw	r22, r14
     cf2:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__unpack_f>
     cf6:	8e 01       	movw	r16, r28
     cf8:	0f 5e       	subi	r16, 0xEF	; 239
     cfa:	1f 4f       	sbci	r17, 0xFF	; 255
     cfc:	ce 01       	movw	r24, r28
     cfe:	05 96       	adiw	r24, 0x05	; 5
     d00:	b8 01       	movw	r22, r16
     d02:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__unpack_f>
     d06:	c7 01       	movw	r24, r14
     d08:	b8 01       	movw	r22, r16
     d0a:	ae 01       	movw	r20, r28
     d0c:	47 5e       	subi	r20, 0xE7	; 231
     d0e:	5f 4f       	sbci	r21, 0xFF	; 255
     d10:	0e 94 e6 04 	call	0x9cc	; 0x9cc <_fpadd_parts>
     d14:	0e 94 66 09 	call	0x12cc	; 0x12cc <__pack_f>
     d18:	a0 96       	adiw	r28, 0x20	; 32
     d1a:	e6 e0       	ldi	r30, 0x06	; 6
     d1c:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__epilogue_restores__+0x18>

00000d20 <__mulsf3>:
     d20:	a0 e2       	ldi	r26, 0x20	; 32
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e6 e9       	ldi	r30, 0x96	; 150
     d26:	f6 e0       	ldi	r31, 0x06	; 6
     d28:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__prologue_saves__>
     d2c:	69 83       	std	Y+1, r22	; 0x01
     d2e:	7a 83       	std	Y+2, r23	; 0x02
     d30:	8b 83       	std	Y+3, r24	; 0x03
     d32:	9c 83       	std	Y+4, r25	; 0x04
     d34:	2d 83       	std	Y+5, r18	; 0x05
     d36:	3e 83       	std	Y+6, r19	; 0x06
     d38:	4f 83       	std	Y+7, r20	; 0x07
     d3a:	58 87       	std	Y+8, r21	; 0x08
     d3c:	ce 01       	movw	r24, r28
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	be 01       	movw	r22, r28
     d42:	67 5f       	subi	r22, 0xF7	; 247
     d44:	7f 4f       	sbci	r23, 0xFF	; 255
     d46:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__unpack_f>
     d4a:	ce 01       	movw	r24, r28
     d4c:	05 96       	adiw	r24, 0x05	; 5
     d4e:	be 01       	movw	r22, r28
     d50:	6f 5e       	subi	r22, 0xEF	; 239
     d52:	7f 4f       	sbci	r23, 0xFF	; 255
     d54:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__unpack_f>
     d58:	99 85       	ldd	r25, Y+9	; 0x09
     d5a:	92 30       	cpi	r25, 0x02	; 2
     d5c:	88 f0       	brcs	.+34     	; 0xd80 <__mulsf3+0x60>
     d5e:	89 89       	ldd	r24, Y+17	; 0x11
     d60:	82 30       	cpi	r24, 0x02	; 2
     d62:	c8 f0       	brcs	.+50     	; 0xd96 <__mulsf3+0x76>
     d64:	94 30       	cpi	r25, 0x04	; 4
     d66:	19 f4       	brne	.+6      	; 0xd6e <__mulsf3+0x4e>
     d68:	82 30       	cpi	r24, 0x02	; 2
     d6a:	51 f4       	brne	.+20     	; 0xd80 <__mulsf3+0x60>
     d6c:	04 c0       	rjmp	.+8      	; 0xd76 <__mulsf3+0x56>
     d6e:	84 30       	cpi	r24, 0x04	; 4
     d70:	29 f4       	brne	.+10     	; 0xd7c <__mulsf3+0x5c>
     d72:	92 30       	cpi	r25, 0x02	; 2
     d74:	81 f4       	brne	.+32     	; 0xd96 <__mulsf3+0x76>
     d76:	80 e6       	ldi	r24, 0x60	; 96
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	c6 c0       	rjmp	.+396    	; 0xf08 <__mulsf3+0x1e8>
     d7c:	92 30       	cpi	r25, 0x02	; 2
     d7e:	49 f4       	brne	.+18     	; 0xd92 <__mulsf3+0x72>
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	9a 85       	ldd	r25, Y+10	; 0x0a
     d84:	8a 89       	ldd	r24, Y+18	; 0x12
     d86:	98 13       	cpse	r25, r24
     d88:	21 e0       	ldi	r18, 0x01	; 1
     d8a:	2a 87       	std	Y+10, r18	; 0x0a
     d8c:	ce 01       	movw	r24, r28
     d8e:	09 96       	adiw	r24, 0x09	; 9
     d90:	bb c0       	rjmp	.+374    	; 0xf08 <__mulsf3+0x1e8>
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	49 f4       	brne	.+18     	; 0xda8 <__mulsf3+0x88>
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9a:	8a 89       	ldd	r24, Y+18	; 0x12
     d9c:	98 13       	cpse	r25, r24
     d9e:	21 e0       	ldi	r18, 0x01	; 1
     da0:	2a 8b       	std	Y+18, r18	; 0x12
     da2:	ce 01       	movw	r24, r28
     da4:	41 96       	adiw	r24, 0x11	; 17
     da6:	b0 c0       	rjmp	.+352    	; 0xf08 <__mulsf3+0x1e8>
     da8:	2d 84       	ldd	r2, Y+13	; 0x0d
     daa:	3e 84       	ldd	r3, Y+14	; 0x0e
     dac:	4f 84       	ldd	r4, Y+15	; 0x0f
     dae:	58 88       	ldd	r5, Y+16	; 0x10
     db0:	6d 88       	ldd	r6, Y+21	; 0x15
     db2:	7e 88       	ldd	r7, Y+22	; 0x16
     db4:	8f 88       	ldd	r8, Y+23	; 0x17
     db6:	98 8c       	ldd	r9, Y+24	; 0x18
     db8:	ee 24       	eor	r14, r14
     dba:	ff 24       	eor	r15, r15
     dbc:	87 01       	movw	r16, r14
     dbe:	aa 24       	eor	r10, r10
     dc0:	bb 24       	eor	r11, r11
     dc2:	65 01       	movw	r12, r10
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	e0 e0       	ldi	r30, 0x00	; 0
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	c1 01       	movw	r24, r2
     dd2:	81 70       	andi	r24, 0x01	; 1
     dd4:	90 70       	andi	r25, 0x00	; 0
     dd6:	89 2b       	or	r24, r25
     dd8:	e9 f0       	breq	.+58     	; 0xe14 <__mulsf3+0xf4>
     dda:	e6 0c       	add	r14, r6
     ddc:	f7 1c       	adc	r15, r7
     dde:	08 1d       	adc	r16, r8
     de0:	19 1d       	adc	r17, r9
     de2:	9a 01       	movw	r18, r20
     de4:	ab 01       	movw	r20, r22
     de6:	2a 0d       	add	r18, r10
     de8:	3b 1d       	adc	r19, r11
     dea:	4c 1d       	adc	r20, r12
     dec:	5d 1d       	adc	r21, r13
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	a0 e0       	ldi	r26, 0x00	; 0
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e6 14       	cp	r14, r6
     df8:	f7 04       	cpc	r15, r7
     dfa:	08 05       	cpc	r16, r8
     dfc:	19 05       	cpc	r17, r9
     dfe:	20 f4       	brcc	.+8      	; 0xe08 <__mulsf3+0xe8>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a0 e0       	ldi	r26, 0x00	; 0
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	ba 01       	movw	r22, r20
     e0a:	a9 01       	movw	r20, r18
     e0c:	48 0f       	add	r20, r24
     e0e:	59 1f       	adc	r21, r25
     e10:	6a 1f       	adc	r22, r26
     e12:	7b 1f       	adc	r23, r27
     e14:	aa 0c       	add	r10, r10
     e16:	bb 1c       	adc	r11, r11
     e18:	cc 1c       	adc	r12, r12
     e1a:	dd 1c       	adc	r13, r13
     e1c:	97 fe       	sbrs	r9, 7
     e1e:	08 c0       	rjmp	.+16     	; 0xe30 <__mulsf3+0x110>
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	a0 e0       	ldi	r26, 0x00	; 0
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	a8 2a       	or	r10, r24
     e2a:	b9 2a       	or	r11, r25
     e2c:	ca 2a       	or	r12, r26
     e2e:	db 2a       	or	r13, r27
     e30:	31 96       	adiw	r30, 0x01	; 1
     e32:	e0 32       	cpi	r30, 0x20	; 32
     e34:	f1 05       	cpc	r31, r1
     e36:	49 f0       	breq	.+18     	; 0xe4a <__mulsf3+0x12a>
     e38:	66 0c       	add	r6, r6
     e3a:	77 1c       	adc	r7, r7
     e3c:	88 1c       	adc	r8, r8
     e3e:	99 1c       	adc	r9, r9
     e40:	56 94       	lsr	r5
     e42:	47 94       	ror	r4
     e44:	37 94       	ror	r3
     e46:	27 94       	ror	r2
     e48:	c3 cf       	rjmp	.-122    	; 0xdd0 <__mulsf3+0xb0>
     e4a:	fa 85       	ldd	r31, Y+10	; 0x0a
     e4c:	ea 89       	ldd	r30, Y+18	; 0x12
     e4e:	2b 89       	ldd	r18, Y+19	; 0x13
     e50:	3c 89       	ldd	r19, Y+20	; 0x14
     e52:	8b 85       	ldd	r24, Y+11	; 0x0b
     e54:	9c 85       	ldd	r25, Y+12	; 0x0c
     e56:	28 0f       	add	r18, r24
     e58:	39 1f       	adc	r19, r25
     e5a:	2e 5f       	subi	r18, 0xFE	; 254
     e5c:	3f 4f       	sbci	r19, 0xFF	; 255
     e5e:	17 c0       	rjmp	.+46     	; 0xe8e <__mulsf3+0x16e>
     e60:	ca 01       	movw	r24, r20
     e62:	81 70       	andi	r24, 0x01	; 1
     e64:	90 70       	andi	r25, 0x00	; 0
     e66:	89 2b       	or	r24, r25
     e68:	61 f0       	breq	.+24     	; 0xe82 <__mulsf3+0x162>
     e6a:	16 95       	lsr	r17
     e6c:	07 95       	ror	r16
     e6e:	f7 94       	ror	r15
     e70:	e7 94       	ror	r14
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	a0 e0       	ldi	r26, 0x00	; 0
     e78:	b0 e8       	ldi	r27, 0x80	; 128
     e7a:	e8 2a       	or	r14, r24
     e7c:	f9 2a       	or	r15, r25
     e7e:	0a 2b       	or	r16, r26
     e80:	1b 2b       	or	r17, r27
     e82:	76 95       	lsr	r23
     e84:	67 95       	ror	r22
     e86:	57 95       	ror	r21
     e88:	47 95       	ror	r20
     e8a:	2f 5f       	subi	r18, 0xFF	; 255
     e8c:	3f 4f       	sbci	r19, 0xFF	; 255
     e8e:	77 fd       	sbrc	r23, 7
     e90:	e7 cf       	rjmp	.-50     	; 0xe60 <__mulsf3+0x140>
     e92:	0c c0       	rjmp	.+24     	; 0xeac <__mulsf3+0x18c>
     e94:	44 0f       	add	r20, r20
     e96:	55 1f       	adc	r21, r21
     e98:	66 1f       	adc	r22, r22
     e9a:	77 1f       	adc	r23, r23
     e9c:	17 fd       	sbrc	r17, 7
     e9e:	41 60       	ori	r20, 0x01	; 1
     ea0:	ee 0c       	add	r14, r14
     ea2:	ff 1c       	adc	r15, r15
     ea4:	00 1f       	adc	r16, r16
     ea6:	11 1f       	adc	r17, r17
     ea8:	21 50       	subi	r18, 0x01	; 1
     eaa:	30 40       	sbci	r19, 0x00	; 0
     eac:	40 30       	cpi	r20, 0x00	; 0
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	59 07       	cpc	r21, r25
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	69 07       	cpc	r22, r25
     eb6:	90 e4       	ldi	r25, 0x40	; 64
     eb8:	79 07       	cpc	r23, r25
     eba:	60 f3       	brcs	.-40     	; 0xe94 <__mulsf3+0x174>
     ebc:	2b 8f       	std	Y+27, r18	; 0x1b
     ebe:	3c 8f       	std	Y+28, r19	; 0x1c
     ec0:	db 01       	movw	r26, r22
     ec2:	ca 01       	movw	r24, r20
     ec4:	8f 77       	andi	r24, 0x7F	; 127
     ec6:	90 70       	andi	r25, 0x00	; 0
     ec8:	a0 70       	andi	r26, 0x00	; 0
     eca:	b0 70       	andi	r27, 0x00	; 0
     ecc:	80 34       	cpi	r24, 0x40	; 64
     ece:	91 05       	cpc	r25, r1
     ed0:	a1 05       	cpc	r26, r1
     ed2:	b1 05       	cpc	r27, r1
     ed4:	61 f4       	brne	.+24     	; 0xeee <__mulsf3+0x1ce>
     ed6:	47 fd       	sbrc	r20, 7
     ed8:	0a c0       	rjmp	.+20     	; 0xeee <__mulsf3+0x1ce>
     eda:	e1 14       	cp	r14, r1
     edc:	f1 04       	cpc	r15, r1
     ede:	01 05       	cpc	r16, r1
     ee0:	11 05       	cpc	r17, r1
     ee2:	29 f0       	breq	.+10     	; 0xeee <__mulsf3+0x1ce>
     ee4:	40 5c       	subi	r20, 0xC0	; 192
     ee6:	5f 4f       	sbci	r21, 0xFF	; 255
     ee8:	6f 4f       	sbci	r22, 0xFF	; 255
     eea:	7f 4f       	sbci	r23, 0xFF	; 255
     eec:	40 78       	andi	r20, 0x80	; 128
     eee:	1a 8e       	std	Y+26, r1	; 0x1a
     ef0:	fe 17       	cp	r31, r30
     ef2:	11 f0       	breq	.+4      	; 0xef8 <__mulsf3+0x1d8>
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	8a 8f       	std	Y+26, r24	; 0x1a
     ef8:	4d 8f       	std	Y+29, r20	; 0x1d
     efa:	5e 8f       	std	Y+30, r21	; 0x1e
     efc:	6f 8f       	std	Y+31, r22	; 0x1f
     efe:	78 a3       	std	Y+32, r23	; 0x20
     f00:	83 e0       	ldi	r24, 0x03	; 3
     f02:	89 8f       	std	Y+25, r24	; 0x19
     f04:	ce 01       	movw	r24, r28
     f06:	49 96       	adiw	r24, 0x19	; 25
     f08:	0e 94 66 09 	call	0x12cc	; 0x12cc <__pack_f>
     f0c:	a0 96       	adiw	r28, 0x20	; 32
     f0e:	e2 e1       	ldi	r30, 0x12	; 18
     f10:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__epilogue_restores__>

00000f14 <__gtsf2>:
     f14:	a8 e1       	ldi	r26, 0x18	; 24
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e0 e9       	ldi	r30, 0x90	; 144
     f1a:	f7 e0       	ldi	r31, 0x07	; 7
     f1c:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__prologue_saves__+0x18>
     f20:	69 83       	std	Y+1, r22	; 0x01
     f22:	7a 83       	std	Y+2, r23	; 0x02
     f24:	8b 83       	std	Y+3, r24	; 0x03
     f26:	9c 83       	std	Y+4, r25	; 0x04
     f28:	2d 83       	std	Y+5, r18	; 0x05
     f2a:	3e 83       	std	Y+6, r19	; 0x06
     f2c:	4f 83       	std	Y+7, r20	; 0x07
     f2e:	58 87       	std	Y+8, r21	; 0x08
     f30:	89 e0       	ldi	r24, 0x09	; 9
     f32:	e8 2e       	mov	r14, r24
     f34:	f1 2c       	mov	r15, r1
     f36:	ec 0e       	add	r14, r28
     f38:	fd 1e       	adc	r15, r29
     f3a:	ce 01       	movw	r24, r28
     f3c:	01 96       	adiw	r24, 0x01	; 1
     f3e:	b7 01       	movw	r22, r14
     f40:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__unpack_f>
     f44:	8e 01       	movw	r16, r28
     f46:	0f 5e       	subi	r16, 0xEF	; 239
     f48:	1f 4f       	sbci	r17, 0xFF	; 255
     f4a:	ce 01       	movw	r24, r28
     f4c:	05 96       	adiw	r24, 0x05	; 5
     f4e:	b8 01       	movw	r22, r16
     f50:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__unpack_f>
     f54:	89 85       	ldd	r24, Y+9	; 0x09
     f56:	82 30       	cpi	r24, 0x02	; 2
     f58:	40 f0       	brcs	.+16     	; 0xf6a <__gtsf2+0x56>
     f5a:	89 89       	ldd	r24, Y+17	; 0x11
     f5c:	82 30       	cpi	r24, 0x02	; 2
     f5e:	28 f0       	brcs	.+10     	; 0xf6a <__gtsf2+0x56>
     f60:	c7 01       	movw	r24, r14
     f62:	b8 01       	movw	r22, r16
     f64:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__fpcmp_parts_f>
     f68:	01 c0       	rjmp	.+2      	; 0xf6c <__gtsf2+0x58>
     f6a:	8f ef       	ldi	r24, 0xFF	; 255
     f6c:	68 96       	adiw	r28, 0x18	; 24
     f6e:	e6 e0       	ldi	r30, 0x06	; 6
     f70:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__epilogue_restores__+0x18>

00000f74 <__gesf2>:
     f74:	a8 e1       	ldi	r26, 0x18	; 24
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e0 ec       	ldi	r30, 0xC0	; 192
     f7a:	f7 e0       	ldi	r31, 0x07	; 7
     f7c:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__prologue_saves__+0x18>
     f80:	69 83       	std	Y+1, r22	; 0x01
     f82:	7a 83       	std	Y+2, r23	; 0x02
     f84:	8b 83       	std	Y+3, r24	; 0x03
     f86:	9c 83       	std	Y+4, r25	; 0x04
     f88:	2d 83       	std	Y+5, r18	; 0x05
     f8a:	3e 83       	std	Y+6, r19	; 0x06
     f8c:	4f 83       	std	Y+7, r20	; 0x07
     f8e:	58 87       	std	Y+8, r21	; 0x08
     f90:	89 e0       	ldi	r24, 0x09	; 9
     f92:	e8 2e       	mov	r14, r24
     f94:	f1 2c       	mov	r15, r1
     f96:	ec 0e       	add	r14, r28
     f98:	fd 1e       	adc	r15, r29
     f9a:	ce 01       	movw	r24, r28
     f9c:	01 96       	adiw	r24, 0x01	; 1
     f9e:	b7 01       	movw	r22, r14
     fa0:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__unpack_f>
     fa4:	8e 01       	movw	r16, r28
     fa6:	0f 5e       	subi	r16, 0xEF	; 239
     fa8:	1f 4f       	sbci	r17, 0xFF	; 255
     faa:	ce 01       	movw	r24, r28
     fac:	05 96       	adiw	r24, 0x05	; 5
     fae:	b8 01       	movw	r22, r16
     fb0:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__unpack_f>
     fb4:	89 85       	ldd	r24, Y+9	; 0x09
     fb6:	82 30       	cpi	r24, 0x02	; 2
     fb8:	40 f0       	brcs	.+16     	; 0xfca <__gesf2+0x56>
     fba:	89 89       	ldd	r24, Y+17	; 0x11
     fbc:	82 30       	cpi	r24, 0x02	; 2
     fbe:	28 f0       	brcs	.+10     	; 0xfca <__gesf2+0x56>
     fc0:	c7 01       	movw	r24, r14
     fc2:	b8 01       	movw	r22, r16
     fc4:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__fpcmp_parts_f>
     fc8:	01 c0       	rjmp	.+2      	; 0xfcc <__gesf2+0x58>
     fca:	8f ef       	ldi	r24, 0xFF	; 255
     fcc:	68 96       	adiw	r28, 0x18	; 24
     fce:	e6 e0       	ldi	r30, 0x06	; 6
     fd0:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__epilogue_restores__+0x18>

00000fd4 <__ltsf2>:
     fd4:	a8 e1       	ldi	r26, 0x18	; 24
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e0 ef       	ldi	r30, 0xF0	; 240
     fda:	f7 e0       	ldi	r31, 0x07	; 7
     fdc:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__prologue_saves__+0x18>
     fe0:	69 83       	std	Y+1, r22	; 0x01
     fe2:	7a 83       	std	Y+2, r23	; 0x02
     fe4:	8b 83       	std	Y+3, r24	; 0x03
     fe6:	9c 83       	std	Y+4, r25	; 0x04
     fe8:	2d 83       	std	Y+5, r18	; 0x05
     fea:	3e 83       	std	Y+6, r19	; 0x06
     fec:	4f 83       	std	Y+7, r20	; 0x07
     fee:	58 87       	std	Y+8, r21	; 0x08
     ff0:	89 e0       	ldi	r24, 0x09	; 9
     ff2:	e8 2e       	mov	r14, r24
     ff4:	f1 2c       	mov	r15, r1
     ff6:	ec 0e       	add	r14, r28
     ff8:	fd 1e       	adc	r15, r29
     ffa:	ce 01       	movw	r24, r28
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	b7 01       	movw	r22, r14
    1000:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__unpack_f>
    1004:	8e 01       	movw	r16, r28
    1006:	0f 5e       	subi	r16, 0xEF	; 239
    1008:	1f 4f       	sbci	r17, 0xFF	; 255
    100a:	ce 01       	movw	r24, r28
    100c:	05 96       	adiw	r24, 0x05	; 5
    100e:	b8 01       	movw	r22, r16
    1010:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__unpack_f>
    1014:	89 85       	ldd	r24, Y+9	; 0x09
    1016:	82 30       	cpi	r24, 0x02	; 2
    1018:	40 f0       	brcs	.+16     	; 0x102a <__ltsf2+0x56>
    101a:	89 89       	ldd	r24, Y+17	; 0x11
    101c:	82 30       	cpi	r24, 0x02	; 2
    101e:	28 f0       	brcs	.+10     	; 0x102a <__ltsf2+0x56>
    1020:	c7 01       	movw	r24, r14
    1022:	b8 01       	movw	r22, r16
    1024:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__fpcmp_parts_f>
    1028:	01 c0       	rjmp	.+2      	; 0x102c <__ltsf2+0x58>
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	68 96       	adiw	r28, 0x18	; 24
    102e:	e6 e0       	ldi	r30, 0x06	; 6
    1030:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__epilogue_restores__+0x18>

00001034 <__lesf2>:
    1034:	a8 e1       	ldi	r26, 0x18	; 24
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e0 e2       	ldi	r30, 0x20	; 32
    103a:	f8 e0       	ldi	r31, 0x08	; 8
    103c:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__prologue_saves__+0x18>
    1040:	69 83       	std	Y+1, r22	; 0x01
    1042:	7a 83       	std	Y+2, r23	; 0x02
    1044:	8b 83       	std	Y+3, r24	; 0x03
    1046:	9c 83       	std	Y+4, r25	; 0x04
    1048:	2d 83       	std	Y+5, r18	; 0x05
    104a:	3e 83       	std	Y+6, r19	; 0x06
    104c:	4f 83       	std	Y+7, r20	; 0x07
    104e:	58 87       	std	Y+8, r21	; 0x08
    1050:	89 e0       	ldi	r24, 0x09	; 9
    1052:	e8 2e       	mov	r14, r24
    1054:	f1 2c       	mov	r15, r1
    1056:	ec 0e       	add	r14, r28
    1058:	fd 1e       	adc	r15, r29
    105a:	ce 01       	movw	r24, r28
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	b7 01       	movw	r22, r14
    1060:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__unpack_f>
    1064:	8e 01       	movw	r16, r28
    1066:	0f 5e       	subi	r16, 0xEF	; 239
    1068:	1f 4f       	sbci	r17, 0xFF	; 255
    106a:	ce 01       	movw	r24, r28
    106c:	05 96       	adiw	r24, 0x05	; 5
    106e:	b8 01       	movw	r22, r16
    1070:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__unpack_f>
    1074:	89 85       	ldd	r24, Y+9	; 0x09
    1076:	82 30       	cpi	r24, 0x02	; 2
    1078:	40 f0       	brcs	.+16     	; 0x108a <__lesf2+0x56>
    107a:	89 89       	ldd	r24, Y+17	; 0x11
    107c:	82 30       	cpi	r24, 0x02	; 2
    107e:	28 f0       	brcs	.+10     	; 0x108a <__lesf2+0x56>
    1080:	c7 01       	movw	r24, r14
    1082:	b8 01       	movw	r22, r16
    1084:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__fpcmp_parts_f>
    1088:	01 c0       	rjmp	.+2      	; 0x108c <__lesf2+0x58>
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	68 96       	adiw	r28, 0x18	; 24
    108e:	e6 e0       	ldi	r30, 0x06	; 6
    1090:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__epilogue_restores__+0x18>

00001094 <__fixsfsi>:
    1094:	ac e0       	ldi	r26, 0x0C	; 12
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e0 e5       	ldi	r30, 0x50	; 80
    109a:	f8 e0       	ldi	r31, 0x08	; 8
    109c:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__prologue_saves__+0x20>
    10a0:	69 83       	std	Y+1, r22	; 0x01
    10a2:	7a 83       	std	Y+2, r23	; 0x02
    10a4:	8b 83       	std	Y+3, r24	; 0x03
    10a6:	9c 83       	std	Y+4, r25	; 0x04
    10a8:	ce 01       	movw	r24, r28
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	be 01       	movw	r22, r28
    10ae:	6b 5f       	subi	r22, 0xFB	; 251
    10b0:	7f 4f       	sbci	r23, 0xFF	; 255
    10b2:	0e 94 3b 0a 	call	0x1476	; 0x1476 <__unpack_f>
    10b6:	8d 81       	ldd	r24, Y+5	; 0x05
    10b8:	82 30       	cpi	r24, 0x02	; 2
    10ba:	61 f1       	breq	.+88     	; 0x1114 <__fixsfsi+0x80>
    10bc:	82 30       	cpi	r24, 0x02	; 2
    10be:	50 f1       	brcs	.+84     	; 0x1114 <__fixsfsi+0x80>
    10c0:	84 30       	cpi	r24, 0x04	; 4
    10c2:	21 f4       	brne	.+8      	; 0x10cc <__fixsfsi+0x38>
    10c4:	8e 81       	ldd	r24, Y+6	; 0x06
    10c6:	88 23       	and	r24, r24
    10c8:	51 f1       	breq	.+84     	; 0x111e <__fixsfsi+0x8a>
    10ca:	2e c0       	rjmp	.+92     	; 0x1128 <__fixsfsi+0x94>
    10cc:	2f 81       	ldd	r18, Y+7	; 0x07
    10ce:	38 85       	ldd	r19, Y+8	; 0x08
    10d0:	37 fd       	sbrc	r19, 7
    10d2:	20 c0       	rjmp	.+64     	; 0x1114 <__fixsfsi+0x80>
    10d4:	6e 81       	ldd	r22, Y+6	; 0x06
    10d6:	2f 31       	cpi	r18, 0x1F	; 31
    10d8:	31 05       	cpc	r19, r1
    10da:	1c f0       	brlt	.+6      	; 0x10e2 <__fixsfsi+0x4e>
    10dc:	66 23       	and	r22, r22
    10de:	f9 f0       	breq	.+62     	; 0x111e <__fixsfsi+0x8a>
    10e0:	23 c0       	rjmp	.+70     	; 0x1128 <__fixsfsi+0x94>
    10e2:	8e e1       	ldi	r24, 0x1E	; 30
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	82 1b       	sub	r24, r18
    10e8:	93 0b       	sbc	r25, r19
    10ea:	29 85       	ldd	r18, Y+9	; 0x09
    10ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    10ee:	4b 85       	ldd	r20, Y+11	; 0x0b
    10f0:	5c 85       	ldd	r21, Y+12	; 0x0c
    10f2:	04 c0       	rjmp	.+8      	; 0x10fc <__fixsfsi+0x68>
    10f4:	56 95       	lsr	r21
    10f6:	47 95       	ror	r20
    10f8:	37 95       	ror	r19
    10fa:	27 95       	ror	r18
    10fc:	8a 95       	dec	r24
    10fe:	d2 f7       	brpl	.-12     	; 0x10f4 <__fixsfsi+0x60>
    1100:	66 23       	and	r22, r22
    1102:	b1 f0       	breq	.+44     	; 0x1130 <__fixsfsi+0x9c>
    1104:	50 95       	com	r21
    1106:	40 95       	com	r20
    1108:	30 95       	com	r19
    110a:	21 95       	neg	r18
    110c:	3f 4f       	sbci	r19, 0xFF	; 255
    110e:	4f 4f       	sbci	r20, 0xFF	; 255
    1110:	5f 4f       	sbci	r21, 0xFF	; 255
    1112:	0e c0       	rjmp	.+28     	; 0x1130 <__fixsfsi+0x9c>
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e0       	ldi	r20, 0x00	; 0
    111a:	50 e0       	ldi	r21, 0x00	; 0
    111c:	09 c0       	rjmp	.+18     	; 0x1130 <__fixsfsi+0x9c>
    111e:	2f ef       	ldi	r18, 0xFF	; 255
    1120:	3f ef       	ldi	r19, 0xFF	; 255
    1122:	4f ef       	ldi	r20, 0xFF	; 255
    1124:	5f e7       	ldi	r21, 0x7F	; 127
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <__fixsfsi+0x9c>
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	40 e0       	ldi	r20, 0x00	; 0
    112e:	50 e8       	ldi	r21, 0x80	; 128
    1130:	b9 01       	movw	r22, r18
    1132:	ca 01       	movw	r24, r20
    1134:	2c 96       	adiw	r28, 0x0c	; 12
    1136:	e2 e0       	ldi	r30, 0x02	; 2
    1138:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__epilogue_restores__+0x20>

0000113c <__floatunsisf>:
    113c:	a8 e0       	ldi	r26, 0x08	; 8
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e4 ea       	ldi	r30, 0xA4	; 164
    1142:	f8 e0       	ldi	r31, 0x08	; 8
    1144:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__prologue_saves__+0x10>
    1148:	7b 01       	movw	r14, r22
    114a:	8c 01       	movw	r16, r24
    114c:	61 15       	cp	r22, r1
    114e:	71 05       	cpc	r23, r1
    1150:	81 05       	cpc	r24, r1
    1152:	91 05       	cpc	r25, r1
    1154:	19 f4       	brne	.+6      	; 0x115c <__floatunsisf+0x20>
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	89 83       	std	Y+1, r24	; 0x01
    115a:	60 c0       	rjmp	.+192    	; 0x121c <__floatunsisf+0xe0>
    115c:	83 e0       	ldi	r24, 0x03	; 3
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	8e e1       	ldi	r24, 0x1E	; 30
    1162:	c8 2e       	mov	r12, r24
    1164:	d1 2c       	mov	r13, r1
    1166:	dc 82       	std	Y+4, r13	; 0x04
    1168:	cb 82       	std	Y+3, r12	; 0x03
    116a:	ed 82       	std	Y+5, r14	; 0x05
    116c:	fe 82       	std	Y+6, r15	; 0x06
    116e:	0f 83       	std	Y+7, r16	; 0x07
    1170:	18 87       	std	Y+8, r17	; 0x08
    1172:	c8 01       	movw	r24, r16
    1174:	b7 01       	movw	r22, r14
    1176:	0e 94 17 09 	call	0x122e	; 0x122e <__clzsi2>
    117a:	fc 01       	movw	r30, r24
    117c:	31 97       	sbiw	r30, 0x01	; 1
    117e:	f7 ff       	sbrs	r31, 7
    1180:	3b c0       	rjmp	.+118    	; 0x11f8 <__floatunsisf+0xbc>
    1182:	22 27       	eor	r18, r18
    1184:	33 27       	eor	r19, r19
    1186:	2e 1b       	sub	r18, r30
    1188:	3f 0b       	sbc	r19, r31
    118a:	57 01       	movw	r10, r14
    118c:	68 01       	movw	r12, r16
    118e:	02 2e       	mov	r0, r18
    1190:	04 c0       	rjmp	.+8      	; 0x119a <__floatunsisf+0x5e>
    1192:	d6 94       	lsr	r13
    1194:	c7 94       	ror	r12
    1196:	b7 94       	ror	r11
    1198:	a7 94       	ror	r10
    119a:	0a 94       	dec	r0
    119c:	d2 f7       	brpl	.-12     	; 0x1192 <__floatunsisf+0x56>
    119e:	40 e0       	ldi	r20, 0x00	; 0
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	a0 e0       	ldi	r26, 0x00	; 0
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	04 c0       	rjmp	.+8      	; 0x11b8 <__floatunsisf+0x7c>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	aa 1f       	adc	r26, r26
    11b6:	bb 1f       	adc	r27, r27
    11b8:	2a 95       	dec	r18
    11ba:	d2 f7       	brpl	.-12     	; 0x11b0 <__floatunsisf+0x74>
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	a1 09       	sbc	r26, r1
    11c0:	b1 09       	sbc	r27, r1
    11c2:	8e 21       	and	r24, r14
    11c4:	9f 21       	and	r25, r15
    11c6:	a0 23       	and	r26, r16
    11c8:	b1 23       	and	r27, r17
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	a1 05       	cpc	r26, r1
    11ce:	b1 05       	cpc	r27, r1
    11d0:	21 f0       	breq	.+8      	; 0x11da <__floatunsisf+0x9e>
    11d2:	41 e0       	ldi	r20, 0x01	; 1
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	4a 29       	or	r20, r10
    11dc:	5b 29       	or	r21, r11
    11de:	6c 29       	or	r22, r12
    11e0:	7d 29       	or	r23, r13
    11e2:	4d 83       	std	Y+5, r20	; 0x05
    11e4:	5e 83       	std	Y+6, r21	; 0x06
    11e6:	6f 83       	std	Y+7, r22	; 0x07
    11e8:	78 87       	std	Y+8, r23	; 0x08
    11ea:	8e e1       	ldi	r24, 0x1E	; 30
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	8e 1b       	sub	r24, r30
    11f0:	9f 0b       	sbc	r25, r31
    11f2:	9c 83       	std	Y+4, r25	; 0x04
    11f4:	8b 83       	std	Y+3, r24	; 0x03
    11f6:	12 c0       	rjmp	.+36     	; 0x121c <__floatunsisf+0xe0>
    11f8:	30 97       	sbiw	r30, 0x00	; 0
    11fa:	81 f0       	breq	.+32     	; 0x121c <__floatunsisf+0xe0>
    11fc:	0e 2e       	mov	r0, r30
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <__floatunsisf+0xcc>
    1200:	ee 0c       	add	r14, r14
    1202:	ff 1c       	adc	r15, r15
    1204:	00 1f       	adc	r16, r16
    1206:	11 1f       	adc	r17, r17
    1208:	0a 94       	dec	r0
    120a:	d2 f7       	brpl	.-12     	; 0x1200 <__floatunsisf+0xc4>
    120c:	ed 82       	std	Y+5, r14	; 0x05
    120e:	fe 82       	std	Y+6, r15	; 0x06
    1210:	0f 83       	std	Y+7, r16	; 0x07
    1212:	18 87       	std	Y+8, r17	; 0x08
    1214:	ce 1a       	sub	r12, r30
    1216:	df 0a       	sbc	r13, r31
    1218:	dc 82       	std	Y+4, r13	; 0x04
    121a:	cb 82       	std	Y+3, r12	; 0x03
    121c:	1a 82       	std	Y+2, r1	; 0x02
    121e:	ce 01       	movw	r24, r28
    1220:	01 96       	adiw	r24, 0x01	; 1
    1222:	0e 94 66 09 	call	0x12cc	; 0x12cc <__pack_f>
    1226:	28 96       	adiw	r28, 0x08	; 8
    1228:	ea e0       	ldi	r30, 0x0A	; 10
    122a:	0c 94 44 0b 	jmp	0x1688	; 0x1688 <__epilogue_restores__+0x10>

0000122e <__clzsi2>:
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	7b 01       	movw	r14, r22
    1238:	8c 01       	movw	r16, r24
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	e8 16       	cp	r14, r24
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	f8 06       	cpc	r15, r24
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	08 07       	cpc	r16, r24
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	18 07       	cpc	r17, r24
    124a:	88 f4       	brcc	.+34     	; 0x126e <__clzsi2+0x40>
    124c:	8f ef       	ldi	r24, 0xFF	; 255
    124e:	e8 16       	cp	r14, r24
    1250:	f1 04       	cpc	r15, r1
    1252:	01 05       	cpc	r16, r1
    1254:	11 05       	cpc	r17, r1
    1256:	31 f0       	breq	.+12     	; 0x1264 <__clzsi2+0x36>
    1258:	28 f0       	brcs	.+10     	; 0x1264 <__clzsi2+0x36>
    125a:	88 e0       	ldi	r24, 0x08	; 8
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	a0 e0       	ldi	r26, 0x00	; 0
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	17 c0       	rjmp	.+46     	; 0x1292 <__clzsi2+0x64>
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	a0 e0       	ldi	r26, 0x00	; 0
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	12 c0       	rjmp	.+36     	; 0x1292 <__clzsi2+0x64>
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	e8 16       	cp	r14, r24
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	f8 06       	cpc	r15, r24
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	08 07       	cpc	r16, r24
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	18 07       	cpc	r17, r24
    127e:	28 f0       	brcs	.+10     	; 0x128a <__clzsi2+0x5c>
    1280:	88 e1       	ldi	r24, 0x18	; 24
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	a0 e0       	ldi	r26, 0x00	; 0
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	04 c0       	rjmp	.+8      	; 0x1292 <__clzsi2+0x64>
    128a:	80 e1       	ldi	r24, 0x10	; 16
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	a0 e0       	ldi	r26, 0x00	; 0
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	20 e2       	ldi	r18, 0x20	; 32
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	40 e0       	ldi	r20, 0x00	; 0
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	28 1b       	sub	r18, r24
    129c:	39 0b       	sbc	r19, r25
    129e:	4a 0b       	sbc	r20, r26
    12a0:	5b 0b       	sbc	r21, r27
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <__clzsi2+0x7e>
    12a4:	16 95       	lsr	r17
    12a6:	07 95       	ror	r16
    12a8:	f7 94       	ror	r15
    12aa:	e7 94       	ror	r14
    12ac:	8a 95       	dec	r24
    12ae:	d2 f7       	brpl	.-12     	; 0x12a4 <__clzsi2+0x76>
    12b0:	f7 01       	movw	r30, r14
    12b2:	e8 59       	subi	r30, 0x98	; 152
    12b4:	ff 4f       	sbci	r31, 0xFF	; 255
    12b6:	80 81       	ld	r24, Z
    12b8:	28 1b       	sub	r18, r24
    12ba:	31 09       	sbc	r19, r1
    12bc:	41 09       	sbc	r20, r1
    12be:	51 09       	sbc	r21, r1
    12c0:	c9 01       	movw	r24, r18
    12c2:	1f 91       	pop	r17
    12c4:	0f 91       	pop	r16
    12c6:	ff 90       	pop	r15
    12c8:	ef 90       	pop	r14
    12ca:	08 95       	ret

000012cc <__pack_f>:
    12cc:	df 92       	push	r13
    12ce:	ef 92       	push	r14
    12d0:	ff 92       	push	r15
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	fc 01       	movw	r30, r24
    12d8:	e4 80       	ldd	r14, Z+4	; 0x04
    12da:	f5 80       	ldd	r15, Z+5	; 0x05
    12dc:	06 81       	ldd	r16, Z+6	; 0x06
    12de:	17 81       	ldd	r17, Z+7	; 0x07
    12e0:	d1 80       	ldd	r13, Z+1	; 0x01
    12e2:	80 81       	ld	r24, Z
    12e4:	82 30       	cpi	r24, 0x02	; 2
    12e6:	48 f4       	brcc	.+18     	; 0x12fa <__pack_f+0x2e>
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	a0 e1       	ldi	r26, 0x10	; 16
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e8 2a       	or	r14, r24
    12f2:	f9 2a       	or	r15, r25
    12f4:	0a 2b       	or	r16, r26
    12f6:	1b 2b       	or	r17, r27
    12f8:	a5 c0       	rjmp	.+330    	; 0x1444 <__pack_f+0x178>
    12fa:	84 30       	cpi	r24, 0x04	; 4
    12fc:	09 f4       	brne	.+2      	; 0x1300 <__pack_f+0x34>
    12fe:	9f c0       	rjmp	.+318    	; 0x143e <__pack_f+0x172>
    1300:	82 30       	cpi	r24, 0x02	; 2
    1302:	21 f4       	brne	.+8      	; 0x130c <__pack_f+0x40>
    1304:	ee 24       	eor	r14, r14
    1306:	ff 24       	eor	r15, r15
    1308:	87 01       	movw	r16, r14
    130a:	05 c0       	rjmp	.+10     	; 0x1316 <__pack_f+0x4a>
    130c:	e1 14       	cp	r14, r1
    130e:	f1 04       	cpc	r15, r1
    1310:	01 05       	cpc	r16, r1
    1312:	11 05       	cpc	r17, r1
    1314:	19 f4       	brne	.+6      	; 0x131c <__pack_f+0x50>
    1316:	e0 e0       	ldi	r30, 0x00	; 0
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	96 c0       	rjmp	.+300    	; 0x1448 <__pack_f+0x17c>
    131c:	62 81       	ldd	r22, Z+2	; 0x02
    131e:	73 81       	ldd	r23, Z+3	; 0x03
    1320:	9f ef       	ldi	r25, 0xFF	; 255
    1322:	62 38       	cpi	r22, 0x82	; 130
    1324:	79 07       	cpc	r23, r25
    1326:	0c f0       	brlt	.+2      	; 0x132a <__pack_f+0x5e>
    1328:	5b c0       	rjmp	.+182    	; 0x13e0 <__pack_f+0x114>
    132a:	22 e8       	ldi	r18, 0x82	; 130
    132c:	3f ef       	ldi	r19, 0xFF	; 255
    132e:	26 1b       	sub	r18, r22
    1330:	37 0b       	sbc	r19, r23
    1332:	2a 31       	cpi	r18, 0x1A	; 26
    1334:	31 05       	cpc	r19, r1
    1336:	2c f0       	brlt	.+10     	; 0x1342 <__pack_f+0x76>
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	40 e0       	ldi	r20, 0x00	; 0
    133e:	50 e0       	ldi	r21, 0x00	; 0
    1340:	2a c0       	rjmp	.+84     	; 0x1396 <__pack_f+0xca>
    1342:	b8 01       	movw	r22, r16
    1344:	a7 01       	movw	r20, r14
    1346:	02 2e       	mov	r0, r18
    1348:	04 c0       	rjmp	.+8      	; 0x1352 <__pack_f+0x86>
    134a:	76 95       	lsr	r23
    134c:	67 95       	ror	r22
    134e:	57 95       	ror	r21
    1350:	47 95       	ror	r20
    1352:	0a 94       	dec	r0
    1354:	d2 f7       	brpl	.-12     	; 0x134a <__pack_f+0x7e>
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	a0 e0       	ldi	r26, 0x00	; 0
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	04 c0       	rjmp	.+8      	; 0x1368 <__pack_f+0x9c>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	aa 1f       	adc	r26, r26
    1366:	bb 1f       	adc	r27, r27
    1368:	2a 95       	dec	r18
    136a:	d2 f7       	brpl	.-12     	; 0x1360 <__pack_f+0x94>
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	a1 09       	sbc	r26, r1
    1370:	b1 09       	sbc	r27, r1
    1372:	8e 21       	and	r24, r14
    1374:	9f 21       	and	r25, r15
    1376:	a0 23       	and	r26, r16
    1378:	b1 23       	and	r27, r17
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	a1 05       	cpc	r26, r1
    137e:	b1 05       	cpc	r27, r1
    1380:	21 f0       	breq	.+8      	; 0x138a <__pack_f+0xbe>
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	a0 e0       	ldi	r26, 0x00	; 0
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	9a 01       	movw	r18, r20
    138c:	ab 01       	movw	r20, r22
    138e:	28 2b       	or	r18, r24
    1390:	39 2b       	or	r19, r25
    1392:	4a 2b       	or	r20, r26
    1394:	5b 2b       	or	r21, r27
    1396:	da 01       	movw	r26, r20
    1398:	c9 01       	movw	r24, r18
    139a:	8f 77       	andi	r24, 0x7F	; 127
    139c:	90 70       	andi	r25, 0x00	; 0
    139e:	a0 70       	andi	r26, 0x00	; 0
    13a0:	b0 70       	andi	r27, 0x00	; 0
    13a2:	80 34       	cpi	r24, 0x40	; 64
    13a4:	91 05       	cpc	r25, r1
    13a6:	a1 05       	cpc	r26, r1
    13a8:	b1 05       	cpc	r27, r1
    13aa:	39 f4       	brne	.+14     	; 0x13ba <__pack_f+0xee>
    13ac:	27 ff       	sbrs	r18, 7
    13ae:	09 c0       	rjmp	.+18     	; 0x13c2 <__pack_f+0xf6>
    13b0:	20 5c       	subi	r18, 0xC0	; 192
    13b2:	3f 4f       	sbci	r19, 0xFF	; 255
    13b4:	4f 4f       	sbci	r20, 0xFF	; 255
    13b6:	5f 4f       	sbci	r21, 0xFF	; 255
    13b8:	04 c0       	rjmp	.+8      	; 0x13c2 <__pack_f+0xf6>
    13ba:	21 5c       	subi	r18, 0xC1	; 193
    13bc:	3f 4f       	sbci	r19, 0xFF	; 255
    13be:	4f 4f       	sbci	r20, 0xFF	; 255
    13c0:	5f 4f       	sbci	r21, 0xFF	; 255
    13c2:	e0 e0       	ldi	r30, 0x00	; 0
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	20 30       	cpi	r18, 0x00	; 0
    13c8:	a0 e0       	ldi	r26, 0x00	; 0
    13ca:	3a 07       	cpc	r19, r26
    13cc:	a0 e0       	ldi	r26, 0x00	; 0
    13ce:	4a 07       	cpc	r20, r26
    13d0:	a0 e4       	ldi	r26, 0x40	; 64
    13d2:	5a 07       	cpc	r21, r26
    13d4:	10 f0       	brcs	.+4      	; 0x13da <__pack_f+0x10e>
    13d6:	e1 e0       	ldi	r30, 0x01	; 1
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	79 01       	movw	r14, r18
    13dc:	8a 01       	movw	r16, r20
    13de:	27 c0       	rjmp	.+78     	; 0x142e <__pack_f+0x162>
    13e0:	60 38       	cpi	r22, 0x80	; 128
    13e2:	71 05       	cpc	r23, r1
    13e4:	64 f5       	brge	.+88     	; 0x143e <__pack_f+0x172>
    13e6:	fb 01       	movw	r30, r22
    13e8:	e1 58       	subi	r30, 0x81	; 129
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	d8 01       	movw	r26, r16
    13ee:	c7 01       	movw	r24, r14
    13f0:	8f 77       	andi	r24, 0x7F	; 127
    13f2:	90 70       	andi	r25, 0x00	; 0
    13f4:	a0 70       	andi	r26, 0x00	; 0
    13f6:	b0 70       	andi	r27, 0x00	; 0
    13f8:	80 34       	cpi	r24, 0x40	; 64
    13fa:	91 05       	cpc	r25, r1
    13fc:	a1 05       	cpc	r26, r1
    13fe:	b1 05       	cpc	r27, r1
    1400:	39 f4       	brne	.+14     	; 0x1410 <__pack_f+0x144>
    1402:	e7 fe       	sbrs	r14, 7
    1404:	0d c0       	rjmp	.+26     	; 0x1420 <__pack_f+0x154>
    1406:	80 e4       	ldi	r24, 0x40	; 64
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a0 e0       	ldi	r26, 0x00	; 0
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	04 c0       	rjmp	.+8      	; 0x1418 <__pack_f+0x14c>
    1410:	8f e3       	ldi	r24, 0x3F	; 63
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	a0 e0       	ldi	r26, 0x00	; 0
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e8 0e       	add	r14, r24
    141a:	f9 1e       	adc	r15, r25
    141c:	0a 1f       	adc	r16, r26
    141e:	1b 1f       	adc	r17, r27
    1420:	17 ff       	sbrs	r17, 7
    1422:	05 c0       	rjmp	.+10     	; 0x142e <__pack_f+0x162>
    1424:	16 95       	lsr	r17
    1426:	07 95       	ror	r16
    1428:	f7 94       	ror	r15
    142a:	e7 94       	ror	r14
    142c:	31 96       	adiw	r30, 0x01	; 1
    142e:	87 e0       	ldi	r24, 0x07	; 7
    1430:	16 95       	lsr	r17
    1432:	07 95       	ror	r16
    1434:	f7 94       	ror	r15
    1436:	e7 94       	ror	r14
    1438:	8a 95       	dec	r24
    143a:	d1 f7       	brne	.-12     	; 0x1430 <__pack_f+0x164>
    143c:	05 c0       	rjmp	.+10     	; 0x1448 <__pack_f+0x17c>
    143e:	ee 24       	eor	r14, r14
    1440:	ff 24       	eor	r15, r15
    1442:	87 01       	movw	r16, r14
    1444:	ef ef       	ldi	r30, 0xFF	; 255
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	6e 2f       	mov	r22, r30
    144a:	67 95       	ror	r22
    144c:	66 27       	eor	r22, r22
    144e:	67 95       	ror	r22
    1450:	90 2f       	mov	r25, r16
    1452:	9f 77       	andi	r25, 0x7F	; 127
    1454:	d7 94       	ror	r13
    1456:	dd 24       	eor	r13, r13
    1458:	d7 94       	ror	r13
    145a:	8e 2f       	mov	r24, r30
    145c:	86 95       	lsr	r24
    145e:	49 2f       	mov	r20, r25
    1460:	46 2b       	or	r20, r22
    1462:	58 2f       	mov	r21, r24
    1464:	5d 29       	or	r21, r13
    1466:	b7 01       	movw	r22, r14
    1468:	ca 01       	movw	r24, r20
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	ff 90       	pop	r15
    1470:	ef 90       	pop	r14
    1472:	df 90       	pop	r13
    1474:	08 95       	ret

00001476 <__unpack_f>:
    1476:	fc 01       	movw	r30, r24
    1478:	db 01       	movw	r26, r22
    147a:	40 81       	ld	r20, Z
    147c:	51 81       	ldd	r21, Z+1	; 0x01
    147e:	22 81       	ldd	r18, Z+2	; 0x02
    1480:	62 2f       	mov	r22, r18
    1482:	6f 77       	andi	r22, 0x7F	; 127
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	22 1f       	adc	r18, r18
    1488:	22 27       	eor	r18, r18
    148a:	22 1f       	adc	r18, r18
    148c:	93 81       	ldd	r25, Z+3	; 0x03
    148e:	89 2f       	mov	r24, r25
    1490:	88 0f       	add	r24, r24
    1492:	82 2b       	or	r24, r18
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	99 1f       	adc	r25, r25
    149a:	99 27       	eor	r25, r25
    149c:	99 1f       	adc	r25, r25
    149e:	11 96       	adiw	r26, 0x01	; 1
    14a0:	9c 93       	st	X, r25
    14a2:	11 97       	sbiw	r26, 0x01	; 1
    14a4:	21 15       	cp	r18, r1
    14a6:	31 05       	cpc	r19, r1
    14a8:	a9 f5       	brne	.+106    	; 0x1514 <__unpack_f+0x9e>
    14aa:	41 15       	cp	r20, r1
    14ac:	51 05       	cpc	r21, r1
    14ae:	61 05       	cpc	r22, r1
    14b0:	71 05       	cpc	r23, r1
    14b2:	11 f4       	brne	.+4      	; 0x14b8 <__unpack_f+0x42>
    14b4:	82 e0       	ldi	r24, 0x02	; 2
    14b6:	37 c0       	rjmp	.+110    	; 0x1526 <__unpack_f+0xb0>
    14b8:	82 e8       	ldi	r24, 0x82	; 130
    14ba:	9f ef       	ldi	r25, 0xFF	; 255
    14bc:	13 96       	adiw	r26, 0x03	; 3
    14be:	9c 93       	st	X, r25
    14c0:	8e 93       	st	-X, r24
    14c2:	12 97       	sbiw	r26, 0x02	; 2
    14c4:	9a 01       	movw	r18, r20
    14c6:	ab 01       	movw	r20, r22
    14c8:	67 e0       	ldi	r22, 0x07	; 7
    14ca:	22 0f       	add	r18, r18
    14cc:	33 1f       	adc	r19, r19
    14ce:	44 1f       	adc	r20, r20
    14d0:	55 1f       	adc	r21, r21
    14d2:	6a 95       	dec	r22
    14d4:	d1 f7       	brne	.-12     	; 0x14ca <__unpack_f+0x54>
    14d6:	83 e0       	ldi	r24, 0x03	; 3
    14d8:	8c 93       	st	X, r24
    14da:	0d c0       	rjmp	.+26     	; 0x14f6 <__unpack_f+0x80>
    14dc:	22 0f       	add	r18, r18
    14de:	33 1f       	adc	r19, r19
    14e0:	44 1f       	adc	r20, r20
    14e2:	55 1f       	adc	r21, r21
    14e4:	12 96       	adiw	r26, 0x02	; 2
    14e6:	8d 91       	ld	r24, X+
    14e8:	9c 91       	ld	r25, X
    14ea:	13 97       	sbiw	r26, 0x03	; 3
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	13 96       	adiw	r26, 0x03	; 3
    14f0:	9c 93       	st	X, r25
    14f2:	8e 93       	st	-X, r24
    14f4:	12 97       	sbiw	r26, 0x02	; 2
    14f6:	20 30       	cpi	r18, 0x00	; 0
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	38 07       	cpc	r19, r24
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	48 07       	cpc	r20, r24
    1500:	80 e4       	ldi	r24, 0x40	; 64
    1502:	58 07       	cpc	r21, r24
    1504:	58 f3       	brcs	.-42     	; 0x14dc <__unpack_f+0x66>
    1506:	14 96       	adiw	r26, 0x04	; 4
    1508:	2d 93       	st	X+, r18
    150a:	3d 93       	st	X+, r19
    150c:	4d 93       	st	X+, r20
    150e:	5c 93       	st	X, r21
    1510:	17 97       	sbiw	r26, 0x07	; 7
    1512:	08 95       	ret
    1514:	2f 3f       	cpi	r18, 0xFF	; 255
    1516:	31 05       	cpc	r19, r1
    1518:	79 f4       	brne	.+30     	; 0x1538 <__unpack_f+0xc2>
    151a:	41 15       	cp	r20, r1
    151c:	51 05       	cpc	r21, r1
    151e:	61 05       	cpc	r22, r1
    1520:	71 05       	cpc	r23, r1
    1522:	19 f4       	brne	.+6      	; 0x152a <__unpack_f+0xb4>
    1524:	84 e0       	ldi	r24, 0x04	; 4
    1526:	8c 93       	st	X, r24
    1528:	08 95       	ret
    152a:	64 ff       	sbrs	r22, 4
    152c:	03 c0       	rjmp	.+6      	; 0x1534 <__unpack_f+0xbe>
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	8c 93       	st	X, r24
    1532:	12 c0       	rjmp	.+36     	; 0x1558 <__unpack_f+0xe2>
    1534:	1c 92       	st	X, r1
    1536:	10 c0       	rjmp	.+32     	; 0x1558 <__unpack_f+0xe2>
    1538:	2f 57       	subi	r18, 0x7F	; 127
    153a:	30 40       	sbci	r19, 0x00	; 0
    153c:	13 96       	adiw	r26, 0x03	; 3
    153e:	3c 93       	st	X, r19
    1540:	2e 93       	st	-X, r18
    1542:	12 97       	sbiw	r26, 0x02	; 2
    1544:	83 e0       	ldi	r24, 0x03	; 3
    1546:	8c 93       	st	X, r24
    1548:	87 e0       	ldi	r24, 0x07	; 7
    154a:	44 0f       	add	r20, r20
    154c:	55 1f       	adc	r21, r21
    154e:	66 1f       	adc	r22, r22
    1550:	77 1f       	adc	r23, r23
    1552:	8a 95       	dec	r24
    1554:	d1 f7       	brne	.-12     	; 0x154a <__unpack_f+0xd4>
    1556:	70 64       	ori	r23, 0x40	; 64
    1558:	14 96       	adiw	r26, 0x04	; 4
    155a:	4d 93       	st	X+, r20
    155c:	5d 93       	st	X+, r21
    155e:	6d 93       	st	X+, r22
    1560:	7c 93       	st	X, r23
    1562:	17 97       	sbiw	r26, 0x07	; 7
    1564:	08 95       	ret

00001566 <__fpcmp_parts_f>:
    1566:	1f 93       	push	r17
    1568:	dc 01       	movw	r26, r24
    156a:	fb 01       	movw	r30, r22
    156c:	9c 91       	ld	r25, X
    156e:	92 30       	cpi	r25, 0x02	; 2
    1570:	08 f4       	brcc	.+2      	; 0x1574 <__fpcmp_parts_f+0xe>
    1572:	47 c0       	rjmp	.+142    	; 0x1602 <__fpcmp_parts_f+0x9c>
    1574:	80 81       	ld	r24, Z
    1576:	82 30       	cpi	r24, 0x02	; 2
    1578:	08 f4       	brcc	.+2      	; 0x157c <__fpcmp_parts_f+0x16>
    157a:	43 c0       	rjmp	.+134    	; 0x1602 <__fpcmp_parts_f+0x9c>
    157c:	94 30       	cpi	r25, 0x04	; 4
    157e:	51 f4       	brne	.+20     	; 0x1594 <__fpcmp_parts_f+0x2e>
    1580:	11 96       	adiw	r26, 0x01	; 1
    1582:	1c 91       	ld	r17, X
    1584:	84 30       	cpi	r24, 0x04	; 4
    1586:	99 f5       	brne	.+102    	; 0x15ee <__fpcmp_parts_f+0x88>
    1588:	81 81       	ldd	r24, Z+1	; 0x01
    158a:	68 2f       	mov	r22, r24
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	61 1b       	sub	r22, r17
    1590:	71 09       	sbc	r23, r1
    1592:	3f c0       	rjmp	.+126    	; 0x1612 <__fpcmp_parts_f+0xac>
    1594:	84 30       	cpi	r24, 0x04	; 4
    1596:	21 f0       	breq	.+8      	; 0x15a0 <__fpcmp_parts_f+0x3a>
    1598:	92 30       	cpi	r25, 0x02	; 2
    159a:	31 f4       	brne	.+12     	; 0x15a8 <__fpcmp_parts_f+0x42>
    159c:	82 30       	cpi	r24, 0x02	; 2
    159e:	b9 f1       	breq	.+110    	; 0x160e <__fpcmp_parts_f+0xa8>
    15a0:	81 81       	ldd	r24, Z+1	; 0x01
    15a2:	88 23       	and	r24, r24
    15a4:	89 f1       	breq	.+98     	; 0x1608 <__fpcmp_parts_f+0xa2>
    15a6:	2d c0       	rjmp	.+90     	; 0x1602 <__fpcmp_parts_f+0x9c>
    15a8:	11 96       	adiw	r26, 0x01	; 1
    15aa:	1c 91       	ld	r17, X
    15ac:	11 97       	sbiw	r26, 0x01	; 1
    15ae:	82 30       	cpi	r24, 0x02	; 2
    15b0:	f1 f0       	breq	.+60     	; 0x15ee <__fpcmp_parts_f+0x88>
    15b2:	81 81       	ldd	r24, Z+1	; 0x01
    15b4:	18 17       	cp	r17, r24
    15b6:	d9 f4       	brne	.+54     	; 0x15ee <__fpcmp_parts_f+0x88>
    15b8:	12 96       	adiw	r26, 0x02	; 2
    15ba:	2d 91       	ld	r18, X+
    15bc:	3c 91       	ld	r19, X
    15be:	13 97       	sbiw	r26, 0x03	; 3
    15c0:	82 81       	ldd	r24, Z+2	; 0x02
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	82 17       	cp	r24, r18
    15c6:	93 07       	cpc	r25, r19
    15c8:	94 f0       	brlt	.+36     	; 0x15ee <__fpcmp_parts_f+0x88>
    15ca:	28 17       	cp	r18, r24
    15cc:	39 07       	cpc	r19, r25
    15ce:	bc f0       	brlt	.+46     	; 0x15fe <__fpcmp_parts_f+0x98>
    15d0:	14 96       	adiw	r26, 0x04	; 4
    15d2:	8d 91       	ld	r24, X+
    15d4:	9d 91       	ld	r25, X+
    15d6:	0d 90       	ld	r0, X+
    15d8:	bc 91       	ld	r27, X
    15da:	a0 2d       	mov	r26, r0
    15dc:	24 81       	ldd	r18, Z+4	; 0x04
    15de:	35 81       	ldd	r19, Z+5	; 0x05
    15e0:	46 81       	ldd	r20, Z+6	; 0x06
    15e2:	57 81       	ldd	r21, Z+7	; 0x07
    15e4:	28 17       	cp	r18, r24
    15e6:	39 07       	cpc	r19, r25
    15e8:	4a 07       	cpc	r20, r26
    15ea:	5b 07       	cpc	r21, r27
    15ec:	18 f4       	brcc	.+6      	; 0x15f4 <__fpcmp_parts_f+0x8e>
    15ee:	11 23       	and	r17, r17
    15f0:	41 f0       	breq	.+16     	; 0x1602 <__fpcmp_parts_f+0x9c>
    15f2:	0a c0       	rjmp	.+20     	; 0x1608 <__fpcmp_parts_f+0xa2>
    15f4:	82 17       	cp	r24, r18
    15f6:	93 07       	cpc	r25, r19
    15f8:	a4 07       	cpc	r26, r20
    15fa:	b5 07       	cpc	r27, r21
    15fc:	40 f4       	brcc	.+16     	; 0x160e <__fpcmp_parts_f+0xa8>
    15fe:	11 23       	and	r17, r17
    1600:	19 f0       	breq	.+6      	; 0x1608 <__fpcmp_parts_f+0xa2>
    1602:	61 e0       	ldi	r22, 0x01	; 1
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	05 c0       	rjmp	.+10     	; 0x1612 <__fpcmp_parts_f+0xac>
    1608:	6f ef       	ldi	r22, 0xFF	; 255
    160a:	7f ef       	ldi	r23, 0xFF	; 255
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <__fpcmp_parts_f+0xac>
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	70 e0       	ldi	r23, 0x00	; 0
    1612:	cb 01       	movw	r24, r22
    1614:	1f 91       	pop	r17
    1616:	08 95       	ret

00001618 <__udivmodhi4>:
    1618:	aa 1b       	sub	r26, r26
    161a:	bb 1b       	sub	r27, r27
    161c:	51 e1       	ldi	r21, 0x11	; 17
    161e:	07 c0       	rjmp	.+14     	; 0x162e <__udivmodhi4_ep>

00001620 <__udivmodhi4_loop>:
    1620:	aa 1f       	adc	r26, r26
    1622:	bb 1f       	adc	r27, r27
    1624:	a6 17       	cp	r26, r22
    1626:	b7 07       	cpc	r27, r23
    1628:	10 f0       	brcs	.+4      	; 0x162e <__udivmodhi4_ep>
    162a:	a6 1b       	sub	r26, r22
    162c:	b7 0b       	sbc	r27, r23

0000162e <__udivmodhi4_ep>:
    162e:	88 1f       	adc	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	5a 95       	dec	r21
    1634:	a9 f7       	brne	.-22     	; 0x1620 <__udivmodhi4_loop>
    1636:	80 95       	com	r24
    1638:	90 95       	com	r25
    163a:	bc 01       	movw	r22, r24
    163c:	cd 01       	movw	r24, r26
    163e:	08 95       	ret

00001640 <__prologue_saves__>:
    1640:	2f 92       	push	r2
    1642:	3f 92       	push	r3
    1644:	4f 92       	push	r4
    1646:	5f 92       	push	r5
    1648:	6f 92       	push	r6
    164a:	7f 92       	push	r7
    164c:	8f 92       	push	r8
    164e:	9f 92       	push	r9
    1650:	af 92       	push	r10
    1652:	bf 92       	push	r11
    1654:	cf 92       	push	r12
    1656:	df 92       	push	r13
    1658:	ef 92       	push	r14
    165a:	ff 92       	push	r15
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	ca 1b       	sub	r28, r26
    166a:	db 0b       	sbc	r29, r27
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	09 94       	ijmp

00001678 <__epilogue_restores__>:
    1678:	2a 88       	ldd	r2, Y+18	; 0x12
    167a:	39 88       	ldd	r3, Y+17	; 0x11
    167c:	48 88       	ldd	r4, Y+16	; 0x10
    167e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1680:	6e 84       	ldd	r6, Y+14	; 0x0e
    1682:	7d 84       	ldd	r7, Y+13	; 0x0d
    1684:	8c 84       	ldd	r8, Y+12	; 0x0c
    1686:	9b 84       	ldd	r9, Y+11	; 0x0b
    1688:	aa 84       	ldd	r10, Y+10	; 0x0a
    168a:	b9 84       	ldd	r11, Y+9	; 0x09
    168c:	c8 84       	ldd	r12, Y+8	; 0x08
    168e:	df 80       	ldd	r13, Y+7	; 0x07
    1690:	ee 80       	ldd	r14, Y+6	; 0x06
    1692:	fd 80       	ldd	r15, Y+5	; 0x05
    1694:	0c 81       	ldd	r16, Y+4	; 0x04
    1696:	1b 81       	ldd	r17, Y+3	; 0x03
    1698:	aa 81       	ldd	r26, Y+2	; 0x02
    169a:	b9 81       	ldd	r27, Y+1	; 0x01
    169c:	ce 0f       	add	r28, r30
    169e:	d1 1d       	adc	r29, r1
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	ed 01       	movw	r28, r26
    16ac:	08 95       	ret

000016ae <__eerd_byte_m16>:
    16ae:	e1 99       	sbic	0x1c, 1	; 28
    16b0:	fe cf       	rjmp	.-4      	; 0x16ae <__eerd_byte_m16>
    16b2:	9f bb       	out	0x1f, r25	; 31
    16b4:	8e bb       	out	0x1e, r24	; 30
    16b6:	e0 9a       	sbi	0x1c, 0	; 28
    16b8:	99 27       	eor	r25, r25
    16ba:	8d b3       	in	r24, 0x1d	; 29
    16bc:	08 95       	ret

000016be <__eerd_word_m16>:
    16be:	a8 e1       	ldi	r26, 0x18	; 24
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	42 e0       	ldi	r20, 0x02	; 2
    16c4:	50 e0       	ldi	r21, 0x00	; 0
    16c6:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__eerd_blraw_m16>

000016ca <__eewr_byte_m16>:
    16ca:	26 2f       	mov	r18, r22

000016cc <__eewr_r18_m16>:
    16cc:	e1 99       	sbic	0x1c, 1	; 28
    16ce:	fe cf       	rjmp	.-4      	; 0x16cc <__eewr_r18_m16>
    16d0:	9f bb       	out	0x1f, r25	; 31
    16d2:	8e bb       	out	0x1e, r24	; 30
    16d4:	2d bb       	out	0x1d, r18	; 29
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	f8 94       	cli
    16da:	e2 9a       	sbi	0x1c, 2	; 28
    16dc:	e1 9a       	sbi	0x1c, 1	; 28
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	08 95       	ret

000016e4 <__eewr_word_m16>:
    16e4:	0e 94 65 0b 	call	0x16ca	; 0x16ca <__eewr_byte_m16>
    16e8:	27 2f       	mov	r18, r23
    16ea:	0c 94 66 0b 	jmp	0x16cc	; 0x16cc <__eewr_r18_m16>

000016ee <__eerd_block_m16>:
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22

000016f2 <__eerd_blraw_m16>:
    16f2:	fc 01       	movw	r30, r24
    16f4:	e1 99       	sbic	0x1c, 1	; 28
    16f6:	fe cf       	rjmp	.-4      	; 0x16f4 <__eerd_blraw_m16+0x2>
    16f8:	06 c0       	rjmp	.+12     	; 0x1706 <__eerd_blraw_m16+0x14>
    16fa:	ff bb       	out	0x1f, r31	; 31
    16fc:	ee bb       	out	0x1e, r30	; 30
    16fe:	e0 9a       	sbi	0x1c, 0	; 28
    1700:	31 96       	adiw	r30, 0x01	; 1
    1702:	0d b2       	in	r0, 0x1d	; 29
    1704:	0d 92       	st	X+, r0
    1706:	41 50       	subi	r20, 0x01	; 1
    1708:	50 40       	sbci	r21, 0x00	; 0
    170a:	b8 f7       	brcc	.-18     	; 0x16fa <__eerd_blraw_m16+0x8>
    170c:	08 95       	ret

0000170e <_exit>:
    170e:	f8 94       	cli

00001710 <__stop_program>:
    1710:	ff cf       	rjmp	.-2      	; 0x1710 <__stop_program>
