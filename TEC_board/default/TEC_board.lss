
TEC_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001716  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00001716  000017ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  00800168  00800168  000018d2  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  000018d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000001c0  00000000  00000000  000018d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000406  00000000  00000000  00001a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d41  00000000  00000000  00001e9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015ee  00000000  00000000  00004bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ac8  00000000  00000000  000061ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  00007c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000518  00000000  00000000  00007fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d7f  00000000  00000000  000084cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000924b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a3 39       	cpi	r26, 0x93	; 147
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e1       	ldi	r30, 0x16	; 22
      78:	f7 e1       	ldi	r31, 0x17	; 23
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 86 02 	call	0x50c	; 0x50c <main>
      8a:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <uartInit>:
//------------------------------------------------------------------------------------
//UART

void uartInit(void)
{
	UBRRH = UART_BAUDRATE_H;		// Init UART baudrate
      92:	10 bc       	out	0x20, r1	; 32
	UBRRL = UART_BAUDRATE_L;
      94:	83 e3       	ldi	r24, 0x33	; 51
      96:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1<<RXEN)|(1<<TXEN)|(1 << RXCIE);	// TX, RX enable, RX interrupt enable
      98:	88 e9       	ldi	r24, 0x98	; 152
      9a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
      9c:	86 e8       	ldi	r24, 0x86	; 134
      9e:	80 bd       	out	0x20, r24	; 32
	return;
}
      a0:	08 95       	ret

000000a2 <uartTransmitByte>:

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
      a2:	5d 9b       	sbis	0x0b, 5	; 11
      a4:	fe cf       	rjmp	.-4      	; 0xa2 <uartTransmitByte>
	UDR = data;
      a6:	8c b9       	out	0x0c, r24	; 12
	return;
}
      a8:	08 95       	ret

000000aa <uartReceiveByte>:

//Receive byte thought UART
unsigned char uartReceiveByte (void)
{

	while ( !(UCSRA & (1<<RXC)) )
      aa:	5f 9b       	sbis	0x0b, 7	; 11
      ac:	fe cf       	rjmp	.-4      	; 0xaa <uartReceiveByte>
	;
	return UDR;
      ae:	8c b1       	in	r24, 0x0c	; 12
}
      b0:	08 95       	ret

000000b2 <uartTransmitMessage>:

//Transmit string to UART
void uartTransmitMessage(char* msg)
{ unsigned char i;
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	04 c0       	rjmp	.+8      	; 0xbe <uartTransmitMessage+0xc>
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
      b6:	5d 9b       	sbis	0x0b, 5	; 11
      b8:	fe cf       	rjmp	.-4      	; 0xb6 <uartTransmitMessage+0x4>
	UDR = data;
      ba:	ec b9       	out	0x0c, r30	; 12
	i=0;

	while ((i<256)&(msg[i]!=0x00) )
	{
		uartTransmitByte(msg[i]);
		i++;
      bc:	2f 5f       	subi	r18, 0xFF	; 255
//Transmit string to UART
void uartTransmitMessage(char* msg)
{ unsigned char i;
	i=0;

	while ((i<256)&(msg[i]!=0x00) )
      be:	fc 01       	movw	r30, r24
      c0:	e2 0f       	add	r30, r18
      c2:	f1 1d       	adc	r31, r1
      c4:	e0 81       	ld	r30, Z
      c6:	ee 23       	and	r30, r30
      c8:	b1 f7       	brne	.-20     	; 0xb6 <uartTransmitMessage+0x4>
	{
		uartTransmitByte(msg[i]);
		i++;
	}
	return;
}
      ca:	08 95       	ret

000000cc <initPWM>:
//------------------------------------------------------------------------------------
//PWM

void initPWM (void)
{
	TEC_PORT&=~(1<<TEC_PIN);
      cc:	95 98       	cbi	0x12, 5	; 18
	TEC_DDR|=(1<<TEC_PIN);
      ce:	8d 9a       	sbi	0x11, 5	; 17

	TCCR1A|=(1<<WGM10);
      d0:	8f b5       	in	r24, 0x2f	; 47
      d2:	81 60       	ori	r24, 0x01	; 1
      d4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM12)|(1<<CS10);
      d6:	8e b5       	in	r24, 0x2e	; 46
      d8:	89 60       	ori	r24, 0x09	; 9
      da:	8e bd       	out	0x2e, r24	; 46

	OCR1AL=0x00;
      dc:	1a bc       	out	0x2a, r1	; 42
	OCR1BL=0x00;
      de:	18 bc       	out	0x28, r1	; 40
	return;
}
      e0:	08 95       	ret

000000e2 <offPWM>:

void offPWM()
{
	TCCR1A&=~(1<<COM1A1);
      e2:	8f b5       	in	r24, 0x2f	; 47
      e4:	8f 77       	andi	r24, 0x7F	; 127
      e6:	8f bd       	out	0x2f, r24	; 47
	return;
}
      e8:	08 95       	ret

000000ea <onPWM>:

void onPWM()
{
	TCCR1A|=(1<<COM1A1);
      ea:	8f b5       	in	r24, 0x2f	; 47
      ec:	80 68       	ori	r24, 0x80	; 128
      ee:	8f bd       	out	0x2f, r24	; 47
	return;
}
      f0:	08 95       	ret

000000f2 <setPWM>:

void setPWM (uint8_t data)
{
	OCR1AL=data;
      f2:	8a bd       	out	0x2a, r24	; 42
	if (data==0) offPWM();
      f4:	88 23       	and	r24, r24
      f6:	19 f4       	brne	.+6      	; 0xfe <setPWM+0xc>
	return;
}

void offPWM()
{
	TCCR1A&=~(1<<COM1A1);
      f8:	8f b5       	in	r24, 0x2f	; 47
      fa:	8f 77       	andi	r24, 0x7F	; 127
      fc:	02 c0       	rjmp	.+4      	; 0x102 <setPWM+0x10>
	return;
}

void onPWM()
{
	TCCR1A|=(1<<COM1A1);
      fe:	8f b5       	in	r24, 0x2f	; 47
     100:	80 68       	ori	r24, 0x80	; 128
     102:	8f bd       	out	0x2f, r24	; 47
     104:	08 95       	ret

00000106 <getPWM>:
	return;
}

uint8_t getPWM (void)
{
	return OCR1AL;
     106:	8a b5       	in	r24, 0x2a	; 42
}
     108:	08 95       	ret

0000010a <clearRXBuf>:

//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
     10a:	ee e7       	ldi	r30, 0x7E	; 126
     10c:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     10e:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	e9 38       	cpi	r30, 0x89	; 137
     114:	f8 07       	cpc	r31, r24
     116:	d9 f7       	brne	.-10     	; 0x10e <clearRXBuf+0x4>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     118:	10 92 69 01 	sts	0x0169, r1
	return;
}
     11c:	08 95       	ret

0000011e <clearTXBuf>:

void clearTXBuf (void)
{
     11e:	ec e6       	ldi	r30, 0x6C	; 108
     120:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	txBuf[i]=0;
     122:	11 92       	st	Z+, r1
}

void clearTXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	e7 37       	cpi	r30, 0x77	; 119
     128:	f8 07       	cpc	r31, r24
     12a:	d9 f7       	brne	.-10     	; 0x122 <clearTXBuf+0x4>
	txBuf[i]=0;
	return;
}
     12c:	08 95       	ret

0000012e <clearBuf>:

void clearBuf (void)
{
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=txBuf[i]=0;
     132:	fc 01       	movw	r30, r24
     134:	e4 59       	subi	r30, 0x94	; 148
     136:	fe 4f       	sbci	r31, 0xFE	; 254
     138:	10 82       	st	Z, r1
     13a:	fc 01       	movw	r30, r24
     13c:	e2 58       	subi	r30, 0x82	; 130
     13e:	fe 4f       	sbci	r31, 0xFE	; 254
     140:	10 82       	st	Z, r1
     142:	01 96       	adiw	r24, 0x01	; 1
}

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     144:	8b 30       	cpi	r24, 0x0B	; 11
     146:	91 05       	cpc	r25, r1
     148:	a1 f7       	brne	.-24     	; 0x132 <clearBuf+0x4>
	rxBuf[i]=txBuf[i]=0;
	return;
}
     14a:	08 95       	ret

0000014c <__vector_11>:

//receive packet to RX buffer
ISR(USART_RXC_vect)
{
     14c:	1f 92       	push	r1
     14e:	0f 92       	push	r0
     150:	0f b6       	in	r0, 0x3f	; 63
     152:	0f 92       	push	r0
     154:	11 24       	eor	r1, r1
     156:	2f 93       	push	r18
     158:	3f 93       	push	r19
     15a:	4f 93       	push	r20
     15c:	6f 93       	push	r22
     15e:	7f 93       	push	r23
     160:	8f 93       	push	r24
     162:	9f 93       	push	r25
     164:	ef 93       	push	r30
     166:	ff 93       	push	r31
	uint16_t i=0;

	if (packetReceived!=0)
     168:	80 91 68 01 	lds	r24, 0x0168
     16c:	88 23       	and	r24, r24
     16e:	11 f0       	breq	.+4      	; 0x174 <__vector_11+0x28>
	{
		i=UDR;
     170:	8c b1       	in	r24, 0x0c	; 12
     172:	25 c0       	rjmp	.+74     	; 0x1be <__vector_11+0x72>
		return;
	}

	rxBuf[0]=UDR;
     174:	8c b1       	in	r24, 0x0c	; 12
     176:	80 93 7e 01 	sts	0x017E, r24
	currentRXPacketLen=1;
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	80 93 69 01 	sts	0x0169, r24
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	41 e0       	ldi	r20, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     186:	61 e0       	ldi	r22, 0x01	; 1
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	09 c0       	rjmp	.+18     	; 0x19e <__vector_11+0x52>

	while (1)
	{
		while ( !(UCSRA & (1<<RXC)) )
		{
			if (i==10000)
     18c:	87 e2       	ldi	r24, 0x27	; 39
     18e:	20 31       	cpi	r18, 0x10	; 16
     190:	38 07       	cpc	r19, r24
     192:	81 f0       	breq	.+32     	; 0x1b4 <__vector_11+0x68>
			{
				packetReceived=1;
				return;
			}
			i++;
     194:	2f 5f       	subi	r18, 0xFF	; 255
     196:	3f 4f       	sbci	r19, 0xFF	; 255
     198:	cb 01       	movw	r24, r22
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <__vector_11+0x4e>
	rxBuf[0]=UDR;
	currentRXPacketLen=1;

	while (1)
	{
		while ( !(UCSRA & (1<<RXC)) )
     19e:	5f 9b       	sbis	0x0b, 7	; 11
     1a0:	f5 cf       	rjmp	.-22     	; 0x18c <__vector_11+0x40>
				return;
			}
			i++;
			_delay_loop_2(1);
		}
		rxBuf[currentRXPacketLen]=UDR;
     1a2:	8c b1       	in	r24, 0x0c	; 12
     1a4:	e4 2f       	mov	r30, r20
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	e2 58       	subi	r30, 0x82	; 130
     1aa:	fe 4f       	sbci	r31, 0xFE	; 254
     1ac:	80 83       	st	Z, r24
		currentRXPacketLen++;
     1ae:	4f 5f       	subi	r20, 0xFF	; 255

		if (currentRXPacketLen>=BUFF_SIZE)
     1b0:	4b 30       	cpi	r20, 0x0B	; 11
     1b2:	a8 f3       	brcs	.-22     	; 0x19e <__vector_11+0x52>
     1b4:	40 93 69 01 	sts	0x0169, r20
		{
			packetReceived=1;
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	80 93 68 01 	sts	0x0168, r24
			return;
		}
	}
}
     1be:	ff 91       	pop	r31
     1c0:	ef 91       	pop	r30
     1c2:	9f 91       	pop	r25
     1c4:	8f 91       	pop	r24
     1c6:	7f 91       	pop	r23
     1c8:	6f 91       	pop	r22
     1ca:	4f 91       	pop	r20
     1cc:	3f 91       	pop	r19
     1ce:	2f 91       	pop	r18
     1d0:	0f 90       	pop	r0
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	0f 90       	pop	r0
     1d6:	1f 90       	pop	r1
     1d8:	18 95       	reti

000001da <uartSendPacket>:

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
     1da:	ec e6       	ldi	r30, 0x6C	; 108
     1dc:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i;
	for (i=0;i<length;i++)
     1de:	70 e0       	ldi	r23, 0x00	; 0
     1e0:	6e 0f       	add	r22, r30
     1e2:	7f 1f       	adc	r23, r31
     1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <uartSendPacket+0x16>
	uartTransmitByte(txBuf[i]);
     1e6:	80 81       	ld	r24, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     1e8:	5d 9b       	sbis	0x0b, 5	; 11
     1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <uartSendPacket+0xe>
	UDR = data;
     1ec:	8c b9       	out	0x0c, r24	; 12
     1ee:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     1f0:	e6 17       	cp	r30, r22
     1f2:	f7 07       	cpc	r31, r23
     1f4:	c1 f7       	brne	.-16     	; 0x1e6 <uartSendPacket+0xc>
	uartTransmitByte(txBuf[i]);
	return;
}
     1f6:	08 95       	ret

000001f8 <crc8Block>:

//crc calculating function
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
     1f8:	fc 01       	movw	r30, r24
     1fa:	9f ef       	ldi	r25, 0xFF	; 255
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     1fc:	21 e3       	ldi	r18, 0x31	; 49
     1fe:	0e c0       	rjmp	.+28     	; 0x21c <crc8Block+0x24>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     200:	80 81       	ld	r24, Z
     202:	98 27       	eor	r25, r24
     204:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     206:	97 ff       	sbrs	r25, 7
     208:	03 c0       	rjmp	.+6      	; 0x210 <crc8Block+0x18>
     20a:	99 0f       	add	r25, r25
     20c:	92 27       	eor	r25, r18
     20e:	01 c0       	rjmp	.+2      	; 0x212 <crc8Block+0x1a>
     210:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     212:	8f 5f       	subi	r24, 0xFF	; 255
     214:	88 30       	cpi	r24, 0x08	; 8
     216:	b9 f7       	brne	.-18     	; 0x206 <crc8Block+0xe>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     218:	31 96       	adiw	r30, 0x01	; 1
     21a:	61 50       	subi	r22, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     21c:	66 23       	and	r22, r22
     21e:	81 f7       	brne	.-32     	; 0x200 <crc8Block+0x8>
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
	}	
	return crc;
}
     220:	89 2f       	mov	r24, r25
     222:	08 95       	ret

00000224 <prepareSystemStatus>:

//prepare TX buffer
void prepareSystemStatus (void)
{
	txBuf[0]='d';
     224:	84 e6       	ldi	r24, 0x64	; 100
     226:	80 93 6c 01 	sts	0x016C, r24
	txBuf[1]= sensorData[0]>>8;
     22a:	90 91 7a 01 	lds	r25, 0x017A
     22e:	80 91 7b 01 	lds	r24, 0x017B
     232:	80 93 6d 01 	sts	0x016D, r24
	txBuf[2]= sensorData[0]&0x00ff;
     236:	90 93 6e 01 	sts	0x016E, r25
	txBuf[3]= sensorData[1]>>8;
     23a:	90 91 7c 01 	lds	r25, 0x017C
     23e:	80 91 7d 01 	lds	r24, 0x017D
     242:	80 93 6f 01 	sts	0x016F, r24
	txBuf[4]= sensorData[1]&0x00ff;
     246:	90 93 70 01 	sts	0x0170, r25
	txBuf[5]= setData[0]>>8;
     24a:	90 91 78 01 	lds	r25, 0x0178
     24e:	80 91 79 01 	lds	r24, 0x0179
     252:	80 93 71 01 	sts	0x0171, r24
	txBuf[6]= setData[0]&0x00ff;
     256:	90 93 72 01 	sts	0x0172, r25
	#if PWM_MODE == 1
		txBuf[7]= getPWM();
	#else
		txBuf[7]=coolerPower;
     25a:	80 91 6b 01 	lds	r24, 0x016B
     25e:	80 93 73 01 	sts	0x0173, r24
	#endif
	txBuf[8]= errorCode;
     262:	80 91 6a 01 	lds	r24, 0x016A
     266:	80 93 74 01 	sts	0x0174, r24
	txBuf[9]= coolerState;
     26a:	80 91 8a 01 	lds	r24, 0x018A
     26e:	80 93 75 01 	sts	0x0175, r24
	txBuf[10]=crc8Block(txBuf,10);
     272:	8c e6       	ldi	r24, 0x6C	; 108
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	6a e0       	ldi	r22, 0x0A	; 10
     278:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <crc8Block>
     27c:	80 93 76 01 	sts	0x0176, r24
}
     280:	08 95       	ret

00000282 <presentDS18b20>:
//DS18B20

uint8_t presentDS18b20(uint8_t sensor_num)
{	uint8_t res, sensor_pin;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     282:	88 23       	and	r24, r24
     284:	11 f0       	breq	.+4      	; 0x28a <presentDS18b20+0x8>
     286:	43 e0       	ldi	r20, 0x03	; 3
     288:	01 c0       	rjmp	.+2      	; 0x28c <presentDS18b20+0xa>
     28a:	42 e0       	ldi	r20, 0x02	; 2
	else sensor_pin=SENSOR1_PIN;
	
	SENSOR_DDR|=(1<<sensor_pin);
     28c:	84 b3       	in	r24, 0x14	; 20
     28e:	21 e0       	ldi	r18, 0x01	; 1
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	92 2f       	mov	r25, r18
     294:	04 2e       	mov	r0, r20
     296:	01 c0       	rjmp	.+2      	; 0x29a <presentDS18b20+0x18>
     298:	99 0f       	add	r25, r25
     29a:	0a 94       	dec	r0
     29c:	ea f7       	brpl	.-6      	; 0x298 <presentDS18b20+0x16>
     29e:	89 2b       	or	r24, r25
     2a0:	84 bb       	out	0x14, r24	; 20
     2a2:	e4 ed       	ldi	r30, 0xD4	; 212
     2a4:	f3 e0       	ldi	r31, 0x03	; 3
     2a6:	31 97       	sbiw	r30, 0x01	; 1
     2a8:	f1 f7       	brne	.-4      	; 0x2a6 <presentDS18b20+0x24>
	_delay_us (490);

	SENSOR_DDR&=~(1<<sensor_pin);
     2aa:	84 b3       	in	r24, 0x14	; 20
     2ac:	90 95       	com	r25
     2ae:	98 23       	and	r25, r24
     2b0:	94 bb       	out	0x14, r25	; 20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2b2:	85 ed       	ldi	r24, 0xD5	; 213
     2b4:	8a 95       	dec	r24
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <presentDS18b20+0x32>
	_delay_us(80);
	
	if ((SENSOR_PIN&(1<<sensor_pin)) == 0x00) res=1;  
     2b8:	83 b3       	in	r24, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2ba:	e8 e4       	ldi	r30, 0x48	; 72
     2bc:	f3 e0       	ldi	r31, 0x03	; 3
     2be:	31 97       	sbiw	r30, 0x01	; 1
     2c0:	f1 f7       	brne	.-4      	; 0x2be <presentDS18b20+0x3c>
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <presentDS18b20+0x48>
     2c6:	95 95       	asr	r25
     2c8:	87 95       	ror	r24
     2ca:	4a 95       	dec	r20
     2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <presentDS18b20+0x44>
     2ce:	82 27       	eor	r24, r18
     2d0:	93 27       	eor	r25, r19
	else res=0;  
	
	_delay_us(420);
	return res;
}
     2d2:	81 70       	andi	r24, 0x01	; 1
     2d4:	08 95       	ret

000002d6 <sendDS18b20>:

void sendDS18b20(uint8_t command, uint8_t sensor_num)
{	uint8_t i, data, sensor_pin;
     2d6:	48 2f       	mov	r20, r24

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     2d8:	66 23       	and	r22, r22
     2da:	11 f0       	breq	.+4      	; 0x2e0 <sendDS18b20+0xa>
     2dc:	23 e0       	ldi	r18, 0x03	; 3
     2de:	01 c0       	rjmp	.+2      	; 0x2e2 <sendDS18b20+0xc>
     2e0:	22 e0       	ldi	r18, 0x02	; 2
	data=command;

	for(i=0;i<8;i++)
	{
		if ((data&0x01)==0x01) {    //Send 1 on SDA
			SENSOR_DDR|=(1<<sensor_pin);
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	38 2f       	mov	r19, r24
     2e8:	01 c0       	rjmp	.+2      	; 0x2ec <sendDS18b20+0x16>
     2ea:	33 0f       	add	r19, r19
     2ec:	2a 95       	dec	r18
     2ee:	ea f7       	brpl	.-6      	; 0x2ea <sendDS18b20+0x14>
			_delay_us(9);
			SENSOR_DDR&=~(1<<sensor_pin);
     2f0:	53 2f       	mov	r21, r19
     2f2:	50 95       	com	r21
     2f4:	24 2f       	mov	r18, r20
     2f6:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2f8:	ea eb       	ldi	r30, 0xBA	; 186
	else sensor_pin=SENSOR1_PIN;
	data=command;

	for(i=0;i<8;i++)
	{
		if ((data&0x01)==0x01) {    //Send 1 on SDA
     2fa:	78 e2       	ldi	r23, 0x28	; 40
     2fc:	68 e1       	ldi	r22, 0x18	; 24
     2fe:	48 ec       	ldi	r20, 0xC8	; 200
     300:	20 ff       	sbrs	r18, 0
     302:	0b c0       	rjmp	.+22     	; 0x31a <sendDS18b20+0x44>
			SENSOR_DDR|=(1<<sensor_pin);
     304:	84 b3       	in	r24, 0x14	; 20
     306:	83 2b       	or	r24, r19
     308:	84 bb       	out	0x14, r24	; 20
     30a:	86 2f       	mov	r24, r22
     30c:	8a 95       	dec	r24
     30e:	f1 f7       	brne	.-4      	; 0x30c <sendDS18b20+0x36>
			_delay_us(9);
			SENSOR_DDR&=~(1<<sensor_pin);
     310:	84 b3       	in	r24, 0x14	; 20
     312:	85 23       	and	r24, r21
     314:	84 bb       	out	0x14, r24	; 20
     316:	84 2f       	mov	r24, r20
     318:	0a c0       	rjmp	.+20     	; 0x32e <sendDS18b20+0x58>
			_delay_us(75);
		}
		else {                   	//Send 0 on SDA
			SENSOR_DDR|=(1<<sensor_pin);
     31a:	84 b3       	in	r24, 0x14	; 20
     31c:	83 2b       	or	r24, r19
     31e:	84 bb       	out	0x14, r24	; 20
     320:	8e 2f       	mov	r24, r30
     322:	8a 95       	dec	r24
     324:	f1 f7       	brne	.-4      	; 0x322 <sendDS18b20+0x4c>
			_delay_us(70);
			SENSOR_DDR&=~(1<<sensor_pin);
     326:	84 b3       	in	r24, 0x14	; 20
     328:	85 23       	and	r24, r21
     32a:	84 bb       	out	0x14, r24	; 20
     32c:	87 2f       	mov	r24, r23
     32e:	8a 95       	dec	r24
     330:	f1 f7       	brne	.-4      	; 0x32e <sendDS18b20+0x58>

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;
	data=command;

	for(i=0;i<8;i++)
     332:	9f 5f       	subi	r25, 0xFF	; 255
     334:	98 30       	cpi	r25, 0x08	; 8
     336:	11 f0       	breq	.+4      	; 0x33c <sendDS18b20+0x66>
			SENSOR_DDR|=(1<<sensor_pin);
			_delay_us(70);
			SENSOR_DDR&=~(1<<sensor_pin);
			_delay_us(15);
		}
		data=data>>1;
     338:	26 95       	lsr	r18
     33a:	e2 cf       	rjmp	.-60     	; 0x300 <sendDS18b20+0x2a>
     33c:	08 95       	ret

0000033e <receiveDS18b20>:
	}
	return;
}

uint16_t receiveDS18b20(uint8_t sensor_num)
{	uint8_t i, sensor_pin;
     33e:	ff 92       	push	r15
     340:	0f 93       	push	r16
     342:	1f 93       	push	r17
	uint16_t res=0;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     344:	88 23       	and	r24, r24
     346:	11 f0       	breq	.+4      	; 0x34c <receiveDS18b20+0xe>
     348:	83 e0       	ldi	r24, 0x03	; 3
     34a:	01 c0       	rjmp	.+2      	; 0x34e <receiveDS18b20+0x10>
     34c:	82 e0       	ldi	r24, 0x02	; 2
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
	{
		SENSOR_DDR|=(1<<sensor_pin);		
     34e:	61 e0       	ldi	r22, 0x01	; 1
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	02 c0       	rjmp	.+4      	; 0x358 <receiveDS18b20+0x1a>
     354:	66 0f       	add	r22, r22
     356:	77 1f       	adc	r23, r23
     358:	8a 95       	dec	r24
     35a:	e2 f7       	brpl	.-8      	; 0x354 <receiveDS18b20+0x16>
     35c:	a6 2f       	mov	r26, r22
		_delay_us(9);
		SENSOR_DDR&=~(1<<sensor_pin);		
     35e:	b6 2f       	mov	r27, r22
     360:	b0 95       	com	r27
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	40 e0       	ldi	r20, 0x00	; 0
     368:	50 e0       	ldi	r21, 0x00	; 0
     36a:	88 e1       	ldi	r24, 0x18	; 24
     36c:	f8 2e       	mov	r15, r24
		_delay_us(12);

		if ((SENSOR_PIN & (1<<sensor_pin))==0x00) res&=~_BV(i);	//If 0 on SDA
		else 	res|=_BV(i);	    //IF 1 on SDA
     36e:	00 e2       	ldi	r16, 0x20	; 32
     370:	e1 e0       	ldi	r30, 0x01	; 1
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	1d ea       	ldi	r17, 0xAD	; 173
	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
	{
		SENSOR_DDR|=(1<<sensor_pin);		
     376:	84 b3       	in	r24, 0x14	; 20
     378:	8a 2b       	or	r24, r26
     37a:	84 bb       	out	0x14, r24	; 20
     37c:	8f 2d       	mov	r24, r15
     37e:	8a 95       	dec	r24
     380:	f1 f7       	brne	.-4      	; 0x37e <receiveDS18b20+0x40>
		_delay_us(9);
		SENSOR_DDR&=~(1<<sensor_pin);		
     382:	84 b3       	in	r24, 0x14	; 20
     384:	8b 23       	and	r24, r27
     386:	84 bb       	out	0x14, r24	; 20
     388:	80 2f       	mov	r24, r16
     38a:	8a 95       	dec	r24
     38c:	f1 f7       	brne	.-4      	; 0x38a <receiveDS18b20+0x4c>
		_delay_us(12);

		if ((SENSOR_PIN & (1<<sensor_pin))==0x00) res&=~_BV(i);	//If 0 on SDA
     38e:	83 b3       	in	r24, 0x13	; 19
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	86 23       	and	r24, r22
     394:	97 23       	and	r25, r23
     396:	89 2b       	or	r24, r25
     398:	61 f4       	brne	.+24     	; 0x3b2 <receiveDS18b20+0x74>
     39a:	cf 01       	movw	r24, r30
     39c:	04 2e       	mov	r0, r20
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <receiveDS18b20+0x66>
     3a0:	88 0f       	add	r24, r24
     3a2:	99 1f       	adc	r25, r25
     3a4:	0a 94       	dec	r0
     3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <receiveDS18b20+0x62>
     3a8:	80 95       	com	r24
     3aa:	90 95       	com	r25
     3ac:	28 23       	and	r18, r24
     3ae:	39 23       	and	r19, r25
     3b0:	09 c0       	rjmp	.+18     	; 0x3c4 <receiveDS18b20+0x86>
		else 	res|=_BV(i);	    //IF 1 on SDA
     3b2:	cf 01       	movw	r24, r30
     3b4:	04 2e       	mov	r0, r20
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <receiveDS18b20+0x7e>
     3b8:	88 0f       	add	r24, r24
     3ba:	99 1f       	adc	r25, r25
     3bc:	0a 94       	dec	r0
     3be:	e2 f7       	brpl	.-8      	; 0x3b8 <receiveDS18b20+0x7a>
     3c0:	28 2b       	or	r18, r24
     3c2:	39 2b       	or	r19, r25
     3c4:	81 2f       	mov	r24, r17
     3c6:	8a 95       	dec	r24
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <receiveDS18b20+0x88>
     3ca:	4f 5f       	subi	r20, 0xFF	; 255
     3cc:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t res=0;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
     3ce:	40 31       	cpi	r20, 0x10	; 16
     3d0:	51 05       	cpc	r21, r1
     3d2:	89 f6       	brne	.-94     	; 0x376 <receiveDS18b20+0x38>
		else 	res|=_BV(i);	    //IF 1 on SDA
				
		_delay_us(65);
	}
	return res;
}
     3d4:	c9 01       	movw	r24, r18
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	ff 90       	pop	r15
     3dc:	08 95       	ret

000003de <processPacket>:
}

//process received packet
void processPacket(void)
{
	cli();
     3de:	f8 94       	cli
	//check CRC
	if (crc8Block(rxBuf,currentRXPacketLen-1)!=rxBuf[currentRXPacketLen-1])
     3e0:	60 91 69 01 	lds	r22, 0x0169
     3e4:	61 50       	subi	r22, 0x01	; 1
     3e6:	8e e7       	ldi	r24, 0x7E	; 126
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <crc8Block>
     3ee:	20 91 69 01 	lds	r18, 0x0169
     3f2:	e2 2f       	mov	r30, r18
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	e3 58       	subi	r30, 0x83	; 131
     3f8:	fe 4f       	sbci	r31, 0xFE	; 254
     3fa:	90 81       	ld	r25, Z
     3fc:	89 17       	cp	r24, r25
     3fe:	69 f0       	breq	.+26     	; 0x41a <processPacket+0x3c>
	{
		packetReceived=0;
     400:	10 92 68 01 	sts	0x0168, r1
     404:	ee e7       	ldi	r30, 0x7E	; 126
     406:	f1 e0       	ldi	r31, 0x01	; 1
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     408:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     40a:	41 e0       	ldi	r20, 0x01	; 1
     40c:	e9 38       	cpi	r30, 0x89	; 137
     40e:	f4 07       	cpc	r31, r20
     410:	d9 f7       	brne	.-10     	; 0x408 <processPacket+0x2a>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     412:	10 92 69 01 	sts	0x0169, r1
	//check CRC
	if (crc8Block(rxBuf,currentRXPacketLen-1)!=rxBuf[currentRXPacketLen-1])
	{
		packetReceived=0;
		clearRXBuf();
		sei();
     416:	78 94       	sei
     418:	08 95       	ret
		return;
	}
	//differentiate and process packet
	switch (rxBuf[0]) {
     41a:	80 91 7e 01 	lds	r24, 0x017E
     41e:	89 36       	cpi	r24, 0x69	; 105
     420:	d1 f1       	breq	.+116    	; 0x496 <__stack+0x37>
     422:	8a 36       	cpi	r24, 0x6A	; 106
     424:	20 f4       	brcc	.+8      	; 0x42e <processPacket+0x50>
     426:	87 36       	cpi	r24, 0x67	; 103
     428:	09 f0       	breq	.+2      	; 0x42c <processPacket+0x4e>
     42a:	63 c0       	rjmp	.+198    	; 0x4f2 <__stack+0x93>
     42c:	07 c0       	rjmp	.+14     	; 0x43c <processPacket+0x5e>
     42e:	80 37       	cpi	r24, 0x70	; 112
     430:	09 f4       	brne	.+2      	; 0x434 <processPacket+0x56>
     432:	52 c0       	rjmp	.+164    	; 0x4d8 <__stack+0x79>
     434:	83 37       	cpi	r24, 0x73	; 115
     436:	09 f0       	breq	.+2      	; 0x43a <processPacket+0x5c>
     438:	5c c0       	rjmp	.+184    	; 0x4f2 <__stack+0x93>
     43a:	11 c0       	rjmp	.+34     	; 0x45e <processPacket+0x80>
		//if get command
		case 'g' : 	{
			if (currentRXPacketLen==2)
     43c:	22 30       	cpi	r18, 0x02	; 2
     43e:	09 f0       	breq	.+2      	; 0x442 <processPacket+0x64>
     440:	58 c0       	rjmp	.+176    	; 0x4f2 <__stack+0x93>
			{
				prepareSystemStatus();
     442:	0e 94 12 01 	call	0x224	; 0x224 <prepareSystemStatus>
     446:	ec e6       	ldi	r30, 0x6C	; 108
     448:	f1 e0       	ldi	r31, 0x01	; 1
//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
	uartTransmitByte(txBuf[i]);
     44a:	80 81       	ld	r24, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     44c:	5d 9b       	sbis	0x0b, 5	; 11
     44e:	fe cf       	rjmp	.-4      	; 0x44c <processPacket+0x6e>
	UDR = data;
     450:	8c b9       	out	0x0c, r24	; 12
     452:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	e7 37       	cpi	r30, 0x77	; 119
     458:	f8 07       	cpc	r31, r24
     45a:	b9 f7       	brne	.-18     	; 0x44a <processPacket+0x6c>
     45c:	4a c0       	rjmp	.+148    	; 0x4f2 <__stack+0x93>
			}			
			break;
		}
		//if set command
		case 's' : 	{
			if (currentRXPacketLen==4)
     45e:	24 30       	cpi	r18, 0x04	; 4
     460:	09 f0       	breq	.+2      	; 0x464 <__stack+0x5>
     462:	47 c0       	rjmp	.+142    	; 0x4f2 <__stack+0x93>
			{
				uint16_t val;

				val=(rxBuf[1]<<8)|(rxBuf[2]);
     464:	90 91 7f 01 	lds	r25, 0x017F
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	20 91 80 01 	lds	r18, 0x0180
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	28 2b       	or	r18, r24
     472:	39 2b       	or	r19, r25
				if ((val<=1780)&&(val>=780)) setData[0]=val;
     474:	c9 01       	movw	r24, r18
     476:	8c 50       	subi	r24, 0x0C	; 12
     478:	93 40       	sbci	r25, 0x03	; 3
     47a:	89 5e       	subi	r24, 0xE9	; 233
     47c:	93 40       	sbci	r25, 0x03	; 3
     47e:	20 f4       	brcc	.+8      	; 0x488 <__stack+0x29>
     480:	30 93 79 01 	sts	0x0179, r19
     484:	20 93 78 01 	sts	0x0178, r18
				#if STANDALONE_MODE == 1
					eeprom_write_word (&savedSetData, setData[0]);
     488:	60 91 78 01 	lds	r22, 0x0178
     48c:	70 91 79 01 	lds	r23, 0x0179
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	2c c0       	rjmp	.+88     	; 0x4ee <__stack+0x8f>
			
			break;
		}
		//if info command
		case 'i' :	{
			if (currentRXPacketLen==2)
     496:	22 30       	cpi	r18, 0x02	; 2
     498:	61 f5       	brne	.+88     	; 0x4f2 <__stack+0x93>
			{
				txBuf[0]='v';
     49a:	86 e7       	ldi	r24, 0x76	; 118
     49c:	80 93 6c 01 	sts	0x016C, r24
				txBuf[1]=HW_REVISION;
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	80 93 6d 01 	sts	0x016D, r24
				txBuf[2]=SW_REVISION;
     4a6:	80 93 6e 01 	sts	0x016E, r24
				txBuf[3]=SENSOR_COUNT;
     4aa:	20 93 6f 01 	sts	0x016F, r18
				txBuf[4]=VALUE_COUNT;
     4ae:	80 93 70 01 	sts	0x0170, r24
				txBuf[5]=crc8Block(txBuf,5);
     4b2:	8c e6       	ldi	r24, 0x6C	; 108
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	65 e0       	ldi	r22, 0x05	; 5
     4b8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <crc8Block>
     4bc:	80 93 71 01 	sts	0x0171, r24
     4c0:	ec e6       	ldi	r30, 0x6C	; 108
     4c2:	f1 e0       	ldi	r31, 0x01	; 1
//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
	uartTransmitByte(txBuf[i]);
     4c4:	80 81       	ld	r24, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     4c6:	5d 9b       	sbis	0x0b, 5	; 11
     4c8:	fe cf       	rjmp	.-4      	; 0x4c6 <__stack+0x67>
	UDR = data;
     4ca:	8c b9       	out	0x0c, r24	; 12
     4cc:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	e2 37       	cpi	r30, 0x72	; 114
     4d2:	f8 07       	cpc	r31, r24
     4d4:	b9 f7       	brne	.-18     	; 0x4c4 <__stack+0x65>
     4d6:	0d c0       	rjmp	.+26     	; 0x4f2 <__stack+0x93>

			break;
		}
		//if powern ON/OFF PWM
		case 'p' : 	{
		if (currentRXPacketLen==3)
     4d8:	23 30       	cpi	r18, 0x03	; 3
     4da:	59 f4       	brne	.+22     	; 0x4f2 <__stack+0x93>
		{
			if ((rxBuf[1]==COOLER_OFF)||(rxBuf[1]==COOLER_ON))
     4dc:	60 91 7f 01 	lds	r22, 0x017F
     4e0:	62 30       	cpi	r22, 0x02	; 2
     4e2:	38 f4       	brcc	.+14     	; 0x4f2 <__stack+0x93>
			{
				coolerState=rxBuf[1];
     4e4:	60 93 8a 01 	sts	0x018A, r22
				#if STANDALONE_MODE == 1
					eeprom_write_word (&savedCoolerState, coolerState);	
     4e8:	82 e0       	ldi	r24, 0x02	; 2
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__eewr_word_m16>
		default:
		{
			;
		}
	}
	packetReceived=0;
     4f2:	10 92 68 01 	sts	0x0168, r1
     4f6:	ee e7       	ldi	r30, 0x7E	; 126
     4f8:	f1 e0       	ldi	r31, 0x01	; 1
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     4fa:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     4fc:	41 e0       	ldi	r20, 0x01	; 1
     4fe:	e9 38       	cpi	r30, 0x89	; 137
     500:	f4 07       	cpc	r31, r20
     502:	d9 f7       	brne	.-10     	; 0x4fa <__stack+0x9b>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     504:	10 92 69 01 	sts	0x0169, r1
			;
		}
	}
	packetReceived=0;
	clearRXBuf();
	sei();
     508:	78 94       	sei
     50a:	08 95       	ret

0000050c <main>:
	return res;
}

//------------------------------------------------------------------------------------
int main(void)
{
     50c:	2f 92       	push	r2
     50e:	3f 92       	push	r3
     510:	4f 92       	push	r4
     512:	5f 92       	push	r5
     514:	6f 92       	push	r6
     516:	7f 92       	push	r7
     518:	8f 92       	push	r8
     51a:	9f 92       	push	r9
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	df 93       	push	r29
     52e:	cf 93       	push	r28
     530:	00 d0       	rcall	.+0      	; 0x532 <main+0x26>
     532:	0f 92       	push	r0
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
	uint8_t i, sign, firstConv=_YES;
	uint16_t val, fract;	
	//read from EEPROM saved value & coolerState state
	#if STANDALONE_MODE == 1
		setData[0]= eeprom_read_word (&savedSetData);
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <__eerd_word_m16>
     540:	90 93 79 01 	sts	0x0179, r25
     544:	80 93 78 01 	sts	0x0178, r24
		coolerState = eeprom_read_byte(&savedCoolerState);
     548:	82 e0       	ldi	r24, 0x02	; 2
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__eerd_byte_m16>
     550:	80 93 8a 01 	sts	0x018A, r24
		setData[0]=1730;
		coolerState=COOLER_OFF;
	#endif
	//init variables
	for (i=0;i<SENSOR_COUNT;i++)
		sensorData[i]=0;
     554:	10 92 7b 01 	sts	0x017B, r1
     558:	10 92 7a 01 	sts	0x017A, r1
     55c:	10 92 7d 01 	sts	0x017D, r1
     560:	10 92 7c 01 	sts	0x017C, r1
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	90 e0       	ldi	r25, 0x00	; 0

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=txBuf[i]=0;
     568:	fc 01       	movw	r30, r24
     56a:	e4 59       	subi	r30, 0x94	; 148
     56c:	fe 4f       	sbci	r31, 0xFE	; 254
     56e:	10 82       	st	Z, r1
     570:	fc 01       	movw	r30, r24
     572:	e2 58       	subi	r30, 0x82	; 130
     574:	fe 4f       	sbci	r31, 0xFE	; 254
     576:	10 82       	st	Z, r1
     578:	01 96       	adiw	r24, 0x01	; 1
}

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     57a:	8b 30       	cpi	r24, 0x0B	; 11
     57c:	91 05       	cpc	r25, r1
     57e:	a1 f7       	brne	.-24     	; 0x568 <main+0x5c>
	#endif
	//init variables
	for (i=0;i<SENSOR_COUNT;i++)
		sensorData[i]=0;
	clearBuf ();
	U=0.0;
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e0       	ldi	r27, 0x00	; 0
     588:	80 93 8f 01 	sts	0x018F, r24
     58c:	90 93 90 01 	sts	0x0190, r25
     590:	a0 93 91 01 	sts	0x0191, r26
     594:	b0 93 92 01 	sts	0x0192, r27
	E=0;
     598:	80 93 8b 01 	sts	0x018B, r24
     59c:	90 93 8c 01 	sts	0x018C, r25
     5a0:	a0 93 8d 01 	sts	0x018D, r26
     5a4:	b0 93 8e 01 	sts	0x018E, r27
	//Init ports, UART, PWM
	SENSOR_PORT&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));     	
     5a8:	85 b3       	in	r24, 0x15	; 21
     5aa:	83 7f       	andi	r24, 0xF3	; 243
     5ac:	85 bb       	out	0x15, r24	; 21
	SENSOR_DDR&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));		
     5ae:	84 b3       	in	r24, 0x14	; 20
     5b0:	83 7f       	andi	r24, 0xF3	; 243
     5b2:	84 bb       	out	0x14, r24	; 20

	#if PWM_MODE == 1
		initPWM();
	#else
		TEC_PORT&=~(1<<TEC_PIN);
     5b4:	95 98       	cbi	0x12, 5	; 18
		TEC_DDR|=(1<<TEC_PIN);
     5b6:	8d 9a       	sbi	0x11, 5	; 17
//------------------------------------------------------------------------------------
//UART

void uartInit(void)
{
	UBRRH = UART_BAUDRATE_H;		// Init UART baudrate
     5b8:	10 bc       	out	0x20, r1	; 32
	UBRRL = UART_BAUDRATE_L;
     5ba:	83 e3       	ldi	r24, 0x33	; 51
     5bc:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1<<RXEN)|(1<<TXEN)|(1 << RXCIE);	// TX, RX enable, RX interrupt enable
     5be:	88 e9       	ldi	r24, 0x98	; 152
     5c0:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
     5c2:	86 e8       	ldi	r24, 0x86	; 134
     5c4:	80 bd       	out	0x20, r24	; 32
	#else
		TEC_PORT&=~(1<<TEC_PIN);
		TEC_DDR|=(1<<TEC_PIN);
	#endif
	uartInit();	
	sei();
     5c6:	78 94       	sei
     5c8:	21 e0       	ldi	r18, 0x01	; 1
     5ca:	29 83       	std	Y+1, r18	; 0x01
			{
				sendDS18b20(SKIP_ROM,i);
				sendDS18b20(START_CONVERSION,i);
				errorCode=0;
			}
			else errorCode|=(1<<i);
     5cc:	11 e0       	ldi	r17, 0x01	; 1
     5ce:	21 2e       	mov	r2, r17
     5d0:	31 2c       	mov	r3, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5d2:	b8 ec       	ldi	r27, 0xC8	; 200
     5d4:	4b 2e       	mov	r4, r27
     5d6:	51 2c       	mov	r5, r1
     5d8:	01 c0       	rjmp	.+2      	; 0x5dc <main+0xd0>
	#else
		TEC_PORT&=~(1<<TEC_PIN);
		TEC_DDR|=(1<<TEC_PIN);
	#endif
	uartInit();	
	sei();
     5da:	19 82       	std	Y+1, r1	; 0x01

//##############################################################
	#if SLOW_PWM_MODE == 1
	while (1)
	{
		if (packetReceived!=0) processPacket();
     5dc:	80 91 68 01 	lds	r24, 0x0168
     5e0:	88 23       	and	r24, r24
     5e2:	11 f0       	breq	.+4      	; 0x5e8 <main+0xdc>
     5e4:	0e 94 ef 01 	call	0x3de	; 0x3de <processPacket>
		errorCode=0;
     5e8:	10 92 6a 01 	sts	0x016A, r1
     5ec:	00 e0       	ldi	r16, 0x00	; 0
     5ee:	10 e0       	ldi	r17, 0x00	; 0
		for (i=0;i<SENSOR_COUNT;i++)
		{
			if (presentDS18b20(i)==1)
     5f0:	80 2f       	mov	r24, r16
     5f2:	0e 94 41 01 	call	0x282	; 0x282 <presentDS18b20>
     5f6:	81 30       	cpi	r24, 0x01	; 1
     5f8:	59 f4       	brne	.+22     	; 0x610 <main+0x104>
			{
				sendDS18b20(SKIP_ROM,i);
     5fa:	8c ec       	ldi	r24, 0xCC	; 204
     5fc:	60 2f       	mov	r22, r16
     5fe:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <sendDS18b20>
				sendDS18b20(START_CONVERSION,i);
     602:	84 e4       	ldi	r24, 0x44	; 68
     604:	60 2f       	mov	r22, r16
     606:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <sendDS18b20>
				errorCode=0;
     60a:	10 92 6a 01 	sts	0x016A, r1
     60e:	0c c0       	rjmp	.+24     	; 0x628 <main+0x11c>
			}
			else errorCode|=(1<<i);
     610:	91 01       	movw	r18, r2
     612:	00 2e       	mov	r0, r16
     614:	02 c0       	rjmp	.+4      	; 0x61a <main+0x10e>
     616:	22 0f       	add	r18, r18
     618:	33 1f       	adc	r19, r19
     61a:	0a 94       	dec	r0
     61c:	e2 f7       	brpl	.-8      	; 0x616 <main+0x10a>
     61e:	80 91 6a 01 	lds	r24, 0x016A
     622:	82 2b       	or	r24, r18
     624:	80 93 6a 01 	sts	0x016A, r24
     628:	0f 5f       	subi	r16, 0xFF	; 255
     62a:	1f 4f       	sbci	r17, 0xFF	; 255
	#if SLOW_PWM_MODE == 1
	while (1)
	{
		if (packetReceived!=0) processPacket();
		errorCode=0;
		for (i=0;i<SENSOR_COUNT;i++)
     62c:	02 30       	cpi	r16, 0x02	; 2
     62e:	11 05       	cpc	r17, r1
     630:	f9 f6       	brne	.-66     	; 0x5f0 <main+0xe4>
				sendDS18b20(START_CONVERSION,i);
				errorCode=0;
			}
			else errorCode|=(1<<i);
		}
		if (firstConv==_YES) firstConv=_NO;
     632:	39 81       	ldd	r19, Y+1	; 0x01
     634:	31 30       	cpi	r19, 0x01	; 1
     636:	89 f2       	breq	.-94     	; 0x5da <main+0xce>
     638:	aa e7       	ldi	r26, 0x7A	; 122
     63a:	ea 2e       	mov	r14, r26
     63c:	a1 e0       	ldi	r26, 0x01	; 1
     63e:	fa 2e       	mov	r15, r26
     640:	00 e0       	ldi	r16, 0x00	; 0
     642:	10 e0       	ldi	r17, 0x00	; 0
		else
		{		 
			//receive measured data from sensors
			for (i=0;i<SENSOR_COUNT;i++)
			{
				if (presentDS18b20(i)==1)
     644:	80 2f       	mov	r24, r16
     646:	0e 94 41 01 	call	0x282	; 0x282 <presentDS18b20>
     64a:	81 30       	cpi	r24, 0x01	; 1
     64c:	09 f0       	breq	.+2      	; 0x650 <main+0x144>
     64e:	4a c0       	rjmp	.+148    	; 0x6e4 <main+0x1d8>
				{
					sendDS18b20(SKIP_ROM,i);
     650:	8c ec       	ldi	r24, 0xCC	; 204
     652:	60 2f       	mov	r22, r16
     654:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <sendDS18b20>
					sendDS18b20(GET_DATA,i);
     658:	8e eb       	ldi	r24, 0xBE	; 190
     65a:	60 2f       	mov	r22, r16
     65c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <sendDS18b20>
					val=receiveDS18b20(i);
     660:	80 2f       	mov	r24, r16
     662:	0e 94 9f 01 	call	0x33e	; 0x33e <receiveDS18b20>
					if ((val&0x8000)!=0x00)
     666:	97 fd       	sbrc	r25, 7
     668:	02 c0       	rjmp	.+4      	; 0x66e <main+0x162>
     66a:	e0 e0       	ldi	r30, 0x00	; 0
     66c:	04 c0       	rjmp	.+8      	; 0x676 <main+0x16a>
					{
						sign=1;
						val=0xffff-val+1;
     66e:	90 95       	com	r25
     670:	81 95       	neg	r24
     672:	9f 4f       	sbci	r25, 0xFF	; 255
     674:	e1 e0       	ldi	r30, 0x01	; 1
					}
					else sign=0;
					fract=0;
					if ((val&0x01)!=0x00) fract=fract+65;
     676:	80 fd       	sbrc	r24, 0
     678:	03 c0       	rjmp	.+6      	; 0x680 <main+0x174>
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	02 c0       	rjmp	.+4      	; 0x684 <main+0x178>
     680:	41 e4       	ldi	r20, 0x41	; 65
     682:	50 e0       	ldi	r21, 0x00	; 0
					if ((val&0x02)!=0x00) fract=fract+125;
     684:	81 ff       	sbrs	r24, 1
     686:	02 c0       	rjmp	.+4      	; 0x68c <main+0x180>
     688:	43 58       	subi	r20, 0x83	; 131
     68a:	5f 4f       	sbci	r21, 0xFF	; 255
					if ((val&0x04)!=0x00) fract=fract+250;
     68c:	82 ff       	sbrs	r24, 2
     68e:	02 c0       	rjmp	.+4      	; 0x694 <main+0x188>
     690:	46 50       	subi	r20, 0x06	; 6
     692:	5f 4f       	sbci	r21, 0xFF	; 255
					if ((val&0x08)!=0x00) fract=fract+500;
     694:	83 ff       	sbrs	r24, 3
     696:	02 c0       	rjmp	.+4      	; 0x69c <main+0x190>
     698:	4c 50       	subi	r20, 0x0C	; 12
     69a:	5e 4f       	sbci	r21, 0xFE	; 254
					val=(val>>4)*10+fract/100;
     69c:	f4 e0       	ldi	r31, 0x04	; 4
     69e:	96 95       	lsr	r25
     6a0:	87 95       	ror	r24
     6a2:	fa 95       	dec	r31
     6a4:	e1 f7       	brne	.-8      	; 0x69e <main+0x192>
     6a6:	9c 01       	movw	r18, r24
     6a8:	73 e0       	ldi	r23, 0x03	; 3
     6aa:	22 0f       	add	r18, r18
     6ac:	33 1f       	adc	r19, r19
     6ae:	7a 95       	dec	r23
     6b0:	e1 f7       	brne	.-8      	; 0x6aa <main+0x19e>
     6b2:	88 0f       	add	r24, r24
     6b4:	99 1f       	adc	r25, r25
     6b6:	28 0f       	add	r18, r24
     6b8:	39 1f       	adc	r19, r25
     6ba:	ca 01       	movw	r24, r20
     6bc:	64 e6       	ldi	r22, 0x64	; 100
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	0e 94 0e 0b 	call	0x161c	; 0x161c <__udivmodhi4>
     6c4:	62 0f       	add	r22, r18
     6c6:	73 1f       	adc	r23, r19
					if (sign==1) val=OFFSET-val;
     6c8:	e1 30       	cpi	r30, 0x01	; 1
     6ca:	31 f4       	brne	.+12     	; 0x6d8 <main+0x1cc>
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	95 e0       	ldi	r25, 0x05	; 5
     6d0:	86 1b       	sub	r24, r22
     6d2:	97 0b       	sbc	r25, r23
     6d4:	bc 01       	movw	r22, r24
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <main+0x1d0>
					else val=val+OFFSET;
     6d8:	60 50       	subi	r22, 0x00	; 0
     6da:	7b 4f       	sbci	r23, 0xFB	; 251
					sensorData[i]=val;
     6dc:	f7 01       	movw	r30, r14
     6de:	71 83       	std	Z+1, r23	; 0x01
     6e0:	60 83       	st	Z, r22
     6e2:	0c c0       	rjmp	.+24     	; 0x6fc <main+0x1f0>
				}
				else errorCode|=(1<<i);
     6e4:	91 01       	movw	r18, r2
     6e6:	00 2e       	mov	r0, r16
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <main+0x1e2>
     6ea:	22 0f       	add	r18, r18
     6ec:	33 1f       	adc	r19, r19
     6ee:	0a 94       	dec	r0
     6f0:	e2 f7       	brpl	.-8      	; 0x6ea <main+0x1de>
     6f2:	80 91 6a 01 	lds	r24, 0x016A
     6f6:	82 2b       	or	r24, r18
     6f8:	80 93 6a 01 	sts	0x016A, r24
     6fc:	0f 5f       	subi	r16, 0xFF	; 255
     6fe:	1f 4f       	sbci	r17, 0xFF	; 255
     700:	22 e0       	ldi	r18, 0x02	; 2
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	e2 0e       	add	r14, r18
     706:	f3 1e       	adc	r15, r19
		}
		if (firstConv==_YES) firstConv=_NO;
		else
		{		 
			//receive measured data from sensors
			for (i=0;i<SENSOR_COUNT;i++)
     708:	02 30       	cpi	r16, 0x02	; 2
     70a:	11 05       	cpc	r17, r1
     70c:	09 f0       	breq	.+2      	; 0x710 <main+0x204>
     70e:	9a cf       	rjmp	.-204    	; 0x644 <main+0x138>
					sensorData[i]=val;
				}
				else errorCode|=(1<<i);
			}
			//if coolerState is OFF - clear all variables
			if (coolerState==COOLER_OFF) 
     710:	80 91 8a 01 	lds	r24, 0x018A
     714:	88 23       	and	r24, r24
     716:	b9 f4       	brne	.+46     	; 0x746 <main+0x23a>
			{
				coolerPower=0x00;
     718:	10 92 6b 01 	sts	0x016B, r1
				U=0.0;
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	a0 e0       	ldi	r26, 0x00	; 0
     722:	b0 e0       	ldi	r27, 0x00	; 0
     724:	80 93 8f 01 	sts	0x018F, r24
     728:	90 93 90 01 	sts	0x0190, r25
     72c:	a0 93 91 01 	sts	0x0191, r26
     730:	b0 93 92 01 	sts	0x0192, r27
				E=0.0;
     734:	80 93 8b 01 	sts	0x018B, r24
     738:	90 93 8c 01 	sts	0x018C, r25
     73c:	a0 93 8d 01 	sts	0x018D, r26
     740:	b0 93 8e 01 	sts	0x018E, r27
     744:	4a cf       	rjmp	.-364    	; 0x5da <main+0xce>
			}
			//If no errors at sensor[0] and coolerState is ON - calculate and set software PWM
			if (coolerState==COOLER_ON)
     746:	81 30       	cpi	r24, 0x01	; 1
     748:	09 f0       	breq	.+2      	; 0x74c <main+0x240>
     74a:	47 cf       	rjmp	.-370    	; 0x5da <main+0xce>
				{
					E=(double) sensorData[0]-setData[0];
     74c:	60 91 7a 01 	lds	r22, 0x017A
     750:	70 91 7b 01 	lds	r23, 0x017B
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 a0 08 	call	0x1140	; 0x1140 <__floatunsisf>
     75c:	7b 01       	movw	r14, r22
     75e:	8c 01       	movw	r16, r24
     760:	60 91 78 01 	lds	r22, 0x0178
     764:	70 91 79 01 	lds	r23, 0x0179
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 a0 08 	call	0x1140	; 0x1140 <__floatunsisf>
     770:	9b 01       	movw	r18, r22
     772:	ac 01       	movw	r20, r24
     774:	c8 01       	movw	r24, r16
     776:	b7 01       	movw	r22, r14
     778:	0e 94 34 06 	call	0xc68	; 0xc68 <__subsf3>
     77c:	60 93 8b 01 	sts	0x018B, r22
     780:	70 93 8c 01 	sts	0x018C, r23
     784:	80 93 8d 01 	sts	0x018D, r24
     788:	90 93 8e 01 	sts	0x018E, r25

					U=U+KPSLOW*E;
     78c:	2a e0       	ldi	r18, 0x0A	; 10
     78e:	37 ed       	ldi	r19, 0xD7	; 215
     790:	43 ea       	ldi	r20, 0xA3	; 163
     792:	5c e3       	ldi	r21, 0x3C	; 60
     794:	0e 94 92 06 	call	0xd24	; 0xd24 <__mulsf3>
     798:	20 91 8f 01 	lds	r18, 0x018F
     79c:	30 91 90 01 	lds	r19, 0x0190
     7a0:	40 91 91 01 	lds	r20, 0x0191
     7a4:	50 91 92 01 	lds	r21, 0x0192
     7a8:	0e 94 65 06 	call	0xcca	; 0xcca <__addsf3>
     7ac:	60 93 8f 01 	sts	0x018F, r22
     7b0:	70 93 90 01 	sts	0x0190, r23
     7b4:	80 93 91 01 	sts	0x0191, r24
     7b8:	90 93 92 01 	sts	0x0192, r25

					if (U>511.0) 	U=511.0;
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e8       	ldi	r19, 0x80	; 128
     7c0:	4f ef       	ldi	r20, 0xFF	; 255
     7c2:	53 e4       	ldi	r21, 0x43	; 67
     7c4:	0e 94 8c 07 	call	0xf18	; 0xf18 <__gtsf2>
     7c8:	18 16       	cp	r1, r24
     7ca:	64 f4       	brge	.+24     	; 0x7e4 <main+0x2d8>
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e8       	ldi	r25, 0x80	; 128
     7d0:	af ef       	ldi	r26, 0xFF	; 255
     7d2:	b3 e4       	ldi	r27, 0x43	; 67
     7d4:	80 93 8f 01 	sts	0x018F, r24
     7d8:	90 93 90 01 	sts	0x0190, r25
     7dc:	a0 93 91 01 	sts	0x0191, r26
     7e0:	b0 93 92 01 	sts	0x0192, r27
					if (U<=0.0) 	U=0.0;		
     7e4:	60 91 8f 01 	lds	r22, 0x018F
     7e8:	70 91 90 01 	lds	r23, 0x0190
     7ec:	80 91 91 01 	lds	r24, 0x0191
     7f0:	90 91 92 01 	lds	r25, 0x0192
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	0e 94 1c 08 	call	0x1038	; 0x1038 <__lesf2>
     800:	18 16       	cp	r1, r24
     802:	64 f0       	brlt	.+24     	; 0x81c <main+0x310>
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	a0 e0       	ldi	r26, 0x00	; 0
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	80 93 8f 01 	sts	0x018F, r24
     810:	90 93 90 01 	sts	0x0190, r25
     814:	a0 93 91 01 	sts	0x0191, r26
     818:	b0 93 92 01 	sts	0x0192, r27
					
					if (U>0.0) TEC_PORT|=(1<<TEC_PIN);	
     81c:	60 90 8f 01 	lds	r6, 0x018F
     820:	70 90 90 01 	lds	r7, 0x0190
     824:	80 90 91 01 	lds	r8, 0x0191
     828:	90 90 92 01 	lds	r9, 0x0192
     82c:	c4 01       	movw	r24, r8
     82e:	b3 01       	movw	r22, r6
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	0e 94 8c 07 	call	0xf18	; 0xf18 <__gtsf2>
     83c:	18 16       	cp	r1, r24
     83e:	0c f4       	brge	.+2      	; 0x842 <main+0x336>
     840:	95 9a       	sbi	0x12, 5	; 18
					_delay_ms((uint16_t)U);								
     842:	c4 01       	movw	r24, r8
     844:	b3 01       	movw	r22, r6
     846:	0e 94 bc 04 	call	0x978	; 0x978 <__fixunssfsi>
     84a:	7b 83       	std	Y+3, r23	; 0x03
     84c:	6a 83       	std	Y+2, r22	; 0x02
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 a0 08 	call	0x1140	; 0x1140 <__floatunsisf>
     856:	5b 01       	movw	r10, r22
     858:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	4a ef       	ldi	r20, 0xFA	; 250
     860:	54 e4       	ldi	r21, 0x44	; 68
     862:	0e 94 92 06 	call	0xd24	; 0xd24 <__mulsf3>
     866:	7b 01       	movw	r14, r22
     868:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e8       	ldi	r20, 0x80	; 128
     870:	5f e3       	ldi	r21, 0x3F	; 63
     872:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__ltsf2>
     876:	88 23       	and	r24, r24
     878:	1c f4       	brge	.+6      	; 0x880 <main+0x374>
     87a:	61 e0       	ldi	r22, 0x01	; 1
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	22 c0       	rjmp	.+68     	; 0x8c4 <main+0x3b8>
		__ticks = 1;
	else if (__tmp > 65535)
     880:	c8 01       	movw	r24, r16
     882:	b7 01       	movw	r22, r14
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	3f ef       	ldi	r19, 0xFF	; 255
     888:	4f e7       	ldi	r20, 0x7F	; 127
     88a:	57 e4       	ldi	r21, 0x47	; 71
     88c:	0e 94 8c 07 	call	0xf18	; 0xf18 <__gtsf2>
     890:	18 16       	cp	r1, r24
     892:	a4 f4       	brge	.+40     	; 0x8bc <main+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     894:	c6 01       	movw	r24, r12
     896:	b5 01       	movw	r22, r10
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	40 e2       	ldi	r20, 0x20	; 32
     89e:	51 e4       	ldi	r21, 0x41	; 65
     8a0:	0e 94 92 06 	call	0xd24	; 0xd24 <__mulsf3>
     8a4:	0e 94 bc 04 	call	0x978	; 0x978 <__fixunssfsi>
     8a8:	05 c0       	rjmp	.+10     	; 0x8b4 <main+0x3a8>
     8aa:	c2 01       	movw	r24, r4
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <main+0x3a0>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8b0:	61 50       	subi	r22, 0x01	; 1
     8b2:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8b4:	61 15       	cp	r22, r1
     8b6:	71 05       	cpc	r23, r1
     8b8:	c1 f7       	brne	.-16     	; 0x8aa <main+0x39e>
     8ba:	07 c0       	rjmp	.+14     	; 0x8ca <main+0x3be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8bc:	c8 01       	movw	r24, r16
     8be:	b7 01       	movw	r22, r14
     8c0:	0e 94 bc 04 	call	0x978	; 0x978 <__fixunssfsi>
     8c4:	cb 01       	movw	r24, r22
     8c6:	01 97       	sbiw	r24, 0x01	; 1
     8c8:	f1 f7       	brne	.-4      	; 0x8c6 <main+0x3ba>
					if (((uint16_t) U)!=511)TEC_PORT&=~(1<<TEC_PIN);
     8ca:	2a 81       	ldd	r18, Y+2	; 0x02
     8cc:	3b 81       	ldd	r19, Y+3	; 0x03
     8ce:	2f 5f       	subi	r18, 0xFF	; 255
     8d0:	31 40       	sbci	r19, 0x01	; 1
     8d2:	09 f0       	breq	.+2      	; 0x8d6 <main+0x3ca>
     8d4:	95 98       	cbi	0x12, 5	; 18
					_delay_ms(511-(uint16_t)(U));
     8d6:	6f ef       	ldi	r22, 0xFF	; 255
     8d8:	71 e0       	ldi	r23, 0x01	; 1
     8da:	ea 81       	ldd	r30, Y+2	; 0x02
     8dc:	fb 81       	ldd	r31, Y+3	; 0x03
     8de:	6e 1b       	sub	r22, r30
     8e0:	7f 0b       	sbc	r23, r31
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 a0 08 	call	0x1140	; 0x1140 <__floatunsisf>
     8ea:	5b 01       	movw	r10, r22
     8ec:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	4a ef       	ldi	r20, 0xFA	; 250
     8f4:	54 e4       	ldi	r21, 0x44	; 68
     8f6:	0e 94 92 06 	call	0xd24	; 0xd24 <__mulsf3>
     8fa:	7b 01       	movw	r14, r22
     8fc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	40 e8       	ldi	r20, 0x80	; 128
     904:	5f e3       	ldi	r21, 0x3F	; 63
     906:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__ltsf2>
     90a:	88 23       	and	r24, r24
     90c:	1c f4       	brge	.+6      	; 0x914 <main+0x408>
     90e:	61 e0       	ldi	r22, 0x01	; 1
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	22 c0       	rjmp	.+68     	; 0x958 <main+0x44c>
		__ticks = 1;
	else if (__tmp > 65535)
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	3f ef       	ldi	r19, 0xFF	; 255
     91c:	4f e7       	ldi	r20, 0x7F	; 127
     91e:	57 e4       	ldi	r21, 0x47	; 71
     920:	0e 94 8c 07 	call	0xf18	; 0xf18 <__gtsf2>
     924:	18 16       	cp	r1, r24
     926:	a4 f4       	brge	.+40     	; 0x950 <main+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     928:	c6 01       	movw	r24, r12
     92a:	b5 01       	movw	r22, r10
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	40 e2       	ldi	r20, 0x20	; 32
     932:	51 e4       	ldi	r21, 0x41	; 65
     934:	0e 94 92 06 	call	0xd24	; 0xd24 <__mulsf3>
     938:	0e 94 bc 04 	call	0x978	; 0x978 <__fixunssfsi>
     93c:	05 c0       	rjmp	.+10     	; 0x948 <main+0x43c>
     93e:	c2 01       	movw	r24, r4
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	f1 f7       	brne	.-4      	; 0x940 <main+0x434>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     944:	61 50       	subi	r22, 0x01	; 1
     946:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     948:	61 15       	cp	r22, r1
     94a:	71 05       	cpc	r23, r1
     94c:	c1 f7       	brne	.-16     	; 0x93e <main+0x432>
     94e:	07 c0       	rjmp	.+14     	; 0x95e <main+0x452>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     950:	c8 01       	movw	r24, r16
     952:	b7 01       	movw	r22, r14
     954:	0e 94 bc 04 	call	0x978	; 0x978 <__fixunssfsi>
     958:	cb 01       	movw	r24, r22
     95a:	01 97       	sbiw	r24, 0x01	; 1
     95c:	f1 f7       	brne	.-4      	; 0x95a <main+0x44e>

					coolerPower=((uint16_t)(U/2));
     95e:	c4 01       	movw	r24, r8
     960:	b3 01       	movw	r22, r6
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	40 e0       	ldi	r20, 0x00	; 0
     968:	5f e3       	ldi	r21, 0x3F	; 63
     96a:	0e 94 92 06 	call	0xd24	; 0xd24 <__mulsf3>
     96e:	0e 94 bc 04 	call	0x978	; 0x978 <__fixunssfsi>
     972:	60 93 6b 01 	sts	0x016B, r22
     976:	31 ce       	rjmp	.-926    	; 0x5da <main+0xce>

00000978 <__fixunssfsi>:
     978:	ef 92       	push	r14
     97a:	ff 92       	push	r15
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	7b 01       	movw	r14, r22
     982:	8c 01       	movw	r16, r24
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	5f e4       	ldi	r21, 0x4F	; 79
     98c:	0e 94 bc 07 	call	0xf78	; 0xf78 <__gesf2>
     990:	88 23       	and	r24, r24
     992:	8c f0       	brlt	.+34     	; 0x9b6 <__fixunssfsi+0x3e>
     994:	c8 01       	movw	r24, r16
     996:	b7 01       	movw	r22, r14
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	5f e4       	ldi	r21, 0x4F	; 79
     9a0:	0e 94 34 06 	call	0xc68	; 0xc68 <__subsf3>
     9a4:	0e 94 4c 08 	call	0x1098	; 0x1098 <__fixsfsi>
     9a8:	9b 01       	movw	r18, r22
     9aa:	ac 01       	movw	r20, r24
     9ac:	20 50       	subi	r18, 0x00	; 0
     9ae:	30 40       	sbci	r19, 0x00	; 0
     9b0:	40 40       	sbci	r20, 0x00	; 0
     9b2:	50 48       	sbci	r21, 0x80	; 128
     9b4:	06 c0       	rjmp	.+12     	; 0x9c2 <__fixunssfsi+0x4a>
     9b6:	c8 01       	movw	r24, r16
     9b8:	b7 01       	movw	r22, r14
     9ba:	0e 94 4c 08 	call	0x1098	; 0x1098 <__fixsfsi>
     9be:	9b 01       	movw	r18, r22
     9c0:	ac 01       	movw	r20, r24
     9c2:	b9 01       	movw	r22, r18
     9c4:	ca 01       	movw	r24, r20
     9c6:	1f 91       	pop	r17
     9c8:	0f 91       	pop	r16
     9ca:	ff 90       	pop	r15
     9cc:	ef 90       	pop	r14
     9ce:	08 95       	ret

000009d0 <_fpadd_parts>:
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	ee ee       	ldi	r30, 0xEE	; 238
     9d6:	f4 e0       	ldi	r31, 0x04	; 4
     9d8:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <__prologue_saves__>
     9dc:	dc 01       	movw	r26, r24
     9de:	2b 01       	movw	r4, r22
     9e0:	fa 01       	movw	r30, r20
     9e2:	9c 91       	ld	r25, X
     9e4:	92 30       	cpi	r25, 0x02	; 2
     9e6:	08 f4       	brcc	.+2      	; 0x9ea <_fpadd_parts+0x1a>
     9e8:	39 c1       	rjmp	.+626    	; 0xc5c <_fpadd_parts+0x28c>
     9ea:	eb 01       	movw	r28, r22
     9ec:	88 81       	ld	r24, Y
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	08 f4       	brcc	.+2      	; 0x9f4 <_fpadd_parts+0x24>
     9f2:	33 c1       	rjmp	.+614    	; 0xc5a <_fpadd_parts+0x28a>
     9f4:	94 30       	cpi	r25, 0x04	; 4
     9f6:	69 f4       	brne	.+26     	; 0xa12 <_fpadd_parts+0x42>
     9f8:	84 30       	cpi	r24, 0x04	; 4
     9fa:	09 f0       	breq	.+2      	; 0x9fe <_fpadd_parts+0x2e>
     9fc:	2f c1       	rjmp	.+606    	; 0xc5c <_fpadd_parts+0x28c>
     9fe:	11 96       	adiw	r26, 0x01	; 1
     a00:	9c 91       	ld	r25, X
     a02:	11 97       	sbiw	r26, 0x01	; 1
     a04:	89 81       	ldd	r24, Y+1	; 0x01
     a06:	98 17       	cp	r25, r24
     a08:	09 f4       	brne	.+2      	; 0xa0c <_fpadd_parts+0x3c>
     a0a:	28 c1       	rjmp	.+592    	; 0xc5c <_fpadd_parts+0x28c>
     a0c:	a0 e6       	ldi	r26, 0x60	; 96
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	25 c1       	rjmp	.+586    	; 0xc5c <_fpadd_parts+0x28c>
     a12:	84 30       	cpi	r24, 0x04	; 4
     a14:	09 f4       	brne	.+2      	; 0xa18 <_fpadd_parts+0x48>
     a16:	21 c1       	rjmp	.+578    	; 0xc5a <_fpadd_parts+0x28a>
     a18:	82 30       	cpi	r24, 0x02	; 2
     a1a:	a9 f4       	brne	.+42     	; 0xa46 <_fpadd_parts+0x76>
     a1c:	92 30       	cpi	r25, 0x02	; 2
     a1e:	09 f0       	breq	.+2      	; 0xa22 <_fpadd_parts+0x52>
     a20:	1d c1       	rjmp	.+570    	; 0xc5c <_fpadd_parts+0x28c>
     a22:	9a 01       	movw	r18, r20
     a24:	ad 01       	movw	r20, r26
     a26:	88 e0       	ldi	r24, 0x08	; 8
     a28:	ea 01       	movw	r28, r20
     a2a:	09 90       	ld	r0, Y+
     a2c:	ae 01       	movw	r20, r28
     a2e:	e9 01       	movw	r28, r18
     a30:	09 92       	st	Y+, r0
     a32:	9e 01       	movw	r18, r28
     a34:	81 50       	subi	r24, 0x01	; 1
     a36:	c1 f7       	brne	.-16     	; 0xa28 <_fpadd_parts+0x58>
     a38:	e2 01       	movw	r28, r4
     a3a:	89 81       	ldd	r24, Y+1	; 0x01
     a3c:	11 96       	adiw	r26, 0x01	; 1
     a3e:	9c 91       	ld	r25, X
     a40:	89 23       	and	r24, r25
     a42:	81 83       	std	Z+1, r24	; 0x01
     a44:	08 c1       	rjmp	.+528    	; 0xc56 <_fpadd_parts+0x286>
     a46:	92 30       	cpi	r25, 0x02	; 2
     a48:	09 f4       	brne	.+2      	; 0xa4c <_fpadd_parts+0x7c>
     a4a:	07 c1       	rjmp	.+526    	; 0xc5a <_fpadd_parts+0x28a>
     a4c:	12 96       	adiw	r26, 0x02	; 2
     a4e:	2d 90       	ld	r2, X+
     a50:	3c 90       	ld	r3, X
     a52:	13 97       	sbiw	r26, 0x03	; 3
     a54:	eb 01       	movw	r28, r22
     a56:	8a 81       	ldd	r24, Y+2	; 0x02
     a58:	9b 81       	ldd	r25, Y+3	; 0x03
     a5a:	14 96       	adiw	r26, 0x04	; 4
     a5c:	ad 90       	ld	r10, X+
     a5e:	bd 90       	ld	r11, X+
     a60:	cd 90       	ld	r12, X+
     a62:	dc 90       	ld	r13, X
     a64:	17 97       	sbiw	r26, 0x07	; 7
     a66:	ec 80       	ldd	r14, Y+4	; 0x04
     a68:	fd 80       	ldd	r15, Y+5	; 0x05
     a6a:	0e 81       	ldd	r16, Y+6	; 0x06
     a6c:	1f 81       	ldd	r17, Y+7	; 0x07
     a6e:	91 01       	movw	r18, r2
     a70:	28 1b       	sub	r18, r24
     a72:	39 0b       	sbc	r19, r25
     a74:	b9 01       	movw	r22, r18
     a76:	37 ff       	sbrs	r19, 7
     a78:	04 c0       	rjmp	.+8      	; 0xa82 <_fpadd_parts+0xb2>
     a7a:	66 27       	eor	r22, r22
     a7c:	77 27       	eor	r23, r23
     a7e:	62 1b       	sub	r22, r18
     a80:	73 0b       	sbc	r23, r19
     a82:	60 32       	cpi	r22, 0x20	; 32
     a84:	71 05       	cpc	r23, r1
     a86:	0c f0       	brlt	.+2      	; 0xa8a <_fpadd_parts+0xba>
     a88:	61 c0       	rjmp	.+194    	; 0xb4c <_fpadd_parts+0x17c>
     a8a:	12 16       	cp	r1, r18
     a8c:	13 06       	cpc	r1, r19
     a8e:	6c f5       	brge	.+90     	; 0xaea <_fpadd_parts+0x11a>
     a90:	37 01       	movw	r6, r14
     a92:	48 01       	movw	r8, r16
     a94:	06 2e       	mov	r0, r22
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <_fpadd_parts+0xd0>
     a98:	96 94       	lsr	r9
     a9a:	87 94       	ror	r8
     a9c:	77 94       	ror	r7
     a9e:	67 94       	ror	r6
     aa0:	0a 94       	dec	r0
     aa2:	d2 f7       	brpl	.-12     	; 0xa98 <_fpadd_parts+0xc8>
     aa4:	21 e0       	ldi	r18, 0x01	; 1
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	04 c0       	rjmp	.+8      	; 0xab6 <_fpadd_parts+0xe6>
     aae:	22 0f       	add	r18, r18
     ab0:	33 1f       	adc	r19, r19
     ab2:	44 1f       	adc	r20, r20
     ab4:	55 1f       	adc	r21, r21
     ab6:	6a 95       	dec	r22
     ab8:	d2 f7       	brpl	.-12     	; 0xaae <_fpadd_parts+0xde>
     aba:	21 50       	subi	r18, 0x01	; 1
     abc:	30 40       	sbci	r19, 0x00	; 0
     abe:	40 40       	sbci	r20, 0x00	; 0
     ac0:	50 40       	sbci	r21, 0x00	; 0
     ac2:	2e 21       	and	r18, r14
     ac4:	3f 21       	and	r19, r15
     ac6:	40 23       	and	r20, r16
     ac8:	51 23       	and	r21, r17
     aca:	21 15       	cp	r18, r1
     acc:	31 05       	cpc	r19, r1
     ace:	41 05       	cpc	r20, r1
     ad0:	51 05       	cpc	r21, r1
     ad2:	21 f0       	breq	.+8      	; 0xadc <_fpadd_parts+0x10c>
     ad4:	21 e0       	ldi	r18, 0x01	; 1
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	40 e0       	ldi	r20, 0x00	; 0
     ada:	50 e0       	ldi	r21, 0x00	; 0
     adc:	79 01       	movw	r14, r18
     ade:	8a 01       	movw	r16, r20
     ae0:	e6 28       	or	r14, r6
     ae2:	f7 28       	or	r15, r7
     ae4:	08 29       	or	r16, r8
     ae6:	19 29       	or	r17, r9
     ae8:	3c c0       	rjmp	.+120    	; 0xb62 <_fpadd_parts+0x192>
     aea:	23 2b       	or	r18, r19
     aec:	d1 f1       	breq	.+116    	; 0xb62 <_fpadd_parts+0x192>
     aee:	26 0e       	add	r2, r22
     af0:	37 1e       	adc	r3, r23
     af2:	35 01       	movw	r6, r10
     af4:	46 01       	movw	r8, r12
     af6:	06 2e       	mov	r0, r22
     af8:	04 c0       	rjmp	.+8      	; 0xb02 <_fpadd_parts+0x132>
     afa:	96 94       	lsr	r9
     afc:	87 94       	ror	r8
     afe:	77 94       	ror	r7
     b00:	67 94       	ror	r6
     b02:	0a 94       	dec	r0
     b04:	d2 f7       	brpl	.-12     	; 0xafa <_fpadd_parts+0x12a>
     b06:	21 e0       	ldi	r18, 0x01	; 1
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <_fpadd_parts+0x148>
     b10:	22 0f       	add	r18, r18
     b12:	33 1f       	adc	r19, r19
     b14:	44 1f       	adc	r20, r20
     b16:	55 1f       	adc	r21, r21
     b18:	6a 95       	dec	r22
     b1a:	d2 f7       	brpl	.-12     	; 0xb10 <_fpadd_parts+0x140>
     b1c:	21 50       	subi	r18, 0x01	; 1
     b1e:	30 40       	sbci	r19, 0x00	; 0
     b20:	40 40       	sbci	r20, 0x00	; 0
     b22:	50 40       	sbci	r21, 0x00	; 0
     b24:	2a 21       	and	r18, r10
     b26:	3b 21       	and	r19, r11
     b28:	4c 21       	and	r20, r12
     b2a:	5d 21       	and	r21, r13
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	41 05       	cpc	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	21 f0       	breq	.+8      	; 0xb3e <_fpadd_parts+0x16e>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	40 e0       	ldi	r20, 0x00	; 0
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	59 01       	movw	r10, r18
     b40:	6a 01       	movw	r12, r20
     b42:	a6 28       	or	r10, r6
     b44:	b7 28       	or	r11, r7
     b46:	c8 28       	or	r12, r8
     b48:	d9 28       	or	r13, r9
     b4a:	0b c0       	rjmp	.+22     	; 0xb62 <_fpadd_parts+0x192>
     b4c:	82 15       	cp	r24, r2
     b4e:	93 05       	cpc	r25, r3
     b50:	2c f0       	brlt	.+10     	; 0xb5c <_fpadd_parts+0x18c>
     b52:	1c 01       	movw	r2, r24
     b54:	aa 24       	eor	r10, r10
     b56:	bb 24       	eor	r11, r11
     b58:	65 01       	movw	r12, r10
     b5a:	03 c0       	rjmp	.+6      	; 0xb62 <_fpadd_parts+0x192>
     b5c:	ee 24       	eor	r14, r14
     b5e:	ff 24       	eor	r15, r15
     b60:	87 01       	movw	r16, r14
     b62:	11 96       	adiw	r26, 0x01	; 1
     b64:	9c 91       	ld	r25, X
     b66:	d2 01       	movw	r26, r4
     b68:	11 96       	adiw	r26, 0x01	; 1
     b6a:	8c 91       	ld	r24, X
     b6c:	98 17       	cp	r25, r24
     b6e:	09 f4       	brne	.+2      	; 0xb72 <_fpadd_parts+0x1a2>
     b70:	45 c0       	rjmp	.+138    	; 0xbfc <_fpadd_parts+0x22c>
     b72:	99 23       	and	r25, r25
     b74:	39 f0       	breq	.+14     	; 0xb84 <_fpadd_parts+0x1b4>
     b76:	a8 01       	movw	r20, r16
     b78:	97 01       	movw	r18, r14
     b7a:	2a 19       	sub	r18, r10
     b7c:	3b 09       	sbc	r19, r11
     b7e:	4c 09       	sbc	r20, r12
     b80:	5d 09       	sbc	r21, r13
     b82:	06 c0       	rjmp	.+12     	; 0xb90 <_fpadd_parts+0x1c0>
     b84:	a6 01       	movw	r20, r12
     b86:	95 01       	movw	r18, r10
     b88:	2e 19       	sub	r18, r14
     b8a:	3f 09       	sbc	r19, r15
     b8c:	40 0b       	sbc	r20, r16
     b8e:	51 0b       	sbc	r21, r17
     b90:	57 fd       	sbrc	r21, 7
     b92:	08 c0       	rjmp	.+16     	; 0xba4 <_fpadd_parts+0x1d4>
     b94:	11 82       	std	Z+1, r1	; 0x01
     b96:	33 82       	std	Z+3, r3	; 0x03
     b98:	22 82       	std	Z+2, r2	; 0x02
     b9a:	24 83       	std	Z+4, r18	; 0x04
     b9c:	35 83       	std	Z+5, r19	; 0x05
     b9e:	46 83       	std	Z+6, r20	; 0x06
     ba0:	57 83       	std	Z+7, r21	; 0x07
     ba2:	1d c0       	rjmp	.+58     	; 0xbde <_fpadd_parts+0x20e>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	81 83       	std	Z+1, r24	; 0x01
     ba8:	33 82       	std	Z+3, r3	; 0x03
     baa:	22 82       	std	Z+2, r2	; 0x02
     bac:	88 27       	eor	r24, r24
     bae:	99 27       	eor	r25, r25
     bb0:	dc 01       	movw	r26, r24
     bb2:	82 1b       	sub	r24, r18
     bb4:	93 0b       	sbc	r25, r19
     bb6:	a4 0b       	sbc	r26, r20
     bb8:	b5 0b       	sbc	r27, r21
     bba:	84 83       	std	Z+4, r24	; 0x04
     bbc:	95 83       	std	Z+5, r25	; 0x05
     bbe:	a6 83       	std	Z+6, r26	; 0x06
     bc0:	b7 83       	std	Z+7, r27	; 0x07
     bc2:	0d c0       	rjmp	.+26     	; 0xbde <_fpadd_parts+0x20e>
     bc4:	22 0f       	add	r18, r18
     bc6:	33 1f       	adc	r19, r19
     bc8:	44 1f       	adc	r20, r20
     bca:	55 1f       	adc	r21, r21
     bcc:	24 83       	std	Z+4, r18	; 0x04
     bce:	35 83       	std	Z+5, r19	; 0x05
     bd0:	46 83       	std	Z+6, r20	; 0x06
     bd2:	57 83       	std	Z+7, r21	; 0x07
     bd4:	82 81       	ldd	r24, Z+2	; 0x02
     bd6:	93 81       	ldd	r25, Z+3	; 0x03
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	93 83       	std	Z+3, r25	; 0x03
     bdc:	82 83       	std	Z+2, r24	; 0x02
     bde:	24 81       	ldd	r18, Z+4	; 0x04
     be0:	35 81       	ldd	r19, Z+5	; 0x05
     be2:	46 81       	ldd	r20, Z+6	; 0x06
     be4:	57 81       	ldd	r21, Z+7	; 0x07
     be6:	da 01       	movw	r26, r20
     be8:	c9 01       	movw	r24, r18
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	a1 09       	sbc	r26, r1
     bee:	b1 09       	sbc	r27, r1
     bf0:	8f 5f       	subi	r24, 0xFF	; 255
     bf2:	9f 4f       	sbci	r25, 0xFF	; 255
     bf4:	af 4f       	sbci	r26, 0xFF	; 255
     bf6:	bf 43       	sbci	r27, 0x3F	; 63
     bf8:	28 f3       	brcs	.-54     	; 0xbc4 <_fpadd_parts+0x1f4>
     bfa:	0b c0       	rjmp	.+22     	; 0xc12 <_fpadd_parts+0x242>
     bfc:	91 83       	std	Z+1, r25	; 0x01
     bfe:	33 82       	std	Z+3, r3	; 0x03
     c00:	22 82       	std	Z+2, r2	; 0x02
     c02:	ea 0c       	add	r14, r10
     c04:	fb 1c       	adc	r15, r11
     c06:	0c 1d       	adc	r16, r12
     c08:	1d 1d       	adc	r17, r13
     c0a:	e4 82       	std	Z+4, r14	; 0x04
     c0c:	f5 82       	std	Z+5, r15	; 0x05
     c0e:	06 83       	std	Z+6, r16	; 0x06
     c10:	17 83       	std	Z+7, r17	; 0x07
     c12:	83 e0       	ldi	r24, 0x03	; 3
     c14:	80 83       	st	Z, r24
     c16:	24 81       	ldd	r18, Z+4	; 0x04
     c18:	35 81       	ldd	r19, Z+5	; 0x05
     c1a:	46 81       	ldd	r20, Z+6	; 0x06
     c1c:	57 81       	ldd	r21, Z+7	; 0x07
     c1e:	57 ff       	sbrs	r21, 7
     c20:	1a c0       	rjmp	.+52     	; 0xc56 <_fpadd_parts+0x286>
     c22:	c9 01       	movw	r24, r18
     c24:	aa 27       	eor	r26, r26
     c26:	97 fd       	sbrc	r25, 7
     c28:	a0 95       	com	r26
     c2a:	ba 2f       	mov	r27, r26
     c2c:	81 70       	andi	r24, 0x01	; 1
     c2e:	90 70       	andi	r25, 0x00	; 0
     c30:	a0 70       	andi	r26, 0x00	; 0
     c32:	b0 70       	andi	r27, 0x00	; 0
     c34:	56 95       	lsr	r21
     c36:	47 95       	ror	r20
     c38:	37 95       	ror	r19
     c3a:	27 95       	ror	r18
     c3c:	82 2b       	or	r24, r18
     c3e:	93 2b       	or	r25, r19
     c40:	a4 2b       	or	r26, r20
     c42:	b5 2b       	or	r27, r21
     c44:	84 83       	std	Z+4, r24	; 0x04
     c46:	95 83       	std	Z+5, r25	; 0x05
     c48:	a6 83       	std	Z+6, r26	; 0x06
     c4a:	b7 83       	std	Z+7, r27	; 0x07
     c4c:	82 81       	ldd	r24, Z+2	; 0x02
     c4e:	93 81       	ldd	r25, Z+3	; 0x03
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	93 83       	std	Z+3, r25	; 0x03
     c54:	82 83       	std	Z+2, r24	; 0x02
     c56:	df 01       	movw	r26, r30
     c58:	01 c0       	rjmp	.+2      	; 0xc5c <_fpadd_parts+0x28c>
     c5a:	d2 01       	movw	r26, r4
     c5c:	cd 01       	movw	r24, r26
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	e2 e1       	ldi	r30, 0x12	; 18
     c64:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__epilogue_restores__>

00000c68 <__subsf3>:
     c68:	a0 e2       	ldi	r26, 0x20	; 32
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	ea e3       	ldi	r30, 0x3A	; 58
     c6e:	f6 e0       	ldi	r31, 0x06	; 6
     c70:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__prologue_saves__+0x18>
     c74:	69 83       	std	Y+1, r22	; 0x01
     c76:	7a 83       	std	Y+2, r23	; 0x02
     c78:	8b 83       	std	Y+3, r24	; 0x03
     c7a:	9c 83       	std	Y+4, r25	; 0x04
     c7c:	2d 83       	std	Y+5, r18	; 0x05
     c7e:	3e 83       	std	Y+6, r19	; 0x06
     c80:	4f 83       	std	Y+7, r20	; 0x07
     c82:	58 87       	std	Y+8, r21	; 0x08
     c84:	e9 e0       	ldi	r30, 0x09	; 9
     c86:	ee 2e       	mov	r14, r30
     c88:	f1 2c       	mov	r15, r1
     c8a:	ec 0e       	add	r14, r28
     c8c:	fd 1e       	adc	r15, r29
     c8e:	ce 01       	movw	r24, r28
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	b7 01       	movw	r22, r14
     c94:	0e 94 3d 0a 	call	0x147a	; 0x147a <__unpack_f>
     c98:	8e 01       	movw	r16, r28
     c9a:	0f 5e       	subi	r16, 0xEF	; 239
     c9c:	1f 4f       	sbci	r17, 0xFF	; 255
     c9e:	ce 01       	movw	r24, r28
     ca0:	05 96       	adiw	r24, 0x05	; 5
     ca2:	b8 01       	movw	r22, r16
     ca4:	0e 94 3d 0a 	call	0x147a	; 0x147a <__unpack_f>
     ca8:	8a 89       	ldd	r24, Y+18	; 0x12
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	89 27       	eor	r24, r25
     cae:	8a 8b       	std	Y+18, r24	; 0x12
     cb0:	c7 01       	movw	r24, r14
     cb2:	b8 01       	movw	r22, r16
     cb4:	ae 01       	movw	r20, r28
     cb6:	47 5e       	subi	r20, 0xE7	; 231
     cb8:	5f 4f       	sbci	r21, 0xFF	; 255
     cba:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <_fpadd_parts>
     cbe:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__pack_f>
     cc2:	a0 96       	adiw	r28, 0x20	; 32
     cc4:	e6 e0       	ldi	r30, 0x06	; 6
     cc6:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__epilogue_restores__+0x18>

00000cca <__addsf3>:
     cca:	a0 e2       	ldi	r26, 0x20	; 32
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	eb e6       	ldi	r30, 0x6B	; 107
     cd0:	f6 e0       	ldi	r31, 0x06	; 6
     cd2:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__prologue_saves__+0x18>
     cd6:	69 83       	std	Y+1, r22	; 0x01
     cd8:	7a 83       	std	Y+2, r23	; 0x02
     cda:	8b 83       	std	Y+3, r24	; 0x03
     cdc:	9c 83       	std	Y+4, r25	; 0x04
     cde:	2d 83       	std	Y+5, r18	; 0x05
     ce0:	3e 83       	std	Y+6, r19	; 0x06
     ce2:	4f 83       	std	Y+7, r20	; 0x07
     ce4:	58 87       	std	Y+8, r21	; 0x08
     ce6:	f9 e0       	ldi	r31, 0x09	; 9
     ce8:	ef 2e       	mov	r14, r31
     cea:	f1 2c       	mov	r15, r1
     cec:	ec 0e       	add	r14, r28
     cee:	fd 1e       	adc	r15, r29
     cf0:	ce 01       	movw	r24, r28
     cf2:	01 96       	adiw	r24, 0x01	; 1
     cf4:	b7 01       	movw	r22, r14
     cf6:	0e 94 3d 0a 	call	0x147a	; 0x147a <__unpack_f>
     cfa:	8e 01       	movw	r16, r28
     cfc:	0f 5e       	subi	r16, 0xEF	; 239
     cfe:	1f 4f       	sbci	r17, 0xFF	; 255
     d00:	ce 01       	movw	r24, r28
     d02:	05 96       	adiw	r24, 0x05	; 5
     d04:	b8 01       	movw	r22, r16
     d06:	0e 94 3d 0a 	call	0x147a	; 0x147a <__unpack_f>
     d0a:	c7 01       	movw	r24, r14
     d0c:	b8 01       	movw	r22, r16
     d0e:	ae 01       	movw	r20, r28
     d10:	47 5e       	subi	r20, 0xE7	; 231
     d12:	5f 4f       	sbci	r21, 0xFF	; 255
     d14:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <_fpadd_parts>
     d18:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__pack_f>
     d1c:	a0 96       	adiw	r28, 0x20	; 32
     d1e:	e6 e0       	ldi	r30, 0x06	; 6
     d20:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__epilogue_restores__+0x18>

00000d24 <__mulsf3>:
     d24:	a0 e2       	ldi	r26, 0x20	; 32
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e8 e9       	ldi	r30, 0x98	; 152
     d2a:	f6 e0       	ldi	r31, 0x06	; 6
     d2c:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <__prologue_saves__>
     d30:	69 83       	std	Y+1, r22	; 0x01
     d32:	7a 83       	std	Y+2, r23	; 0x02
     d34:	8b 83       	std	Y+3, r24	; 0x03
     d36:	9c 83       	std	Y+4, r25	; 0x04
     d38:	2d 83       	std	Y+5, r18	; 0x05
     d3a:	3e 83       	std	Y+6, r19	; 0x06
     d3c:	4f 83       	std	Y+7, r20	; 0x07
     d3e:	58 87       	std	Y+8, r21	; 0x08
     d40:	ce 01       	movw	r24, r28
     d42:	01 96       	adiw	r24, 0x01	; 1
     d44:	be 01       	movw	r22, r28
     d46:	67 5f       	subi	r22, 0xF7	; 247
     d48:	7f 4f       	sbci	r23, 0xFF	; 255
     d4a:	0e 94 3d 0a 	call	0x147a	; 0x147a <__unpack_f>
     d4e:	ce 01       	movw	r24, r28
     d50:	05 96       	adiw	r24, 0x05	; 5
     d52:	be 01       	movw	r22, r28
     d54:	6f 5e       	subi	r22, 0xEF	; 239
     d56:	7f 4f       	sbci	r23, 0xFF	; 255
     d58:	0e 94 3d 0a 	call	0x147a	; 0x147a <__unpack_f>
     d5c:	99 85       	ldd	r25, Y+9	; 0x09
     d5e:	92 30       	cpi	r25, 0x02	; 2
     d60:	88 f0       	brcs	.+34     	; 0xd84 <__mulsf3+0x60>
     d62:	89 89       	ldd	r24, Y+17	; 0x11
     d64:	82 30       	cpi	r24, 0x02	; 2
     d66:	c8 f0       	brcs	.+50     	; 0xd9a <__mulsf3+0x76>
     d68:	94 30       	cpi	r25, 0x04	; 4
     d6a:	19 f4       	brne	.+6      	; 0xd72 <__mulsf3+0x4e>
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	51 f4       	brne	.+20     	; 0xd84 <__mulsf3+0x60>
     d70:	04 c0       	rjmp	.+8      	; 0xd7a <__mulsf3+0x56>
     d72:	84 30       	cpi	r24, 0x04	; 4
     d74:	29 f4       	brne	.+10     	; 0xd80 <__mulsf3+0x5c>
     d76:	92 30       	cpi	r25, 0x02	; 2
     d78:	81 f4       	brne	.+32     	; 0xd9a <__mulsf3+0x76>
     d7a:	80 e6       	ldi	r24, 0x60	; 96
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	c6 c0       	rjmp	.+396    	; 0xf0c <__mulsf3+0x1e8>
     d80:	92 30       	cpi	r25, 0x02	; 2
     d82:	49 f4       	brne	.+18     	; 0xd96 <__mulsf3+0x72>
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	9a 85       	ldd	r25, Y+10	; 0x0a
     d88:	8a 89       	ldd	r24, Y+18	; 0x12
     d8a:	98 13       	cpse	r25, r24
     d8c:	21 e0       	ldi	r18, 0x01	; 1
     d8e:	2a 87       	std	Y+10, r18	; 0x0a
     d90:	ce 01       	movw	r24, r28
     d92:	09 96       	adiw	r24, 0x09	; 9
     d94:	bb c0       	rjmp	.+374    	; 0xf0c <__mulsf3+0x1e8>
     d96:	82 30       	cpi	r24, 0x02	; 2
     d98:	49 f4       	brne	.+18     	; 0xdac <__mulsf3+0x88>
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9e:	8a 89       	ldd	r24, Y+18	; 0x12
     da0:	98 13       	cpse	r25, r24
     da2:	21 e0       	ldi	r18, 0x01	; 1
     da4:	2a 8b       	std	Y+18, r18	; 0x12
     da6:	ce 01       	movw	r24, r28
     da8:	41 96       	adiw	r24, 0x11	; 17
     daa:	b0 c0       	rjmp	.+352    	; 0xf0c <__mulsf3+0x1e8>
     dac:	2d 84       	ldd	r2, Y+13	; 0x0d
     dae:	3e 84       	ldd	r3, Y+14	; 0x0e
     db0:	4f 84       	ldd	r4, Y+15	; 0x0f
     db2:	58 88       	ldd	r5, Y+16	; 0x10
     db4:	6d 88       	ldd	r6, Y+21	; 0x15
     db6:	7e 88       	ldd	r7, Y+22	; 0x16
     db8:	8f 88       	ldd	r8, Y+23	; 0x17
     dba:	98 8c       	ldd	r9, Y+24	; 0x18
     dbc:	ee 24       	eor	r14, r14
     dbe:	ff 24       	eor	r15, r15
     dc0:	87 01       	movw	r16, r14
     dc2:	aa 24       	eor	r10, r10
     dc4:	bb 24       	eor	r11, r11
     dc6:	65 01       	movw	r12, r10
     dc8:	40 e0       	ldi	r20, 0x00	; 0
     dca:	50 e0       	ldi	r21, 0x00	; 0
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	e0 e0       	ldi	r30, 0x00	; 0
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	c1 01       	movw	r24, r2
     dd6:	81 70       	andi	r24, 0x01	; 1
     dd8:	90 70       	andi	r25, 0x00	; 0
     dda:	89 2b       	or	r24, r25
     ddc:	e9 f0       	breq	.+58     	; 0xe18 <__mulsf3+0xf4>
     dde:	e6 0c       	add	r14, r6
     de0:	f7 1c       	adc	r15, r7
     de2:	08 1d       	adc	r16, r8
     de4:	19 1d       	adc	r17, r9
     de6:	9a 01       	movw	r18, r20
     de8:	ab 01       	movw	r20, r22
     dea:	2a 0d       	add	r18, r10
     dec:	3b 1d       	adc	r19, r11
     dee:	4c 1d       	adc	r20, r12
     df0:	5d 1d       	adc	r21, r13
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	a0 e0       	ldi	r26, 0x00	; 0
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e6 14       	cp	r14, r6
     dfc:	f7 04       	cpc	r15, r7
     dfe:	08 05       	cpc	r16, r8
     e00:	19 05       	cpc	r17, r9
     e02:	20 f4       	brcc	.+8      	; 0xe0c <__mulsf3+0xe8>
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	a0 e0       	ldi	r26, 0x00	; 0
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	ba 01       	movw	r22, r20
     e0e:	a9 01       	movw	r20, r18
     e10:	48 0f       	add	r20, r24
     e12:	59 1f       	adc	r21, r25
     e14:	6a 1f       	adc	r22, r26
     e16:	7b 1f       	adc	r23, r27
     e18:	aa 0c       	add	r10, r10
     e1a:	bb 1c       	adc	r11, r11
     e1c:	cc 1c       	adc	r12, r12
     e1e:	dd 1c       	adc	r13, r13
     e20:	97 fe       	sbrs	r9, 7
     e22:	08 c0       	rjmp	.+16     	; 0xe34 <__mulsf3+0x110>
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	a0 e0       	ldi	r26, 0x00	; 0
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	a8 2a       	or	r10, r24
     e2e:	b9 2a       	or	r11, r25
     e30:	ca 2a       	or	r12, r26
     e32:	db 2a       	or	r13, r27
     e34:	31 96       	adiw	r30, 0x01	; 1
     e36:	e0 32       	cpi	r30, 0x20	; 32
     e38:	f1 05       	cpc	r31, r1
     e3a:	49 f0       	breq	.+18     	; 0xe4e <__mulsf3+0x12a>
     e3c:	66 0c       	add	r6, r6
     e3e:	77 1c       	adc	r7, r7
     e40:	88 1c       	adc	r8, r8
     e42:	99 1c       	adc	r9, r9
     e44:	56 94       	lsr	r5
     e46:	47 94       	ror	r4
     e48:	37 94       	ror	r3
     e4a:	27 94       	ror	r2
     e4c:	c3 cf       	rjmp	.-122    	; 0xdd4 <__mulsf3+0xb0>
     e4e:	fa 85       	ldd	r31, Y+10	; 0x0a
     e50:	ea 89       	ldd	r30, Y+18	; 0x12
     e52:	2b 89       	ldd	r18, Y+19	; 0x13
     e54:	3c 89       	ldd	r19, Y+20	; 0x14
     e56:	8b 85       	ldd	r24, Y+11	; 0x0b
     e58:	9c 85       	ldd	r25, Y+12	; 0x0c
     e5a:	28 0f       	add	r18, r24
     e5c:	39 1f       	adc	r19, r25
     e5e:	2e 5f       	subi	r18, 0xFE	; 254
     e60:	3f 4f       	sbci	r19, 0xFF	; 255
     e62:	17 c0       	rjmp	.+46     	; 0xe92 <__mulsf3+0x16e>
     e64:	ca 01       	movw	r24, r20
     e66:	81 70       	andi	r24, 0x01	; 1
     e68:	90 70       	andi	r25, 0x00	; 0
     e6a:	89 2b       	or	r24, r25
     e6c:	61 f0       	breq	.+24     	; 0xe86 <__mulsf3+0x162>
     e6e:	16 95       	lsr	r17
     e70:	07 95       	ror	r16
     e72:	f7 94       	ror	r15
     e74:	e7 94       	ror	r14
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	a0 e0       	ldi	r26, 0x00	; 0
     e7c:	b0 e8       	ldi	r27, 0x80	; 128
     e7e:	e8 2a       	or	r14, r24
     e80:	f9 2a       	or	r15, r25
     e82:	0a 2b       	or	r16, r26
     e84:	1b 2b       	or	r17, r27
     e86:	76 95       	lsr	r23
     e88:	67 95       	ror	r22
     e8a:	57 95       	ror	r21
     e8c:	47 95       	ror	r20
     e8e:	2f 5f       	subi	r18, 0xFF	; 255
     e90:	3f 4f       	sbci	r19, 0xFF	; 255
     e92:	77 fd       	sbrc	r23, 7
     e94:	e7 cf       	rjmp	.-50     	; 0xe64 <__mulsf3+0x140>
     e96:	0c c0       	rjmp	.+24     	; 0xeb0 <__mulsf3+0x18c>
     e98:	44 0f       	add	r20, r20
     e9a:	55 1f       	adc	r21, r21
     e9c:	66 1f       	adc	r22, r22
     e9e:	77 1f       	adc	r23, r23
     ea0:	17 fd       	sbrc	r17, 7
     ea2:	41 60       	ori	r20, 0x01	; 1
     ea4:	ee 0c       	add	r14, r14
     ea6:	ff 1c       	adc	r15, r15
     ea8:	00 1f       	adc	r16, r16
     eaa:	11 1f       	adc	r17, r17
     eac:	21 50       	subi	r18, 0x01	; 1
     eae:	30 40       	sbci	r19, 0x00	; 0
     eb0:	40 30       	cpi	r20, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	59 07       	cpc	r21, r25
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	69 07       	cpc	r22, r25
     eba:	90 e4       	ldi	r25, 0x40	; 64
     ebc:	79 07       	cpc	r23, r25
     ebe:	60 f3       	brcs	.-40     	; 0xe98 <__mulsf3+0x174>
     ec0:	2b 8f       	std	Y+27, r18	; 0x1b
     ec2:	3c 8f       	std	Y+28, r19	; 0x1c
     ec4:	db 01       	movw	r26, r22
     ec6:	ca 01       	movw	r24, r20
     ec8:	8f 77       	andi	r24, 0x7F	; 127
     eca:	90 70       	andi	r25, 0x00	; 0
     ecc:	a0 70       	andi	r26, 0x00	; 0
     ece:	b0 70       	andi	r27, 0x00	; 0
     ed0:	80 34       	cpi	r24, 0x40	; 64
     ed2:	91 05       	cpc	r25, r1
     ed4:	a1 05       	cpc	r26, r1
     ed6:	b1 05       	cpc	r27, r1
     ed8:	61 f4       	brne	.+24     	; 0xef2 <__mulsf3+0x1ce>
     eda:	47 fd       	sbrc	r20, 7
     edc:	0a c0       	rjmp	.+20     	; 0xef2 <__mulsf3+0x1ce>
     ede:	e1 14       	cp	r14, r1
     ee0:	f1 04       	cpc	r15, r1
     ee2:	01 05       	cpc	r16, r1
     ee4:	11 05       	cpc	r17, r1
     ee6:	29 f0       	breq	.+10     	; 0xef2 <__mulsf3+0x1ce>
     ee8:	40 5c       	subi	r20, 0xC0	; 192
     eea:	5f 4f       	sbci	r21, 0xFF	; 255
     eec:	6f 4f       	sbci	r22, 0xFF	; 255
     eee:	7f 4f       	sbci	r23, 0xFF	; 255
     ef0:	40 78       	andi	r20, 0x80	; 128
     ef2:	1a 8e       	std	Y+26, r1	; 0x1a
     ef4:	fe 17       	cp	r31, r30
     ef6:	11 f0       	breq	.+4      	; 0xefc <__mulsf3+0x1d8>
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	8a 8f       	std	Y+26, r24	; 0x1a
     efc:	4d 8f       	std	Y+29, r20	; 0x1d
     efe:	5e 8f       	std	Y+30, r21	; 0x1e
     f00:	6f 8f       	std	Y+31, r22	; 0x1f
     f02:	78 a3       	std	Y+32, r23	; 0x20
     f04:	83 e0       	ldi	r24, 0x03	; 3
     f06:	89 8f       	std	Y+25, r24	; 0x19
     f08:	ce 01       	movw	r24, r28
     f0a:	49 96       	adiw	r24, 0x19	; 25
     f0c:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__pack_f>
     f10:	a0 96       	adiw	r28, 0x20	; 32
     f12:	e2 e1       	ldi	r30, 0x12	; 18
     f14:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__epilogue_restores__>

00000f18 <__gtsf2>:
     f18:	a8 e1       	ldi	r26, 0x18	; 24
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e2 e9       	ldi	r30, 0x92	; 146
     f1e:	f7 e0       	ldi	r31, 0x07	; 7
     f20:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__prologue_saves__+0x18>
     f24:	69 83       	std	Y+1, r22	; 0x01
     f26:	7a 83       	std	Y+2, r23	; 0x02
     f28:	8b 83       	std	Y+3, r24	; 0x03
     f2a:	9c 83       	std	Y+4, r25	; 0x04
     f2c:	2d 83       	std	Y+5, r18	; 0x05
     f2e:	3e 83       	std	Y+6, r19	; 0x06
     f30:	4f 83       	std	Y+7, r20	; 0x07
     f32:	58 87       	std	Y+8, r21	; 0x08
     f34:	89 e0       	ldi	r24, 0x09	; 9
     f36:	e8 2e       	mov	r14, r24
     f38:	f1 2c       	mov	r15, r1
     f3a:	ec 0e       	add	r14, r28
     f3c:	fd 1e       	adc	r15, r29
     f3e:	ce 01       	movw	r24, r28
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	b7 01       	movw	r22, r14
     f44:	0e 94 3d 0a 	call	0x147a	; 0x147a <__unpack_f>
     f48:	8e 01       	movw	r16, r28
     f4a:	0f 5e       	subi	r16, 0xEF	; 239
     f4c:	1f 4f       	sbci	r17, 0xFF	; 255
     f4e:	ce 01       	movw	r24, r28
     f50:	05 96       	adiw	r24, 0x05	; 5
     f52:	b8 01       	movw	r22, r16
     f54:	0e 94 3d 0a 	call	0x147a	; 0x147a <__unpack_f>
     f58:	89 85       	ldd	r24, Y+9	; 0x09
     f5a:	82 30       	cpi	r24, 0x02	; 2
     f5c:	40 f0       	brcs	.+16     	; 0xf6e <__gtsf2+0x56>
     f5e:	89 89       	ldd	r24, Y+17	; 0x11
     f60:	82 30       	cpi	r24, 0x02	; 2
     f62:	28 f0       	brcs	.+10     	; 0xf6e <__gtsf2+0x56>
     f64:	c7 01       	movw	r24, r14
     f66:	b8 01       	movw	r22, r16
     f68:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fpcmp_parts_f>
     f6c:	01 c0       	rjmp	.+2      	; 0xf70 <__gtsf2+0x58>
     f6e:	8f ef       	ldi	r24, 0xFF	; 255
     f70:	68 96       	adiw	r28, 0x18	; 24
     f72:	e6 e0       	ldi	r30, 0x06	; 6
     f74:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__epilogue_restores__+0x18>

00000f78 <__gesf2>:
     f78:	a8 e1       	ldi	r26, 0x18	; 24
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e2 ec       	ldi	r30, 0xC2	; 194
     f7e:	f7 e0       	ldi	r31, 0x07	; 7
     f80:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__prologue_saves__+0x18>
     f84:	69 83       	std	Y+1, r22	; 0x01
     f86:	7a 83       	std	Y+2, r23	; 0x02
     f88:	8b 83       	std	Y+3, r24	; 0x03
     f8a:	9c 83       	std	Y+4, r25	; 0x04
     f8c:	2d 83       	std	Y+5, r18	; 0x05
     f8e:	3e 83       	std	Y+6, r19	; 0x06
     f90:	4f 83       	std	Y+7, r20	; 0x07
     f92:	58 87       	std	Y+8, r21	; 0x08
     f94:	89 e0       	ldi	r24, 0x09	; 9
     f96:	e8 2e       	mov	r14, r24
     f98:	f1 2c       	mov	r15, r1
     f9a:	ec 0e       	add	r14, r28
     f9c:	fd 1e       	adc	r15, r29
     f9e:	ce 01       	movw	r24, r28
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	b7 01       	movw	r22, r14
     fa4:	0e 94 3d 0a 	call	0x147a	; 0x147a <__unpack_f>
     fa8:	8e 01       	movw	r16, r28
     faa:	0f 5e       	subi	r16, 0xEF	; 239
     fac:	1f 4f       	sbci	r17, 0xFF	; 255
     fae:	ce 01       	movw	r24, r28
     fb0:	05 96       	adiw	r24, 0x05	; 5
     fb2:	b8 01       	movw	r22, r16
     fb4:	0e 94 3d 0a 	call	0x147a	; 0x147a <__unpack_f>
     fb8:	89 85       	ldd	r24, Y+9	; 0x09
     fba:	82 30       	cpi	r24, 0x02	; 2
     fbc:	40 f0       	brcs	.+16     	; 0xfce <__gesf2+0x56>
     fbe:	89 89       	ldd	r24, Y+17	; 0x11
     fc0:	82 30       	cpi	r24, 0x02	; 2
     fc2:	28 f0       	brcs	.+10     	; 0xfce <__gesf2+0x56>
     fc4:	c7 01       	movw	r24, r14
     fc6:	b8 01       	movw	r22, r16
     fc8:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fpcmp_parts_f>
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <__gesf2+0x58>
     fce:	8f ef       	ldi	r24, 0xFF	; 255
     fd0:	68 96       	adiw	r28, 0x18	; 24
     fd2:	e6 e0       	ldi	r30, 0x06	; 6
     fd4:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__epilogue_restores__+0x18>

00000fd8 <__ltsf2>:
     fd8:	a8 e1       	ldi	r26, 0x18	; 24
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e2 ef       	ldi	r30, 0xF2	; 242
     fde:	f7 e0       	ldi	r31, 0x07	; 7
     fe0:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__prologue_saves__+0x18>
     fe4:	69 83       	std	Y+1, r22	; 0x01
     fe6:	7a 83       	std	Y+2, r23	; 0x02
     fe8:	8b 83       	std	Y+3, r24	; 0x03
     fea:	9c 83       	std	Y+4, r25	; 0x04
     fec:	2d 83       	std	Y+5, r18	; 0x05
     fee:	3e 83       	std	Y+6, r19	; 0x06
     ff0:	4f 83       	std	Y+7, r20	; 0x07
     ff2:	58 87       	std	Y+8, r21	; 0x08
     ff4:	89 e0       	ldi	r24, 0x09	; 9
     ff6:	e8 2e       	mov	r14, r24
     ff8:	f1 2c       	mov	r15, r1
     ffa:	ec 0e       	add	r14, r28
     ffc:	fd 1e       	adc	r15, r29
     ffe:	ce 01       	movw	r24, r28
    1000:	01 96       	adiw	r24, 0x01	; 1
    1002:	b7 01       	movw	r22, r14
    1004:	0e 94 3d 0a 	call	0x147a	; 0x147a <__unpack_f>
    1008:	8e 01       	movw	r16, r28
    100a:	0f 5e       	subi	r16, 0xEF	; 239
    100c:	1f 4f       	sbci	r17, 0xFF	; 255
    100e:	ce 01       	movw	r24, r28
    1010:	05 96       	adiw	r24, 0x05	; 5
    1012:	b8 01       	movw	r22, r16
    1014:	0e 94 3d 0a 	call	0x147a	; 0x147a <__unpack_f>
    1018:	89 85       	ldd	r24, Y+9	; 0x09
    101a:	82 30       	cpi	r24, 0x02	; 2
    101c:	40 f0       	brcs	.+16     	; 0x102e <__ltsf2+0x56>
    101e:	89 89       	ldd	r24, Y+17	; 0x11
    1020:	82 30       	cpi	r24, 0x02	; 2
    1022:	28 f0       	brcs	.+10     	; 0x102e <__ltsf2+0x56>
    1024:	c7 01       	movw	r24, r14
    1026:	b8 01       	movw	r22, r16
    1028:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fpcmp_parts_f>
    102c:	01 c0       	rjmp	.+2      	; 0x1030 <__ltsf2+0x58>
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	68 96       	adiw	r28, 0x18	; 24
    1032:	e6 e0       	ldi	r30, 0x06	; 6
    1034:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__epilogue_restores__+0x18>

00001038 <__lesf2>:
    1038:	a8 e1       	ldi	r26, 0x18	; 24
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e2 e2       	ldi	r30, 0x22	; 34
    103e:	f8 e0       	ldi	r31, 0x08	; 8
    1040:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__prologue_saves__+0x18>
    1044:	69 83       	std	Y+1, r22	; 0x01
    1046:	7a 83       	std	Y+2, r23	; 0x02
    1048:	8b 83       	std	Y+3, r24	; 0x03
    104a:	9c 83       	std	Y+4, r25	; 0x04
    104c:	2d 83       	std	Y+5, r18	; 0x05
    104e:	3e 83       	std	Y+6, r19	; 0x06
    1050:	4f 83       	std	Y+7, r20	; 0x07
    1052:	58 87       	std	Y+8, r21	; 0x08
    1054:	89 e0       	ldi	r24, 0x09	; 9
    1056:	e8 2e       	mov	r14, r24
    1058:	f1 2c       	mov	r15, r1
    105a:	ec 0e       	add	r14, r28
    105c:	fd 1e       	adc	r15, r29
    105e:	ce 01       	movw	r24, r28
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	b7 01       	movw	r22, r14
    1064:	0e 94 3d 0a 	call	0x147a	; 0x147a <__unpack_f>
    1068:	8e 01       	movw	r16, r28
    106a:	0f 5e       	subi	r16, 0xEF	; 239
    106c:	1f 4f       	sbci	r17, 0xFF	; 255
    106e:	ce 01       	movw	r24, r28
    1070:	05 96       	adiw	r24, 0x05	; 5
    1072:	b8 01       	movw	r22, r16
    1074:	0e 94 3d 0a 	call	0x147a	; 0x147a <__unpack_f>
    1078:	89 85       	ldd	r24, Y+9	; 0x09
    107a:	82 30       	cpi	r24, 0x02	; 2
    107c:	40 f0       	brcs	.+16     	; 0x108e <__lesf2+0x56>
    107e:	89 89       	ldd	r24, Y+17	; 0x11
    1080:	82 30       	cpi	r24, 0x02	; 2
    1082:	28 f0       	brcs	.+10     	; 0x108e <__lesf2+0x56>
    1084:	c7 01       	movw	r24, r14
    1086:	b8 01       	movw	r22, r16
    1088:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fpcmp_parts_f>
    108c:	01 c0       	rjmp	.+2      	; 0x1090 <__lesf2+0x58>
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	68 96       	adiw	r28, 0x18	; 24
    1092:	e6 e0       	ldi	r30, 0x06	; 6
    1094:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__epilogue_restores__+0x18>

00001098 <__fixsfsi>:
    1098:	ac e0       	ldi	r26, 0x0C	; 12
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e2 e5       	ldi	r30, 0x52	; 82
    109e:	f8 e0       	ldi	r31, 0x08	; 8
    10a0:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__prologue_saves__+0x20>
    10a4:	69 83       	std	Y+1, r22	; 0x01
    10a6:	7a 83       	std	Y+2, r23	; 0x02
    10a8:	8b 83       	std	Y+3, r24	; 0x03
    10aa:	9c 83       	std	Y+4, r25	; 0x04
    10ac:	ce 01       	movw	r24, r28
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	be 01       	movw	r22, r28
    10b2:	6b 5f       	subi	r22, 0xFB	; 251
    10b4:	7f 4f       	sbci	r23, 0xFF	; 255
    10b6:	0e 94 3d 0a 	call	0x147a	; 0x147a <__unpack_f>
    10ba:	8d 81       	ldd	r24, Y+5	; 0x05
    10bc:	82 30       	cpi	r24, 0x02	; 2
    10be:	61 f1       	breq	.+88     	; 0x1118 <__fixsfsi+0x80>
    10c0:	82 30       	cpi	r24, 0x02	; 2
    10c2:	50 f1       	brcs	.+84     	; 0x1118 <__fixsfsi+0x80>
    10c4:	84 30       	cpi	r24, 0x04	; 4
    10c6:	21 f4       	brne	.+8      	; 0x10d0 <__fixsfsi+0x38>
    10c8:	8e 81       	ldd	r24, Y+6	; 0x06
    10ca:	88 23       	and	r24, r24
    10cc:	51 f1       	breq	.+84     	; 0x1122 <__fixsfsi+0x8a>
    10ce:	2e c0       	rjmp	.+92     	; 0x112c <__fixsfsi+0x94>
    10d0:	2f 81       	ldd	r18, Y+7	; 0x07
    10d2:	38 85       	ldd	r19, Y+8	; 0x08
    10d4:	37 fd       	sbrc	r19, 7
    10d6:	20 c0       	rjmp	.+64     	; 0x1118 <__fixsfsi+0x80>
    10d8:	6e 81       	ldd	r22, Y+6	; 0x06
    10da:	2f 31       	cpi	r18, 0x1F	; 31
    10dc:	31 05       	cpc	r19, r1
    10de:	1c f0       	brlt	.+6      	; 0x10e6 <__fixsfsi+0x4e>
    10e0:	66 23       	and	r22, r22
    10e2:	f9 f0       	breq	.+62     	; 0x1122 <__fixsfsi+0x8a>
    10e4:	23 c0       	rjmp	.+70     	; 0x112c <__fixsfsi+0x94>
    10e6:	8e e1       	ldi	r24, 0x1E	; 30
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	82 1b       	sub	r24, r18
    10ec:	93 0b       	sbc	r25, r19
    10ee:	29 85       	ldd	r18, Y+9	; 0x09
    10f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    10f2:	4b 85       	ldd	r20, Y+11	; 0x0b
    10f4:	5c 85       	ldd	r21, Y+12	; 0x0c
    10f6:	04 c0       	rjmp	.+8      	; 0x1100 <__fixsfsi+0x68>
    10f8:	56 95       	lsr	r21
    10fa:	47 95       	ror	r20
    10fc:	37 95       	ror	r19
    10fe:	27 95       	ror	r18
    1100:	8a 95       	dec	r24
    1102:	d2 f7       	brpl	.-12     	; 0x10f8 <__fixsfsi+0x60>
    1104:	66 23       	and	r22, r22
    1106:	b1 f0       	breq	.+44     	; 0x1134 <__fixsfsi+0x9c>
    1108:	50 95       	com	r21
    110a:	40 95       	com	r20
    110c:	30 95       	com	r19
    110e:	21 95       	neg	r18
    1110:	3f 4f       	sbci	r19, 0xFF	; 255
    1112:	4f 4f       	sbci	r20, 0xFF	; 255
    1114:	5f 4f       	sbci	r21, 0xFF	; 255
    1116:	0e c0       	rjmp	.+28     	; 0x1134 <__fixsfsi+0x9c>
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	09 c0       	rjmp	.+18     	; 0x1134 <__fixsfsi+0x9c>
    1122:	2f ef       	ldi	r18, 0xFF	; 255
    1124:	3f ef       	ldi	r19, 0xFF	; 255
    1126:	4f ef       	ldi	r20, 0xFF	; 255
    1128:	5f e7       	ldi	r21, 0x7F	; 127
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <__fixsfsi+0x9c>
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	40 e0       	ldi	r20, 0x00	; 0
    1132:	50 e8       	ldi	r21, 0x80	; 128
    1134:	b9 01       	movw	r22, r18
    1136:	ca 01       	movw	r24, r20
    1138:	2c 96       	adiw	r28, 0x0c	; 12
    113a:	e2 e0       	ldi	r30, 0x02	; 2
    113c:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__epilogue_restores__+0x20>

00001140 <__floatunsisf>:
    1140:	a8 e0       	ldi	r26, 0x08	; 8
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e6 ea       	ldi	r30, 0xA6	; 166
    1146:	f8 e0       	ldi	r31, 0x08	; 8
    1148:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__prologue_saves__+0x10>
    114c:	7b 01       	movw	r14, r22
    114e:	8c 01       	movw	r16, r24
    1150:	61 15       	cp	r22, r1
    1152:	71 05       	cpc	r23, r1
    1154:	81 05       	cpc	r24, r1
    1156:	91 05       	cpc	r25, r1
    1158:	19 f4       	brne	.+6      	; 0x1160 <__floatunsisf+0x20>
    115a:	82 e0       	ldi	r24, 0x02	; 2
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	60 c0       	rjmp	.+192    	; 0x1220 <__floatunsisf+0xe0>
    1160:	83 e0       	ldi	r24, 0x03	; 3
    1162:	89 83       	std	Y+1, r24	; 0x01
    1164:	8e e1       	ldi	r24, 0x1E	; 30
    1166:	c8 2e       	mov	r12, r24
    1168:	d1 2c       	mov	r13, r1
    116a:	dc 82       	std	Y+4, r13	; 0x04
    116c:	cb 82       	std	Y+3, r12	; 0x03
    116e:	ed 82       	std	Y+5, r14	; 0x05
    1170:	fe 82       	std	Y+6, r15	; 0x06
    1172:	0f 83       	std	Y+7, r16	; 0x07
    1174:	18 87       	std	Y+8, r17	; 0x08
    1176:	c8 01       	movw	r24, r16
    1178:	b7 01       	movw	r22, r14
    117a:	0e 94 19 09 	call	0x1232	; 0x1232 <__clzsi2>
    117e:	fc 01       	movw	r30, r24
    1180:	31 97       	sbiw	r30, 0x01	; 1
    1182:	f7 ff       	sbrs	r31, 7
    1184:	3b c0       	rjmp	.+118    	; 0x11fc <__floatunsisf+0xbc>
    1186:	22 27       	eor	r18, r18
    1188:	33 27       	eor	r19, r19
    118a:	2e 1b       	sub	r18, r30
    118c:	3f 0b       	sbc	r19, r31
    118e:	57 01       	movw	r10, r14
    1190:	68 01       	movw	r12, r16
    1192:	02 2e       	mov	r0, r18
    1194:	04 c0       	rjmp	.+8      	; 0x119e <__floatunsisf+0x5e>
    1196:	d6 94       	lsr	r13
    1198:	c7 94       	ror	r12
    119a:	b7 94       	ror	r11
    119c:	a7 94       	ror	r10
    119e:	0a 94       	dec	r0
    11a0:	d2 f7       	brpl	.-12     	; 0x1196 <__floatunsisf+0x56>
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	a0 e0       	ldi	r26, 0x00	; 0
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	04 c0       	rjmp	.+8      	; 0x11bc <__floatunsisf+0x7c>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	aa 1f       	adc	r26, r26
    11ba:	bb 1f       	adc	r27, r27
    11bc:	2a 95       	dec	r18
    11be:	d2 f7       	brpl	.-12     	; 0x11b4 <__floatunsisf+0x74>
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	a1 09       	sbc	r26, r1
    11c4:	b1 09       	sbc	r27, r1
    11c6:	8e 21       	and	r24, r14
    11c8:	9f 21       	and	r25, r15
    11ca:	a0 23       	and	r26, r16
    11cc:	b1 23       	and	r27, r17
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	a1 05       	cpc	r26, r1
    11d2:	b1 05       	cpc	r27, r1
    11d4:	21 f0       	breq	.+8      	; 0x11de <__floatunsisf+0x9e>
    11d6:	41 e0       	ldi	r20, 0x01	; 1
    11d8:	50 e0       	ldi	r21, 0x00	; 0
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	70 e0       	ldi	r23, 0x00	; 0
    11de:	4a 29       	or	r20, r10
    11e0:	5b 29       	or	r21, r11
    11e2:	6c 29       	or	r22, r12
    11e4:	7d 29       	or	r23, r13
    11e6:	4d 83       	std	Y+5, r20	; 0x05
    11e8:	5e 83       	std	Y+6, r21	; 0x06
    11ea:	6f 83       	std	Y+7, r22	; 0x07
    11ec:	78 87       	std	Y+8, r23	; 0x08
    11ee:	8e e1       	ldi	r24, 0x1E	; 30
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	8e 1b       	sub	r24, r30
    11f4:	9f 0b       	sbc	r25, r31
    11f6:	9c 83       	std	Y+4, r25	; 0x04
    11f8:	8b 83       	std	Y+3, r24	; 0x03
    11fa:	12 c0       	rjmp	.+36     	; 0x1220 <__floatunsisf+0xe0>
    11fc:	30 97       	sbiw	r30, 0x00	; 0
    11fe:	81 f0       	breq	.+32     	; 0x1220 <__floatunsisf+0xe0>
    1200:	0e 2e       	mov	r0, r30
    1202:	04 c0       	rjmp	.+8      	; 0x120c <__floatunsisf+0xcc>
    1204:	ee 0c       	add	r14, r14
    1206:	ff 1c       	adc	r15, r15
    1208:	00 1f       	adc	r16, r16
    120a:	11 1f       	adc	r17, r17
    120c:	0a 94       	dec	r0
    120e:	d2 f7       	brpl	.-12     	; 0x1204 <__floatunsisf+0xc4>
    1210:	ed 82       	std	Y+5, r14	; 0x05
    1212:	fe 82       	std	Y+6, r15	; 0x06
    1214:	0f 83       	std	Y+7, r16	; 0x07
    1216:	18 87       	std	Y+8, r17	; 0x08
    1218:	ce 1a       	sub	r12, r30
    121a:	df 0a       	sbc	r13, r31
    121c:	dc 82       	std	Y+4, r13	; 0x04
    121e:	cb 82       	std	Y+3, r12	; 0x03
    1220:	1a 82       	std	Y+2, r1	; 0x02
    1222:	ce 01       	movw	r24, r28
    1224:	01 96       	adiw	r24, 0x01	; 1
    1226:	0e 94 68 09 	call	0x12d0	; 0x12d0 <__pack_f>
    122a:	28 96       	adiw	r28, 0x08	; 8
    122c:	ea e0       	ldi	r30, 0x0A	; 10
    122e:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__epilogue_restores__+0x10>

00001232 <__clzsi2>:
    1232:	ef 92       	push	r14
    1234:	ff 92       	push	r15
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	7b 01       	movw	r14, r22
    123c:	8c 01       	movw	r16, r24
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	e8 16       	cp	r14, r24
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	f8 06       	cpc	r15, r24
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	08 07       	cpc	r16, r24
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	18 07       	cpc	r17, r24
    124e:	88 f4       	brcc	.+34     	; 0x1272 <__clzsi2+0x40>
    1250:	8f ef       	ldi	r24, 0xFF	; 255
    1252:	e8 16       	cp	r14, r24
    1254:	f1 04       	cpc	r15, r1
    1256:	01 05       	cpc	r16, r1
    1258:	11 05       	cpc	r17, r1
    125a:	31 f0       	breq	.+12     	; 0x1268 <__clzsi2+0x36>
    125c:	28 f0       	brcs	.+10     	; 0x1268 <__clzsi2+0x36>
    125e:	88 e0       	ldi	r24, 0x08	; 8
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	a0 e0       	ldi	r26, 0x00	; 0
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	17 c0       	rjmp	.+46     	; 0x1296 <__clzsi2+0x64>
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	a0 e0       	ldi	r26, 0x00	; 0
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	12 c0       	rjmp	.+36     	; 0x1296 <__clzsi2+0x64>
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	e8 16       	cp	r14, r24
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	f8 06       	cpc	r15, r24
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	08 07       	cpc	r16, r24
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	18 07       	cpc	r17, r24
    1282:	28 f0       	brcs	.+10     	; 0x128e <__clzsi2+0x5c>
    1284:	88 e1       	ldi	r24, 0x18	; 24
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	a0 e0       	ldi	r26, 0x00	; 0
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	04 c0       	rjmp	.+8      	; 0x1296 <__clzsi2+0x64>
    128e:	80 e1       	ldi	r24, 0x10	; 16
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	a0 e0       	ldi	r26, 0x00	; 0
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	20 e2       	ldi	r18, 0x20	; 32
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e0       	ldi	r20, 0x00	; 0
    129c:	50 e0       	ldi	r21, 0x00	; 0
    129e:	28 1b       	sub	r18, r24
    12a0:	39 0b       	sbc	r19, r25
    12a2:	4a 0b       	sbc	r20, r26
    12a4:	5b 0b       	sbc	r21, r27
    12a6:	04 c0       	rjmp	.+8      	; 0x12b0 <__clzsi2+0x7e>
    12a8:	16 95       	lsr	r17
    12aa:	07 95       	ror	r16
    12ac:	f7 94       	ror	r15
    12ae:	e7 94       	ror	r14
    12b0:	8a 95       	dec	r24
    12b2:	d2 f7       	brpl	.-12     	; 0x12a8 <__clzsi2+0x76>
    12b4:	f7 01       	movw	r30, r14
    12b6:	e8 59       	subi	r30, 0x98	; 152
    12b8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ba:	80 81       	ld	r24, Z
    12bc:	28 1b       	sub	r18, r24
    12be:	31 09       	sbc	r19, r1
    12c0:	41 09       	sbc	r20, r1
    12c2:	51 09       	sbc	r21, r1
    12c4:	c9 01       	movw	r24, r18
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	ff 90       	pop	r15
    12cc:	ef 90       	pop	r14
    12ce:	08 95       	ret

000012d0 <__pack_f>:
    12d0:	df 92       	push	r13
    12d2:	ef 92       	push	r14
    12d4:	ff 92       	push	r15
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	fc 01       	movw	r30, r24
    12dc:	e4 80       	ldd	r14, Z+4	; 0x04
    12de:	f5 80       	ldd	r15, Z+5	; 0x05
    12e0:	06 81       	ldd	r16, Z+6	; 0x06
    12e2:	17 81       	ldd	r17, Z+7	; 0x07
    12e4:	d1 80       	ldd	r13, Z+1	; 0x01
    12e6:	80 81       	ld	r24, Z
    12e8:	82 30       	cpi	r24, 0x02	; 2
    12ea:	48 f4       	brcc	.+18     	; 0x12fe <__pack_f+0x2e>
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	a0 e1       	ldi	r26, 0x10	; 16
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e8 2a       	or	r14, r24
    12f6:	f9 2a       	or	r15, r25
    12f8:	0a 2b       	or	r16, r26
    12fa:	1b 2b       	or	r17, r27
    12fc:	a5 c0       	rjmp	.+330    	; 0x1448 <__pack_f+0x178>
    12fe:	84 30       	cpi	r24, 0x04	; 4
    1300:	09 f4       	brne	.+2      	; 0x1304 <__pack_f+0x34>
    1302:	9f c0       	rjmp	.+318    	; 0x1442 <__pack_f+0x172>
    1304:	82 30       	cpi	r24, 0x02	; 2
    1306:	21 f4       	brne	.+8      	; 0x1310 <__pack_f+0x40>
    1308:	ee 24       	eor	r14, r14
    130a:	ff 24       	eor	r15, r15
    130c:	87 01       	movw	r16, r14
    130e:	05 c0       	rjmp	.+10     	; 0x131a <__pack_f+0x4a>
    1310:	e1 14       	cp	r14, r1
    1312:	f1 04       	cpc	r15, r1
    1314:	01 05       	cpc	r16, r1
    1316:	11 05       	cpc	r17, r1
    1318:	19 f4       	brne	.+6      	; 0x1320 <__pack_f+0x50>
    131a:	e0 e0       	ldi	r30, 0x00	; 0
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	96 c0       	rjmp	.+300    	; 0x144c <__pack_f+0x17c>
    1320:	62 81       	ldd	r22, Z+2	; 0x02
    1322:	73 81       	ldd	r23, Z+3	; 0x03
    1324:	9f ef       	ldi	r25, 0xFF	; 255
    1326:	62 38       	cpi	r22, 0x82	; 130
    1328:	79 07       	cpc	r23, r25
    132a:	0c f0       	brlt	.+2      	; 0x132e <__pack_f+0x5e>
    132c:	5b c0       	rjmp	.+182    	; 0x13e4 <__pack_f+0x114>
    132e:	22 e8       	ldi	r18, 0x82	; 130
    1330:	3f ef       	ldi	r19, 0xFF	; 255
    1332:	26 1b       	sub	r18, r22
    1334:	37 0b       	sbc	r19, r23
    1336:	2a 31       	cpi	r18, 0x1A	; 26
    1338:	31 05       	cpc	r19, r1
    133a:	2c f0       	brlt	.+10     	; 0x1346 <__pack_f+0x76>
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	40 e0       	ldi	r20, 0x00	; 0
    1342:	50 e0       	ldi	r21, 0x00	; 0
    1344:	2a c0       	rjmp	.+84     	; 0x139a <__pack_f+0xca>
    1346:	b8 01       	movw	r22, r16
    1348:	a7 01       	movw	r20, r14
    134a:	02 2e       	mov	r0, r18
    134c:	04 c0       	rjmp	.+8      	; 0x1356 <__pack_f+0x86>
    134e:	76 95       	lsr	r23
    1350:	67 95       	ror	r22
    1352:	57 95       	ror	r21
    1354:	47 95       	ror	r20
    1356:	0a 94       	dec	r0
    1358:	d2 f7       	brpl	.-12     	; 0x134e <__pack_f+0x7e>
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	a0 e0       	ldi	r26, 0x00	; 0
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	04 c0       	rjmp	.+8      	; 0x136c <__pack_f+0x9c>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	aa 1f       	adc	r26, r26
    136a:	bb 1f       	adc	r27, r27
    136c:	2a 95       	dec	r18
    136e:	d2 f7       	brpl	.-12     	; 0x1364 <__pack_f+0x94>
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	a1 09       	sbc	r26, r1
    1374:	b1 09       	sbc	r27, r1
    1376:	8e 21       	and	r24, r14
    1378:	9f 21       	and	r25, r15
    137a:	a0 23       	and	r26, r16
    137c:	b1 23       	and	r27, r17
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	a1 05       	cpc	r26, r1
    1382:	b1 05       	cpc	r27, r1
    1384:	21 f0       	breq	.+8      	; 0x138e <__pack_f+0xbe>
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	a0 e0       	ldi	r26, 0x00	; 0
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	9a 01       	movw	r18, r20
    1390:	ab 01       	movw	r20, r22
    1392:	28 2b       	or	r18, r24
    1394:	39 2b       	or	r19, r25
    1396:	4a 2b       	or	r20, r26
    1398:	5b 2b       	or	r21, r27
    139a:	da 01       	movw	r26, r20
    139c:	c9 01       	movw	r24, r18
    139e:	8f 77       	andi	r24, 0x7F	; 127
    13a0:	90 70       	andi	r25, 0x00	; 0
    13a2:	a0 70       	andi	r26, 0x00	; 0
    13a4:	b0 70       	andi	r27, 0x00	; 0
    13a6:	80 34       	cpi	r24, 0x40	; 64
    13a8:	91 05       	cpc	r25, r1
    13aa:	a1 05       	cpc	r26, r1
    13ac:	b1 05       	cpc	r27, r1
    13ae:	39 f4       	brne	.+14     	; 0x13be <__pack_f+0xee>
    13b0:	27 ff       	sbrs	r18, 7
    13b2:	09 c0       	rjmp	.+18     	; 0x13c6 <__pack_f+0xf6>
    13b4:	20 5c       	subi	r18, 0xC0	; 192
    13b6:	3f 4f       	sbci	r19, 0xFF	; 255
    13b8:	4f 4f       	sbci	r20, 0xFF	; 255
    13ba:	5f 4f       	sbci	r21, 0xFF	; 255
    13bc:	04 c0       	rjmp	.+8      	; 0x13c6 <__pack_f+0xf6>
    13be:	21 5c       	subi	r18, 0xC1	; 193
    13c0:	3f 4f       	sbci	r19, 0xFF	; 255
    13c2:	4f 4f       	sbci	r20, 0xFF	; 255
    13c4:	5f 4f       	sbci	r21, 0xFF	; 255
    13c6:	e0 e0       	ldi	r30, 0x00	; 0
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	20 30       	cpi	r18, 0x00	; 0
    13cc:	a0 e0       	ldi	r26, 0x00	; 0
    13ce:	3a 07       	cpc	r19, r26
    13d0:	a0 e0       	ldi	r26, 0x00	; 0
    13d2:	4a 07       	cpc	r20, r26
    13d4:	a0 e4       	ldi	r26, 0x40	; 64
    13d6:	5a 07       	cpc	r21, r26
    13d8:	10 f0       	brcs	.+4      	; 0x13de <__pack_f+0x10e>
    13da:	e1 e0       	ldi	r30, 0x01	; 1
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	79 01       	movw	r14, r18
    13e0:	8a 01       	movw	r16, r20
    13e2:	27 c0       	rjmp	.+78     	; 0x1432 <__pack_f+0x162>
    13e4:	60 38       	cpi	r22, 0x80	; 128
    13e6:	71 05       	cpc	r23, r1
    13e8:	64 f5       	brge	.+88     	; 0x1442 <__pack_f+0x172>
    13ea:	fb 01       	movw	r30, r22
    13ec:	e1 58       	subi	r30, 0x81	; 129
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	d8 01       	movw	r26, r16
    13f2:	c7 01       	movw	r24, r14
    13f4:	8f 77       	andi	r24, 0x7F	; 127
    13f6:	90 70       	andi	r25, 0x00	; 0
    13f8:	a0 70       	andi	r26, 0x00	; 0
    13fa:	b0 70       	andi	r27, 0x00	; 0
    13fc:	80 34       	cpi	r24, 0x40	; 64
    13fe:	91 05       	cpc	r25, r1
    1400:	a1 05       	cpc	r26, r1
    1402:	b1 05       	cpc	r27, r1
    1404:	39 f4       	brne	.+14     	; 0x1414 <__pack_f+0x144>
    1406:	e7 fe       	sbrs	r14, 7
    1408:	0d c0       	rjmp	.+26     	; 0x1424 <__pack_f+0x154>
    140a:	80 e4       	ldi	r24, 0x40	; 64
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	a0 e0       	ldi	r26, 0x00	; 0
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	04 c0       	rjmp	.+8      	; 0x141c <__pack_f+0x14c>
    1414:	8f e3       	ldi	r24, 0x3F	; 63
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	a0 e0       	ldi	r26, 0x00	; 0
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e8 0e       	add	r14, r24
    141e:	f9 1e       	adc	r15, r25
    1420:	0a 1f       	adc	r16, r26
    1422:	1b 1f       	adc	r17, r27
    1424:	17 ff       	sbrs	r17, 7
    1426:	05 c0       	rjmp	.+10     	; 0x1432 <__pack_f+0x162>
    1428:	16 95       	lsr	r17
    142a:	07 95       	ror	r16
    142c:	f7 94       	ror	r15
    142e:	e7 94       	ror	r14
    1430:	31 96       	adiw	r30, 0x01	; 1
    1432:	87 e0       	ldi	r24, 0x07	; 7
    1434:	16 95       	lsr	r17
    1436:	07 95       	ror	r16
    1438:	f7 94       	ror	r15
    143a:	e7 94       	ror	r14
    143c:	8a 95       	dec	r24
    143e:	d1 f7       	brne	.-12     	; 0x1434 <__pack_f+0x164>
    1440:	05 c0       	rjmp	.+10     	; 0x144c <__pack_f+0x17c>
    1442:	ee 24       	eor	r14, r14
    1444:	ff 24       	eor	r15, r15
    1446:	87 01       	movw	r16, r14
    1448:	ef ef       	ldi	r30, 0xFF	; 255
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	6e 2f       	mov	r22, r30
    144e:	67 95       	ror	r22
    1450:	66 27       	eor	r22, r22
    1452:	67 95       	ror	r22
    1454:	90 2f       	mov	r25, r16
    1456:	9f 77       	andi	r25, 0x7F	; 127
    1458:	d7 94       	ror	r13
    145a:	dd 24       	eor	r13, r13
    145c:	d7 94       	ror	r13
    145e:	8e 2f       	mov	r24, r30
    1460:	86 95       	lsr	r24
    1462:	49 2f       	mov	r20, r25
    1464:	46 2b       	or	r20, r22
    1466:	58 2f       	mov	r21, r24
    1468:	5d 29       	or	r21, r13
    146a:	b7 01       	movw	r22, r14
    146c:	ca 01       	movw	r24, r20
    146e:	1f 91       	pop	r17
    1470:	0f 91       	pop	r16
    1472:	ff 90       	pop	r15
    1474:	ef 90       	pop	r14
    1476:	df 90       	pop	r13
    1478:	08 95       	ret

0000147a <__unpack_f>:
    147a:	fc 01       	movw	r30, r24
    147c:	db 01       	movw	r26, r22
    147e:	40 81       	ld	r20, Z
    1480:	51 81       	ldd	r21, Z+1	; 0x01
    1482:	22 81       	ldd	r18, Z+2	; 0x02
    1484:	62 2f       	mov	r22, r18
    1486:	6f 77       	andi	r22, 0x7F	; 127
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	22 1f       	adc	r18, r18
    148c:	22 27       	eor	r18, r18
    148e:	22 1f       	adc	r18, r18
    1490:	93 81       	ldd	r25, Z+3	; 0x03
    1492:	89 2f       	mov	r24, r25
    1494:	88 0f       	add	r24, r24
    1496:	82 2b       	or	r24, r18
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	99 1f       	adc	r25, r25
    149e:	99 27       	eor	r25, r25
    14a0:	99 1f       	adc	r25, r25
    14a2:	11 96       	adiw	r26, 0x01	; 1
    14a4:	9c 93       	st	X, r25
    14a6:	11 97       	sbiw	r26, 0x01	; 1
    14a8:	21 15       	cp	r18, r1
    14aa:	31 05       	cpc	r19, r1
    14ac:	a9 f5       	brne	.+106    	; 0x1518 <__unpack_f+0x9e>
    14ae:	41 15       	cp	r20, r1
    14b0:	51 05       	cpc	r21, r1
    14b2:	61 05       	cpc	r22, r1
    14b4:	71 05       	cpc	r23, r1
    14b6:	11 f4       	brne	.+4      	; 0x14bc <__unpack_f+0x42>
    14b8:	82 e0       	ldi	r24, 0x02	; 2
    14ba:	37 c0       	rjmp	.+110    	; 0x152a <__unpack_f+0xb0>
    14bc:	82 e8       	ldi	r24, 0x82	; 130
    14be:	9f ef       	ldi	r25, 0xFF	; 255
    14c0:	13 96       	adiw	r26, 0x03	; 3
    14c2:	9c 93       	st	X, r25
    14c4:	8e 93       	st	-X, r24
    14c6:	12 97       	sbiw	r26, 0x02	; 2
    14c8:	9a 01       	movw	r18, r20
    14ca:	ab 01       	movw	r20, r22
    14cc:	67 e0       	ldi	r22, 0x07	; 7
    14ce:	22 0f       	add	r18, r18
    14d0:	33 1f       	adc	r19, r19
    14d2:	44 1f       	adc	r20, r20
    14d4:	55 1f       	adc	r21, r21
    14d6:	6a 95       	dec	r22
    14d8:	d1 f7       	brne	.-12     	; 0x14ce <__unpack_f+0x54>
    14da:	83 e0       	ldi	r24, 0x03	; 3
    14dc:	8c 93       	st	X, r24
    14de:	0d c0       	rjmp	.+26     	; 0x14fa <__unpack_f+0x80>
    14e0:	22 0f       	add	r18, r18
    14e2:	33 1f       	adc	r19, r19
    14e4:	44 1f       	adc	r20, r20
    14e6:	55 1f       	adc	r21, r21
    14e8:	12 96       	adiw	r26, 0x02	; 2
    14ea:	8d 91       	ld	r24, X+
    14ec:	9c 91       	ld	r25, X
    14ee:	13 97       	sbiw	r26, 0x03	; 3
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	13 96       	adiw	r26, 0x03	; 3
    14f4:	9c 93       	st	X, r25
    14f6:	8e 93       	st	-X, r24
    14f8:	12 97       	sbiw	r26, 0x02	; 2
    14fa:	20 30       	cpi	r18, 0x00	; 0
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	38 07       	cpc	r19, r24
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	48 07       	cpc	r20, r24
    1504:	80 e4       	ldi	r24, 0x40	; 64
    1506:	58 07       	cpc	r21, r24
    1508:	58 f3       	brcs	.-42     	; 0x14e0 <__unpack_f+0x66>
    150a:	14 96       	adiw	r26, 0x04	; 4
    150c:	2d 93       	st	X+, r18
    150e:	3d 93       	st	X+, r19
    1510:	4d 93       	st	X+, r20
    1512:	5c 93       	st	X, r21
    1514:	17 97       	sbiw	r26, 0x07	; 7
    1516:	08 95       	ret
    1518:	2f 3f       	cpi	r18, 0xFF	; 255
    151a:	31 05       	cpc	r19, r1
    151c:	79 f4       	brne	.+30     	; 0x153c <__unpack_f+0xc2>
    151e:	41 15       	cp	r20, r1
    1520:	51 05       	cpc	r21, r1
    1522:	61 05       	cpc	r22, r1
    1524:	71 05       	cpc	r23, r1
    1526:	19 f4       	brne	.+6      	; 0x152e <__unpack_f+0xb4>
    1528:	84 e0       	ldi	r24, 0x04	; 4
    152a:	8c 93       	st	X, r24
    152c:	08 95       	ret
    152e:	64 ff       	sbrs	r22, 4
    1530:	03 c0       	rjmp	.+6      	; 0x1538 <__unpack_f+0xbe>
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	8c 93       	st	X, r24
    1536:	12 c0       	rjmp	.+36     	; 0x155c <__unpack_f+0xe2>
    1538:	1c 92       	st	X, r1
    153a:	10 c0       	rjmp	.+32     	; 0x155c <__unpack_f+0xe2>
    153c:	2f 57       	subi	r18, 0x7F	; 127
    153e:	30 40       	sbci	r19, 0x00	; 0
    1540:	13 96       	adiw	r26, 0x03	; 3
    1542:	3c 93       	st	X, r19
    1544:	2e 93       	st	-X, r18
    1546:	12 97       	sbiw	r26, 0x02	; 2
    1548:	83 e0       	ldi	r24, 0x03	; 3
    154a:	8c 93       	st	X, r24
    154c:	87 e0       	ldi	r24, 0x07	; 7
    154e:	44 0f       	add	r20, r20
    1550:	55 1f       	adc	r21, r21
    1552:	66 1f       	adc	r22, r22
    1554:	77 1f       	adc	r23, r23
    1556:	8a 95       	dec	r24
    1558:	d1 f7       	brne	.-12     	; 0x154e <__unpack_f+0xd4>
    155a:	70 64       	ori	r23, 0x40	; 64
    155c:	14 96       	adiw	r26, 0x04	; 4
    155e:	4d 93       	st	X+, r20
    1560:	5d 93       	st	X+, r21
    1562:	6d 93       	st	X+, r22
    1564:	7c 93       	st	X, r23
    1566:	17 97       	sbiw	r26, 0x07	; 7
    1568:	08 95       	ret

0000156a <__fpcmp_parts_f>:
    156a:	1f 93       	push	r17
    156c:	dc 01       	movw	r26, r24
    156e:	fb 01       	movw	r30, r22
    1570:	9c 91       	ld	r25, X
    1572:	92 30       	cpi	r25, 0x02	; 2
    1574:	08 f4       	brcc	.+2      	; 0x1578 <__fpcmp_parts_f+0xe>
    1576:	47 c0       	rjmp	.+142    	; 0x1606 <__fpcmp_parts_f+0x9c>
    1578:	80 81       	ld	r24, Z
    157a:	82 30       	cpi	r24, 0x02	; 2
    157c:	08 f4       	brcc	.+2      	; 0x1580 <__fpcmp_parts_f+0x16>
    157e:	43 c0       	rjmp	.+134    	; 0x1606 <__fpcmp_parts_f+0x9c>
    1580:	94 30       	cpi	r25, 0x04	; 4
    1582:	51 f4       	brne	.+20     	; 0x1598 <__fpcmp_parts_f+0x2e>
    1584:	11 96       	adiw	r26, 0x01	; 1
    1586:	1c 91       	ld	r17, X
    1588:	84 30       	cpi	r24, 0x04	; 4
    158a:	99 f5       	brne	.+102    	; 0x15f2 <__fpcmp_parts_f+0x88>
    158c:	81 81       	ldd	r24, Z+1	; 0x01
    158e:	68 2f       	mov	r22, r24
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	61 1b       	sub	r22, r17
    1594:	71 09       	sbc	r23, r1
    1596:	3f c0       	rjmp	.+126    	; 0x1616 <__fpcmp_parts_f+0xac>
    1598:	84 30       	cpi	r24, 0x04	; 4
    159a:	21 f0       	breq	.+8      	; 0x15a4 <__fpcmp_parts_f+0x3a>
    159c:	92 30       	cpi	r25, 0x02	; 2
    159e:	31 f4       	brne	.+12     	; 0x15ac <__fpcmp_parts_f+0x42>
    15a0:	82 30       	cpi	r24, 0x02	; 2
    15a2:	b9 f1       	breq	.+110    	; 0x1612 <__fpcmp_parts_f+0xa8>
    15a4:	81 81       	ldd	r24, Z+1	; 0x01
    15a6:	88 23       	and	r24, r24
    15a8:	89 f1       	breq	.+98     	; 0x160c <__fpcmp_parts_f+0xa2>
    15aa:	2d c0       	rjmp	.+90     	; 0x1606 <__fpcmp_parts_f+0x9c>
    15ac:	11 96       	adiw	r26, 0x01	; 1
    15ae:	1c 91       	ld	r17, X
    15b0:	11 97       	sbiw	r26, 0x01	; 1
    15b2:	82 30       	cpi	r24, 0x02	; 2
    15b4:	f1 f0       	breq	.+60     	; 0x15f2 <__fpcmp_parts_f+0x88>
    15b6:	81 81       	ldd	r24, Z+1	; 0x01
    15b8:	18 17       	cp	r17, r24
    15ba:	d9 f4       	brne	.+54     	; 0x15f2 <__fpcmp_parts_f+0x88>
    15bc:	12 96       	adiw	r26, 0x02	; 2
    15be:	2d 91       	ld	r18, X+
    15c0:	3c 91       	ld	r19, X
    15c2:	13 97       	sbiw	r26, 0x03	; 3
    15c4:	82 81       	ldd	r24, Z+2	; 0x02
    15c6:	93 81       	ldd	r25, Z+3	; 0x03
    15c8:	82 17       	cp	r24, r18
    15ca:	93 07       	cpc	r25, r19
    15cc:	94 f0       	brlt	.+36     	; 0x15f2 <__fpcmp_parts_f+0x88>
    15ce:	28 17       	cp	r18, r24
    15d0:	39 07       	cpc	r19, r25
    15d2:	bc f0       	brlt	.+46     	; 0x1602 <__fpcmp_parts_f+0x98>
    15d4:	14 96       	adiw	r26, 0x04	; 4
    15d6:	8d 91       	ld	r24, X+
    15d8:	9d 91       	ld	r25, X+
    15da:	0d 90       	ld	r0, X+
    15dc:	bc 91       	ld	r27, X
    15de:	a0 2d       	mov	r26, r0
    15e0:	24 81       	ldd	r18, Z+4	; 0x04
    15e2:	35 81       	ldd	r19, Z+5	; 0x05
    15e4:	46 81       	ldd	r20, Z+6	; 0x06
    15e6:	57 81       	ldd	r21, Z+7	; 0x07
    15e8:	28 17       	cp	r18, r24
    15ea:	39 07       	cpc	r19, r25
    15ec:	4a 07       	cpc	r20, r26
    15ee:	5b 07       	cpc	r21, r27
    15f0:	18 f4       	brcc	.+6      	; 0x15f8 <__fpcmp_parts_f+0x8e>
    15f2:	11 23       	and	r17, r17
    15f4:	41 f0       	breq	.+16     	; 0x1606 <__fpcmp_parts_f+0x9c>
    15f6:	0a c0       	rjmp	.+20     	; 0x160c <__fpcmp_parts_f+0xa2>
    15f8:	82 17       	cp	r24, r18
    15fa:	93 07       	cpc	r25, r19
    15fc:	a4 07       	cpc	r26, r20
    15fe:	b5 07       	cpc	r27, r21
    1600:	40 f4       	brcc	.+16     	; 0x1612 <__fpcmp_parts_f+0xa8>
    1602:	11 23       	and	r17, r17
    1604:	19 f0       	breq	.+6      	; 0x160c <__fpcmp_parts_f+0xa2>
    1606:	61 e0       	ldi	r22, 0x01	; 1
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	05 c0       	rjmp	.+10     	; 0x1616 <__fpcmp_parts_f+0xac>
    160c:	6f ef       	ldi	r22, 0xFF	; 255
    160e:	7f ef       	ldi	r23, 0xFF	; 255
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <__fpcmp_parts_f+0xac>
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	cb 01       	movw	r24, r22
    1618:	1f 91       	pop	r17
    161a:	08 95       	ret

0000161c <__udivmodhi4>:
    161c:	aa 1b       	sub	r26, r26
    161e:	bb 1b       	sub	r27, r27
    1620:	51 e1       	ldi	r21, 0x11	; 17
    1622:	07 c0       	rjmp	.+14     	; 0x1632 <__udivmodhi4_ep>

00001624 <__udivmodhi4_loop>:
    1624:	aa 1f       	adc	r26, r26
    1626:	bb 1f       	adc	r27, r27
    1628:	a6 17       	cp	r26, r22
    162a:	b7 07       	cpc	r27, r23
    162c:	10 f0       	brcs	.+4      	; 0x1632 <__udivmodhi4_ep>
    162e:	a6 1b       	sub	r26, r22
    1630:	b7 0b       	sbc	r27, r23

00001632 <__udivmodhi4_ep>:
    1632:	88 1f       	adc	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	5a 95       	dec	r21
    1638:	a9 f7       	brne	.-22     	; 0x1624 <__udivmodhi4_loop>
    163a:	80 95       	com	r24
    163c:	90 95       	com	r25
    163e:	bc 01       	movw	r22, r24
    1640:	cd 01       	movw	r24, r26
    1642:	08 95       	ret

00001644 <__prologue_saves__>:
    1644:	2f 92       	push	r2
    1646:	3f 92       	push	r3
    1648:	4f 92       	push	r4
    164a:	5f 92       	push	r5
    164c:	6f 92       	push	r6
    164e:	7f 92       	push	r7
    1650:	8f 92       	push	r8
    1652:	9f 92       	push	r9
    1654:	af 92       	push	r10
    1656:	bf 92       	push	r11
    1658:	cf 92       	push	r12
    165a:	df 92       	push	r13
    165c:	ef 92       	push	r14
    165e:	ff 92       	push	r15
    1660:	0f 93       	push	r16
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	ca 1b       	sub	r28, r26
    166e:	db 0b       	sbc	r29, r27
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	09 94       	ijmp

0000167c <__epilogue_restores__>:
    167c:	2a 88       	ldd	r2, Y+18	; 0x12
    167e:	39 88       	ldd	r3, Y+17	; 0x11
    1680:	48 88       	ldd	r4, Y+16	; 0x10
    1682:	5f 84       	ldd	r5, Y+15	; 0x0f
    1684:	6e 84       	ldd	r6, Y+14	; 0x0e
    1686:	7d 84       	ldd	r7, Y+13	; 0x0d
    1688:	8c 84       	ldd	r8, Y+12	; 0x0c
    168a:	9b 84       	ldd	r9, Y+11	; 0x0b
    168c:	aa 84       	ldd	r10, Y+10	; 0x0a
    168e:	b9 84       	ldd	r11, Y+9	; 0x09
    1690:	c8 84       	ldd	r12, Y+8	; 0x08
    1692:	df 80       	ldd	r13, Y+7	; 0x07
    1694:	ee 80       	ldd	r14, Y+6	; 0x06
    1696:	fd 80       	ldd	r15, Y+5	; 0x05
    1698:	0c 81       	ldd	r16, Y+4	; 0x04
    169a:	1b 81       	ldd	r17, Y+3	; 0x03
    169c:	aa 81       	ldd	r26, Y+2	; 0x02
    169e:	b9 81       	ldd	r27, Y+1	; 0x01
    16a0:	ce 0f       	add	r28, r30
    16a2:	d1 1d       	adc	r29, r1
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	de bf       	out	0x3e, r29	; 62
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	cd bf       	out	0x3d, r28	; 61
    16ae:	ed 01       	movw	r28, r26
    16b0:	08 95       	ret

000016b2 <__eerd_byte_m16>:
    16b2:	e1 99       	sbic	0x1c, 1	; 28
    16b4:	fe cf       	rjmp	.-4      	; 0x16b2 <__eerd_byte_m16>
    16b6:	9f bb       	out	0x1f, r25	; 31
    16b8:	8e bb       	out	0x1e, r24	; 30
    16ba:	e0 9a       	sbi	0x1c, 0	; 28
    16bc:	99 27       	eor	r25, r25
    16be:	8d b3       	in	r24, 0x1d	; 29
    16c0:	08 95       	ret

000016c2 <__eerd_word_m16>:
    16c2:	a8 e1       	ldi	r26, 0x18	; 24
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	42 e0       	ldi	r20, 0x02	; 2
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__eerd_blraw_m16>

000016ce <__eewr_word_m16>:
    16ce:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__eewr_byte_m16>
    16d2:	27 2f       	mov	r18, r23
    16d4:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__eewr_r18_m16>

000016d8 <__eerd_block_m16>:
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22

000016dc <__eerd_blraw_m16>:
    16dc:	fc 01       	movw	r30, r24
    16de:	e1 99       	sbic	0x1c, 1	; 28
    16e0:	fe cf       	rjmp	.-4      	; 0x16de <__eerd_blraw_m16+0x2>
    16e2:	06 c0       	rjmp	.+12     	; 0x16f0 <__eerd_blraw_m16+0x14>
    16e4:	ff bb       	out	0x1f, r31	; 31
    16e6:	ee bb       	out	0x1e, r30	; 30
    16e8:	e0 9a       	sbi	0x1c, 0	; 28
    16ea:	31 96       	adiw	r30, 0x01	; 1
    16ec:	0d b2       	in	r0, 0x1d	; 29
    16ee:	0d 92       	st	X+, r0
    16f0:	41 50       	subi	r20, 0x01	; 1
    16f2:	50 40       	sbci	r21, 0x00	; 0
    16f4:	b8 f7       	brcc	.-18     	; 0x16e4 <__eerd_blraw_m16+0x8>
    16f6:	08 95       	ret

000016f8 <__eewr_byte_m16>:
    16f8:	26 2f       	mov	r18, r22

000016fa <__eewr_r18_m16>:
    16fa:	e1 99       	sbic	0x1c, 1	; 28
    16fc:	fe cf       	rjmp	.-4      	; 0x16fa <__eewr_r18_m16>
    16fe:	9f bb       	out	0x1f, r25	; 31
    1700:	8e bb       	out	0x1e, r24	; 30
    1702:	2d bb       	out	0x1d, r18	; 29
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	e2 9a       	sbi	0x1c, 2	; 28
    170a:	e1 9a       	sbi	0x1c, 1	; 28
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	01 96       	adiw	r24, 0x01	; 1
    1710:	08 95       	ret

00001712 <_exit>:
    1712:	f8 94       	cli

00001714 <__stop_program>:
    1714:	ff cf       	rjmp	.-2      	; 0x1714 <__stop_program>
