
TEC_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001640  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00001640  000016f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  00800168  00800168  000017fc  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  000017fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000001c0  00000000  00000000  000017ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000416  00000000  00000000  000019bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d56  00000000  00000000  00001dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015ee  00000000  00000000  00004b2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a9c  00000000  00000000  00006119  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  00007bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051a  00000000  00000000  00007ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d53  00000000  00000000  00008402  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  00009155  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a3 39       	cpi	r26, 0x93	; 147
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 e4       	ldi	r30, 0x40	; 64
      78:	f6 e1       	ldi	r31, 0x16	; 22
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 db 02 	call	0x5b6	; 0x5b6 <main>
      8a:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <uartInit>:
//------------------------------------------------------------------------------------
//UART

void uartInit(void)
{
	UBRRH = UART_BAUDRATE_H;		// Init UART baudrate
      92:	10 bc       	out	0x20, r1	; 32
	UBRRL = UART_BAUDRATE_L;
      94:	83 e3       	ldi	r24, 0x33	; 51
      96:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1<<RXEN)|(1<<TXEN)|(1 << RXCIE);	// TX, RX enable, RX interrupt enable
      98:	88 e9       	ldi	r24, 0x98	; 152
      9a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
      9c:	86 e8       	ldi	r24, 0x86	; 134
      9e:	80 bd       	out	0x20, r24	; 32
	return;
}
      a0:	08 95       	ret

000000a2 <uartTransmitByte>:

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
      a2:	5d 9b       	sbis	0x0b, 5	; 11
      a4:	fe cf       	rjmp	.-4      	; 0xa2 <uartTransmitByte>
	UDR = data;
      a6:	8c b9       	out	0x0c, r24	; 12
	return;
}
      a8:	08 95       	ret

000000aa <uartReceiveByte>:

//Receive byte thought UART
unsigned char uartReceiveByte (void)
{

	while ( !(UCSRA & (1<<RXC)) )
      aa:	5f 9b       	sbis	0x0b, 7	; 11
      ac:	fe cf       	rjmp	.-4      	; 0xaa <uartReceiveByte>
	;
	return UDR;
      ae:	8c b1       	in	r24, 0x0c	; 12
}
      b0:	08 95       	ret

000000b2 <uartTransmitMessage>:

//Transmit string to UART
void uartTransmitMessage(char* msg)
{ unsigned char i;
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	04 c0       	rjmp	.+8      	; 0xbe <uartTransmitMessage+0xc>
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
      b6:	5d 9b       	sbis	0x0b, 5	; 11
      b8:	fe cf       	rjmp	.-4      	; 0xb6 <uartTransmitMessage+0x4>
	UDR = data;
      ba:	ec b9       	out	0x0c, r30	; 12
	i=0;

	while ((i<256)&(msg[i]!=0x00) )
	{
		uartTransmitByte(msg[i]);
		i++;
      bc:	2f 5f       	subi	r18, 0xFF	; 255
//Transmit string to UART
void uartTransmitMessage(char* msg)
{ unsigned char i;
	i=0;

	while ((i<256)&(msg[i]!=0x00) )
      be:	fc 01       	movw	r30, r24
      c0:	e2 0f       	add	r30, r18
      c2:	f1 1d       	adc	r31, r1
      c4:	e0 81       	ld	r30, Z
      c6:	ee 23       	and	r30, r30
      c8:	b1 f7       	brne	.-20     	; 0xb6 <uartTransmitMessage+0x4>
	{
		uartTransmitByte(msg[i]);
		i++;
	}
	return;
}
      ca:	08 95       	ret

000000cc <initPWM>:
//------------------------------------------------------------------------------------
//PWM

void initPWM (void)
{
	TEC_PORT&=~(1<<TEC_PIN);
      cc:	95 98       	cbi	0x12, 5	; 18
	TEC_DDR|=(1<<TEC_PIN);
      ce:	8d 9a       	sbi	0x11, 5	; 17

	TCCR1A|=(1<<WGM10);
      d0:	8f b5       	in	r24, 0x2f	; 47
      d2:	81 60       	ori	r24, 0x01	; 1
      d4:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM12)|(1<<CS10);
      d6:	8e b5       	in	r24, 0x2e	; 46
      d8:	89 60       	ori	r24, 0x09	; 9
      da:	8e bd       	out	0x2e, r24	; 46

	OCR1AL=0x00;
      dc:	1a bc       	out	0x2a, r1	; 42
	OCR1BL=0x00;
      de:	18 bc       	out	0x28, r1	; 40
	return;
}
      e0:	08 95       	ret

000000e2 <offPWM>:

void offPWM()
{
	TCCR1A&=~(1<<COM1A1);
      e2:	8f b5       	in	r24, 0x2f	; 47
      e4:	8f 77       	andi	r24, 0x7F	; 127
      e6:	8f bd       	out	0x2f, r24	; 47
	return;
}
      e8:	08 95       	ret

000000ea <onPWM>:

void onPWM()
{
	TCCR1A|=(1<<COM1A1);
      ea:	8f b5       	in	r24, 0x2f	; 47
      ec:	80 68       	ori	r24, 0x80	; 128
      ee:	8f bd       	out	0x2f, r24	; 47
	return;
}
      f0:	08 95       	ret

000000f2 <setPWM>:

void setPWM (uint8_t data)
{
	OCR1AL=data;
      f2:	8a bd       	out	0x2a, r24	; 42
	if (data==0) offPWM();
      f4:	88 23       	and	r24, r24
      f6:	19 f4       	brne	.+6      	; 0xfe <setPWM+0xc>
	return;
}

void offPWM()
{
	TCCR1A&=~(1<<COM1A1);
      f8:	8f b5       	in	r24, 0x2f	; 47
      fa:	8f 77       	andi	r24, 0x7F	; 127
      fc:	02 c0       	rjmp	.+4      	; 0x102 <setPWM+0x10>
	return;
}

void onPWM()
{
	TCCR1A|=(1<<COM1A1);
      fe:	8f b5       	in	r24, 0x2f	; 47
     100:	80 68       	ori	r24, 0x80	; 128
     102:	8f bd       	out	0x2f, r24	; 47
     104:	08 95       	ret

00000106 <getPWM>:
	return;
}

uint8_t getPWM (void)
{
	return OCR1AL;
     106:	8a b5       	in	r24, 0x2a	; 42
}
     108:	08 95       	ret

0000010a <clearRXBuf>:

//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
     10a:	ee e7       	ldi	r30, 0x7E	; 126
     10c:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     10e:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	e9 38       	cpi	r30, 0x89	; 137
     114:	f8 07       	cpc	r31, r24
     116:	d9 f7       	brne	.-10     	; 0x10e <clearRXBuf+0x4>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     118:	10 92 69 01 	sts	0x0169, r1
	return;
}
     11c:	08 95       	ret

0000011e <clearTXBuf>:

void clearTXBuf (void)
{
     11e:	ec e6       	ldi	r30, 0x6C	; 108
     120:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	txBuf[i]=0;
     122:	11 92       	st	Z+, r1
}

void clearTXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	e7 37       	cpi	r30, 0x77	; 119
     128:	f8 07       	cpc	r31, r24
     12a:	d9 f7       	brne	.-10     	; 0x122 <clearTXBuf+0x4>
	txBuf[i]=0;
	return;
}
     12c:	08 95       	ret

0000012e <clearBuf>:

void clearBuf (void)
{
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=txBuf[i]=0;
     132:	fc 01       	movw	r30, r24
     134:	e4 59       	subi	r30, 0x94	; 148
     136:	fe 4f       	sbci	r31, 0xFE	; 254
     138:	10 82       	st	Z, r1
     13a:	fc 01       	movw	r30, r24
     13c:	e2 58       	subi	r30, 0x82	; 130
     13e:	fe 4f       	sbci	r31, 0xFE	; 254
     140:	10 82       	st	Z, r1
     142:	01 96       	adiw	r24, 0x01	; 1
}

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     144:	8b 30       	cpi	r24, 0x0B	; 11
     146:	91 05       	cpc	r25, r1
     148:	a1 f7       	brne	.-24     	; 0x132 <clearBuf+0x4>
	rxBuf[i]=txBuf[i]=0;
	return;
}
     14a:	08 95       	ret

0000014c <__vector_11>:

//receive packet to RX buffer
ISR(USART_RXC_vect)
{
     14c:	1f 92       	push	r1
     14e:	0f 92       	push	r0
     150:	0f b6       	in	r0, 0x3f	; 63
     152:	0f 92       	push	r0
     154:	11 24       	eor	r1, r1
     156:	2f 93       	push	r18
     158:	3f 93       	push	r19
     15a:	4f 93       	push	r20
     15c:	6f 93       	push	r22
     15e:	7f 93       	push	r23
     160:	8f 93       	push	r24
     162:	9f 93       	push	r25
     164:	ef 93       	push	r30
     166:	ff 93       	push	r31
	uint16_t i=0;

	if (packetReceived!=0)
     168:	80 91 68 01 	lds	r24, 0x0168
     16c:	88 23       	and	r24, r24
     16e:	11 f0       	breq	.+4      	; 0x174 <__vector_11+0x28>
	{
		i=UDR;
     170:	8c b1       	in	r24, 0x0c	; 12
     172:	25 c0       	rjmp	.+74     	; 0x1be <__vector_11+0x72>
		return;
	}

	rxBuf[0]=UDR;
     174:	8c b1       	in	r24, 0x0c	; 12
     176:	80 93 7e 01 	sts	0x017E, r24
	currentRXPacketLen=1;
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	80 93 69 01 	sts	0x0169, r24
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	41 e0       	ldi	r20, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     186:	61 e0       	ldi	r22, 0x01	; 1
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	09 c0       	rjmp	.+18     	; 0x19e <__vector_11+0x52>

	while (1)
	{
		while ( !(UCSRA & (1<<RXC)) )
		{
			if (i==10000)
     18c:	87 e2       	ldi	r24, 0x27	; 39
     18e:	20 31       	cpi	r18, 0x10	; 16
     190:	38 07       	cpc	r19, r24
     192:	81 f0       	breq	.+32     	; 0x1b4 <__vector_11+0x68>
			{
				packetReceived=1;
				return;
			}
			i++;
     194:	2f 5f       	subi	r18, 0xFF	; 255
     196:	3f 4f       	sbci	r19, 0xFF	; 255
     198:	cb 01       	movw	r24, r22
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <__vector_11+0x4e>
	rxBuf[0]=UDR;
	currentRXPacketLen=1;

	while (1)
	{
		while ( !(UCSRA & (1<<RXC)) )
     19e:	5f 9b       	sbis	0x0b, 7	; 11
     1a0:	f5 cf       	rjmp	.-22     	; 0x18c <__vector_11+0x40>
				return;
			}
			i++;
			_delay_loop_2(1);
		}
		rxBuf[currentRXPacketLen]=UDR;
     1a2:	8c b1       	in	r24, 0x0c	; 12
     1a4:	e4 2f       	mov	r30, r20
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	e2 58       	subi	r30, 0x82	; 130
     1aa:	fe 4f       	sbci	r31, 0xFE	; 254
     1ac:	80 83       	st	Z, r24
		currentRXPacketLen++;
     1ae:	4f 5f       	subi	r20, 0xFF	; 255

		if (currentRXPacketLen>=BUFF_SIZE)
     1b0:	4b 30       	cpi	r20, 0x0B	; 11
     1b2:	a8 f3       	brcs	.-22     	; 0x19e <__vector_11+0x52>
     1b4:	40 93 69 01 	sts	0x0169, r20
		{
			packetReceived=1;
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	80 93 68 01 	sts	0x0168, r24
			return;
		}
	}
}
     1be:	ff 91       	pop	r31
     1c0:	ef 91       	pop	r30
     1c2:	9f 91       	pop	r25
     1c4:	8f 91       	pop	r24
     1c6:	7f 91       	pop	r23
     1c8:	6f 91       	pop	r22
     1ca:	4f 91       	pop	r20
     1cc:	3f 91       	pop	r19
     1ce:	2f 91       	pop	r18
     1d0:	0f 90       	pop	r0
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	0f 90       	pop	r0
     1d6:	1f 90       	pop	r1
     1d8:	18 95       	reti

000001da <uartSendPacket>:

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
     1da:	ec e6       	ldi	r30, 0x6C	; 108
     1dc:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i;
	for (i=0;i<length;i++)
     1de:	70 e0       	ldi	r23, 0x00	; 0
     1e0:	6e 0f       	add	r22, r30
     1e2:	7f 1f       	adc	r23, r31
     1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <uartSendPacket+0x16>
	uartTransmitByte(txBuf[i]);
     1e6:	80 81       	ld	r24, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     1e8:	5d 9b       	sbis	0x0b, 5	; 11
     1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <uartSendPacket+0xe>
	UDR = data;
     1ec:	8c b9       	out	0x0c, r24	; 12
     1ee:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     1f0:	e6 17       	cp	r30, r22
     1f2:	f7 07       	cpc	r31, r23
     1f4:	c1 f7       	brne	.-16     	; 0x1e6 <uartSendPacket+0xc>
	uartTransmitByte(txBuf[i]);
	return;
}
     1f6:	08 95       	ret

000001f8 <crc8Block>:

//crc calculating function
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
     1f8:	fc 01       	movw	r30, r24
     1fa:	9f ef       	ldi	r25, 0xFF	; 255
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     1fc:	21 e3       	ldi	r18, 0x31	; 49
     1fe:	0e c0       	rjmp	.+28     	; 0x21c <crc8Block+0x24>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     200:	80 81       	ld	r24, Z
     202:	98 27       	eor	r25, r24
     204:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     206:	97 ff       	sbrs	r25, 7
     208:	03 c0       	rjmp	.+6      	; 0x210 <crc8Block+0x18>
     20a:	99 0f       	add	r25, r25
     20c:	92 27       	eor	r25, r18
     20e:	01 c0       	rjmp	.+2      	; 0x212 <crc8Block+0x1a>
     210:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     212:	8f 5f       	subi	r24, 0xFF	; 255
     214:	88 30       	cpi	r24, 0x08	; 8
     216:	b9 f7       	brne	.-18     	; 0x206 <crc8Block+0xe>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     218:	31 96       	adiw	r30, 0x01	; 1
     21a:	61 50       	subi	r22, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     21c:	66 23       	and	r22, r22
     21e:	81 f7       	brne	.-32     	; 0x200 <crc8Block+0x8>
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
	}	
	return crc;
}
     220:	89 2f       	mov	r24, r25
     222:	08 95       	ret

00000224 <prepareSystemStatus>:

//prepare TX buffer
void prepareSystemStatus (void)
{
	txBuf[0]='d';
     224:	84 e6       	ldi	r24, 0x64	; 100
     226:	80 93 6c 01 	sts	0x016C, r24
	txBuf[1]= sensorData[0]>>8;
     22a:	90 91 7a 01 	lds	r25, 0x017A
     22e:	80 91 7b 01 	lds	r24, 0x017B
     232:	80 93 6d 01 	sts	0x016D, r24
	txBuf[2]= sensorData[0]&0x00ff;
     236:	90 93 6e 01 	sts	0x016E, r25
	txBuf[3]= sensorData[1]>>8;
     23a:	90 91 7c 01 	lds	r25, 0x017C
     23e:	80 91 7d 01 	lds	r24, 0x017D
     242:	80 93 6f 01 	sts	0x016F, r24
	txBuf[4]= sensorData[1]&0x00ff;
     246:	90 93 70 01 	sts	0x0170, r25
	txBuf[5]= setData[0]>>8;
     24a:	90 91 78 01 	lds	r25, 0x0178
     24e:	80 91 79 01 	lds	r24, 0x0179
     252:	80 93 71 01 	sts	0x0171, r24
	txBuf[6]= setData[0]&0x00ff;
     256:	90 93 72 01 	sts	0x0172, r25
	#if PWM_MODE == 1
		txBuf[7]= getPWM();
	#else
		txBuf[7]=coolerPower;
     25a:	80 91 6b 01 	lds	r24, 0x016B
     25e:	80 93 73 01 	sts	0x0173, r24
	#endif
	txBuf[8]= errorCode;
     262:	80 91 6a 01 	lds	r24, 0x016A
     266:	80 93 74 01 	sts	0x0174, r24
	txBuf[9]= coolerState;
     26a:	80 91 8a 01 	lds	r24, 0x018A
     26e:	80 93 75 01 	sts	0x0175, r24
	txBuf[10]=crc8Block(txBuf,10);
     272:	8c e6       	ldi	r24, 0x6C	; 108
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	6a e0       	ldi	r22, 0x0A	; 10
     278:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <crc8Block>
     27c:	80 93 76 01 	sts	0x0176, r24
}
     280:	08 95       	ret

00000282 <processPacket>:

//process received packet
void processPacket(void)
{
	cli();
     282:	f8 94       	cli
	//check CRC
	if (crc8Block(rxBuf,currentRXPacketLen-1)!=rxBuf[currentRXPacketLen-1])
     284:	60 91 69 01 	lds	r22, 0x0169
     288:	61 50       	subi	r22, 0x01	; 1
     28a:	8e e7       	ldi	r24, 0x7E	; 126
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <crc8Block>
     292:	20 91 69 01 	lds	r18, 0x0169
     296:	e2 2f       	mov	r30, r18
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	e3 58       	subi	r30, 0x83	; 131
     29c:	fe 4f       	sbci	r31, 0xFE	; 254
     29e:	90 81       	ld	r25, Z
     2a0:	89 17       	cp	r24, r25
     2a2:	69 f0       	breq	.+26     	; 0x2be <processPacket+0x3c>
	{
		packetReceived=0;
     2a4:	10 92 68 01 	sts	0x0168, r1
     2a8:	ee e7       	ldi	r30, 0x7E	; 126
     2aa:	f1 e0       	ldi	r31, 0x01	; 1
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     2ac:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     2ae:	41 e0       	ldi	r20, 0x01	; 1
     2b0:	e9 38       	cpi	r30, 0x89	; 137
     2b2:	f4 07       	cpc	r31, r20
     2b4:	d9 f7       	brne	.-10     	; 0x2ac <processPacket+0x2a>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     2b6:	10 92 69 01 	sts	0x0169, r1
	//check CRC
	if (crc8Block(rxBuf,currentRXPacketLen-1)!=rxBuf[currentRXPacketLen-1])
	{
		packetReceived=0;
		clearRXBuf();
		sei();
     2ba:	78 94       	sei
     2bc:	08 95       	ret
		return;
	}
	//differentiate and process packet
	switch (rxBuf[0]) {
     2be:	80 91 7e 01 	lds	r24, 0x017E
     2c2:	89 36       	cpi	r24, 0x69	; 105
     2c4:	99 f1       	breq	.+102    	; 0x32c <processPacket+0xaa>
     2c6:	8a 36       	cpi	r24, 0x6A	; 106
     2c8:	20 f4       	brcc	.+8      	; 0x2d2 <processPacket+0x50>
     2ca:	87 36       	cpi	r24, 0x67	; 103
     2cc:	09 f0       	breq	.+2      	; 0x2d0 <processPacket+0x4e>
     2ce:	57 c0       	rjmp	.+174    	; 0x37e <processPacket+0xfc>
     2d0:	07 c0       	rjmp	.+14     	; 0x2e0 <processPacket+0x5e>
     2d2:	80 37       	cpi	r24, 0x70	; 112
     2d4:	09 f4       	brne	.+2      	; 0x2d8 <processPacket+0x56>
     2d6:	4b c0       	rjmp	.+150    	; 0x36e <processPacket+0xec>
     2d8:	83 37       	cpi	r24, 0x73	; 115
     2da:	09 f0       	breq	.+2      	; 0x2de <processPacket+0x5c>
     2dc:	50 c0       	rjmp	.+160    	; 0x37e <processPacket+0xfc>
     2de:	11 c0       	rjmp	.+34     	; 0x302 <processPacket+0x80>
		//if get command
		case 'g' : 	{
			if (currentRXPacketLen==2)
     2e0:	22 30       	cpi	r18, 0x02	; 2
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <processPacket+0x64>
     2e4:	4c c0       	rjmp	.+152    	; 0x37e <processPacket+0xfc>
			{
				prepareSystemStatus();
     2e6:	0e 94 12 01 	call	0x224	; 0x224 <prepareSystemStatus>
     2ea:	ec e6       	ldi	r30, 0x6C	; 108
     2ec:	f1 e0       	ldi	r31, 0x01	; 1
//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
	uartTransmitByte(txBuf[i]);
     2ee:	80 81       	ld	r24, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     2f0:	5d 9b       	sbis	0x0b, 5	; 11
     2f2:	fe cf       	rjmp	.-4      	; 0x2f0 <processPacket+0x6e>
	UDR = data;
     2f4:	8c b9       	out	0x0c, r24	; 12
     2f6:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	e7 37       	cpi	r30, 0x77	; 119
     2fc:	f8 07       	cpc	r31, r24
     2fe:	b9 f7       	brne	.-18     	; 0x2ee <processPacket+0x6c>
     300:	3e c0       	rjmp	.+124    	; 0x37e <processPacket+0xfc>
			}			
			break;
		}
		//if set command
		case 's' : 	{
			if (currentRXPacketLen==4)
     302:	24 30       	cpi	r18, 0x04	; 4
     304:	e1 f5       	brne	.+120    	; 0x37e <processPacket+0xfc>
			{
				uint16_t val;

				val=(rxBuf[1]<<8)|(rxBuf[2]);
     306:	90 91 7f 01 	lds	r25, 0x017F
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	20 91 80 01 	lds	r18, 0x0180
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	28 2b       	or	r18, r24
     314:	39 2b       	or	r19, r25
				if ((val<=1780)&&(val>=780)) setData[0]=val;
     316:	c9 01       	movw	r24, r18
     318:	8c 50       	subi	r24, 0x0C	; 12
     31a:	93 40       	sbci	r25, 0x03	; 3
     31c:	89 5e       	subi	r24, 0xE9	; 233
     31e:	93 40       	sbci	r25, 0x03	; 3
     320:	70 f5       	brcc	.+92     	; 0x37e <processPacket+0xfc>
     322:	30 93 79 01 	sts	0x0179, r19
     326:	20 93 78 01 	sts	0x0178, r18
     32a:	29 c0       	rjmp	.+82     	; 0x37e <processPacket+0xfc>
			
			break;
		}
		//if info command
		case 'i' :	{
			if (currentRXPacketLen==2)
     32c:	22 30       	cpi	r18, 0x02	; 2
     32e:	39 f5       	brne	.+78     	; 0x37e <processPacket+0xfc>
			{
				txBuf[0]='v';
     330:	86 e7       	ldi	r24, 0x76	; 118
     332:	80 93 6c 01 	sts	0x016C, r24
				txBuf[1]=HW_REVISION;
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	80 93 6d 01 	sts	0x016D, r24
				txBuf[2]=SW_REVISION;
     33c:	80 93 6e 01 	sts	0x016E, r24
				txBuf[3]=SENSOR_COUNT;
     340:	20 93 6f 01 	sts	0x016F, r18
				txBuf[4]=VALUE_COUNT;
     344:	80 93 70 01 	sts	0x0170, r24
				txBuf[5]=crc8Block(txBuf,5);
     348:	8c e6       	ldi	r24, 0x6C	; 108
     34a:	91 e0       	ldi	r25, 0x01	; 1
     34c:	65 e0       	ldi	r22, 0x05	; 5
     34e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <crc8Block>
     352:	80 93 71 01 	sts	0x0171, r24
     356:	ec e6       	ldi	r30, 0x6C	; 108
     358:	f1 e0       	ldi	r31, 0x01	; 1
//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
	uartTransmitByte(txBuf[i]);
     35a:	80 81       	ld	r24, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     35c:	5d 9b       	sbis	0x0b, 5	; 11
     35e:	fe cf       	rjmp	.-4      	; 0x35c <processPacket+0xda>
	UDR = data;
     360:	8c b9       	out	0x0c, r24	; 12
     362:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	e2 37       	cpi	r30, 0x72	; 114
     368:	f8 07       	cpc	r31, r24
     36a:	b9 f7       	brne	.-18     	; 0x35a <processPacket+0xd8>
     36c:	08 c0       	rjmp	.+16     	; 0x37e <processPacket+0xfc>

			break;
		}
		//if powern ON/OFF PWM
		case 'p' : 	{
		if (currentRXPacketLen==3)
     36e:	23 30       	cpi	r18, 0x03	; 3
     370:	31 f4       	brne	.+12     	; 0x37e <processPacket+0xfc>
		{
			if ((rxBuf[1]==COOLER_OFF)||(rxBuf[1]==COOLER_ON))
     372:	80 91 7f 01 	lds	r24, 0x017F
     376:	82 30       	cpi	r24, 0x02	; 2
     378:	10 f4       	brcc	.+4      	; 0x37e <processPacket+0xfc>
			{
				coolerState=rxBuf[1];
     37a:	80 93 8a 01 	sts	0x018A, r24
		default:
		{
			;
		}
	}
	packetReceived=0;
     37e:	10 92 68 01 	sts	0x0168, r1
     382:	ee e7       	ldi	r30, 0x7E	; 126
     384:	f1 e0       	ldi	r31, 0x01	; 1
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     386:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     388:	41 e0       	ldi	r20, 0x01	; 1
     38a:	e9 38       	cpi	r30, 0x89	; 137
     38c:	f4 07       	cpc	r31, r20
     38e:	d9 f7       	brne	.-10     	; 0x386 <processPacket+0x104>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     390:	10 92 69 01 	sts	0x0169, r1
			;
		}
	}
	packetReceived=0;
	clearRXBuf();
	sei();
     394:	78 94       	sei
     396:	08 95       	ret

00000398 <presentDS18b20>:
//DS18B20

uint8_t presentDS18b20(uint8_t sensor_num)
{	uint8_t res, sensor_pin;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     398:	88 23       	and	r24, r24
     39a:	11 f0       	breq	.+4      	; 0x3a0 <presentDS18b20+0x8>
     39c:	43 e0       	ldi	r20, 0x03	; 3
     39e:	01 c0       	rjmp	.+2      	; 0x3a2 <presentDS18b20+0xa>
     3a0:	42 e0       	ldi	r20, 0x02	; 2
	else sensor_pin=SENSOR1_PIN;
	
	SENSOR_DDR|=(1<<sensor_pin);
     3a2:	84 b3       	in	r24, 0x14	; 20
     3a4:	21 e0       	ldi	r18, 0x01	; 1
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	92 2f       	mov	r25, r18
     3aa:	04 2e       	mov	r0, r20
     3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <presentDS18b20+0x18>
     3ae:	99 0f       	add	r25, r25
     3b0:	0a 94       	dec	r0
     3b2:	ea f7       	brpl	.-6      	; 0x3ae <presentDS18b20+0x16>
     3b4:	89 2b       	or	r24, r25
     3b6:	84 bb       	out	0x14, r24	; 20
     3b8:	e0 ec       	ldi	r30, 0xC0	; 192
     3ba:	f3 e0       	ldi	r31, 0x03	; 3
     3bc:	31 97       	sbiw	r30, 0x01	; 1
     3be:	f1 f7       	brne	.-4      	; 0x3bc <presentDS18b20+0x24>
	_delay_us (480);

	SENSOR_DDR&=~(1<<sensor_pin);
     3c0:	84 b3       	in	r24, 0x14	; 20
     3c2:	90 95       	com	r25
     3c4:	98 23       	and	r25, r24
     3c6:	94 bb       	out	0x14, r25	; 20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3c8:	8a eb       	ldi	r24, 0xBA	; 186
     3ca:	8a 95       	dec	r24
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <presentDS18b20+0x32>
	_delay_us(70);
	
	if ((SENSOR_PIN&(1<<sensor_pin)) == 0x00) res=1;  
     3ce:	83 b3       	in	r24, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3d0:	e4 e3       	ldi	r30, 0x34	; 52
     3d2:	f3 e0       	ldi	r31, 0x03	; 3
     3d4:	31 97       	sbiw	r30, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <presentDS18b20+0x3c>
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <presentDS18b20+0x48>
     3dc:	95 95       	asr	r25
     3de:	87 95       	ror	r24
     3e0:	4a 95       	dec	r20
     3e2:	e2 f7       	brpl	.-8      	; 0x3dc <presentDS18b20+0x44>
     3e4:	82 27       	eor	r24, r18
     3e6:	93 27       	eor	r25, r19
	else res=0;  
	
	_delay_us(410);
	return res;
}
     3e8:	81 70       	andi	r24, 0x01	; 1
     3ea:	08 95       	ret

000003ec <sendDS18b20>:

void sendDS18b20(uint8_t command, uint8_t sensor_num)
{	uint8_t i, data, sensor_pin;
     3ec:	48 2f       	mov	r20, r24

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     3ee:	66 23       	and	r22, r22
     3f0:	11 f0       	breq	.+4      	; 0x3f6 <sendDS18b20+0xa>
     3f2:	23 e0       	ldi	r18, 0x03	; 3
     3f4:	01 c0       	rjmp	.+2      	; 0x3f8 <sendDS18b20+0xc>
     3f6:	22 e0       	ldi	r18, 0x02	; 2
	data=command;

	for(i=0;i<8;i++)
	{
		if ((data&0x01)==0x01) {    //Send 1 on SDA
			SENSOR_DDR|=(1<<sensor_pin);
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	38 2f       	mov	r19, r24
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <sendDS18b20+0x16>
     400:	33 0f       	add	r19, r19
     402:	2a 95       	dec	r18
     404:	ea f7       	brpl	.-6      	; 0x400 <sendDS18b20+0x14>
			_delay_us(6);
			SENSOR_DDR&=~(1<<sensor_pin);
     406:	53 2f       	mov	r21, r19
     408:	50 95       	com	r21
     40a:	24 2f       	mov	r18, r20
     40c:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     40e:	e0 ea       	ldi	r30, 0xA0	; 160
	else sensor_pin=SENSOR1_PIN;
	data=command;

	for(i=0;i<8;i++)
	{
		if ((data&0x01)==0x01) {    //Send 1 on SDA
     410:	7a e1       	ldi	r23, 0x1A	; 26
     412:	60 e1       	ldi	r22, 0x10	; 16
     414:	4a ea       	ldi	r20, 0xAA	; 170
     416:	20 ff       	sbrs	r18, 0
     418:	0b c0       	rjmp	.+22     	; 0x430 <sendDS18b20+0x44>
			SENSOR_DDR|=(1<<sensor_pin);
     41a:	84 b3       	in	r24, 0x14	; 20
     41c:	83 2b       	or	r24, r19
     41e:	84 bb       	out	0x14, r24	; 20
     420:	86 2f       	mov	r24, r22
     422:	8a 95       	dec	r24
     424:	f1 f7       	brne	.-4      	; 0x422 <sendDS18b20+0x36>
			_delay_us(6);
			SENSOR_DDR&=~(1<<sensor_pin);
     426:	84 b3       	in	r24, 0x14	; 20
     428:	85 23       	and	r24, r21
     42a:	84 bb       	out	0x14, r24	; 20
     42c:	84 2f       	mov	r24, r20
     42e:	0a c0       	rjmp	.+20     	; 0x444 <sendDS18b20+0x58>
			_delay_us(64);
		}
		else {                   	//Send 0 on SDA
			SENSOR_DDR|=(1<<sensor_pin);
     430:	84 b3       	in	r24, 0x14	; 20
     432:	83 2b       	or	r24, r19
     434:	84 bb       	out	0x14, r24	; 20
     436:	8e 2f       	mov	r24, r30
     438:	8a 95       	dec	r24
     43a:	f1 f7       	brne	.-4      	; 0x438 <sendDS18b20+0x4c>
			_delay_us(60);
			SENSOR_DDR&=~(1<<sensor_pin);
     43c:	84 b3       	in	r24, 0x14	; 20
     43e:	85 23       	and	r24, r21
     440:	84 bb       	out	0x14, r24	; 20
     442:	87 2f       	mov	r24, r23
     444:	8a 95       	dec	r24
     446:	f1 f7       	brne	.-4      	; 0x444 <sendDS18b20+0x58>

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;
	data=command;

	for(i=0;i<8;i++)
     448:	9f 5f       	subi	r25, 0xFF	; 255
     44a:	98 30       	cpi	r25, 0x08	; 8
     44c:	11 f0       	breq	.+4      	; 0x452 <sendDS18b20+0x66>
			SENSOR_DDR|=(1<<sensor_pin);
			_delay_us(60);
			SENSOR_DDR&=~(1<<sensor_pin);
			_delay_us(10);
		}
		data=data>>1;
     44e:	26 95       	lsr	r18
     450:	e2 cf       	rjmp	.-60     	; 0x416 <sendDS18b20+0x2a>
     452:	08 95       	ret

00000454 <receiveDS18b20>:
	}
	return;
}

uint16_t receiveDS18b20(uint8_t sensor_num)
{	uint8_t i, sensor_pin;
     454:	ff 92       	push	r15
     456:	0f 93       	push	r16
     458:	1f 93       	push	r17
	uint16_t res=0;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     45a:	88 23       	and	r24, r24
     45c:	11 f0       	breq	.+4      	; 0x462 <__stack+0x3>
     45e:	83 e0       	ldi	r24, 0x03	; 3
     460:	01 c0       	rjmp	.+2      	; 0x464 <__stack+0x5>
     462:	82 e0       	ldi	r24, 0x02	; 2
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
	{
		SENSOR_DDR|=(1<<sensor_pin);		
     464:	61 e0       	ldi	r22, 0x01	; 1
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	02 c0       	rjmp	.+4      	; 0x46e <__stack+0xf>
     46a:	66 0f       	add	r22, r22
     46c:	77 1f       	adc	r23, r23
     46e:	8a 95       	dec	r24
     470:	e2 f7       	brpl	.-8      	; 0x46a <__stack+0xb>
     472:	a6 2f       	mov	r26, r22
		_delay_us(6);
		SENSOR_DDR&=~(1<<sensor_pin);		
     474:	b6 2f       	mov	r27, r22
     476:	b0 95       	com	r27
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	40 e0       	ldi	r20, 0x00	; 0
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	80 e1       	ldi	r24, 0x10	; 16
     482:	f8 2e       	mov	r15, r24
		_delay_us(9);

		if ((SENSOR_PIN & (1<<sensor_pin))==0x00) res&=~_BV(i);	//If 0 on SDA
		else 	res|=_BV(i);	    //IF 1 on SDA
     484:	08 e1       	ldi	r16, 0x18	; 24
     486:	e1 e0       	ldi	r30, 0x01	; 1
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	12 e9       	ldi	r17, 0x92	; 146
	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
	{
		SENSOR_DDR|=(1<<sensor_pin);		
     48c:	84 b3       	in	r24, 0x14	; 20
     48e:	8a 2b       	or	r24, r26
     490:	84 bb       	out	0x14, r24	; 20
     492:	8f 2d       	mov	r24, r15
     494:	8a 95       	dec	r24
     496:	f1 f7       	brne	.-4      	; 0x494 <__stack+0x35>
		_delay_us(6);
		SENSOR_DDR&=~(1<<sensor_pin);		
     498:	84 b3       	in	r24, 0x14	; 20
     49a:	8b 23       	and	r24, r27
     49c:	84 bb       	out	0x14, r24	; 20
     49e:	80 2f       	mov	r24, r16
     4a0:	8a 95       	dec	r24
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <__stack+0x41>
		_delay_us(9);

		if ((SENSOR_PIN & (1<<sensor_pin))==0x00) res&=~_BV(i);	//If 0 on SDA
     4a4:	83 b3       	in	r24, 0x13	; 19
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	86 23       	and	r24, r22
     4aa:	97 23       	and	r25, r23
     4ac:	89 2b       	or	r24, r25
     4ae:	61 f4       	brne	.+24     	; 0x4c8 <__stack+0x69>
     4b0:	cf 01       	movw	r24, r30
     4b2:	04 2e       	mov	r0, r20
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__stack+0x5b>
     4b6:	88 0f       	add	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	0a 94       	dec	r0
     4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <__stack+0x57>
     4be:	80 95       	com	r24
     4c0:	90 95       	com	r25
     4c2:	28 23       	and	r18, r24
     4c4:	39 23       	and	r19, r25
     4c6:	09 c0       	rjmp	.+18     	; 0x4da <__stack+0x7b>
		else 	res|=_BV(i);	    //IF 1 on SDA
     4c8:	cf 01       	movw	r24, r30
     4ca:	04 2e       	mov	r0, r20
     4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <__stack+0x73>
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	0a 94       	dec	r0
     4d4:	e2 f7       	brpl	.-8      	; 0x4ce <__stack+0x6f>
     4d6:	28 2b       	or	r18, r24
     4d8:	39 2b       	or	r19, r25
     4da:	81 2f       	mov	r24, r17
     4dc:	8a 95       	dec	r24
     4de:	f1 f7       	brne	.-4      	; 0x4dc <__stack+0x7d>
     4e0:	4f 5f       	subi	r20, 0xFF	; 255
     4e2:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t res=0;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
     4e4:	40 31       	cpi	r20, 0x10	; 16
     4e6:	51 05       	cpc	r21, r1
     4e8:	89 f6       	brne	.-94     	; 0x48c <__stack+0x2d>
		else 	res|=_BV(i);	    //IF 1 on SDA
				
		_delay_us(55);
	}
	return res;
}
     4ea:	c9 01       	movw	r24, r18
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	ff 90       	pop	r15
     4f2:	08 95       	ret

000004f4 <my_delay_ms>:

void my_delay_ms (uint8_t ms)
{
     4f4:	af 92       	push	r10
     4f6:	bf 92       	push	r11
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
	uint8_t i;
	if (ms>20)
     504:	85 31       	cpi	r24, 0x15	; 21
     506:	60 f0       	brcs	.+24     	; 0x520 <my_delay_ms+0x2c>
     508:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     50a:	20 e4       	ldi	r18, 0x40	; 64
     50c:	3c e9       	ldi	r19, 0x9C	; 156
     50e:	f9 01       	movw	r30, r18
     510:	31 97       	sbiw	r30, 0x01	; 1
     512:	f1 f7       	brne	.-4      	; 0x510 <my_delay_ms+0x1c>
	{
		for (i=0;i<200;i++)
		{
			_delay_ms(20);
			ms-=20;
     514:	84 51       	subi	r24, 0x14	; 20
			if (ms<20) break;
     516:	84 31       	cpi	r24, 0x14	; 20
     518:	18 f0       	brcs	.+6      	; 0x520 <my_delay_ms+0x2c>
void my_delay_ms (uint8_t ms)
{
	uint8_t i;
	if (ms>20)
	{
		for (i=0;i<200;i++)
     51a:	9f 5f       	subi	r25, 0xFF	; 255
     51c:	98 3c       	cpi	r25, 0xC8	; 200
     51e:	b9 f7       	brne	.-18     	; 0x50e <my_delay_ms+0x1a>
			_delay_ms(20);
			ms-=20;
			if (ms<20) break;
		}
	}
	_delay_ms(ms);
     520:	68 2f       	mov	r22, r24
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	0e 94 65 08 	call	0x10ca	; 0x10ca <__floatunsisf>
     52c:	5b 01       	movw	r10, r22
     52e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	4a ef       	ldi	r20, 0xFA	; 250
     536:	54 e4       	ldi	r21, 0x44	; 68
     538:	0e 94 57 06 	call	0xcae	; 0xcae <__mulsf3>
     53c:	7b 01       	movw	r14, r22
     53e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	40 e8       	ldi	r20, 0x80	; 128
     546:	5f e3       	ldi	r21, 0x3F	; 63
     548:	0e 94 b1 07 	call	0xf62	; 0xf62 <__ltsf2>
     54c:	88 23       	and	r24, r24
     54e:	1c f4       	brge	.+6      	; 0x556 <my_delay_ms+0x62>
     550:	61 e0       	ldi	r22, 0x01	; 1
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	24 c0       	rjmp	.+72     	; 0x59e <my_delay_ms+0xaa>
		__ticks = 1;
	else if (__tmp > 65535)
     556:	c8 01       	movw	r24, r16
     558:	b7 01       	movw	r22, r14
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	3f ef       	ldi	r19, 0xFF	; 255
     55e:	4f e7       	ldi	r20, 0x7F	; 127
     560:	57 e4       	ldi	r21, 0x47	; 71
     562:	0e 94 51 07 	call	0xea2	; 0xea2 <__gtsf2>
     566:	18 16       	cp	r1, r24
     568:	b4 f4       	brge	.+44     	; 0x596 <my_delay_ms+0xa2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     56a:	c6 01       	movw	r24, r12
     56c:	b5 01       	movw	r22, r10
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	40 e2       	ldi	r20, 0x20	; 32
     574:	51 e4       	ldi	r21, 0x41	; 65
     576:	0e 94 57 06 	call	0xcae	; 0xcae <__mulsf3>
     57a:	0e 94 81 04 	call	0x902	; 0x902 <__fixunssfsi>
     57e:	88 ec       	ldi	r24, 0xC8	; 200
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	05 c0       	rjmp	.+10     	; 0x58e <my_delay_ms+0x9a>
     584:	fc 01       	movw	r30, r24
     586:	31 97       	sbiw	r30, 0x01	; 1
     588:	f1 f7       	brne	.-4      	; 0x586 <my_delay_ms+0x92>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     58a:	61 50       	subi	r22, 0x01	; 1
     58c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     58e:	61 15       	cp	r22, r1
     590:	71 05       	cpc	r23, r1
     592:	c1 f7       	brne	.-16     	; 0x584 <my_delay_ms+0x90>
     594:	07 c0       	rjmp	.+14     	; 0x5a4 <my_delay_ms+0xb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     596:	c8 01       	movw	r24, r16
     598:	b7 01       	movw	r22, r14
     59a:	0e 94 81 04 	call	0x902	; 0x902 <__fixunssfsi>
     59e:	cb 01       	movw	r24, r22
     5a0:	01 97       	sbiw	r24, 0x01	; 1
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <my_delay_ms+0xac>
}
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	ff 90       	pop	r15
     5aa:	ef 90       	pop	r14
     5ac:	df 90       	pop	r13
     5ae:	cf 90       	pop	r12
     5b0:	bf 90       	pop	r11
     5b2:	af 90       	pop	r10
     5b4:	08 95       	ret

000005b6 <main>:
//------------------------------------------------------------------------------------
int main(void)
{
     5b6:	af 92       	push	r10
     5b8:	bf 92       	push	r11
     5ba:	cf 92       	push	r12
     5bc:	df 92       	push	r13
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
	//read from EEPROM saved value & coolerState state
	#if STANDALONE_MODE == 1
		setData[0]= eeprom_read_word (&savedSetData);
		coolerState = eeprom_read_byte(&savedCoolerState);
	#else
		setData[0]=1730;
     5ca:	82 ec       	ldi	r24, 0xC2	; 194
     5cc:	96 e0       	ldi	r25, 0x06	; 6
     5ce:	90 93 79 01 	sts	0x0179, r25
     5d2:	80 93 78 01 	sts	0x0178, r24
		coolerState=COOLER_OFF;
     5d6:	10 92 8a 01 	sts	0x018A, r1
	#endif
	//init variables
	for (i=0;i<SENSOR_COUNT;i++)
		sensorData[i]=0;
     5da:	10 92 7b 01 	sts	0x017B, r1
     5de:	10 92 7a 01 	sts	0x017A, r1
     5e2:	10 92 7d 01 	sts	0x017D, r1
     5e6:	10 92 7c 01 	sts	0x017C, r1
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	90 e0       	ldi	r25, 0x00	; 0

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=txBuf[i]=0;
     5ee:	fc 01       	movw	r30, r24
     5f0:	e4 59       	subi	r30, 0x94	; 148
     5f2:	fe 4f       	sbci	r31, 0xFE	; 254
     5f4:	10 82       	st	Z, r1
     5f6:	fc 01       	movw	r30, r24
     5f8:	e2 58       	subi	r30, 0x82	; 130
     5fa:	fe 4f       	sbci	r31, 0xFE	; 254
     5fc:	10 82       	st	Z, r1
     5fe:	01 96       	adiw	r24, 0x01	; 1
}

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     600:	8b 30       	cpi	r24, 0x0B	; 11
     602:	91 05       	cpc	r25, r1
     604:	a1 f7       	brne	.-24     	; 0x5ee <main+0x38>
	#endif
	//init variables
	for (i=0;i<SENSOR_COUNT;i++)
		sensorData[i]=0;
	clearBuf ();
	U=0.0;
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	80 93 8f 01 	sts	0x018F, r24
     612:	90 93 90 01 	sts	0x0190, r25
     616:	a0 93 91 01 	sts	0x0191, r26
     61a:	b0 93 92 01 	sts	0x0192, r27
	E=0;
     61e:	80 93 8b 01 	sts	0x018B, r24
     622:	90 93 8c 01 	sts	0x018C, r25
     626:	a0 93 8d 01 	sts	0x018D, r26
     62a:	b0 93 8e 01 	sts	0x018E, r27
	//Init ports, UART, PWM
	SENSOR_PORT&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));     	
     62e:	85 b3       	in	r24, 0x15	; 21
     630:	83 7f       	andi	r24, 0xF3	; 243
     632:	85 bb       	out	0x15, r24	; 21
	SENSOR_DDR&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));		
     634:	84 b3       	in	r24, 0x14	; 20
     636:	83 7f       	andi	r24, 0xF3	; 243
     638:	84 bb       	out	0x14, r24	; 20

	#if PWM_MODE == 1
		initPWM();
	#else
		TEC_PORT&=~(1<<TEC_PIN);
     63a:	95 98       	cbi	0x12, 5	; 18
		TEC_DDR|=(1<<TEC_PIN);
     63c:	8d 9a       	sbi	0x11, 5	; 17
//------------------------------------------------------------------------------------
//UART

void uartInit(void)
{
	UBRRH = UART_BAUDRATE_H;		// Init UART baudrate
     63e:	10 bc       	out	0x20, r1	; 32
	UBRRL = UART_BAUDRATE_L;
     640:	83 e3       	ldi	r24, 0x33	; 51
     642:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1<<RXEN)|(1<<TXEN)|(1 << RXCIE);	// TX, RX enable, RX interrupt enable
     644:	88 e9       	ldi	r24, 0x98	; 152
     646:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
     648:	86 e8       	ldi	r24, 0x86	; 134
     64a:	80 bd       	out	0x20, r24	; 32
	#else
		TEC_PORT&=~(1<<TEC_PIN);
		TEC_DDR|=(1<<TEC_PIN);
	#endif
	uartInit();	
	sei();
     64c:	78 94       	sei
     64e:	11 e0       	ldi	r17, 0x01	; 1
			{
				sendDS18b20(SKIP_ROM,i);
				sendDS18b20(START_CONVERSION,i);
				errorCode=0;
			}
			else errorCode|=(1<<i);
     650:	b1 e0       	ldi	r27, 0x01	; 1
     652:	cb 2e       	mov	r12, r27
     654:	d1 2c       	mov	r13, r1
					if ((val&0x01)!=0x00) fract=fract+65;
					if ((val&0x02)!=0x00) fract=fract+125;
					if ((val&0x04)!=0x00) fract=fract+250;
					if ((val&0x08)!=0x00) fract=fract+500;
					val=(val>>4)*10+fract/100;
					if (sign==1) val=OFFSET-val;
     656:	a1 2c       	mov	r10, r1
     658:	a5 e0       	ldi	r26, 0x05	; 5
     65a:	ba 2e       	mov	r11, r26
     65c:	01 c0       	rjmp	.+2      	; 0x660 <main+0xaa>
	#else
		TEC_PORT&=~(1<<TEC_PIN);
		TEC_DDR|=(1<<TEC_PIN);
	#endif
	uartInit();	
	sei();
     65e:	10 e0       	ldi	r17, 0x00	; 0

//##############################################################
	#if SLOW_PWM_MODE == 1
	while (1)
	{
		if (packetReceived!=0) processPacket();
     660:	80 91 68 01 	lds	r24, 0x0168
     664:	88 23       	and	r24, r24
     666:	11 f0       	breq	.+4      	; 0x66c <main+0xb6>
     668:	0e 94 41 01 	call	0x282	; 0x282 <processPacket>
		errorCode=0;
     66c:	10 92 6a 01 	sts	0x016A, r1
     670:	c0 e0       	ldi	r28, 0x00	; 0
     672:	d0 e0       	ldi	r29, 0x00	; 0
		for (i=0;i<SENSOR_COUNT;i++)
		{
			if (presentDS18b20(i)==1)
     674:	8c 2f       	mov	r24, r28
     676:	0e 94 cc 01 	call	0x398	; 0x398 <presentDS18b20>
     67a:	81 30       	cpi	r24, 0x01	; 1
     67c:	59 f4       	brne	.+22     	; 0x694 <main+0xde>
			{
				sendDS18b20(SKIP_ROM,i);
     67e:	8c ec       	ldi	r24, 0xCC	; 204
     680:	6c 2f       	mov	r22, r28
     682:	0e 94 f6 01 	call	0x3ec	; 0x3ec <sendDS18b20>
				sendDS18b20(START_CONVERSION,i);
     686:	84 e4       	ldi	r24, 0x44	; 68
     688:	6c 2f       	mov	r22, r28
     68a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <sendDS18b20>
				errorCode=0;
     68e:	10 92 6a 01 	sts	0x016A, r1
     692:	0c c0       	rjmp	.+24     	; 0x6ac <main+0xf6>
			}
			else errorCode|=(1<<i);
     694:	96 01       	movw	r18, r12
     696:	0c 2e       	mov	r0, r28
     698:	02 c0       	rjmp	.+4      	; 0x69e <main+0xe8>
     69a:	22 0f       	add	r18, r18
     69c:	33 1f       	adc	r19, r19
     69e:	0a 94       	dec	r0
     6a0:	e2 f7       	brpl	.-8      	; 0x69a <main+0xe4>
     6a2:	80 91 6a 01 	lds	r24, 0x016A
     6a6:	82 2b       	or	r24, r18
     6a8:	80 93 6a 01 	sts	0x016A, r24
     6ac:	21 96       	adiw	r28, 0x01	; 1
	#if SLOW_PWM_MODE == 1
	while (1)
	{
		if (packetReceived!=0) processPacket();
		errorCode=0;
		for (i=0;i<SENSOR_COUNT;i++)
     6ae:	c2 30       	cpi	r28, 0x02	; 2
     6b0:	d1 05       	cpc	r29, r1
     6b2:	01 f7       	brne	.-64     	; 0x674 <main+0xbe>
				sendDS18b20(START_CONVERSION,i);
				errorCode=0;
			}
			else errorCode|=(1<<i);
		}
		if (firstConv==_YES) firstConv=_NO;
     6b4:	11 30       	cpi	r17, 0x01	; 1
     6b6:	99 f2       	breq	.-90     	; 0x65e <main+0xa8>
     6b8:	0a e7       	ldi	r16, 0x7A	; 122
     6ba:	11 e0       	ldi	r17, 0x01	; 1
     6bc:	c0 e0       	ldi	r28, 0x00	; 0
     6be:	d0 e0       	ldi	r29, 0x00	; 0
		else
		{		 
			//receive measured data from sensors
			for (i=0;i<SENSOR_COUNT;i++)
			{
				if (presentDS18b20(i)==1)
     6c0:	8c 2f       	mov	r24, r28
     6c2:	0e 94 cc 01 	call	0x398	; 0x398 <presentDS18b20>
     6c6:	81 30       	cpi	r24, 0x01	; 1
     6c8:	09 f0       	breq	.+2      	; 0x6cc <main+0x116>
     6ca:	49 c0       	rjmp	.+146    	; 0x75e <main+0x1a8>
				{
					sendDS18b20(SKIP_ROM,i);
     6cc:	8c ec       	ldi	r24, 0xCC	; 204
     6ce:	6c 2f       	mov	r22, r28
     6d0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <sendDS18b20>
					sendDS18b20(GET_DATA,i);
     6d4:	8e eb       	ldi	r24, 0xBE	; 190
     6d6:	6c 2f       	mov	r22, r28
     6d8:	0e 94 f6 01 	call	0x3ec	; 0x3ec <sendDS18b20>
					val=receiveDS18b20(i);
     6dc:	8c 2f       	mov	r24, r28
     6de:	0e 94 2a 02 	call	0x454	; 0x454 <receiveDS18b20>
					if ((val&0x8000)!=0x00)
     6e2:	97 fd       	sbrc	r25, 7
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <main+0x134>
     6e6:	e0 e0       	ldi	r30, 0x00	; 0
     6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <main+0x13c>
					{
						sign=1;
						val=0xffff-val+1;
     6ea:	90 95       	com	r25
     6ec:	81 95       	neg	r24
     6ee:	9f 4f       	sbci	r25, 0xFF	; 255
     6f0:	e1 e0       	ldi	r30, 0x01	; 1
					}
					else sign=0;
					fract=0;
					if ((val&0x01)!=0x00) fract=fract+65;
     6f2:	80 fd       	sbrc	r24, 0
     6f4:	03 c0       	rjmp	.+6      	; 0x6fc <main+0x146>
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	02 c0       	rjmp	.+4      	; 0x700 <main+0x14a>
     6fc:	41 e4       	ldi	r20, 0x41	; 65
     6fe:	50 e0       	ldi	r21, 0x00	; 0
					if ((val&0x02)!=0x00) fract=fract+125;
     700:	81 ff       	sbrs	r24, 1
     702:	02 c0       	rjmp	.+4      	; 0x708 <main+0x152>
     704:	43 58       	subi	r20, 0x83	; 131
     706:	5f 4f       	sbci	r21, 0xFF	; 255
					if ((val&0x04)!=0x00) fract=fract+250;
     708:	82 ff       	sbrs	r24, 2
     70a:	02 c0       	rjmp	.+4      	; 0x710 <main+0x15a>
     70c:	46 50       	subi	r20, 0x06	; 6
     70e:	5f 4f       	sbci	r21, 0xFF	; 255
					if ((val&0x08)!=0x00) fract=fract+500;
     710:	83 ff       	sbrs	r24, 3
     712:	02 c0       	rjmp	.+4      	; 0x718 <main+0x162>
     714:	4c 50       	subi	r20, 0x0C	; 12
     716:	5e 4f       	sbci	r21, 0xFE	; 254
					val=(val>>4)*10+fract/100;
     718:	f4 e0       	ldi	r31, 0x04	; 4
     71a:	96 95       	lsr	r25
     71c:	87 95       	ror	r24
     71e:	fa 95       	dec	r31
     720:	e1 f7       	brne	.-8      	; 0x71a <main+0x164>
     722:	9c 01       	movw	r18, r24
     724:	73 e0       	ldi	r23, 0x03	; 3
     726:	22 0f       	add	r18, r18
     728:	33 1f       	adc	r19, r19
     72a:	7a 95       	dec	r23
     72c:	e1 f7       	brne	.-8      	; 0x726 <main+0x170>
     72e:	88 0f       	add	r24, r24
     730:	99 1f       	adc	r25, r25
     732:	28 0f       	add	r18, r24
     734:	39 1f       	adc	r19, r25
     736:	ca 01       	movw	r24, r20
     738:	64 e6       	ldi	r22, 0x64	; 100
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__udivmodhi4>
     740:	62 0f       	add	r22, r18
     742:	73 1f       	adc	r23, r19
					if (sign==1) val=OFFSET-val;
     744:	e1 30       	cpi	r30, 0x01	; 1
     746:	29 f4       	brne	.+10     	; 0x752 <main+0x19c>
     748:	c5 01       	movw	r24, r10
     74a:	86 1b       	sub	r24, r22
     74c:	97 0b       	sbc	r25, r23
     74e:	bc 01       	movw	r22, r24
     750:	02 c0       	rjmp	.+4      	; 0x756 <main+0x1a0>
					else val=val+OFFSET;
     752:	60 50       	subi	r22, 0x00	; 0
     754:	7b 4f       	sbci	r23, 0xFB	; 251
					sensorData[i]=val;
     756:	f8 01       	movw	r30, r16
     758:	71 83       	std	Z+1, r23	; 0x01
     75a:	60 83       	st	Z, r22
     75c:	0c c0       	rjmp	.+24     	; 0x776 <main+0x1c0>
				}
				else errorCode|=(1<<i);
     75e:	96 01       	movw	r18, r12
     760:	0c 2e       	mov	r0, r28
     762:	02 c0       	rjmp	.+4      	; 0x768 <main+0x1b2>
     764:	22 0f       	add	r18, r18
     766:	33 1f       	adc	r19, r19
     768:	0a 94       	dec	r0
     76a:	e2 f7       	brpl	.-8      	; 0x764 <main+0x1ae>
     76c:	80 91 6a 01 	lds	r24, 0x016A
     770:	82 2b       	or	r24, r18
     772:	80 93 6a 01 	sts	0x016A, r24
     776:	21 96       	adiw	r28, 0x01	; 1
     778:	0e 5f       	subi	r16, 0xFE	; 254
     77a:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		if (firstConv==_YES) firstConv=_NO;
		else
		{		 
			//receive measured data from sensors
			for (i=0;i<SENSOR_COUNT;i++)
     77c:	c2 30       	cpi	r28, 0x02	; 2
     77e:	d1 05       	cpc	r29, r1
     780:	09 f0       	breq	.+2      	; 0x784 <main+0x1ce>
     782:	9e cf       	rjmp	.-196    	; 0x6c0 <main+0x10a>
					sensorData[i]=val;
				}
				else errorCode|=(1<<i);
			}
			//if coolerState is OFF - clear all variables
			if (coolerState==COOLER_OFF) 
     784:	80 91 8a 01 	lds	r24, 0x018A
     788:	88 23       	and	r24, r24
     78a:	b9 f4       	brne	.+46     	; 0x7ba <main+0x204>
			{
				coolerPower=0x00;
     78c:	10 92 6b 01 	sts	0x016B, r1
				U=0.0;
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	a0 e0       	ldi	r26, 0x00	; 0
     796:	b0 e0       	ldi	r27, 0x00	; 0
     798:	80 93 8f 01 	sts	0x018F, r24
     79c:	90 93 90 01 	sts	0x0190, r25
     7a0:	a0 93 91 01 	sts	0x0191, r26
     7a4:	b0 93 92 01 	sts	0x0192, r27
				E=0.0;
     7a8:	80 93 8b 01 	sts	0x018B, r24
     7ac:	90 93 8c 01 	sts	0x018C, r25
     7b0:	a0 93 8d 01 	sts	0x018D, r26
     7b4:	b0 93 8e 01 	sts	0x018E, r27
     7b8:	52 cf       	rjmp	.-348    	; 0x65e <main+0xa8>
			}
			//If no errors at sensor[0] and coolerState is ON - calculate and set software PWM
			if (coolerState==COOLER_ON)
     7ba:	81 30       	cpi	r24, 0x01	; 1
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <main+0x20a>
     7be:	4f cf       	rjmp	.-354    	; 0x65e <main+0xa8>
				{
					E=(double) sensorData[0]-setData[0];
     7c0:	60 91 7a 01 	lds	r22, 0x017A
     7c4:	70 91 7b 01 	lds	r23, 0x017B
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 65 08 	call	0x10ca	; 0x10ca <__floatunsisf>
     7d0:	7b 01       	movw	r14, r22
     7d2:	8c 01       	movw	r16, r24
     7d4:	60 91 78 01 	lds	r22, 0x0178
     7d8:	70 91 79 01 	lds	r23, 0x0179
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 65 08 	call	0x10ca	; 0x10ca <__floatunsisf>
     7e4:	9b 01       	movw	r18, r22
     7e6:	ac 01       	movw	r20, r24
     7e8:	c8 01       	movw	r24, r16
     7ea:	b7 01       	movw	r22, r14
     7ec:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__subsf3>
     7f0:	60 93 8b 01 	sts	0x018B, r22
     7f4:	70 93 8c 01 	sts	0x018C, r23
     7f8:	80 93 8d 01 	sts	0x018D, r24
     7fc:	90 93 8e 01 	sts	0x018E, r25

					U=U+KPSLOW*E;
     800:	2f e6       	ldi	r18, 0x6F	; 111
     802:	32 e1       	ldi	r19, 0x12	; 18
     804:	43 e0       	ldi	r20, 0x03	; 3
     806:	5b e3       	ldi	r21, 0x3B	; 59
     808:	0e 94 57 06 	call	0xcae	; 0xcae <__mulsf3>
     80c:	20 91 8f 01 	lds	r18, 0x018F
     810:	30 91 90 01 	lds	r19, 0x0190
     814:	40 91 91 01 	lds	r20, 0x0191
     818:	50 91 92 01 	lds	r21, 0x0192
     81c:	0e 94 2a 06 	call	0xc54	; 0xc54 <__addsf3>
     820:	60 93 8f 01 	sts	0x018F, r22
     824:	70 93 90 01 	sts	0x0190, r23
     828:	80 93 91 01 	sts	0x0191, r24
     82c:	90 93 92 01 	sts	0x0192, r25

					if (U>255.0) 	U=255.0;
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	4f e7       	ldi	r20, 0x7F	; 127
     836:	53 e4       	ldi	r21, 0x43	; 67
     838:	0e 94 51 07 	call	0xea2	; 0xea2 <__gtsf2>
     83c:	18 16       	cp	r1, r24
     83e:	64 f4       	brge	.+24     	; 0x858 <main+0x2a2>
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	af e7       	ldi	r26, 0x7F	; 127
     846:	b3 e4       	ldi	r27, 0x43	; 67
     848:	80 93 8f 01 	sts	0x018F, r24
     84c:	90 93 90 01 	sts	0x0190, r25
     850:	a0 93 91 01 	sts	0x0191, r26
     854:	b0 93 92 01 	sts	0x0192, r27
					if (U<=0.0) 	U=0.0;		
     858:	60 91 8f 01 	lds	r22, 0x018F
     85c:	70 91 90 01 	lds	r23, 0x0190
     860:	80 91 91 01 	lds	r24, 0x0191
     864:	90 91 92 01 	lds	r25, 0x0192
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__lesf2>
     874:	18 16       	cp	r1, r24
     876:	64 f0       	brlt	.+24     	; 0x890 <main+0x2da>
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	a0 e0       	ldi	r26, 0x00	; 0
     87e:	b0 e0       	ldi	r27, 0x00	; 0
     880:	80 93 8f 01 	sts	0x018F, r24
     884:	90 93 90 01 	sts	0x0190, r25
     888:	a0 93 91 01 	sts	0x0191, r26
     88c:	b0 93 92 01 	sts	0x0192, r27
					
					if (U>0.0) TEC_PORT|=(1<<TEC_PIN);	
     890:	e0 90 8f 01 	lds	r14, 0x018F
     894:	f0 90 90 01 	lds	r15, 0x0190
     898:	00 91 91 01 	lds	r16, 0x0191
     89c:	10 91 92 01 	lds	r17, 0x0192
     8a0:	c8 01       	movw	r24, r16
     8a2:	b7 01       	movw	r22, r14
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	40 e0       	ldi	r20, 0x00	; 0
     8aa:	50 e0       	ldi	r21, 0x00	; 0
     8ac:	0e 94 51 07 	call	0xea2	; 0xea2 <__gtsf2>
     8b0:	18 16       	cp	r1, r24
     8b2:	0c f4       	brge	.+2      	; 0x8b6 <main+0x300>
     8b4:	95 9a       	sbi	0x12, 5	; 18
					my_delay_ms((uint8_t)U);								
     8b6:	c8 01       	movw	r24, r16
     8b8:	b7 01       	movw	r22, r14
     8ba:	0e 94 81 04 	call	0x902	; 0x902 <__fixunssfsi>
     8be:	dc 01       	movw	r26, r24
     8c0:	cb 01       	movw	r24, r22
     8c2:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <my_delay_ms>
					if (((uint8_t) U)!=255)TEC_PORT&=~(1<<TEC_PIN);
     8c6:	60 91 8f 01 	lds	r22, 0x018F
     8ca:	70 91 90 01 	lds	r23, 0x0190
     8ce:	80 91 91 01 	lds	r24, 0x0191
     8d2:	90 91 92 01 	lds	r25, 0x0192
     8d6:	0e 94 81 04 	call	0x902	; 0x902 <__fixunssfsi>
     8da:	6f 3f       	cpi	r22, 0xFF	; 255
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <main+0x32a>
     8de:	95 98       	cbi	0x12, 5	; 18
					my_delay_ms(255-(uint8_t)(U));
     8e0:	86 2f       	mov	r24, r22
     8e2:	80 95       	com	r24
     8e4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <my_delay_ms>

					coolerPower=((uint8_t)U);
     8e8:	60 91 8f 01 	lds	r22, 0x018F
     8ec:	70 91 90 01 	lds	r23, 0x0190
     8f0:	80 91 91 01 	lds	r24, 0x0191
     8f4:	90 91 92 01 	lds	r25, 0x0192
     8f8:	0e 94 81 04 	call	0x902	; 0x902 <__fixunssfsi>
     8fc:	60 93 6b 01 	sts	0x016B, r22
     900:	ae ce       	rjmp	.-676    	; 0x65e <main+0xa8>

00000902 <__fixunssfsi>:
     902:	ef 92       	push	r14
     904:	ff 92       	push	r15
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	7b 01       	movw	r14, r22
     90c:	8c 01       	movw	r16, r24
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	5f e4       	ldi	r21, 0x4F	; 79
     916:	0e 94 81 07 	call	0xf02	; 0xf02 <__gesf2>
     91a:	88 23       	and	r24, r24
     91c:	8c f0       	brlt	.+34     	; 0x940 <__fixunssfsi+0x3e>
     91e:	c8 01       	movw	r24, r16
     920:	b7 01       	movw	r22, r14
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	40 e0       	ldi	r20, 0x00	; 0
     928:	5f e4       	ldi	r21, 0x4F	; 79
     92a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__subsf3>
     92e:	0e 94 11 08 	call	0x1022	; 0x1022 <__fixsfsi>
     932:	9b 01       	movw	r18, r22
     934:	ac 01       	movw	r20, r24
     936:	20 50       	subi	r18, 0x00	; 0
     938:	30 40       	sbci	r19, 0x00	; 0
     93a:	40 40       	sbci	r20, 0x00	; 0
     93c:	50 48       	sbci	r21, 0x80	; 128
     93e:	06 c0       	rjmp	.+12     	; 0x94c <__fixunssfsi+0x4a>
     940:	c8 01       	movw	r24, r16
     942:	b7 01       	movw	r22, r14
     944:	0e 94 11 08 	call	0x1022	; 0x1022 <__fixsfsi>
     948:	9b 01       	movw	r18, r22
     94a:	ac 01       	movw	r20, r24
     94c:	b9 01       	movw	r22, r18
     94e:	ca 01       	movw	r24, r20
     950:	1f 91       	pop	r17
     952:	0f 91       	pop	r16
     954:	ff 90       	pop	r15
     956:	ef 90       	pop	r14
     958:	08 95       	ret

0000095a <_fpadd_parts>:
     95a:	a0 e0       	ldi	r26, 0x00	; 0
     95c:	b0 e0       	ldi	r27, 0x00	; 0
     95e:	e3 eb       	ldi	r30, 0xB3	; 179
     960:	f4 e0       	ldi	r31, 0x04	; 4
     962:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__prologue_saves__>
     966:	dc 01       	movw	r26, r24
     968:	2b 01       	movw	r4, r22
     96a:	fa 01       	movw	r30, r20
     96c:	9c 91       	ld	r25, X
     96e:	92 30       	cpi	r25, 0x02	; 2
     970:	08 f4       	brcc	.+2      	; 0x974 <_fpadd_parts+0x1a>
     972:	39 c1       	rjmp	.+626    	; 0xbe6 <_fpadd_parts+0x28c>
     974:	eb 01       	movw	r28, r22
     976:	88 81       	ld	r24, Y
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	08 f4       	brcc	.+2      	; 0x97e <_fpadd_parts+0x24>
     97c:	33 c1       	rjmp	.+614    	; 0xbe4 <_fpadd_parts+0x28a>
     97e:	94 30       	cpi	r25, 0x04	; 4
     980:	69 f4       	brne	.+26     	; 0x99c <_fpadd_parts+0x42>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f0       	breq	.+2      	; 0x988 <_fpadd_parts+0x2e>
     986:	2f c1       	rjmp	.+606    	; 0xbe6 <_fpadd_parts+0x28c>
     988:	11 96       	adiw	r26, 0x01	; 1
     98a:	9c 91       	ld	r25, X
     98c:	11 97       	sbiw	r26, 0x01	; 1
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	98 17       	cp	r25, r24
     992:	09 f4       	brne	.+2      	; 0x996 <_fpadd_parts+0x3c>
     994:	28 c1       	rjmp	.+592    	; 0xbe6 <_fpadd_parts+0x28c>
     996:	a0 e6       	ldi	r26, 0x60	; 96
     998:	b0 e0       	ldi	r27, 0x00	; 0
     99a:	25 c1       	rjmp	.+586    	; 0xbe6 <_fpadd_parts+0x28c>
     99c:	84 30       	cpi	r24, 0x04	; 4
     99e:	09 f4       	brne	.+2      	; 0x9a2 <_fpadd_parts+0x48>
     9a0:	21 c1       	rjmp	.+578    	; 0xbe4 <_fpadd_parts+0x28a>
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	a9 f4       	brne	.+42     	; 0x9d0 <_fpadd_parts+0x76>
     9a6:	92 30       	cpi	r25, 0x02	; 2
     9a8:	09 f0       	breq	.+2      	; 0x9ac <_fpadd_parts+0x52>
     9aa:	1d c1       	rjmp	.+570    	; 0xbe6 <_fpadd_parts+0x28c>
     9ac:	9a 01       	movw	r18, r20
     9ae:	ad 01       	movw	r20, r26
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	ea 01       	movw	r28, r20
     9b4:	09 90       	ld	r0, Y+
     9b6:	ae 01       	movw	r20, r28
     9b8:	e9 01       	movw	r28, r18
     9ba:	09 92       	st	Y+, r0
     9bc:	9e 01       	movw	r18, r28
     9be:	81 50       	subi	r24, 0x01	; 1
     9c0:	c1 f7       	brne	.-16     	; 0x9b2 <_fpadd_parts+0x58>
     9c2:	e2 01       	movw	r28, r4
     9c4:	89 81       	ldd	r24, Y+1	; 0x01
     9c6:	11 96       	adiw	r26, 0x01	; 1
     9c8:	9c 91       	ld	r25, X
     9ca:	89 23       	and	r24, r25
     9cc:	81 83       	std	Z+1, r24	; 0x01
     9ce:	08 c1       	rjmp	.+528    	; 0xbe0 <_fpadd_parts+0x286>
     9d0:	92 30       	cpi	r25, 0x02	; 2
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <_fpadd_parts+0x7c>
     9d4:	07 c1       	rjmp	.+526    	; 0xbe4 <_fpadd_parts+0x28a>
     9d6:	12 96       	adiw	r26, 0x02	; 2
     9d8:	2d 90       	ld	r2, X+
     9da:	3c 90       	ld	r3, X
     9dc:	13 97       	sbiw	r26, 0x03	; 3
     9de:	eb 01       	movw	r28, r22
     9e0:	8a 81       	ldd	r24, Y+2	; 0x02
     9e2:	9b 81       	ldd	r25, Y+3	; 0x03
     9e4:	14 96       	adiw	r26, 0x04	; 4
     9e6:	ad 90       	ld	r10, X+
     9e8:	bd 90       	ld	r11, X+
     9ea:	cd 90       	ld	r12, X+
     9ec:	dc 90       	ld	r13, X
     9ee:	17 97       	sbiw	r26, 0x07	; 7
     9f0:	ec 80       	ldd	r14, Y+4	; 0x04
     9f2:	fd 80       	ldd	r15, Y+5	; 0x05
     9f4:	0e 81       	ldd	r16, Y+6	; 0x06
     9f6:	1f 81       	ldd	r17, Y+7	; 0x07
     9f8:	91 01       	movw	r18, r2
     9fa:	28 1b       	sub	r18, r24
     9fc:	39 0b       	sbc	r19, r25
     9fe:	b9 01       	movw	r22, r18
     a00:	37 ff       	sbrs	r19, 7
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <_fpadd_parts+0xb2>
     a04:	66 27       	eor	r22, r22
     a06:	77 27       	eor	r23, r23
     a08:	62 1b       	sub	r22, r18
     a0a:	73 0b       	sbc	r23, r19
     a0c:	60 32       	cpi	r22, 0x20	; 32
     a0e:	71 05       	cpc	r23, r1
     a10:	0c f0       	brlt	.+2      	; 0xa14 <_fpadd_parts+0xba>
     a12:	61 c0       	rjmp	.+194    	; 0xad6 <_fpadd_parts+0x17c>
     a14:	12 16       	cp	r1, r18
     a16:	13 06       	cpc	r1, r19
     a18:	6c f5       	brge	.+90     	; 0xa74 <_fpadd_parts+0x11a>
     a1a:	37 01       	movw	r6, r14
     a1c:	48 01       	movw	r8, r16
     a1e:	06 2e       	mov	r0, r22
     a20:	04 c0       	rjmp	.+8      	; 0xa2a <_fpadd_parts+0xd0>
     a22:	96 94       	lsr	r9
     a24:	87 94       	ror	r8
     a26:	77 94       	ror	r7
     a28:	67 94       	ror	r6
     a2a:	0a 94       	dec	r0
     a2c:	d2 f7       	brpl	.-12     	; 0xa22 <_fpadd_parts+0xc8>
     a2e:	21 e0       	ldi	r18, 0x01	; 1
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <_fpadd_parts+0xe6>
     a38:	22 0f       	add	r18, r18
     a3a:	33 1f       	adc	r19, r19
     a3c:	44 1f       	adc	r20, r20
     a3e:	55 1f       	adc	r21, r21
     a40:	6a 95       	dec	r22
     a42:	d2 f7       	brpl	.-12     	; 0xa38 <_fpadd_parts+0xde>
     a44:	21 50       	subi	r18, 0x01	; 1
     a46:	30 40       	sbci	r19, 0x00	; 0
     a48:	40 40       	sbci	r20, 0x00	; 0
     a4a:	50 40       	sbci	r21, 0x00	; 0
     a4c:	2e 21       	and	r18, r14
     a4e:	3f 21       	and	r19, r15
     a50:	40 23       	and	r20, r16
     a52:	51 23       	and	r21, r17
     a54:	21 15       	cp	r18, r1
     a56:	31 05       	cpc	r19, r1
     a58:	41 05       	cpc	r20, r1
     a5a:	51 05       	cpc	r21, r1
     a5c:	21 f0       	breq	.+8      	; 0xa66 <_fpadd_parts+0x10c>
     a5e:	21 e0       	ldi	r18, 0x01	; 1
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	40 e0       	ldi	r20, 0x00	; 0
     a64:	50 e0       	ldi	r21, 0x00	; 0
     a66:	79 01       	movw	r14, r18
     a68:	8a 01       	movw	r16, r20
     a6a:	e6 28       	or	r14, r6
     a6c:	f7 28       	or	r15, r7
     a6e:	08 29       	or	r16, r8
     a70:	19 29       	or	r17, r9
     a72:	3c c0       	rjmp	.+120    	; 0xaec <_fpadd_parts+0x192>
     a74:	23 2b       	or	r18, r19
     a76:	d1 f1       	breq	.+116    	; 0xaec <_fpadd_parts+0x192>
     a78:	26 0e       	add	r2, r22
     a7a:	37 1e       	adc	r3, r23
     a7c:	35 01       	movw	r6, r10
     a7e:	46 01       	movw	r8, r12
     a80:	06 2e       	mov	r0, r22
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <_fpadd_parts+0x132>
     a84:	96 94       	lsr	r9
     a86:	87 94       	ror	r8
     a88:	77 94       	ror	r7
     a8a:	67 94       	ror	r6
     a8c:	0a 94       	dec	r0
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <_fpadd_parts+0x12a>
     a90:	21 e0       	ldi	r18, 0x01	; 1
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e0       	ldi	r20, 0x00	; 0
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	04 c0       	rjmp	.+8      	; 0xaa2 <_fpadd_parts+0x148>
     a9a:	22 0f       	add	r18, r18
     a9c:	33 1f       	adc	r19, r19
     a9e:	44 1f       	adc	r20, r20
     aa0:	55 1f       	adc	r21, r21
     aa2:	6a 95       	dec	r22
     aa4:	d2 f7       	brpl	.-12     	; 0xa9a <_fpadd_parts+0x140>
     aa6:	21 50       	subi	r18, 0x01	; 1
     aa8:	30 40       	sbci	r19, 0x00	; 0
     aaa:	40 40       	sbci	r20, 0x00	; 0
     aac:	50 40       	sbci	r21, 0x00	; 0
     aae:	2a 21       	and	r18, r10
     ab0:	3b 21       	and	r19, r11
     ab2:	4c 21       	and	r20, r12
     ab4:	5d 21       	and	r21, r13
     ab6:	21 15       	cp	r18, r1
     ab8:	31 05       	cpc	r19, r1
     aba:	41 05       	cpc	r20, r1
     abc:	51 05       	cpc	r21, r1
     abe:	21 f0       	breq	.+8      	; 0xac8 <_fpadd_parts+0x16e>
     ac0:	21 e0       	ldi	r18, 0x01	; 1
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	40 e0       	ldi	r20, 0x00	; 0
     ac6:	50 e0       	ldi	r21, 0x00	; 0
     ac8:	59 01       	movw	r10, r18
     aca:	6a 01       	movw	r12, r20
     acc:	a6 28       	or	r10, r6
     ace:	b7 28       	or	r11, r7
     ad0:	c8 28       	or	r12, r8
     ad2:	d9 28       	or	r13, r9
     ad4:	0b c0       	rjmp	.+22     	; 0xaec <_fpadd_parts+0x192>
     ad6:	82 15       	cp	r24, r2
     ad8:	93 05       	cpc	r25, r3
     ada:	2c f0       	brlt	.+10     	; 0xae6 <_fpadd_parts+0x18c>
     adc:	1c 01       	movw	r2, r24
     ade:	aa 24       	eor	r10, r10
     ae0:	bb 24       	eor	r11, r11
     ae2:	65 01       	movw	r12, r10
     ae4:	03 c0       	rjmp	.+6      	; 0xaec <_fpadd_parts+0x192>
     ae6:	ee 24       	eor	r14, r14
     ae8:	ff 24       	eor	r15, r15
     aea:	87 01       	movw	r16, r14
     aec:	11 96       	adiw	r26, 0x01	; 1
     aee:	9c 91       	ld	r25, X
     af0:	d2 01       	movw	r26, r4
     af2:	11 96       	adiw	r26, 0x01	; 1
     af4:	8c 91       	ld	r24, X
     af6:	98 17       	cp	r25, r24
     af8:	09 f4       	brne	.+2      	; 0xafc <_fpadd_parts+0x1a2>
     afa:	45 c0       	rjmp	.+138    	; 0xb86 <_fpadd_parts+0x22c>
     afc:	99 23       	and	r25, r25
     afe:	39 f0       	breq	.+14     	; 0xb0e <_fpadd_parts+0x1b4>
     b00:	a8 01       	movw	r20, r16
     b02:	97 01       	movw	r18, r14
     b04:	2a 19       	sub	r18, r10
     b06:	3b 09       	sbc	r19, r11
     b08:	4c 09       	sbc	r20, r12
     b0a:	5d 09       	sbc	r21, r13
     b0c:	06 c0       	rjmp	.+12     	; 0xb1a <_fpadd_parts+0x1c0>
     b0e:	a6 01       	movw	r20, r12
     b10:	95 01       	movw	r18, r10
     b12:	2e 19       	sub	r18, r14
     b14:	3f 09       	sbc	r19, r15
     b16:	40 0b       	sbc	r20, r16
     b18:	51 0b       	sbc	r21, r17
     b1a:	57 fd       	sbrc	r21, 7
     b1c:	08 c0       	rjmp	.+16     	; 0xb2e <_fpadd_parts+0x1d4>
     b1e:	11 82       	std	Z+1, r1	; 0x01
     b20:	33 82       	std	Z+3, r3	; 0x03
     b22:	22 82       	std	Z+2, r2	; 0x02
     b24:	24 83       	std	Z+4, r18	; 0x04
     b26:	35 83       	std	Z+5, r19	; 0x05
     b28:	46 83       	std	Z+6, r20	; 0x06
     b2a:	57 83       	std	Z+7, r21	; 0x07
     b2c:	1d c0       	rjmp	.+58     	; 0xb68 <_fpadd_parts+0x20e>
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	81 83       	std	Z+1, r24	; 0x01
     b32:	33 82       	std	Z+3, r3	; 0x03
     b34:	22 82       	std	Z+2, r2	; 0x02
     b36:	88 27       	eor	r24, r24
     b38:	99 27       	eor	r25, r25
     b3a:	dc 01       	movw	r26, r24
     b3c:	82 1b       	sub	r24, r18
     b3e:	93 0b       	sbc	r25, r19
     b40:	a4 0b       	sbc	r26, r20
     b42:	b5 0b       	sbc	r27, r21
     b44:	84 83       	std	Z+4, r24	; 0x04
     b46:	95 83       	std	Z+5, r25	; 0x05
     b48:	a6 83       	std	Z+6, r26	; 0x06
     b4a:	b7 83       	std	Z+7, r27	; 0x07
     b4c:	0d c0       	rjmp	.+26     	; 0xb68 <_fpadd_parts+0x20e>
     b4e:	22 0f       	add	r18, r18
     b50:	33 1f       	adc	r19, r19
     b52:	44 1f       	adc	r20, r20
     b54:	55 1f       	adc	r21, r21
     b56:	24 83       	std	Z+4, r18	; 0x04
     b58:	35 83       	std	Z+5, r19	; 0x05
     b5a:	46 83       	std	Z+6, r20	; 0x06
     b5c:	57 83       	std	Z+7, r21	; 0x07
     b5e:	82 81       	ldd	r24, Z+2	; 0x02
     b60:	93 81       	ldd	r25, Z+3	; 0x03
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	93 83       	std	Z+3, r25	; 0x03
     b66:	82 83       	std	Z+2, r24	; 0x02
     b68:	24 81       	ldd	r18, Z+4	; 0x04
     b6a:	35 81       	ldd	r19, Z+5	; 0x05
     b6c:	46 81       	ldd	r20, Z+6	; 0x06
     b6e:	57 81       	ldd	r21, Z+7	; 0x07
     b70:	da 01       	movw	r26, r20
     b72:	c9 01       	movw	r24, r18
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	a1 09       	sbc	r26, r1
     b78:	b1 09       	sbc	r27, r1
     b7a:	8f 5f       	subi	r24, 0xFF	; 255
     b7c:	9f 4f       	sbci	r25, 0xFF	; 255
     b7e:	af 4f       	sbci	r26, 0xFF	; 255
     b80:	bf 43       	sbci	r27, 0x3F	; 63
     b82:	28 f3       	brcs	.-54     	; 0xb4e <_fpadd_parts+0x1f4>
     b84:	0b c0       	rjmp	.+22     	; 0xb9c <_fpadd_parts+0x242>
     b86:	91 83       	std	Z+1, r25	; 0x01
     b88:	33 82       	std	Z+3, r3	; 0x03
     b8a:	22 82       	std	Z+2, r2	; 0x02
     b8c:	ea 0c       	add	r14, r10
     b8e:	fb 1c       	adc	r15, r11
     b90:	0c 1d       	adc	r16, r12
     b92:	1d 1d       	adc	r17, r13
     b94:	e4 82       	std	Z+4, r14	; 0x04
     b96:	f5 82       	std	Z+5, r15	; 0x05
     b98:	06 83       	std	Z+6, r16	; 0x06
     b9a:	17 83       	std	Z+7, r17	; 0x07
     b9c:	83 e0       	ldi	r24, 0x03	; 3
     b9e:	80 83       	st	Z, r24
     ba0:	24 81       	ldd	r18, Z+4	; 0x04
     ba2:	35 81       	ldd	r19, Z+5	; 0x05
     ba4:	46 81       	ldd	r20, Z+6	; 0x06
     ba6:	57 81       	ldd	r21, Z+7	; 0x07
     ba8:	57 ff       	sbrs	r21, 7
     baa:	1a c0       	rjmp	.+52     	; 0xbe0 <_fpadd_parts+0x286>
     bac:	c9 01       	movw	r24, r18
     bae:	aa 27       	eor	r26, r26
     bb0:	97 fd       	sbrc	r25, 7
     bb2:	a0 95       	com	r26
     bb4:	ba 2f       	mov	r27, r26
     bb6:	81 70       	andi	r24, 0x01	; 1
     bb8:	90 70       	andi	r25, 0x00	; 0
     bba:	a0 70       	andi	r26, 0x00	; 0
     bbc:	b0 70       	andi	r27, 0x00	; 0
     bbe:	56 95       	lsr	r21
     bc0:	47 95       	ror	r20
     bc2:	37 95       	ror	r19
     bc4:	27 95       	ror	r18
     bc6:	82 2b       	or	r24, r18
     bc8:	93 2b       	or	r25, r19
     bca:	a4 2b       	or	r26, r20
     bcc:	b5 2b       	or	r27, r21
     bce:	84 83       	std	Z+4, r24	; 0x04
     bd0:	95 83       	std	Z+5, r25	; 0x05
     bd2:	a6 83       	std	Z+6, r26	; 0x06
     bd4:	b7 83       	std	Z+7, r27	; 0x07
     bd6:	82 81       	ldd	r24, Z+2	; 0x02
     bd8:	93 81       	ldd	r25, Z+3	; 0x03
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	93 83       	std	Z+3, r25	; 0x03
     bde:	82 83       	std	Z+2, r24	; 0x02
     be0:	df 01       	movw	r26, r30
     be2:	01 c0       	rjmp	.+2      	; 0xbe6 <_fpadd_parts+0x28c>
     be4:	d2 01       	movw	r26, r4
     be6:	cd 01       	movw	r24, r26
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
     bec:	e2 e1       	ldi	r30, 0x12	; 18
     bee:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__epilogue_restores__>

00000bf2 <__subsf3>:
     bf2:	a0 e2       	ldi	r26, 0x20	; 32
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	ef ef       	ldi	r30, 0xFF	; 255
     bf8:	f5 e0       	ldi	r31, 0x05	; 5
     bfa:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__prologue_saves__+0x18>
     bfe:	69 83       	std	Y+1, r22	; 0x01
     c00:	7a 83       	std	Y+2, r23	; 0x02
     c02:	8b 83       	std	Y+3, r24	; 0x03
     c04:	9c 83       	std	Y+4, r25	; 0x04
     c06:	2d 83       	std	Y+5, r18	; 0x05
     c08:	3e 83       	std	Y+6, r19	; 0x06
     c0a:	4f 83       	std	Y+7, r20	; 0x07
     c0c:	58 87       	std	Y+8, r21	; 0x08
     c0e:	e9 e0       	ldi	r30, 0x09	; 9
     c10:	ee 2e       	mov	r14, r30
     c12:	f1 2c       	mov	r15, r1
     c14:	ec 0e       	add	r14, r28
     c16:	fd 1e       	adc	r15, r29
     c18:	ce 01       	movw	r24, r28
     c1a:	01 96       	adiw	r24, 0x01	; 1
     c1c:	b7 01       	movw	r22, r14
     c1e:	0e 94 02 0a 	call	0x1404	; 0x1404 <__unpack_f>
     c22:	8e 01       	movw	r16, r28
     c24:	0f 5e       	subi	r16, 0xEF	; 239
     c26:	1f 4f       	sbci	r17, 0xFF	; 255
     c28:	ce 01       	movw	r24, r28
     c2a:	05 96       	adiw	r24, 0x05	; 5
     c2c:	b8 01       	movw	r22, r16
     c2e:	0e 94 02 0a 	call	0x1404	; 0x1404 <__unpack_f>
     c32:	8a 89       	ldd	r24, Y+18	; 0x12
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	89 27       	eor	r24, r25
     c38:	8a 8b       	std	Y+18, r24	; 0x12
     c3a:	c7 01       	movw	r24, r14
     c3c:	b8 01       	movw	r22, r16
     c3e:	ae 01       	movw	r20, r28
     c40:	47 5e       	subi	r20, 0xE7	; 231
     c42:	5f 4f       	sbci	r21, 0xFF	; 255
     c44:	0e 94 ad 04 	call	0x95a	; 0x95a <_fpadd_parts>
     c48:	0e 94 2d 09 	call	0x125a	; 0x125a <__pack_f>
     c4c:	a0 96       	adiw	r28, 0x20	; 32
     c4e:	e6 e0       	ldi	r30, 0x06	; 6
     c50:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__epilogue_restores__+0x18>

00000c54 <__addsf3>:
     c54:	a0 e2       	ldi	r26, 0x20	; 32
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e0 e3       	ldi	r30, 0x30	; 48
     c5a:	f6 e0       	ldi	r31, 0x06	; 6
     c5c:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__prologue_saves__+0x18>
     c60:	69 83       	std	Y+1, r22	; 0x01
     c62:	7a 83       	std	Y+2, r23	; 0x02
     c64:	8b 83       	std	Y+3, r24	; 0x03
     c66:	9c 83       	std	Y+4, r25	; 0x04
     c68:	2d 83       	std	Y+5, r18	; 0x05
     c6a:	3e 83       	std	Y+6, r19	; 0x06
     c6c:	4f 83       	std	Y+7, r20	; 0x07
     c6e:	58 87       	std	Y+8, r21	; 0x08
     c70:	f9 e0       	ldi	r31, 0x09	; 9
     c72:	ef 2e       	mov	r14, r31
     c74:	f1 2c       	mov	r15, r1
     c76:	ec 0e       	add	r14, r28
     c78:	fd 1e       	adc	r15, r29
     c7a:	ce 01       	movw	r24, r28
     c7c:	01 96       	adiw	r24, 0x01	; 1
     c7e:	b7 01       	movw	r22, r14
     c80:	0e 94 02 0a 	call	0x1404	; 0x1404 <__unpack_f>
     c84:	8e 01       	movw	r16, r28
     c86:	0f 5e       	subi	r16, 0xEF	; 239
     c88:	1f 4f       	sbci	r17, 0xFF	; 255
     c8a:	ce 01       	movw	r24, r28
     c8c:	05 96       	adiw	r24, 0x05	; 5
     c8e:	b8 01       	movw	r22, r16
     c90:	0e 94 02 0a 	call	0x1404	; 0x1404 <__unpack_f>
     c94:	c7 01       	movw	r24, r14
     c96:	b8 01       	movw	r22, r16
     c98:	ae 01       	movw	r20, r28
     c9a:	47 5e       	subi	r20, 0xE7	; 231
     c9c:	5f 4f       	sbci	r21, 0xFF	; 255
     c9e:	0e 94 ad 04 	call	0x95a	; 0x95a <_fpadd_parts>
     ca2:	0e 94 2d 09 	call	0x125a	; 0x125a <__pack_f>
     ca6:	a0 96       	adiw	r28, 0x20	; 32
     ca8:	e6 e0       	ldi	r30, 0x06	; 6
     caa:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__epilogue_restores__+0x18>

00000cae <__mulsf3>:
     cae:	a0 e2       	ldi	r26, 0x20	; 32
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	ed e5       	ldi	r30, 0x5D	; 93
     cb4:	f6 e0       	ldi	r31, 0x06	; 6
     cb6:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__prologue_saves__>
     cba:	69 83       	std	Y+1, r22	; 0x01
     cbc:	7a 83       	std	Y+2, r23	; 0x02
     cbe:	8b 83       	std	Y+3, r24	; 0x03
     cc0:	9c 83       	std	Y+4, r25	; 0x04
     cc2:	2d 83       	std	Y+5, r18	; 0x05
     cc4:	3e 83       	std	Y+6, r19	; 0x06
     cc6:	4f 83       	std	Y+7, r20	; 0x07
     cc8:	58 87       	std	Y+8, r21	; 0x08
     cca:	ce 01       	movw	r24, r28
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	be 01       	movw	r22, r28
     cd0:	67 5f       	subi	r22, 0xF7	; 247
     cd2:	7f 4f       	sbci	r23, 0xFF	; 255
     cd4:	0e 94 02 0a 	call	0x1404	; 0x1404 <__unpack_f>
     cd8:	ce 01       	movw	r24, r28
     cda:	05 96       	adiw	r24, 0x05	; 5
     cdc:	be 01       	movw	r22, r28
     cde:	6f 5e       	subi	r22, 0xEF	; 239
     ce0:	7f 4f       	sbci	r23, 0xFF	; 255
     ce2:	0e 94 02 0a 	call	0x1404	; 0x1404 <__unpack_f>
     ce6:	99 85       	ldd	r25, Y+9	; 0x09
     ce8:	92 30       	cpi	r25, 0x02	; 2
     cea:	88 f0       	brcs	.+34     	; 0xd0e <__mulsf3+0x60>
     cec:	89 89       	ldd	r24, Y+17	; 0x11
     cee:	82 30       	cpi	r24, 0x02	; 2
     cf0:	c8 f0       	brcs	.+50     	; 0xd24 <__mulsf3+0x76>
     cf2:	94 30       	cpi	r25, 0x04	; 4
     cf4:	19 f4       	brne	.+6      	; 0xcfc <__mulsf3+0x4e>
     cf6:	82 30       	cpi	r24, 0x02	; 2
     cf8:	51 f4       	brne	.+20     	; 0xd0e <__mulsf3+0x60>
     cfa:	04 c0       	rjmp	.+8      	; 0xd04 <__mulsf3+0x56>
     cfc:	84 30       	cpi	r24, 0x04	; 4
     cfe:	29 f4       	brne	.+10     	; 0xd0a <__mulsf3+0x5c>
     d00:	92 30       	cpi	r25, 0x02	; 2
     d02:	81 f4       	brne	.+32     	; 0xd24 <__mulsf3+0x76>
     d04:	80 e6       	ldi	r24, 0x60	; 96
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	c6 c0       	rjmp	.+396    	; 0xe96 <__mulsf3+0x1e8>
     d0a:	92 30       	cpi	r25, 0x02	; 2
     d0c:	49 f4       	brne	.+18     	; 0xd20 <__mulsf3+0x72>
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	9a 85       	ldd	r25, Y+10	; 0x0a
     d12:	8a 89       	ldd	r24, Y+18	; 0x12
     d14:	98 13       	cpse	r25, r24
     d16:	21 e0       	ldi	r18, 0x01	; 1
     d18:	2a 87       	std	Y+10, r18	; 0x0a
     d1a:	ce 01       	movw	r24, r28
     d1c:	09 96       	adiw	r24, 0x09	; 9
     d1e:	bb c0       	rjmp	.+374    	; 0xe96 <__mulsf3+0x1e8>
     d20:	82 30       	cpi	r24, 0x02	; 2
     d22:	49 f4       	brne	.+18     	; 0xd36 <__mulsf3+0x88>
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	9a 85       	ldd	r25, Y+10	; 0x0a
     d28:	8a 89       	ldd	r24, Y+18	; 0x12
     d2a:	98 13       	cpse	r25, r24
     d2c:	21 e0       	ldi	r18, 0x01	; 1
     d2e:	2a 8b       	std	Y+18, r18	; 0x12
     d30:	ce 01       	movw	r24, r28
     d32:	41 96       	adiw	r24, 0x11	; 17
     d34:	b0 c0       	rjmp	.+352    	; 0xe96 <__mulsf3+0x1e8>
     d36:	2d 84       	ldd	r2, Y+13	; 0x0d
     d38:	3e 84       	ldd	r3, Y+14	; 0x0e
     d3a:	4f 84       	ldd	r4, Y+15	; 0x0f
     d3c:	58 88       	ldd	r5, Y+16	; 0x10
     d3e:	6d 88       	ldd	r6, Y+21	; 0x15
     d40:	7e 88       	ldd	r7, Y+22	; 0x16
     d42:	8f 88       	ldd	r8, Y+23	; 0x17
     d44:	98 8c       	ldd	r9, Y+24	; 0x18
     d46:	ee 24       	eor	r14, r14
     d48:	ff 24       	eor	r15, r15
     d4a:	87 01       	movw	r16, r14
     d4c:	aa 24       	eor	r10, r10
     d4e:	bb 24       	eor	r11, r11
     d50:	65 01       	movw	r12, r10
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	e0 e0       	ldi	r30, 0x00	; 0
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	c1 01       	movw	r24, r2
     d60:	81 70       	andi	r24, 0x01	; 1
     d62:	90 70       	andi	r25, 0x00	; 0
     d64:	89 2b       	or	r24, r25
     d66:	e9 f0       	breq	.+58     	; 0xda2 <__mulsf3+0xf4>
     d68:	e6 0c       	add	r14, r6
     d6a:	f7 1c       	adc	r15, r7
     d6c:	08 1d       	adc	r16, r8
     d6e:	19 1d       	adc	r17, r9
     d70:	9a 01       	movw	r18, r20
     d72:	ab 01       	movw	r20, r22
     d74:	2a 0d       	add	r18, r10
     d76:	3b 1d       	adc	r19, r11
     d78:	4c 1d       	adc	r20, r12
     d7a:	5d 1d       	adc	r21, r13
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	a0 e0       	ldi	r26, 0x00	; 0
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e6 14       	cp	r14, r6
     d86:	f7 04       	cpc	r15, r7
     d88:	08 05       	cpc	r16, r8
     d8a:	19 05       	cpc	r17, r9
     d8c:	20 f4       	brcc	.+8      	; 0xd96 <__mulsf3+0xe8>
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	a0 e0       	ldi	r26, 0x00	; 0
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	ba 01       	movw	r22, r20
     d98:	a9 01       	movw	r20, r18
     d9a:	48 0f       	add	r20, r24
     d9c:	59 1f       	adc	r21, r25
     d9e:	6a 1f       	adc	r22, r26
     da0:	7b 1f       	adc	r23, r27
     da2:	aa 0c       	add	r10, r10
     da4:	bb 1c       	adc	r11, r11
     da6:	cc 1c       	adc	r12, r12
     da8:	dd 1c       	adc	r13, r13
     daa:	97 fe       	sbrs	r9, 7
     dac:	08 c0       	rjmp	.+16     	; 0xdbe <__mulsf3+0x110>
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	a0 e0       	ldi	r26, 0x00	; 0
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	a8 2a       	or	r10, r24
     db8:	b9 2a       	or	r11, r25
     dba:	ca 2a       	or	r12, r26
     dbc:	db 2a       	or	r13, r27
     dbe:	31 96       	adiw	r30, 0x01	; 1
     dc0:	e0 32       	cpi	r30, 0x20	; 32
     dc2:	f1 05       	cpc	r31, r1
     dc4:	49 f0       	breq	.+18     	; 0xdd8 <__mulsf3+0x12a>
     dc6:	66 0c       	add	r6, r6
     dc8:	77 1c       	adc	r7, r7
     dca:	88 1c       	adc	r8, r8
     dcc:	99 1c       	adc	r9, r9
     dce:	56 94       	lsr	r5
     dd0:	47 94       	ror	r4
     dd2:	37 94       	ror	r3
     dd4:	27 94       	ror	r2
     dd6:	c3 cf       	rjmp	.-122    	; 0xd5e <__mulsf3+0xb0>
     dd8:	fa 85       	ldd	r31, Y+10	; 0x0a
     dda:	ea 89       	ldd	r30, Y+18	; 0x12
     ddc:	2b 89       	ldd	r18, Y+19	; 0x13
     dde:	3c 89       	ldd	r19, Y+20	; 0x14
     de0:	8b 85       	ldd	r24, Y+11	; 0x0b
     de2:	9c 85       	ldd	r25, Y+12	; 0x0c
     de4:	28 0f       	add	r18, r24
     de6:	39 1f       	adc	r19, r25
     de8:	2e 5f       	subi	r18, 0xFE	; 254
     dea:	3f 4f       	sbci	r19, 0xFF	; 255
     dec:	17 c0       	rjmp	.+46     	; 0xe1c <__mulsf3+0x16e>
     dee:	ca 01       	movw	r24, r20
     df0:	81 70       	andi	r24, 0x01	; 1
     df2:	90 70       	andi	r25, 0x00	; 0
     df4:	89 2b       	or	r24, r25
     df6:	61 f0       	breq	.+24     	; 0xe10 <__mulsf3+0x162>
     df8:	16 95       	lsr	r17
     dfa:	07 95       	ror	r16
     dfc:	f7 94       	ror	r15
     dfe:	e7 94       	ror	r14
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a0 e0       	ldi	r26, 0x00	; 0
     e06:	b0 e8       	ldi	r27, 0x80	; 128
     e08:	e8 2a       	or	r14, r24
     e0a:	f9 2a       	or	r15, r25
     e0c:	0a 2b       	or	r16, r26
     e0e:	1b 2b       	or	r17, r27
     e10:	76 95       	lsr	r23
     e12:	67 95       	ror	r22
     e14:	57 95       	ror	r21
     e16:	47 95       	ror	r20
     e18:	2f 5f       	subi	r18, 0xFF	; 255
     e1a:	3f 4f       	sbci	r19, 0xFF	; 255
     e1c:	77 fd       	sbrc	r23, 7
     e1e:	e7 cf       	rjmp	.-50     	; 0xdee <__mulsf3+0x140>
     e20:	0c c0       	rjmp	.+24     	; 0xe3a <__mulsf3+0x18c>
     e22:	44 0f       	add	r20, r20
     e24:	55 1f       	adc	r21, r21
     e26:	66 1f       	adc	r22, r22
     e28:	77 1f       	adc	r23, r23
     e2a:	17 fd       	sbrc	r17, 7
     e2c:	41 60       	ori	r20, 0x01	; 1
     e2e:	ee 0c       	add	r14, r14
     e30:	ff 1c       	adc	r15, r15
     e32:	00 1f       	adc	r16, r16
     e34:	11 1f       	adc	r17, r17
     e36:	21 50       	subi	r18, 0x01	; 1
     e38:	30 40       	sbci	r19, 0x00	; 0
     e3a:	40 30       	cpi	r20, 0x00	; 0
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	59 07       	cpc	r21, r25
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	69 07       	cpc	r22, r25
     e44:	90 e4       	ldi	r25, 0x40	; 64
     e46:	79 07       	cpc	r23, r25
     e48:	60 f3       	brcs	.-40     	; 0xe22 <__mulsf3+0x174>
     e4a:	2b 8f       	std	Y+27, r18	; 0x1b
     e4c:	3c 8f       	std	Y+28, r19	; 0x1c
     e4e:	db 01       	movw	r26, r22
     e50:	ca 01       	movw	r24, r20
     e52:	8f 77       	andi	r24, 0x7F	; 127
     e54:	90 70       	andi	r25, 0x00	; 0
     e56:	a0 70       	andi	r26, 0x00	; 0
     e58:	b0 70       	andi	r27, 0x00	; 0
     e5a:	80 34       	cpi	r24, 0x40	; 64
     e5c:	91 05       	cpc	r25, r1
     e5e:	a1 05       	cpc	r26, r1
     e60:	b1 05       	cpc	r27, r1
     e62:	61 f4       	brne	.+24     	; 0xe7c <__mulsf3+0x1ce>
     e64:	47 fd       	sbrc	r20, 7
     e66:	0a c0       	rjmp	.+20     	; 0xe7c <__mulsf3+0x1ce>
     e68:	e1 14       	cp	r14, r1
     e6a:	f1 04       	cpc	r15, r1
     e6c:	01 05       	cpc	r16, r1
     e6e:	11 05       	cpc	r17, r1
     e70:	29 f0       	breq	.+10     	; 0xe7c <__mulsf3+0x1ce>
     e72:	40 5c       	subi	r20, 0xC0	; 192
     e74:	5f 4f       	sbci	r21, 0xFF	; 255
     e76:	6f 4f       	sbci	r22, 0xFF	; 255
     e78:	7f 4f       	sbci	r23, 0xFF	; 255
     e7a:	40 78       	andi	r20, 0x80	; 128
     e7c:	1a 8e       	std	Y+26, r1	; 0x1a
     e7e:	fe 17       	cp	r31, r30
     e80:	11 f0       	breq	.+4      	; 0xe86 <__mulsf3+0x1d8>
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	8a 8f       	std	Y+26, r24	; 0x1a
     e86:	4d 8f       	std	Y+29, r20	; 0x1d
     e88:	5e 8f       	std	Y+30, r21	; 0x1e
     e8a:	6f 8f       	std	Y+31, r22	; 0x1f
     e8c:	78 a3       	std	Y+32, r23	; 0x20
     e8e:	83 e0       	ldi	r24, 0x03	; 3
     e90:	89 8f       	std	Y+25, r24	; 0x19
     e92:	ce 01       	movw	r24, r28
     e94:	49 96       	adiw	r24, 0x19	; 25
     e96:	0e 94 2d 09 	call	0x125a	; 0x125a <__pack_f>
     e9a:	a0 96       	adiw	r28, 0x20	; 32
     e9c:	e2 e1       	ldi	r30, 0x12	; 18
     e9e:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__epilogue_restores__>

00000ea2 <__gtsf2>:
     ea2:	a8 e1       	ldi	r26, 0x18	; 24
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e7 e5       	ldi	r30, 0x57	; 87
     ea8:	f7 e0       	ldi	r31, 0x07	; 7
     eaa:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__prologue_saves__+0x18>
     eae:	69 83       	std	Y+1, r22	; 0x01
     eb0:	7a 83       	std	Y+2, r23	; 0x02
     eb2:	8b 83       	std	Y+3, r24	; 0x03
     eb4:	9c 83       	std	Y+4, r25	; 0x04
     eb6:	2d 83       	std	Y+5, r18	; 0x05
     eb8:	3e 83       	std	Y+6, r19	; 0x06
     eba:	4f 83       	std	Y+7, r20	; 0x07
     ebc:	58 87       	std	Y+8, r21	; 0x08
     ebe:	89 e0       	ldi	r24, 0x09	; 9
     ec0:	e8 2e       	mov	r14, r24
     ec2:	f1 2c       	mov	r15, r1
     ec4:	ec 0e       	add	r14, r28
     ec6:	fd 1e       	adc	r15, r29
     ec8:	ce 01       	movw	r24, r28
     eca:	01 96       	adiw	r24, 0x01	; 1
     ecc:	b7 01       	movw	r22, r14
     ece:	0e 94 02 0a 	call	0x1404	; 0x1404 <__unpack_f>
     ed2:	8e 01       	movw	r16, r28
     ed4:	0f 5e       	subi	r16, 0xEF	; 239
     ed6:	1f 4f       	sbci	r17, 0xFF	; 255
     ed8:	ce 01       	movw	r24, r28
     eda:	05 96       	adiw	r24, 0x05	; 5
     edc:	b8 01       	movw	r22, r16
     ede:	0e 94 02 0a 	call	0x1404	; 0x1404 <__unpack_f>
     ee2:	89 85       	ldd	r24, Y+9	; 0x09
     ee4:	82 30       	cpi	r24, 0x02	; 2
     ee6:	40 f0       	brcs	.+16     	; 0xef8 <__gtsf2+0x56>
     ee8:	89 89       	ldd	r24, Y+17	; 0x11
     eea:	82 30       	cpi	r24, 0x02	; 2
     eec:	28 f0       	brcs	.+10     	; 0xef8 <__gtsf2+0x56>
     eee:	c7 01       	movw	r24, r14
     ef0:	b8 01       	movw	r22, r16
     ef2:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__fpcmp_parts_f>
     ef6:	01 c0       	rjmp	.+2      	; 0xefa <__gtsf2+0x58>
     ef8:	8f ef       	ldi	r24, 0xFF	; 255
     efa:	68 96       	adiw	r28, 0x18	; 24
     efc:	e6 e0       	ldi	r30, 0x06	; 6
     efe:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__epilogue_restores__+0x18>

00000f02 <__gesf2>:
     f02:	a8 e1       	ldi	r26, 0x18	; 24
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e7 e8       	ldi	r30, 0x87	; 135
     f08:	f7 e0       	ldi	r31, 0x07	; 7
     f0a:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__prologue_saves__+0x18>
     f0e:	69 83       	std	Y+1, r22	; 0x01
     f10:	7a 83       	std	Y+2, r23	; 0x02
     f12:	8b 83       	std	Y+3, r24	; 0x03
     f14:	9c 83       	std	Y+4, r25	; 0x04
     f16:	2d 83       	std	Y+5, r18	; 0x05
     f18:	3e 83       	std	Y+6, r19	; 0x06
     f1a:	4f 83       	std	Y+7, r20	; 0x07
     f1c:	58 87       	std	Y+8, r21	; 0x08
     f1e:	89 e0       	ldi	r24, 0x09	; 9
     f20:	e8 2e       	mov	r14, r24
     f22:	f1 2c       	mov	r15, r1
     f24:	ec 0e       	add	r14, r28
     f26:	fd 1e       	adc	r15, r29
     f28:	ce 01       	movw	r24, r28
     f2a:	01 96       	adiw	r24, 0x01	; 1
     f2c:	b7 01       	movw	r22, r14
     f2e:	0e 94 02 0a 	call	0x1404	; 0x1404 <__unpack_f>
     f32:	8e 01       	movw	r16, r28
     f34:	0f 5e       	subi	r16, 0xEF	; 239
     f36:	1f 4f       	sbci	r17, 0xFF	; 255
     f38:	ce 01       	movw	r24, r28
     f3a:	05 96       	adiw	r24, 0x05	; 5
     f3c:	b8 01       	movw	r22, r16
     f3e:	0e 94 02 0a 	call	0x1404	; 0x1404 <__unpack_f>
     f42:	89 85       	ldd	r24, Y+9	; 0x09
     f44:	82 30       	cpi	r24, 0x02	; 2
     f46:	40 f0       	brcs	.+16     	; 0xf58 <__gesf2+0x56>
     f48:	89 89       	ldd	r24, Y+17	; 0x11
     f4a:	82 30       	cpi	r24, 0x02	; 2
     f4c:	28 f0       	brcs	.+10     	; 0xf58 <__gesf2+0x56>
     f4e:	c7 01       	movw	r24, r14
     f50:	b8 01       	movw	r22, r16
     f52:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__fpcmp_parts_f>
     f56:	01 c0       	rjmp	.+2      	; 0xf5a <__gesf2+0x58>
     f58:	8f ef       	ldi	r24, 0xFF	; 255
     f5a:	68 96       	adiw	r28, 0x18	; 24
     f5c:	e6 e0       	ldi	r30, 0x06	; 6
     f5e:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__epilogue_restores__+0x18>

00000f62 <__ltsf2>:
     f62:	a8 e1       	ldi	r26, 0x18	; 24
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e7 eb       	ldi	r30, 0xB7	; 183
     f68:	f7 e0       	ldi	r31, 0x07	; 7
     f6a:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__prologue_saves__+0x18>
     f6e:	69 83       	std	Y+1, r22	; 0x01
     f70:	7a 83       	std	Y+2, r23	; 0x02
     f72:	8b 83       	std	Y+3, r24	; 0x03
     f74:	9c 83       	std	Y+4, r25	; 0x04
     f76:	2d 83       	std	Y+5, r18	; 0x05
     f78:	3e 83       	std	Y+6, r19	; 0x06
     f7a:	4f 83       	std	Y+7, r20	; 0x07
     f7c:	58 87       	std	Y+8, r21	; 0x08
     f7e:	89 e0       	ldi	r24, 0x09	; 9
     f80:	e8 2e       	mov	r14, r24
     f82:	f1 2c       	mov	r15, r1
     f84:	ec 0e       	add	r14, r28
     f86:	fd 1e       	adc	r15, r29
     f88:	ce 01       	movw	r24, r28
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	b7 01       	movw	r22, r14
     f8e:	0e 94 02 0a 	call	0x1404	; 0x1404 <__unpack_f>
     f92:	8e 01       	movw	r16, r28
     f94:	0f 5e       	subi	r16, 0xEF	; 239
     f96:	1f 4f       	sbci	r17, 0xFF	; 255
     f98:	ce 01       	movw	r24, r28
     f9a:	05 96       	adiw	r24, 0x05	; 5
     f9c:	b8 01       	movw	r22, r16
     f9e:	0e 94 02 0a 	call	0x1404	; 0x1404 <__unpack_f>
     fa2:	89 85       	ldd	r24, Y+9	; 0x09
     fa4:	82 30       	cpi	r24, 0x02	; 2
     fa6:	40 f0       	brcs	.+16     	; 0xfb8 <__ltsf2+0x56>
     fa8:	89 89       	ldd	r24, Y+17	; 0x11
     faa:	82 30       	cpi	r24, 0x02	; 2
     fac:	28 f0       	brcs	.+10     	; 0xfb8 <__ltsf2+0x56>
     fae:	c7 01       	movw	r24, r14
     fb0:	b8 01       	movw	r22, r16
     fb2:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__fpcmp_parts_f>
     fb6:	01 c0       	rjmp	.+2      	; 0xfba <__ltsf2+0x58>
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	68 96       	adiw	r28, 0x18	; 24
     fbc:	e6 e0       	ldi	r30, 0x06	; 6
     fbe:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__epilogue_restores__+0x18>

00000fc2 <__lesf2>:
     fc2:	a8 e1       	ldi	r26, 0x18	; 24
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e7 ee       	ldi	r30, 0xE7	; 231
     fc8:	f7 e0       	ldi	r31, 0x07	; 7
     fca:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__prologue_saves__+0x18>
     fce:	69 83       	std	Y+1, r22	; 0x01
     fd0:	7a 83       	std	Y+2, r23	; 0x02
     fd2:	8b 83       	std	Y+3, r24	; 0x03
     fd4:	9c 83       	std	Y+4, r25	; 0x04
     fd6:	2d 83       	std	Y+5, r18	; 0x05
     fd8:	3e 83       	std	Y+6, r19	; 0x06
     fda:	4f 83       	std	Y+7, r20	; 0x07
     fdc:	58 87       	std	Y+8, r21	; 0x08
     fde:	89 e0       	ldi	r24, 0x09	; 9
     fe0:	e8 2e       	mov	r14, r24
     fe2:	f1 2c       	mov	r15, r1
     fe4:	ec 0e       	add	r14, r28
     fe6:	fd 1e       	adc	r15, r29
     fe8:	ce 01       	movw	r24, r28
     fea:	01 96       	adiw	r24, 0x01	; 1
     fec:	b7 01       	movw	r22, r14
     fee:	0e 94 02 0a 	call	0x1404	; 0x1404 <__unpack_f>
     ff2:	8e 01       	movw	r16, r28
     ff4:	0f 5e       	subi	r16, 0xEF	; 239
     ff6:	1f 4f       	sbci	r17, 0xFF	; 255
     ff8:	ce 01       	movw	r24, r28
     ffa:	05 96       	adiw	r24, 0x05	; 5
     ffc:	b8 01       	movw	r22, r16
     ffe:	0e 94 02 0a 	call	0x1404	; 0x1404 <__unpack_f>
    1002:	89 85       	ldd	r24, Y+9	; 0x09
    1004:	82 30       	cpi	r24, 0x02	; 2
    1006:	40 f0       	brcs	.+16     	; 0x1018 <__lesf2+0x56>
    1008:	89 89       	ldd	r24, Y+17	; 0x11
    100a:	82 30       	cpi	r24, 0x02	; 2
    100c:	28 f0       	brcs	.+10     	; 0x1018 <__lesf2+0x56>
    100e:	c7 01       	movw	r24, r14
    1010:	b8 01       	movw	r22, r16
    1012:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__fpcmp_parts_f>
    1016:	01 c0       	rjmp	.+2      	; 0x101a <__lesf2+0x58>
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	68 96       	adiw	r28, 0x18	; 24
    101c:	e6 e0       	ldi	r30, 0x06	; 6
    101e:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__epilogue_restores__+0x18>

00001022 <__fixsfsi>:
    1022:	ac e0       	ldi	r26, 0x0C	; 12
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e7 e1       	ldi	r30, 0x17	; 23
    1028:	f8 e0       	ldi	r31, 0x08	; 8
    102a:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__prologue_saves__+0x20>
    102e:	69 83       	std	Y+1, r22	; 0x01
    1030:	7a 83       	std	Y+2, r23	; 0x02
    1032:	8b 83       	std	Y+3, r24	; 0x03
    1034:	9c 83       	std	Y+4, r25	; 0x04
    1036:	ce 01       	movw	r24, r28
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	be 01       	movw	r22, r28
    103c:	6b 5f       	subi	r22, 0xFB	; 251
    103e:	7f 4f       	sbci	r23, 0xFF	; 255
    1040:	0e 94 02 0a 	call	0x1404	; 0x1404 <__unpack_f>
    1044:	8d 81       	ldd	r24, Y+5	; 0x05
    1046:	82 30       	cpi	r24, 0x02	; 2
    1048:	61 f1       	breq	.+88     	; 0x10a2 <__fixsfsi+0x80>
    104a:	82 30       	cpi	r24, 0x02	; 2
    104c:	50 f1       	brcs	.+84     	; 0x10a2 <__fixsfsi+0x80>
    104e:	84 30       	cpi	r24, 0x04	; 4
    1050:	21 f4       	brne	.+8      	; 0x105a <__fixsfsi+0x38>
    1052:	8e 81       	ldd	r24, Y+6	; 0x06
    1054:	88 23       	and	r24, r24
    1056:	51 f1       	breq	.+84     	; 0x10ac <__fixsfsi+0x8a>
    1058:	2e c0       	rjmp	.+92     	; 0x10b6 <__fixsfsi+0x94>
    105a:	2f 81       	ldd	r18, Y+7	; 0x07
    105c:	38 85       	ldd	r19, Y+8	; 0x08
    105e:	37 fd       	sbrc	r19, 7
    1060:	20 c0       	rjmp	.+64     	; 0x10a2 <__fixsfsi+0x80>
    1062:	6e 81       	ldd	r22, Y+6	; 0x06
    1064:	2f 31       	cpi	r18, 0x1F	; 31
    1066:	31 05       	cpc	r19, r1
    1068:	1c f0       	brlt	.+6      	; 0x1070 <__fixsfsi+0x4e>
    106a:	66 23       	and	r22, r22
    106c:	f9 f0       	breq	.+62     	; 0x10ac <__fixsfsi+0x8a>
    106e:	23 c0       	rjmp	.+70     	; 0x10b6 <__fixsfsi+0x94>
    1070:	8e e1       	ldi	r24, 0x1E	; 30
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	82 1b       	sub	r24, r18
    1076:	93 0b       	sbc	r25, r19
    1078:	29 85       	ldd	r18, Y+9	; 0x09
    107a:	3a 85       	ldd	r19, Y+10	; 0x0a
    107c:	4b 85       	ldd	r20, Y+11	; 0x0b
    107e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1080:	04 c0       	rjmp	.+8      	; 0x108a <__fixsfsi+0x68>
    1082:	56 95       	lsr	r21
    1084:	47 95       	ror	r20
    1086:	37 95       	ror	r19
    1088:	27 95       	ror	r18
    108a:	8a 95       	dec	r24
    108c:	d2 f7       	brpl	.-12     	; 0x1082 <__fixsfsi+0x60>
    108e:	66 23       	and	r22, r22
    1090:	b1 f0       	breq	.+44     	; 0x10be <__fixsfsi+0x9c>
    1092:	50 95       	com	r21
    1094:	40 95       	com	r20
    1096:	30 95       	com	r19
    1098:	21 95       	neg	r18
    109a:	3f 4f       	sbci	r19, 0xFF	; 255
    109c:	4f 4f       	sbci	r20, 0xFF	; 255
    109e:	5f 4f       	sbci	r21, 0xFF	; 255
    10a0:	0e c0       	rjmp	.+28     	; 0x10be <__fixsfsi+0x9c>
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	09 c0       	rjmp	.+18     	; 0x10be <__fixsfsi+0x9c>
    10ac:	2f ef       	ldi	r18, 0xFF	; 255
    10ae:	3f ef       	ldi	r19, 0xFF	; 255
    10b0:	4f ef       	ldi	r20, 0xFF	; 255
    10b2:	5f e7       	ldi	r21, 0x7F	; 127
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <__fixsfsi+0x9c>
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	50 e8       	ldi	r21, 0x80	; 128
    10be:	b9 01       	movw	r22, r18
    10c0:	ca 01       	movw	r24, r20
    10c2:	2c 96       	adiw	r28, 0x0c	; 12
    10c4:	e2 e0       	ldi	r30, 0x02	; 2
    10c6:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <__epilogue_restores__+0x20>

000010ca <__floatunsisf>:
    10ca:	a8 e0       	ldi	r26, 0x08	; 8
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	eb e6       	ldi	r30, 0x6B	; 107
    10d0:	f8 e0       	ldi	r31, 0x08	; 8
    10d2:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__prologue_saves__+0x10>
    10d6:	7b 01       	movw	r14, r22
    10d8:	8c 01       	movw	r16, r24
    10da:	61 15       	cp	r22, r1
    10dc:	71 05       	cpc	r23, r1
    10de:	81 05       	cpc	r24, r1
    10e0:	91 05       	cpc	r25, r1
    10e2:	19 f4       	brne	.+6      	; 0x10ea <__floatunsisf+0x20>
    10e4:	82 e0       	ldi	r24, 0x02	; 2
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	60 c0       	rjmp	.+192    	; 0x11aa <__floatunsisf+0xe0>
    10ea:	83 e0       	ldi	r24, 0x03	; 3
    10ec:	89 83       	std	Y+1, r24	; 0x01
    10ee:	8e e1       	ldi	r24, 0x1E	; 30
    10f0:	c8 2e       	mov	r12, r24
    10f2:	d1 2c       	mov	r13, r1
    10f4:	dc 82       	std	Y+4, r13	; 0x04
    10f6:	cb 82       	std	Y+3, r12	; 0x03
    10f8:	ed 82       	std	Y+5, r14	; 0x05
    10fa:	fe 82       	std	Y+6, r15	; 0x06
    10fc:	0f 83       	std	Y+7, r16	; 0x07
    10fe:	18 87       	std	Y+8, r17	; 0x08
    1100:	c8 01       	movw	r24, r16
    1102:	b7 01       	movw	r22, r14
    1104:	0e 94 de 08 	call	0x11bc	; 0x11bc <__clzsi2>
    1108:	fc 01       	movw	r30, r24
    110a:	31 97       	sbiw	r30, 0x01	; 1
    110c:	f7 ff       	sbrs	r31, 7
    110e:	3b c0       	rjmp	.+118    	; 0x1186 <__floatunsisf+0xbc>
    1110:	22 27       	eor	r18, r18
    1112:	33 27       	eor	r19, r19
    1114:	2e 1b       	sub	r18, r30
    1116:	3f 0b       	sbc	r19, r31
    1118:	57 01       	movw	r10, r14
    111a:	68 01       	movw	r12, r16
    111c:	02 2e       	mov	r0, r18
    111e:	04 c0       	rjmp	.+8      	; 0x1128 <__floatunsisf+0x5e>
    1120:	d6 94       	lsr	r13
    1122:	c7 94       	ror	r12
    1124:	b7 94       	ror	r11
    1126:	a7 94       	ror	r10
    1128:	0a 94       	dec	r0
    112a:	d2 f7       	brpl	.-12     	; 0x1120 <__floatunsisf+0x56>
    112c:	40 e0       	ldi	r20, 0x00	; 0
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	a0 e0       	ldi	r26, 0x00	; 0
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	04 c0       	rjmp	.+8      	; 0x1146 <__floatunsisf+0x7c>
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	aa 1f       	adc	r26, r26
    1144:	bb 1f       	adc	r27, r27
    1146:	2a 95       	dec	r18
    1148:	d2 f7       	brpl	.-12     	; 0x113e <__floatunsisf+0x74>
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	a1 09       	sbc	r26, r1
    114e:	b1 09       	sbc	r27, r1
    1150:	8e 21       	and	r24, r14
    1152:	9f 21       	and	r25, r15
    1154:	a0 23       	and	r26, r16
    1156:	b1 23       	and	r27, r17
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	a1 05       	cpc	r26, r1
    115c:	b1 05       	cpc	r27, r1
    115e:	21 f0       	breq	.+8      	; 0x1168 <__floatunsisf+0x9e>
    1160:	41 e0       	ldi	r20, 0x01	; 1
    1162:	50 e0       	ldi	r21, 0x00	; 0
    1164:	60 e0       	ldi	r22, 0x00	; 0
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	4a 29       	or	r20, r10
    116a:	5b 29       	or	r21, r11
    116c:	6c 29       	or	r22, r12
    116e:	7d 29       	or	r23, r13
    1170:	4d 83       	std	Y+5, r20	; 0x05
    1172:	5e 83       	std	Y+6, r21	; 0x06
    1174:	6f 83       	std	Y+7, r22	; 0x07
    1176:	78 87       	std	Y+8, r23	; 0x08
    1178:	8e e1       	ldi	r24, 0x1E	; 30
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	8e 1b       	sub	r24, r30
    117e:	9f 0b       	sbc	r25, r31
    1180:	9c 83       	std	Y+4, r25	; 0x04
    1182:	8b 83       	std	Y+3, r24	; 0x03
    1184:	12 c0       	rjmp	.+36     	; 0x11aa <__floatunsisf+0xe0>
    1186:	30 97       	sbiw	r30, 0x00	; 0
    1188:	81 f0       	breq	.+32     	; 0x11aa <__floatunsisf+0xe0>
    118a:	0e 2e       	mov	r0, r30
    118c:	04 c0       	rjmp	.+8      	; 0x1196 <__floatunsisf+0xcc>
    118e:	ee 0c       	add	r14, r14
    1190:	ff 1c       	adc	r15, r15
    1192:	00 1f       	adc	r16, r16
    1194:	11 1f       	adc	r17, r17
    1196:	0a 94       	dec	r0
    1198:	d2 f7       	brpl	.-12     	; 0x118e <__floatunsisf+0xc4>
    119a:	ed 82       	std	Y+5, r14	; 0x05
    119c:	fe 82       	std	Y+6, r15	; 0x06
    119e:	0f 83       	std	Y+7, r16	; 0x07
    11a0:	18 87       	std	Y+8, r17	; 0x08
    11a2:	ce 1a       	sub	r12, r30
    11a4:	df 0a       	sbc	r13, r31
    11a6:	dc 82       	std	Y+4, r13	; 0x04
    11a8:	cb 82       	std	Y+3, r12	; 0x03
    11aa:	1a 82       	std	Y+2, r1	; 0x02
    11ac:	ce 01       	movw	r24, r28
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	0e 94 2d 09 	call	0x125a	; 0x125a <__pack_f>
    11b4:	28 96       	adiw	r28, 0x08	; 8
    11b6:	ea e0       	ldi	r30, 0x0A	; 10
    11b8:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <__epilogue_restores__+0x10>

000011bc <__clzsi2>:
    11bc:	ef 92       	push	r14
    11be:	ff 92       	push	r15
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	7b 01       	movw	r14, r22
    11c6:	8c 01       	movw	r16, r24
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	e8 16       	cp	r14, r24
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	f8 06       	cpc	r15, r24
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	08 07       	cpc	r16, r24
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	18 07       	cpc	r17, r24
    11d8:	88 f4       	brcc	.+34     	; 0x11fc <__clzsi2+0x40>
    11da:	8f ef       	ldi	r24, 0xFF	; 255
    11dc:	e8 16       	cp	r14, r24
    11de:	f1 04       	cpc	r15, r1
    11e0:	01 05       	cpc	r16, r1
    11e2:	11 05       	cpc	r17, r1
    11e4:	31 f0       	breq	.+12     	; 0x11f2 <__clzsi2+0x36>
    11e6:	28 f0       	brcs	.+10     	; 0x11f2 <__clzsi2+0x36>
    11e8:	88 e0       	ldi	r24, 0x08	; 8
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	a0 e0       	ldi	r26, 0x00	; 0
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	17 c0       	rjmp	.+46     	; 0x1220 <__clzsi2+0x64>
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	a0 e0       	ldi	r26, 0x00	; 0
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	12 c0       	rjmp	.+36     	; 0x1220 <__clzsi2+0x64>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	e8 16       	cp	r14, r24
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	f8 06       	cpc	r15, r24
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	08 07       	cpc	r16, r24
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	18 07       	cpc	r17, r24
    120c:	28 f0       	brcs	.+10     	; 0x1218 <__clzsi2+0x5c>
    120e:	88 e1       	ldi	r24, 0x18	; 24
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	a0 e0       	ldi	r26, 0x00	; 0
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <__clzsi2+0x64>
    1218:	80 e1       	ldi	r24, 0x10	; 16
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	a0 e0       	ldi	r26, 0x00	; 0
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	20 e2       	ldi	r18, 0x20	; 32
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	28 1b       	sub	r18, r24
    122a:	39 0b       	sbc	r19, r25
    122c:	4a 0b       	sbc	r20, r26
    122e:	5b 0b       	sbc	r21, r27
    1230:	04 c0       	rjmp	.+8      	; 0x123a <__clzsi2+0x7e>
    1232:	16 95       	lsr	r17
    1234:	07 95       	ror	r16
    1236:	f7 94       	ror	r15
    1238:	e7 94       	ror	r14
    123a:	8a 95       	dec	r24
    123c:	d2 f7       	brpl	.-12     	; 0x1232 <__clzsi2+0x76>
    123e:	f7 01       	movw	r30, r14
    1240:	e8 59       	subi	r30, 0x98	; 152
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	80 81       	ld	r24, Z
    1246:	28 1b       	sub	r18, r24
    1248:	31 09       	sbc	r19, r1
    124a:	41 09       	sbc	r20, r1
    124c:	51 09       	sbc	r21, r1
    124e:	c9 01       	movw	r24, r18
    1250:	1f 91       	pop	r17
    1252:	0f 91       	pop	r16
    1254:	ff 90       	pop	r15
    1256:	ef 90       	pop	r14
    1258:	08 95       	ret

0000125a <__pack_f>:
    125a:	df 92       	push	r13
    125c:	ef 92       	push	r14
    125e:	ff 92       	push	r15
    1260:	0f 93       	push	r16
    1262:	1f 93       	push	r17
    1264:	fc 01       	movw	r30, r24
    1266:	e4 80       	ldd	r14, Z+4	; 0x04
    1268:	f5 80       	ldd	r15, Z+5	; 0x05
    126a:	06 81       	ldd	r16, Z+6	; 0x06
    126c:	17 81       	ldd	r17, Z+7	; 0x07
    126e:	d1 80       	ldd	r13, Z+1	; 0x01
    1270:	80 81       	ld	r24, Z
    1272:	82 30       	cpi	r24, 0x02	; 2
    1274:	48 f4       	brcc	.+18     	; 0x1288 <__pack_f+0x2e>
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	a0 e1       	ldi	r26, 0x10	; 16
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e8 2a       	or	r14, r24
    1280:	f9 2a       	or	r15, r25
    1282:	0a 2b       	or	r16, r26
    1284:	1b 2b       	or	r17, r27
    1286:	a5 c0       	rjmp	.+330    	; 0x13d2 <__pack_f+0x178>
    1288:	84 30       	cpi	r24, 0x04	; 4
    128a:	09 f4       	brne	.+2      	; 0x128e <__pack_f+0x34>
    128c:	9f c0       	rjmp	.+318    	; 0x13cc <__pack_f+0x172>
    128e:	82 30       	cpi	r24, 0x02	; 2
    1290:	21 f4       	brne	.+8      	; 0x129a <__pack_f+0x40>
    1292:	ee 24       	eor	r14, r14
    1294:	ff 24       	eor	r15, r15
    1296:	87 01       	movw	r16, r14
    1298:	05 c0       	rjmp	.+10     	; 0x12a4 <__pack_f+0x4a>
    129a:	e1 14       	cp	r14, r1
    129c:	f1 04       	cpc	r15, r1
    129e:	01 05       	cpc	r16, r1
    12a0:	11 05       	cpc	r17, r1
    12a2:	19 f4       	brne	.+6      	; 0x12aa <__pack_f+0x50>
    12a4:	e0 e0       	ldi	r30, 0x00	; 0
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	96 c0       	rjmp	.+300    	; 0x13d6 <__pack_f+0x17c>
    12aa:	62 81       	ldd	r22, Z+2	; 0x02
    12ac:	73 81       	ldd	r23, Z+3	; 0x03
    12ae:	9f ef       	ldi	r25, 0xFF	; 255
    12b0:	62 38       	cpi	r22, 0x82	; 130
    12b2:	79 07       	cpc	r23, r25
    12b4:	0c f0       	brlt	.+2      	; 0x12b8 <__pack_f+0x5e>
    12b6:	5b c0       	rjmp	.+182    	; 0x136e <__pack_f+0x114>
    12b8:	22 e8       	ldi	r18, 0x82	; 130
    12ba:	3f ef       	ldi	r19, 0xFF	; 255
    12bc:	26 1b       	sub	r18, r22
    12be:	37 0b       	sbc	r19, r23
    12c0:	2a 31       	cpi	r18, 0x1A	; 26
    12c2:	31 05       	cpc	r19, r1
    12c4:	2c f0       	brlt	.+10     	; 0x12d0 <__pack_f+0x76>
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	2a c0       	rjmp	.+84     	; 0x1324 <__pack_f+0xca>
    12d0:	b8 01       	movw	r22, r16
    12d2:	a7 01       	movw	r20, r14
    12d4:	02 2e       	mov	r0, r18
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <__pack_f+0x86>
    12d8:	76 95       	lsr	r23
    12da:	67 95       	ror	r22
    12dc:	57 95       	ror	r21
    12de:	47 95       	ror	r20
    12e0:	0a 94       	dec	r0
    12e2:	d2 f7       	brpl	.-12     	; 0x12d8 <__pack_f+0x7e>
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	a0 e0       	ldi	r26, 0x00	; 0
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	04 c0       	rjmp	.+8      	; 0x12f6 <__pack_f+0x9c>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	aa 1f       	adc	r26, r26
    12f4:	bb 1f       	adc	r27, r27
    12f6:	2a 95       	dec	r18
    12f8:	d2 f7       	brpl	.-12     	; 0x12ee <__pack_f+0x94>
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	a1 09       	sbc	r26, r1
    12fe:	b1 09       	sbc	r27, r1
    1300:	8e 21       	and	r24, r14
    1302:	9f 21       	and	r25, r15
    1304:	a0 23       	and	r26, r16
    1306:	b1 23       	and	r27, r17
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	a1 05       	cpc	r26, r1
    130c:	b1 05       	cpc	r27, r1
    130e:	21 f0       	breq	.+8      	; 0x1318 <__pack_f+0xbe>
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	a0 e0       	ldi	r26, 0x00	; 0
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	9a 01       	movw	r18, r20
    131a:	ab 01       	movw	r20, r22
    131c:	28 2b       	or	r18, r24
    131e:	39 2b       	or	r19, r25
    1320:	4a 2b       	or	r20, r26
    1322:	5b 2b       	or	r21, r27
    1324:	da 01       	movw	r26, r20
    1326:	c9 01       	movw	r24, r18
    1328:	8f 77       	andi	r24, 0x7F	; 127
    132a:	90 70       	andi	r25, 0x00	; 0
    132c:	a0 70       	andi	r26, 0x00	; 0
    132e:	b0 70       	andi	r27, 0x00	; 0
    1330:	80 34       	cpi	r24, 0x40	; 64
    1332:	91 05       	cpc	r25, r1
    1334:	a1 05       	cpc	r26, r1
    1336:	b1 05       	cpc	r27, r1
    1338:	39 f4       	brne	.+14     	; 0x1348 <__pack_f+0xee>
    133a:	27 ff       	sbrs	r18, 7
    133c:	09 c0       	rjmp	.+18     	; 0x1350 <__pack_f+0xf6>
    133e:	20 5c       	subi	r18, 0xC0	; 192
    1340:	3f 4f       	sbci	r19, 0xFF	; 255
    1342:	4f 4f       	sbci	r20, 0xFF	; 255
    1344:	5f 4f       	sbci	r21, 0xFF	; 255
    1346:	04 c0       	rjmp	.+8      	; 0x1350 <__pack_f+0xf6>
    1348:	21 5c       	subi	r18, 0xC1	; 193
    134a:	3f 4f       	sbci	r19, 0xFF	; 255
    134c:	4f 4f       	sbci	r20, 0xFF	; 255
    134e:	5f 4f       	sbci	r21, 0xFF	; 255
    1350:	e0 e0       	ldi	r30, 0x00	; 0
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	20 30       	cpi	r18, 0x00	; 0
    1356:	a0 e0       	ldi	r26, 0x00	; 0
    1358:	3a 07       	cpc	r19, r26
    135a:	a0 e0       	ldi	r26, 0x00	; 0
    135c:	4a 07       	cpc	r20, r26
    135e:	a0 e4       	ldi	r26, 0x40	; 64
    1360:	5a 07       	cpc	r21, r26
    1362:	10 f0       	brcs	.+4      	; 0x1368 <__pack_f+0x10e>
    1364:	e1 e0       	ldi	r30, 0x01	; 1
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	79 01       	movw	r14, r18
    136a:	8a 01       	movw	r16, r20
    136c:	27 c0       	rjmp	.+78     	; 0x13bc <__pack_f+0x162>
    136e:	60 38       	cpi	r22, 0x80	; 128
    1370:	71 05       	cpc	r23, r1
    1372:	64 f5       	brge	.+88     	; 0x13cc <__pack_f+0x172>
    1374:	fb 01       	movw	r30, r22
    1376:	e1 58       	subi	r30, 0x81	; 129
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	d8 01       	movw	r26, r16
    137c:	c7 01       	movw	r24, r14
    137e:	8f 77       	andi	r24, 0x7F	; 127
    1380:	90 70       	andi	r25, 0x00	; 0
    1382:	a0 70       	andi	r26, 0x00	; 0
    1384:	b0 70       	andi	r27, 0x00	; 0
    1386:	80 34       	cpi	r24, 0x40	; 64
    1388:	91 05       	cpc	r25, r1
    138a:	a1 05       	cpc	r26, r1
    138c:	b1 05       	cpc	r27, r1
    138e:	39 f4       	brne	.+14     	; 0x139e <__pack_f+0x144>
    1390:	e7 fe       	sbrs	r14, 7
    1392:	0d c0       	rjmp	.+26     	; 0x13ae <__pack_f+0x154>
    1394:	80 e4       	ldi	r24, 0x40	; 64
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a0 e0       	ldi	r26, 0x00	; 0
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	04 c0       	rjmp	.+8      	; 0x13a6 <__pack_f+0x14c>
    139e:	8f e3       	ldi	r24, 0x3F	; 63
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	a0 e0       	ldi	r26, 0x00	; 0
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e8 0e       	add	r14, r24
    13a8:	f9 1e       	adc	r15, r25
    13aa:	0a 1f       	adc	r16, r26
    13ac:	1b 1f       	adc	r17, r27
    13ae:	17 ff       	sbrs	r17, 7
    13b0:	05 c0       	rjmp	.+10     	; 0x13bc <__pack_f+0x162>
    13b2:	16 95       	lsr	r17
    13b4:	07 95       	ror	r16
    13b6:	f7 94       	ror	r15
    13b8:	e7 94       	ror	r14
    13ba:	31 96       	adiw	r30, 0x01	; 1
    13bc:	87 e0       	ldi	r24, 0x07	; 7
    13be:	16 95       	lsr	r17
    13c0:	07 95       	ror	r16
    13c2:	f7 94       	ror	r15
    13c4:	e7 94       	ror	r14
    13c6:	8a 95       	dec	r24
    13c8:	d1 f7       	brne	.-12     	; 0x13be <__pack_f+0x164>
    13ca:	05 c0       	rjmp	.+10     	; 0x13d6 <__pack_f+0x17c>
    13cc:	ee 24       	eor	r14, r14
    13ce:	ff 24       	eor	r15, r15
    13d0:	87 01       	movw	r16, r14
    13d2:	ef ef       	ldi	r30, 0xFF	; 255
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	6e 2f       	mov	r22, r30
    13d8:	67 95       	ror	r22
    13da:	66 27       	eor	r22, r22
    13dc:	67 95       	ror	r22
    13de:	90 2f       	mov	r25, r16
    13e0:	9f 77       	andi	r25, 0x7F	; 127
    13e2:	d7 94       	ror	r13
    13e4:	dd 24       	eor	r13, r13
    13e6:	d7 94       	ror	r13
    13e8:	8e 2f       	mov	r24, r30
    13ea:	86 95       	lsr	r24
    13ec:	49 2f       	mov	r20, r25
    13ee:	46 2b       	or	r20, r22
    13f0:	58 2f       	mov	r21, r24
    13f2:	5d 29       	or	r21, r13
    13f4:	b7 01       	movw	r22, r14
    13f6:	ca 01       	movw	r24, r20
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	df 90       	pop	r13
    1402:	08 95       	ret

00001404 <__unpack_f>:
    1404:	fc 01       	movw	r30, r24
    1406:	db 01       	movw	r26, r22
    1408:	40 81       	ld	r20, Z
    140a:	51 81       	ldd	r21, Z+1	; 0x01
    140c:	22 81       	ldd	r18, Z+2	; 0x02
    140e:	62 2f       	mov	r22, r18
    1410:	6f 77       	andi	r22, 0x7F	; 127
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	22 1f       	adc	r18, r18
    1416:	22 27       	eor	r18, r18
    1418:	22 1f       	adc	r18, r18
    141a:	93 81       	ldd	r25, Z+3	; 0x03
    141c:	89 2f       	mov	r24, r25
    141e:	88 0f       	add	r24, r24
    1420:	82 2b       	or	r24, r18
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	99 1f       	adc	r25, r25
    1428:	99 27       	eor	r25, r25
    142a:	99 1f       	adc	r25, r25
    142c:	11 96       	adiw	r26, 0x01	; 1
    142e:	9c 93       	st	X, r25
    1430:	11 97       	sbiw	r26, 0x01	; 1
    1432:	21 15       	cp	r18, r1
    1434:	31 05       	cpc	r19, r1
    1436:	a9 f5       	brne	.+106    	; 0x14a2 <__unpack_f+0x9e>
    1438:	41 15       	cp	r20, r1
    143a:	51 05       	cpc	r21, r1
    143c:	61 05       	cpc	r22, r1
    143e:	71 05       	cpc	r23, r1
    1440:	11 f4       	brne	.+4      	; 0x1446 <__unpack_f+0x42>
    1442:	82 e0       	ldi	r24, 0x02	; 2
    1444:	37 c0       	rjmp	.+110    	; 0x14b4 <__unpack_f+0xb0>
    1446:	82 e8       	ldi	r24, 0x82	; 130
    1448:	9f ef       	ldi	r25, 0xFF	; 255
    144a:	13 96       	adiw	r26, 0x03	; 3
    144c:	9c 93       	st	X, r25
    144e:	8e 93       	st	-X, r24
    1450:	12 97       	sbiw	r26, 0x02	; 2
    1452:	9a 01       	movw	r18, r20
    1454:	ab 01       	movw	r20, r22
    1456:	67 e0       	ldi	r22, 0x07	; 7
    1458:	22 0f       	add	r18, r18
    145a:	33 1f       	adc	r19, r19
    145c:	44 1f       	adc	r20, r20
    145e:	55 1f       	adc	r21, r21
    1460:	6a 95       	dec	r22
    1462:	d1 f7       	brne	.-12     	; 0x1458 <__unpack_f+0x54>
    1464:	83 e0       	ldi	r24, 0x03	; 3
    1466:	8c 93       	st	X, r24
    1468:	0d c0       	rjmp	.+26     	; 0x1484 <__unpack_f+0x80>
    146a:	22 0f       	add	r18, r18
    146c:	33 1f       	adc	r19, r19
    146e:	44 1f       	adc	r20, r20
    1470:	55 1f       	adc	r21, r21
    1472:	12 96       	adiw	r26, 0x02	; 2
    1474:	8d 91       	ld	r24, X+
    1476:	9c 91       	ld	r25, X
    1478:	13 97       	sbiw	r26, 0x03	; 3
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	13 96       	adiw	r26, 0x03	; 3
    147e:	9c 93       	st	X, r25
    1480:	8e 93       	st	-X, r24
    1482:	12 97       	sbiw	r26, 0x02	; 2
    1484:	20 30       	cpi	r18, 0x00	; 0
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	38 07       	cpc	r19, r24
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	48 07       	cpc	r20, r24
    148e:	80 e4       	ldi	r24, 0x40	; 64
    1490:	58 07       	cpc	r21, r24
    1492:	58 f3       	brcs	.-42     	; 0x146a <__unpack_f+0x66>
    1494:	14 96       	adiw	r26, 0x04	; 4
    1496:	2d 93       	st	X+, r18
    1498:	3d 93       	st	X+, r19
    149a:	4d 93       	st	X+, r20
    149c:	5c 93       	st	X, r21
    149e:	17 97       	sbiw	r26, 0x07	; 7
    14a0:	08 95       	ret
    14a2:	2f 3f       	cpi	r18, 0xFF	; 255
    14a4:	31 05       	cpc	r19, r1
    14a6:	79 f4       	brne	.+30     	; 0x14c6 <__unpack_f+0xc2>
    14a8:	41 15       	cp	r20, r1
    14aa:	51 05       	cpc	r21, r1
    14ac:	61 05       	cpc	r22, r1
    14ae:	71 05       	cpc	r23, r1
    14b0:	19 f4       	brne	.+6      	; 0x14b8 <__unpack_f+0xb4>
    14b2:	84 e0       	ldi	r24, 0x04	; 4
    14b4:	8c 93       	st	X, r24
    14b6:	08 95       	ret
    14b8:	64 ff       	sbrs	r22, 4
    14ba:	03 c0       	rjmp	.+6      	; 0x14c2 <__unpack_f+0xbe>
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	8c 93       	st	X, r24
    14c0:	12 c0       	rjmp	.+36     	; 0x14e6 <__unpack_f+0xe2>
    14c2:	1c 92       	st	X, r1
    14c4:	10 c0       	rjmp	.+32     	; 0x14e6 <__unpack_f+0xe2>
    14c6:	2f 57       	subi	r18, 0x7F	; 127
    14c8:	30 40       	sbci	r19, 0x00	; 0
    14ca:	13 96       	adiw	r26, 0x03	; 3
    14cc:	3c 93       	st	X, r19
    14ce:	2e 93       	st	-X, r18
    14d0:	12 97       	sbiw	r26, 0x02	; 2
    14d2:	83 e0       	ldi	r24, 0x03	; 3
    14d4:	8c 93       	st	X, r24
    14d6:	87 e0       	ldi	r24, 0x07	; 7
    14d8:	44 0f       	add	r20, r20
    14da:	55 1f       	adc	r21, r21
    14dc:	66 1f       	adc	r22, r22
    14de:	77 1f       	adc	r23, r23
    14e0:	8a 95       	dec	r24
    14e2:	d1 f7       	brne	.-12     	; 0x14d8 <__unpack_f+0xd4>
    14e4:	70 64       	ori	r23, 0x40	; 64
    14e6:	14 96       	adiw	r26, 0x04	; 4
    14e8:	4d 93       	st	X+, r20
    14ea:	5d 93       	st	X+, r21
    14ec:	6d 93       	st	X+, r22
    14ee:	7c 93       	st	X, r23
    14f0:	17 97       	sbiw	r26, 0x07	; 7
    14f2:	08 95       	ret

000014f4 <__fpcmp_parts_f>:
    14f4:	1f 93       	push	r17
    14f6:	dc 01       	movw	r26, r24
    14f8:	fb 01       	movw	r30, r22
    14fa:	9c 91       	ld	r25, X
    14fc:	92 30       	cpi	r25, 0x02	; 2
    14fe:	08 f4       	brcc	.+2      	; 0x1502 <__fpcmp_parts_f+0xe>
    1500:	47 c0       	rjmp	.+142    	; 0x1590 <__fpcmp_parts_f+0x9c>
    1502:	80 81       	ld	r24, Z
    1504:	82 30       	cpi	r24, 0x02	; 2
    1506:	08 f4       	brcc	.+2      	; 0x150a <__fpcmp_parts_f+0x16>
    1508:	43 c0       	rjmp	.+134    	; 0x1590 <__fpcmp_parts_f+0x9c>
    150a:	94 30       	cpi	r25, 0x04	; 4
    150c:	51 f4       	brne	.+20     	; 0x1522 <__fpcmp_parts_f+0x2e>
    150e:	11 96       	adiw	r26, 0x01	; 1
    1510:	1c 91       	ld	r17, X
    1512:	84 30       	cpi	r24, 0x04	; 4
    1514:	99 f5       	brne	.+102    	; 0x157c <__fpcmp_parts_f+0x88>
    1516:	81 81       	ldd	r24, Z+1	; 0x01
    1518:	68 2f       	mov	r22, r24
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	61 1b       	sub	r22, r17
    151e:	71 09       	sbc	r23, r1
    1520:	3f c0       	rjmp	.+126    	; 0x15a0 <__fpcmp_parts_f+0xac>
    1522:	84 30       	cpi	r24, 0x04	; 4
    1524:	21 f0       	breq	.+8      	; 0x152e <__fpcmp_parts_f+0x3a>
    1526:	92 30       	cpi	r25, 0x02	; 2
    1528:	31 f4       	brne	.+12     	; 0x1536 <__fpcmp_parts_f+0x42>
    152a:	82 30       	cpi	r24, 0x02	; 2
    152c:	b9 f1       	breq	.+110    	; 0x159c <__fpcmp_parts_f+0xa8>
    152e:	81 81       	ldd	r24, Z+1	; 0x01
    1530:	88 23       	and	r24, r24
    1532:	89 f1       	breq	.+98     	; 0x1596 <__fpcmp_parts_f+0xa2>
    1534:	2d c0       	rjmp	.+90     	; 0x1590 <__fpcmp_parts_f+0x9c>
    1536:	11 96       	adiw	r26, 0x01	; 1
    1538:	1c 91       	ld	r17, X
    153a:	11 97       	sbiw	r26, 0x01	; 1
    153c:	82 30       	cpi	r24, 0x02	; 2
    153e:	f1 f0       	breq	.+60     	; 0x157c <__fpcmp_parts_f+0x88>
    1540:	81 81       	ldd	r24, Z+1	; 0x01
    1542:	18 17       	cp	r17, r24
    1544:	d9 f4       	brne	.+54     	; 0x157c <__fpcmp_parts_f+0x88>
    1546:	12 96       	adiw	r26, 0x02	; 2
    1548:	2d 91       	ld	r18, X+
    154a:	3c 91       	ld	r19, X
    154c:	13 97       	sbiw	r26, 0x03	; 3
    154e:	82 81       	ldd	r24, Z+2	; 0x02
    1550:	93 81       	ldd	r25, Z+3	; 0x03
    1552:	82 17       	cp	r24, r18
    1554:	93 07       	cpc	r25, r19
    1556:	94 f0       	brlt	.+36     	; 0x157c <__fpcmp_parts_f+0x88>
    1558:	28 17       	cp	r18, r24
    155a:	39 07       	cpc	r19, r25
    155c:	bc f0       	brlt	.+46     	; 0x158c <__fpcmp_parts_f+0x98>
    155e:	14 96       	adiw	r26, 0x04	; 4
    1560:	8d 91       	ld	r24, X+
    1562:	9d 91       	ld	r25, X+
    1564:	0d 90       	ld	r0, X+
    1566:	bc 91       	ld	r27, X
    1568:	a0 2d       	mov	r26, r0
    156a:	24 81       	ldd	r18, Z+4	; 0x04
    156c:	35 81       	ldd	r19, Z+5	; 0x05
    156e:	46 81       	ldd	r20, Z+6	; 0x06
    1570:	57 81       	ldd	r21, Z+7	; 0x07
    1572:	28 17       	cp	r18, r24
    1574:	39 07       	cpc	r19, r25
    1576:	4a 07       	cpc	r20, r26
    1578:	5b 07       	cpc	r21, r27
    157a:	18 f4       	brcc	.+6      	; 0x1582 <__fpcmp_parts_f+0x8e>
    157c:	11 23       	and	r17, r17
    157e:	41 f0       	breq	.+16     	; 0x1590 <__fpcmp_parts_f+0x9c>
    1580:	0a c0       	rjmp	.+20     	; 0x1596 <__fpcmp_parts_f+0xa2>
    1582:	82 17       	cp	r24, r18
    1584:	93 07       	cpc	r25, r19
    1586:	a4 07       	cpc	r26, r20
    1588:	b5 07       	cpc	r27, r21
    158a:	40 f4       	brcc	.+16     	; 0x159c <__fpcmp_parts_f+0xa8>
    158c:	11 23       	and	r17, r17
    158e:	19 f0       	breq	.+6      	; 0x1596 <__fpcmp_parts_f+0xa2>
    1590:	61 e0       	ldi	r22, 0x01	; 1
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	05 c0       	rjmp	.+10     	; 0x15a0 <__fpcmp_parts_f+0xac>
    1596:	6f ef       	ldi	r22, 0xFF	; 255
    1598:	7f ef       	ldi	r23, 0xFF	; 255
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <__fpcmp_parts_f+0xac>
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	cb 01       	movw	r24, r22
    15a2:	1f 91       	pop	r17
    15a4:	08 95       	ret

000015a6 <__udivmodhi4>:
    15a6:	aa 1b       	sub	r26, r26
    15a8:	bb 1b       	sub	r27, r27
    15aa:	51 e1       	ldi	r21, 0x11	; 17
    15ac:	07 c0       	rjmp	.+14     	; 0x15bc <__udivmodhi4_ep>

000015ae <__udivmodhi4_loop>:
    15ae:	aa 1f       	adc	r26, r26
    15b0:	bb 1f       	adc	r27, r27
    15b2:	a6 17       	cp	r26, r22
    15b4:	b7 07       	cpc	r27, r23
    15b6:	10 f0       	brcs	.+4      	; 0x15bc <__udivmodhi4_ep>
    15b8:	a6 1b       	sub	r26, r22
    15ba:	b7 0b       	sbc	r27, r23

000015bc <__udivmodhi4_ep>:
    15bc:	88 1f       	adc	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	5a 95       	dec	r21
    15c2:	a9 f7       	brne	.-22     	; 0x15ae <__udivmodhi4_loop>
    15c4:	80 95       	com	r24
    15c6:	90 95       	com	r25
    15c8:	bc 01       	movw	r22, r24
    15ca:	cd 01       	movw	r24, r26
    15cc:	08 95       	ret

000015ce <__prologue_saves__>:
    15ce:	2f 92       	push	r2
    15d0:	3f 92       	push	r3
    15d2:	4f 92       	push	r4
    15d4:	5f 92       	push	r5
    15d6:	6f 92       	push	r6
    15d8:	7f 92       	push	r7
    15da:	8f 92       	push	r8
    15dc:	9f 92       	push	r9
    15de:	af 92       	push	r10
    15e0:	bf 92       	push	r11
    15e2:	cf 92       	push	r12
    15e4:	df 92       	push	r13
    15e6:	ef 92       	push	r14
    15e8:	ff 92       	push	r15
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	ca 1b       	sub	r28, r26
    15f8:	db 0b       	sbc	r29, r27
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	09 94       	ijmp

00001606 <__epilogue_restores__>:
    1606:	2a 88       	ldd	r2, Y+18	; 0x12
    1608:	39 88       	ldd	r3, Y+17	; 0x11
    160a:	48 88       	ldd	r4, Y+16	; 0x10
    160c:	5f 84       	ldd	r5, Y+15	; 0x0f
    160e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1610:	7d 84       	ldd	r7, Y+13	; 0x0d
    1612:	8c 84       	ldd	r8, Y+12	; 0x0c
    1614:	9b 84       	ldd	r9, Y+11	; 0x0b
    1616:	aa 84       	ldd	r10, Y+10	; 0x0a
    1618:	b9 84       	ldd	r11, Y+9	; 0x09
    161a:	c8 84       	ldd	r12, Y+8	; 0x08
    161c:	df 80       	ldd	r13, Y+7	; 0x07
    161e:	ee 80       	ldd	r14, Y+6	; 0x06
    1620:	fd 80       	ldd	r15, Y+5	; 0x05
    1622:	0c 81       	ldd	r16, Y+4	; 0x04
    1624:	1b 81       	ldd	r17, Y+3	; 0x03
    1626:	aa 81       	ldd	r26, Y+2	; 0x02
    1628:	b9 81       	ldd	r27, Y+1	; 0x01
    162a:	ce 0f       	add	r28, r30
    162c:	d1 1d       	adc	r29, r1
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	ed 01       	movw	r28, r26
    163a:	08 95       	ret

0000163c <_exit>:
    163c:	f8 94       	cli

0000163e <__stop_program>:
    163e:	ff cf       	rjmp	.-2      	; 0x163e <__stop_program>
