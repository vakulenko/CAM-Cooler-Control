
TEC_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000017f4  00001888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800168  000018fc  00001990  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  00001990  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  00001993  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000204  00000000  00000000  000019b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d22  00000000  00000000  00001bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000315  00000000  00000000  000028d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc7  00000000  00000000  00002bee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  000037b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ea  00000000  00000000  000038f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000725  00000000  00000000  00003be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  00004307  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 47 03 	call	0x68e	; 0x68e <main>
      8a:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <eeprom_read_byte>:

/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
      92:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
      94:	e1 99       	sbic	0x1c, 1	; 28
      96:	fe cf       	rjmp	.-4      	; 0x94 <eeprom_read_byte+0x2>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
      98:	3f bb       	out	0x1f, r19	; 31
      9a:	2e bb       	out	0x1e, r18	; 30
#endif
    EECR |= (1 << EERE);
      9c:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
      9e:	8d b3       	in	r24, 0x1d	; 29
}
      a0:	08 95       	ret

000000a2 <eeprom_write_byte>:

/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
      a2:	9c 01       	movw	r18, r24
    do {} while (!eeprom_is_ready ());
      a4:	e1 99       	sbic	0x1c, 1	; 28
      a6:	fe cf       	rjmp	.-4      	; 0xa4 <eeprom_write_byte+0x2>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
      a8:	3f bb       	out	0x1f, r19	; 31
      aa:	2e bb       	out	0x1e, r18	; 30
#endif
    EEDR = __value;
      ac:	6d bb       	out	0x1d, r22	; 29

    __asm__ __volatile__ (
      ae:	0f b6       	in	r0, 0x3f	; 63
      b0:	f8 94       	cli
      b2:	e2 9a       	sbi	0x1c, 2	; 28
      b4:	e1 9a       	sbi	0x1c, 1	; 28
      b6:	0f be       	out	0x3f, r0	; 63
          [__sreg]  "i" (_SFR_IO_ADDR(SREG)),
          [__eemwe] "i" (EEMWE),
          [__eewe]  "i" (EEWE)
        : "r0"
    );
}
      b8:	08 95       	ret

000000ba <uartInit>:

//------------------------------------------------------------------------------------
//UART

void uartInit(void)
{
      ba:	10 bc       	out	0x20, r1	; 32
	UBRRH = (BAUD_PRESCALE >> 8);		// Init UART baudrate
	UBRRL = BAUD_PRESCALE;
      bc:	83 e3       	ldi	r24, 0x33	; 51
      be:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1<<RXEN)|(1<<TXEN)|(1 << RXCIE);	// TX, RX enable, RX interrupt enable
      c0:	88 e9       	ldi	r24, 0x98	; 152
      c2:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
      c4:	86 e8       	ldi	r24, 0x86	; 134
      c6:	80 bd       	out	0x20, r24	; 32
	return;
}
      c8:	08 95       	ret

000000ca <uartTransmitByte>:

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
      ca:	5d 9b       	sbis	0x0b, 5	; 11
      cc:	fe cf       	rjmp	.-4      	; 0xca <uartTransmitByte>
	while ( !( UCSRA & (1<<UDRE)) );
	UDR = data;
      ce:	8c b9       	out	0x0c, r24	; 12
	return;
}
      d0:	08 95       	ret

000000d2 <uartReceiveByte>:

//Receive byte thought UART
unsigned char uartReceiveByte (void)
{
      d2:	5f 9b       	sbis	0x0b, 7	; 11
      d4:	fe cf       	rjmp	.-4      	; 0xd2 <uartReceiveByte>

	while ( !(UCSRA & (1<<RXC)) )
	;
	return UDR;
      d6:	8c b1       	in	r24, 0x0c	; 12
}
      d8:	08 95       	ret

000000da <uartTransmitMessage>:

//Transmit string to UART
void uartTransmitMessage(char* msg)
{ unsigned char i;
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	04 c0       	rjmp	.+8      	; 0xe6 <uartTransmitMessage+0xc>
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
      de:	5d 9b       	sbis	0x0b, 5	; 11
      e0:	fe cf       	rjmp	.-4      	; 0xde <uartTransmitMessage+0x4>
	UDR = data;
      e2:	ec b9       	out	0x0c, r30	; 12
	i=0;

	while ((i<256)&(msg[i]!=0x00) )
	{
		uartTransmitByte(msg[i]);
		i++;
      e4:	2f 5f       	subi	r18, 0xFF	; 255
//Transmit string to UART
void uartTransmitMessage(char* msg)
{ unsigned char i;
	i=0;

	while ((i<256)&(msg[i]!=0x00) )
      e6:	fc 01       	movw	r30, r24
      e8:	e2 0f       	add	r30, r18
      ea:	f1 1d       	adc	r31, r1
      ec:	e0 81       	ld	r30, Z
      ee:	ee 23       	and	r30, r30
      f0:	b1 f7       	brne	.-20     	; 0xde <uartTransmitMessage+0x4>
	{
		uartTransmitByte(msg[i]);
		i++;
	}
	return;
}
      f2:	08 95       	ret

000000f4 <clearRXBuf>:

//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
      f4:	ef e7       	ldi	r30, 0x7F	; 127
      f6:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
      f8:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	ea 38       	cpi	r30, 0x8A	; 138
      fe:	f8 07       	cpc	r31, r24
     100:	d9 f7       	brne	.-10     	; 0xf8 <clearRXBuf+0x4>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     102:	10 92 69 01 	sts	0x0169, r1
	return;
}
     106:	08 95       	ret

00000108 <clearTXBuf>:

void clearTXBuf (void)
{
     108:	ed e6       	ldi	r30, 0x6D	; 109
     10a:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	txBuf[i]=0;
     10c:	11 92       	st	Z+, r1
}

void clearTXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	e8 37       	cpi	r30, 0x78	; 120
     112:	f8 07       	cpc	r31, r24
     114:	d9 f7       	brne	.-10     	; 0x10c <clearTXBuf+0x4>
	txBuf[i]=0;
	return;
}
     116:	08 95       	ret

00000118 <clearBuf>:

void clearBuf (void)
{
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=txBuf[i]=0;
     11c:	fc 01       	movw	r30, r24
     11e:	e3 59       	subi	r30, 0x93	; 147
     120:	fe 4f       	sbci	r31, 0xFE	; 254
     122:	10 82       	st	Z, r1
     124:	fc 01       	movw	r30, r24
     126:	e1 58       	subi	r30, 0x81	; 129
     128:	fe 4f       	sbci	r31, 0xFE	; 254
     12a:	10 82       	st	Z, r1
     12c:	01 96       	adiw	r24, 0x01	; 1
}

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     12e:	8b 30       	cpi	r24, 0x0B	; 11
     130:	91 05       	cpc	r25, r1
     132:	a1 f7       	brne	.-24     	; 0x11c <clearBuf+0x4>
	rxBuf[i]=txBuf[i]=0;
	return;
}
     134:	08 95       	ret

00000136 <__vector_11>:

//receive packet to RX buffer
ISR(USART_RXC_vect)
{
     136:	1f 92       	push	r1
     138:	0f 92       	push	r0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	0f 92       	push	r0
     13e:	11 24       	eor	r1, r1
     140:	2f 93       	push	r18
     142:	3f 93       	push	r19
     144:	4f 93       	push	r20
     146:	6f 93       	push	r22
     148:	7f 93       	push	r23
     14a:	8f 93       	push	r24
     14c:	9f 93       	push	r25
     14e:	ef 93       	push	r30
     150:	ff 93       	push	r31
	uint16_t i=0;

	if (packetReceived!=0)
     152:	80 91 68 01 	lds	r24, 0x0168
     156:	88 23       	and	r24, r24
     158:	11 f0       	breq	.+4      	; 0x15e <__vector_11+0x28>
	{
		i=UDR;
     15a:	8c b1       	in	r24, 0x0c	; 12
     15c:	25 c0       	rjmp	.+74     	; 0x1a8 <__vector_11+0x72>
		return;
	}

	rxBuf[0]=UDR;
     15e:	8c b1       	in	r24, 0x0c	; 12
     160:	80 93 7f 01 	sts	0x017F, r24
	currentRXPacketLen=1;
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	80 93 69 01 	sts	0x0169, r24
     16a:	20 e0       	ldi	r18, 0x00	; 0
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	41 e0       	ldi	r20, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     170:	61 e0       	ldi	r22, 0x01	; 1
     172:	70 e0       	ldi	r23, 0x00	; 0
     174:	09 c0       	rjmp	.+18     	; 0x188 <__vector_11+0x52>

	while (1)
	{
		while ( !(UCSRA & (1<<RXC)) )
		{
			if (i==10000)
     176:	87 e2       	ldi	r24, 0x27	; 39
     178:	20 31       	cpi	r18, 0x10	; 16
     17a:	38 07       	cpc	r19, r24
     17c:	81 f0       	breq	.+32     	; 0x19e <__vector_11+0x68>
			{
				packetReceived=1;
				return;
			}
			i++;
     17e:	2f 5f       	subi	r18, 0xFF	; 255
     180:	3f 4f       	sbci	r19, 0xFF	; 255
     182:	cb 01       	movw	r24, r22
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <__vector_11+0x4e>
	rxBuf[0]=UDR;
	currentRXPacketLen=1;

	while (1)
	{
		while ( !(UCSRA & (1<<RXC)) )
     188:	5f 9b       	sbis	0x0b, 7	; 11
     18a:	f5 cf       	rjmp	.-22     	; 0x176 <__vector_11+0x40>
				return;
			}
			i++;
			_delay_loop_2(1);
		}
		rxBuf[currentRXPacketLen]=UDR;
     18c:	8c b1       	in	r24, 0x0c	; 12
     18e:	e4 2f       	mov	r30, r20
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	e1 58       	subi	r30, 0x81	; 129
     194:	fe 4f       	sbci	r31, 0xFE	; 254
     196:	80 83       	st	Z, r24
		currentRXPacketLen++;
     198:	4f 5f       	subi	r20, 0xFF	; 255

		if (currentRXPacketLen>=BUFF_SIZE)
     19a:	4b 30       	cpi	r20, 0x0B	; 11
     19c:	a8 f3       	brcs	.-22     	; 0x188 <__vector_11+0x52>
     19e:	40 93 69 01 	sts	0x0169, r20
		{
			packetReceived=1;
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	80 93 68 01 	sts	0x0168, r24
			return;
		}
	}
}
     1a8:	ff 91       	pop	r31
     1aa:	ef 91       	pop	r30
     1ac:	9f 91       	pop	r25
     1ae:	8f 91       	pop	r24
     1b0:	7f 91       	pop	r23
     1b2:	6f 91       	pop	r22
     1b4:	4f 91       	pop	r20
     1b6:	3f 91       	pop	r19
     1b8:	2f 91       	pop	r18
     1ba:	0f 90       	pop	r0
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	0f 90       	pop	r0
     1c0:	1f 90       	pop	r1
     1c2:	18 95       	reti

000001c4 <uartSendPacket>:

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
     1c4:	ed e6       	ldi	r30, 0x6D	; 109
     1c6:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t i;
	for (i=0;i<length;i++)
     1c8:	70 e0       	ldi	r23, 0x00	; 0
     1ca:	6e 0f       	add	r22, r30
     1cc:	7f 1f       	adc	r23, r31
     1ce:	05 c0       	rjmp	.+10     	; 0x1da <uartSendPacket+0x16>
	uartTransmitByte(txBuf[i]);
     1d0:	80 81       	ld	r24, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     1d2:	5d 9b       	sbis	0x0b, 5	; 11
     1d4:	fe cf       	rjmp	.-4      	; 0x1d2 <uartSendPacket+0xe>
	UDR = data;
     1d6:	8c b9       	out	0x0c, r24	; 12
     1d8:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     1da:	e6 17       	cp	r30, r22
     1dc:	f7 07       	cpc	r31, r23
     1de:	c1 f7       	brne	.-16     	; 0x1d0 <uartSendPacket+0xc>
	uartTransmitByte(txBuf[i]);
	return;
}
     1e0:	08 95       	ret

000001e2 <crc8Block>:

//crc calculating function
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
     1e2:	fc 01       	movw	r30, r24
     1e4:	9f ef       	ldi	r25, 0xFF	; 255
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     1e6:	21 e3       	ldi	r18, 0x31	; 49
     1e8:	0e c0       	rjmp	.+28     	; 0x206 <crc8Block+0x24>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     1ea:	80 81       	ld	r24, Z
     1ec:	98 27       	eor	r25, r24
     1ee:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     1f0:	97 ff       	sbrs	r25, 7
     1f2:	03 c0       	rjmp	.+6      	; 0x1fa <crc8Block+0x18>
     1f4:	99 0f       	add	r25, r25
     1f6:	92 27       	eor	r25, r18
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <crc8Block+0x1a>
     1fa:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     1fc:	8f 5f       	subi	r24, 0xFF	; 255
     1fe:	88 30       	cpi	r24, 0x08	; 8
     200:	b9 f7       	brne	.-18     	; 0x1f0 <crc8Block+0xe>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     202:	31 96       	adiw	r30, 0x01	; 1
     204:	61 50       	subi	r22, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     206:	66 23       	and	r22, r22
     208:	81 f7       	brne	.-32     	; 0x1ea <crc8Block+0x8>
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
	}	
	return crc;
}
     20a:	89 2f       	mov	r24, r25
     20c:	08 95       	ret

0000020e <prepareSystemStatus>:

//prepare TX buffer
void prepareSystemStatus (void)
{
     20e:	84 e6       	ldi	r24, 0x64	; 100
     210:	80 93 6d 01 	sts	0x016D, r24
	txBuf[0]='d';
	txBuf[1]= sensorData[0]>>8;
     214:	90 91 7b 01 	lds	r25, 0x017B
     218:	80 91 7c 01 	lds	r24, 0x017C
     21c:	80 93 6e 01 	sts	0x016E, r24
	txBuf[2]= sensorData[0]&0x00ff;
     220:	90 93 6f 01 	sts	0x016F, r25
	txBuf[3]= sensorData[1]>>8;
     224:	90 91 7d 01 	lds	r25, 0x017D
     228:	80 91 7e 01 	lds	r24, 0x017E
     22c:	80 93 70 01 	sts	0x0170, r24
	txBuf[4]= sensorData[1]&0x00ff;
     230:	90 93 71 01 	sts	0x0171, r25
	txBuf[5]= setData[0]>>8;
     234:	90 91 79 01 	lds	r25, 0x0179
     238:	80 91 7a 01 	lds	r24, 0x017A
     23c:	80 93 72 01 	sts	0x0172, r24
	txBuf[6]= setData[0]&0x00ff;
     240:	90 93 73 01 	sts	0x0173, r25
	txBuf[7]= coolerPower;
     244:	80 91 6c 01 	lds	r24, 0x016C
     248:	80 93 74 01 	sts	0x0174, r24
	txBuf[8]= errorCode;
     24c:	80 91 6a 01 	lds	r24, 0x016A
     250:	80 93 75 01 	sts	0x0175, r24
	txBuf[9]= coolerState;
     254:	80 91 8b 01 	lds	r24, 0x018B
     258:	80 93 76 01 	sts	0x0176, r24
     25c:	9f ef       	ldi	r25, 0xFF	; 255
     25e:	ed e6       	ldi	r30, 0x6D	; 109
     260:	f1 e0       	ldi	r31, 0x01	; 1
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     262:	21 e3       	ldi	r18, 0x31	; 49
     264:	0d c0       	rjmp	.+26     	; 0x280 <prepareSystemStatus+0x72>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     266:	80 81       	ld	r24, Z
     268:	98 27       	eor	r25, r24
     26a:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     26c:	97 ff       	sbrs	r25, 7
     26e:	03 c0       	rjmp	.+6      	; 0x276 <prepareSystemStatus+0x68>
     270:	99 0f       	add	r25, r25
     272:	92 27       	eor	r25, r18
     274:	01 c0       	rjmp	.+2      	; 0x278 <prepareSystemStatus+0x6a>
     276:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     278:	8f 5f       	subi	r24, 0xFF	; 255
     27a:	88 30       	cpi	r24, 0x08	; 8
     27c:	b9 f7       	brne	.-18     	; 0x26c <prepareSystemStatus+0x5e>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     27e:	31 96       	adiw	r30, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	e7 37       	cpi	r30, 0x77	; 119
     284:	f8 07       	cpc	r31, r24
     286:	79 f7       	brne	.-34     	; 0x266 <prepareSystemStatus+0x58>
	txBuf[5]= setData[0]>>8;
	txBuf[6]= setData[0]&0x00ff;
	txBuf[7]= coolerPower;
	txBuf[8]= errorCode;
	txBuf[9]= coolerState;
	txBuf[10]=crc8Block(txBuf,10);
     288:	90 83       	st	Z, r25
}
     28a:	08 95       	ret

0000028c <presentDS18b20>:

//------------------------------------------------------------------------------------
//DS18B20

uint8_t presentDS18b20(uint8_t sensor_num)
{	uint8_t res, sensor_pin;
     28c:	88 23       	and	r24, r24
     28e:	11 f0       	breq	.+4      	; 0x294 <presentDS18b20+0x8>
     290:	43 e0       	ldi	r20, 0x03	; 3
     292:	01 c0       	rjmp	.+2      	; 0x296 <presentDS18b20+0xa>
     294:	42 e0       	ldi	r20, 0x02	; 2

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;
	
	SENSOR_DDR|=(1<<sensor_pin);
     296:	84 b3       	in	r24, 0x14	; 20
     298:	21 e0       	ldi	r18, 0x01	; 1
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	92 2f       	mov	r25, r18
     29e:	04 2e       	mov	r0, r20
     2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <presentDS18b20+0x18>
     2a2:	99 0f       	add	r25, r25
     2a4:	0a 94       	dec	r0
     2a6:	ea f7       	brpl	.-6      	; 0x2a2 <presentDS18b20+0x16>
     2a8:	89 2b       	or	r24, r25
     2aa:	84 bb       	out	0x14, r24	; 20
     2ac:	e8 ee       	ldi	r30, 0xE8	; 232
     2ae:	f3 e0       	ldi	r31, 0x03	; 3
     2b0:	31 97       	sbiw	r30, 0x01	; 1
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <presentDS18b20+0x24>
	_delay_us (500);

	SENSOR_DDR&=~(1<<sensor_pin);
     2b4:	84 b3       	in	r24, 0x14	; 20
     2b6:	90 95       	com	r25
     2b8:	98 23       	and	r25, r24
     2ba:	94 bb       	out	0x14, r25	; 20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2bc:	85 ed       	ldi	r24, 0xD5	; 213
     2be:	8a 95       	dec	r24
     2c0:	f1 f7       	brne	.-4      	; 0x2be <presentDS18b20+0x32>
	_delay_us(80);
	
	if ((SENSOR_PIN&(1<<sensor_pin)) == 0x00) res=1;  
     2c2:	83 b3       	in	r24, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2c4:	e8 e4       	ldi	r30, 0x48	; 72
     2c6:	f3 e0       	ldi	r31, 0x03	; 3
     2c8:	31 97       	sbiw	r30, 0x01	; 1
     2ca:	f1 f7       	brne	.-4      	; 0x2c8 <presentDS18b20+0x3c>
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <presentDS18b20+0x48>
     2d0:	95 95       	asr	r25
     2d2:	87 95       	ror	r24
     2d4:	4a 95       	dec	r20
     2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <presentDS18b20+0x44>
     2d8:	82 27       	eor	r24, r18
     2da:	93 27       	eor	r25, r19
	else res=0;  
	
	_delay_us(420);
	return res;
}
     2dc:	81 70       	andi	r24, 0x01	; 1
     2de:	08 95       	ret

000002e0 <sendDS18b20>:

void sendDS18b20(uint8_t command, uint8_t sensor_num)
{	uint8_t i, data, sensor_pin;
     2e0:	48 2f       	mov	r20, r24

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     2e2:	66 23       	and	r22, r22
     2e4:	11 f0       	breq	.+4      	; 0x2ea <sendDS18b20+0xa>
     2e6:	23 e0       	ldi	r18, 0x03	; 3
     2e8:	01 c0       	rjmp	.+2      	; 0x2ec <sendDS18b20+0xc>
     2ea:	22 e0       	ldi	r18, 0x02	; 2
	data=command;

	for(i=0;i<8;i++)
	{
		if ((data&0x01)==0x01) {    //Send 1 on SDA
			SENSOR_DDR|=(1<<sensor_pin);
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	38 2f       	mov	r19, r24
     2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <sendDS18b20+0x16>
     2f4:	33 0f       	add	r19, r19
     2f6:	2a 95       	dec	r18
     2f8:	ea f7       	brpl	.-6      	; 0x2f4 <sendDS18b20+0x14>
			_delay_us(10);
			SENSOR_DDR&=~(1<<sensor_pin);
     2fa:	53 2f       	mov	r21, r19
     2fc:	50 95       	com	r21
     2fe:	24 2f       	mov	r18, r20
     300:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     302:	e0 ea       	ldi	r30, 0xA0	; 160
	else sensor_pin=SENSOR1_PIN;
	data=command;

	for(i=0;i<8;i++)
	{
		if ((data&0x01)==0x01) {    //Send 1 on SDA
     304:	75 e1       	ldi	r23, 0x15	; 21
     306:	6a e1       	ldi	r22, 0x1A	; 26
     308:	4a e9       	ldi	r20, 0x9A	; 154
     30a:	20 ff       	sbrs	r18, 0
     30c:	0b c0       	rjmp	.+22     	; 0x324 <sendDS18b20+0x44>
			SENSOR_DDR|=(1<<sensor_pin);
     30e:	84 b3       	in	r24, 0x14	; 20
     310:	83 2b       	or	r24, r19
     312:	84 bb       	out	0x14, r24	; 20
     314:	86 2f       	mov	r24, r22
     316:	8a 95       	dec	r24
     318:	f1 f7       	brne	.-4      	; 0x316 <sendDS18b20+0x36>
			_delay_us(10);
			SENSOR_DDR&=~(1<<sensor_pin);
     31a:	84 b3       	in	r24, 0x14	; 20
     31c:	85 23       	and	r24, r21
     31e:	84 bb       	out	0x14, r24	; 20
     320:	84 2f       	mov	r24, r20
     322:	0a c0       	rjmp	.+20     	; 0x338 <sendDS18b20+0x58>
			_delay_us(58);
		}
		else {                   	//Send 0 on SDA
			SENSOR_DDR|=(1<<sensor_pin);
     324:	84 b3       	in	r24, 0x14	; 20
     326:	83 2b       	or	r24, r19
     328:	84 bb       	out	0x14, r24	; 20
     32a:	8e 2f       	mov	r24, r30
     32c:	8a 95       	dec	r24
     32e:	f1 f7       	brne	.-4      	; 0x32c <sendDS18b20+0x4c>
			_delay_us(60);
			SENSOR_DDR&=~(1<<sensor_pin);
     330:	84 b3       	in	r24, 0x14	; 20
     332:	85 23       	and	r24, r21
     334:	84 bb       	out	0x14, r24	; 20
     336:	87 2f       	mov	r24, r23
     338:	8a 95       	dec	r24
     33a:	f1 f7       	brne	.-4      	; 0x338 <sendDS18b20+0x58>

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;
	data=command;

	for(i=0;i<8;i++)
     33c:	9f 5f       	subi	r25, 0xFF	; 255
     33e:	98 30       	cpi	r25, 0x08	; 8
     340:	11 f0       	breq	.+4      	; 0x346 <sendDS18b20+0x66>
			SENSOR_DDR|=(1<<sensor_pin);
			_delay_us(60);
			SENSOR_DDR&=~(1<<sensor_pin);
			_delay_us(8);
		}
		data=data>>1;
     342:	26 95       	lsr	r18
     344:	e2 cf       	rjmp	.-60     	; 0x30a <sendDS18b20+0x2a>
     346:	08 95       	ret

00000348 <receiveDS18b20>:
	}
	return;
}

uint16_t receiveDS18b20(uint8_t sensor_num)
{	uint8_t i, sensor_pin;
     348:	ff 92       	push	r15
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
	uint16_t res=0;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
     34e:	88 23       	and	r24, r24
     350:	11 f0       	breq	.+4      	; 0x356 <receiveDS18b20+0xe>
     352:	83 e0       	ldi	r24, 0x03	; 3
     354:	01 c0       	rjmp	.+2      	; 0x358 <receiveDS18b20+0x10>
     356:	82 e0       	ldi	r24, 0x02	; 2
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
	{
		SENSOR_DDR|=(1<<sensor_pin);		
     358:	61 e0       	ldi	r22, 0x01	; 1
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	02 c0       	rjmp	.+4      	; 0x362 <receiveDS18b20+0x1a>
     35e:	66 0f       	add	r22, r22
     360:	77 1f       	adc	r23, r23
     362:	8a 95       	dec	r24
     364:	e2 f7       	brpl	.-8      	; 0x35e <receiveDS18b20+0x16>
     366:	a6 2f       	mov	r26, r22
		_delay_us(8);
		SENSOR_DDR&=~(1<<sensor_pin);		
     368:	b6 2f       	mov	r27, r22
     36a:	b0 95       	com	r27
     36c:	20 e0       	ldi	r18, 0x00	; 0
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	40 e0       	ldi	r20, 0x00	; 0
     372:	50 e0       	ldi	r21, 0x00	; 0
     374:	85 e1       	ldi	r24, 0x15	; 21
     376:	f8 2e       	mov	r15, r24
		_delay_us(12);

		if ((SENSOR_PIN & (1<<sensor_pin))==0x00) res&=~_BV(i);	//If 0 on SDA
		else 	res|=_BV(i);	    //IF 1 on SDA
     378:	00 e2       	ldi	r16, 0x20	; 32
     37a:	e1 e0       	ldi	r30, 0x01	; 1
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	18 ea       	ldi	r17, 0xA8	; 168
	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
	{
		SENSOR_DDR|=(1<<sensor_pin);		
     380:	84 b3       	in	r24, 0x14	; 20
     382:	8a 2b       	or	r24, r26
     384:	84 bb       	out	0x14, r24	; 20
     386:	8f 2d       	mov	r24, r15
     388:	8a 95       	dec	r24
     38a:	f1 f7       	brne	.-4      	; 0x388 <receiveDS18b20+0x40>
		_delay_us(8);
		SENSOR_DDR&=~(1<<sensor_pin);		
     38c:	84 b3       	in	r24, 0x14	; 20
     38e:	8b 23       	and	r24, r27
     390:	84 bb       	out	0x14, r24	; 20
     392:	80 2f       	mov	r24, r16
     394:	8a 95       	dec	r24
     396:	f1 f7       	brne	.-4      	; 0x394 <receiveDS18b20+0x4c>
		_delay_us(12);

		if ((SENSOR_PIN & (1<<sensor_pin))==0x00) res&=~_BV(i);	//If 0 on SDA
     398:	83 b3       	in	r24, 0x13	; 19
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	86 23       	and	r24, r22
     39e:	97 23       	and	r25, r23
     3a0:	89 2b       	or	r24, r25
     3a2:	61 f4       	brne	.+24     	; 0x3bc <receiveDS18b20+0x74>
     3a4:	cf 01       	movw	r24, r30
     3a6:	04 2e       	mov	r0, r20
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <receiveDS18b20+0x66>
     3aa:	88 0f       	add	r24, r24
     3ac:	99 1f       	adc	r25, r25
     3ae:	0a 94       	dec	r0
     3b0:	e2 f7       	brpl	.-8      	; 0x3aa <receiveDS18b20+0x62>
     3b2:	80 95       	com	r24
     3b4:	90 95       	com	r25
     3b6:	28 23       	and	r18, r24
     3b8:	39 23       	and	r19, r25
     3ba:	09 c0       	rjmp	.+18     	; 0x3ce <receiveDS18b20+0x86>
		else 	res|=_BV(i);	    //IF 1 on SDA
     3bc:	cf 01       	movw	r24, r30
     3be:	04 2e       	mov	r0, r20
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <receiveDS18b20+0x7e>
     3c2:	88 0f       	add	r24, r24
     3c4:	99 1f       	adc	r25, r25
     3c6:	0a 94       	dec	r0
     3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <receiveDS18b20+0x7a>
     3ca:	28 2b       	or	r18, r24
     3cc:	39 2b       	or	r19, r25
     3ce:	81 2f       	mov	r24, r17
     3d0:	8a 95       	dec	r24
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <receiveDS18b20+0x88>
     3d4:	4f 5f       	subi	r20, 0xFF	; 255
     3d6:	5f 4f       	sbci	r21, 0xFF	; 255
	uint16_t res=0;

	if (sensor_num==0)	sensor_pin=SENSOR0_PIN;
	else sensor_pin=SENSOR1_PIN;

	for(i=0;i<16;i++)
     3d8:	40 31       	cpi	r20, 0x10	; 16
     3da:	51 05       	cpc	r21, r1
     3dc:	89 f6       	brne	.-94     	; 0x380 <receiveDS18b20+0x38>
		else 	res|=_BV(i);	    //IF 1 on SDA
				
		_delay_us(63);
	}
	return res;
}
     3de:	c9 01       	movw	r24, r18
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	08 95       	ret

000003e8 <setup>:

void setup(void)
{
     3e8:	1f 93       	push	r17
    uint8_t i;

	initializationErrorCode=0;
     3ea:	10 92 6b 01 	sts	0x016B, r1
	errorCode=0;
     3ee:	10 92 6a 01 	sts	0x016A, r1
/** \ingroup avr_eeprom
    Read one 16-bit word (little endian) from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint16_t eeprom_read_word (const uint16_t *__p)
{
    return __eerd_word (__p, eeprom_read_byte);
     3f2:	69 e4       	ldi	r22, 0x49	; 73
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 82 0b 	call	0x1704	; 0x1704 <__eerd_word>
     3fe:	9c 01       	movw	r18, r24
	//read from EEPROM saved value & coolerState state
#ifdef STANDALONE_MODE
		setData[0]= eeprom_read_word (&savedSetData);
     400:	90 93 7a 01 	sts	0x017A, r25
     404:	80 93 79 01 	sts	0x0179, r24
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
     408:	e1 99       	sbic	0x1c, 1	; 28
     40a:	fe cf       	rjmp	.-4      	; 0x408 <setup+0x20>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     40c:	82 e0       	ldi	r24, 0x02	; 2
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	9f bb       	out	0x1f, r25	; 31
     412:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
     414:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
     416:	4d b3       	in	r20, 0x1d	; 29
		coolerState = eeprom_read_byte(&savedCoolerState);
     418:	40 93 8b 01 	sts	0x018B, r20
		//if saved settings corrupted - set it by default
		if ( (setData[0]<780)||(setData[0]>1780) ) setData[0]=1730;
     41c:	2c 50       	subi	r18, 0x0C	; 12
     41e:	33 40       	sbci	r19, 0x03	; 3
     420:	29 5e       	subi	r18, 0xE9	; 233
     422:	33 40       	sbci	r19, 0x03	; 3
     424:	30 f0       	brcs	.+12     	; 0x432 <setup+0x4a>
     426:	82 ec       	ldi	r24, 0xC2	; 194
     428:	96 e0       	ldi	r25, 0x06	; 6
     42a:	90 93 7a 01 	sts	0x017A, r25
     42e:	80 93 79 01 	sts	0x0179, r24
		if ( (coolerState!=COOLER_ON)&&(coolerState!=COOLER_OFF) ) coolerState=COOLER_OFF;
     432:	42 30       	cpi	r20, 0x02	; 2
     434:	10 f0       	brcs	.+4      	; 0x43a <setup+0x52>
     436:	10 92 8b 01 	sts	0x018B, r1
		setData[0]=1730;
		coolerState=COOLER_OFF;
#endif
	//init variables
	for (i=0;i<SENSOR_COUNT;i++)
		sensorData[i]=0;
     43a:	10 92 7c 01 	sts	0x017C, r1
     43e:	10 92 7b 01 	sts	0x017B, r1
     442:	10 92 7e 01 	sts	0x017E, r1
     446:	10 92 7d 01 	sts	0x017D, r1
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	90 e0       	ldi	r25, 0x00	; 0

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=txBuf[i]=0;
     44e:	fc 01       	movw	r30, r24
     450:	e3 59       	subi	r30, 0x93	; 147
     452:	fe 4f       	sbci	r31, 0xFE	; 254
     454:	10 82       	st	Z, r1
     456:	fc 01       	movw	r30, r24
     458:	e1 58       	subi	r30, 0x81	; 129
     45a:	fe 4f       	sbci	r31, 0xFE	; 254
     45c:	10 82       	st	Z, r1
     45e:	01 96       	adiw	r24, 0x01	; 1
}

void clearBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     460:	8b 30       	cpi	r24, 0x0B	; 11
     462:	91 05       	cpc	r25, r1
     464:	a1 f7       	brne	.-24     	; 0x44e <setup+0x66>
#endif
	//init variables
	for (i=0;i<SENSOR_COUNT;i++)
		sensorData[i]=0;
	clearBuf ();
	U=0.0;
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	a0 e0       	ldi	r26, 0x00	; 0
     46c:	b0 e0       	ldi	r27, 0x00	; 0
     46e:	80 93 90 01 	sts	0x0190, r24
     472:	90 93 91 01 	sts	0x0191, r25
     476:	a0 93 92 01 	sts	0x0192, r26
     47a:	b0 93 93 01 	sts	0x0193, r27
	E=0;
     47e:	80 93 8c 01 	sts	0x018C, r24
     482:	90 93 8d 01 	sts	0x018D, r25
     486:	a0 93 8e 01 	sts	0x018E, r26
     48a:	b0 93 8f 01 	sts	0x018F, r27
	//Init ports, UART, PWM
	SENSOR_PORT&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));     	
     48e:	85 b3       	in	r24, 0x15	; 21
     490:	83 7f       	andi	r24, 0xF3	; 243
     492:	85 bb       	out	0x15, r24	; 21
	SENSOR_DDR&=~((1<<SENSOR0_PIN)|(1<<SENSOR1_PIN));		
     494:	84 b3       	in	r24, 0x14	; 20
     496:	83 7f       	andi	r24, 0xF3	; 243
     498:	84 bb       	out	0x14, r24	; 20
 
	TEC_PORT&=~(1<<TEC_PIN);
     49a:	95 98       	cbi	0x12, 5	; 18
	TEC_DDR|=(1<<TEC_PIN);
     49c:	8d 9a       	sbi	0x11, 5	; 17
//------------------------------------------------------------------------------------
//UART

void uartInit(void)
{
	UBRRH = (BAUD_PRESCALE >> 8);		// Init UART baudrate
     49e:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;
     4a0:	83 e3       	ldi	r24, 0x33	; 51
     4a2:	89 b9       	out	0x09, r24	; 9

	UCSRB = (1<<RXEN)|(1<<TXEN)|(1 << RXCIE);	// TX, RX enable, RX interrupt enable
     4a4:	88 e9       	ldi	r24, 0x98	; 152
     4a6:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
     4a8:	86 e8       	ldi	r24, 0x86	; 134
     4aa:	80 bd       	out	0x20, r24	; 32
     4ac:	10 e0       	ldi	r17, 0x00	; 0
	uartInit();

    //set 12 bit resolution
	for (i=0;i<SENSOR_COUNT;i++)
	{
		if (presentDS18b20(i)==1)
     4ae:	81 2f       	mov	r24, r17
     4b0:	0e 94 46 01 	call	0x28c	; 0x28c <presentDS18b20>
     4b4:	81 30       	cpi	r24, 0x01	; 1
     4b6:	a9 f4       	brne	.+42     	; 0x4e2 <__stack+0x83>
		{
			sendDS18b20(SKIP_ROM,i);
     4b8:	61 2f       	mov	r22, r17
     4ba:	8c ec       	ldi	r24, 0xCC	; 204
     4bc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <sendDS18b20>
			// write on scratchPad
			sendDS18b20(0x4E,i);
     4c0:	61 2f       	mov	r22, r17
     4c2:	8e e4       	ldi	r24, 0x4E	; 78
     4c4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <sendDS18b20>
			// User byte 0 - Unused
			sendDS18b20(0x00,i);
     4c8:	61 2f       	mov	r22, r17
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <sendDS18b20>
			// User byte 1 - Unused
			sendDS18b20(0x00,i);
     4d0:	61 2f       	mov	r22, r17
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <sendDS18b20>
			// set up en 12 bits (0x7F)
			sendDS18b20(0x7F,i);
     4d8:	61 2f       	mov	r22, r17
     4da:	8f e7       	ldi	r24, 0x7F	; 127
     4dc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <sendDS18b20>
     4e0:	09 c0       	rjmp	.+18     	; 0x4f4 <__stack+0x95>
		}
		else
		{
		    if (i==0)
     4e2:	11 23       	and	r17, r17
     4e4:	39 f4       	brne	.+14     	; 0x4f4 <__stack+0x95>
			{
			    initializationErrorCode|=(1<<i);
     4e6:	80 91 6b 01 	lds	r24, 0x016B
     4ea:	81 60       	ori	r24, 0x01	; 1
     4ec:	80 93 6b 01 	sts	0x016B, r24
				errorCode = initializationErrorCode;
     4f0:	80 93 6a 01 	sts	0x016A, r24
	TEC_PORT&=~(1<<TEC_PIN);
	TEC_DDR|=(1<<TEC_PIN);
	uartInit();

    //set 12 bit resolution
	for (i=0;i<SENSOR_COUNT;i++)
     4f4:	1f 5f       	subi	r17, 0xFF	; 255
     4f6:	12 30       	cpi	r17, 0x02	; 2
     4f8:	d1 f6       	brne	.-76     	; 0x4ae <__stack+0x4f>
			    initializationErrorCode|=(1<<i);
				errorCode = initializationErrorCode;
			}
		}
	}
	sei();
     4fa:	78 94       	sei
}
     4fc:	1f 91       	pop	r17
     4fe:	08 95       	ret

00000500 <processPacket>:
	txBuf[10]=crc8Block(txBuf,10);
}

//process received packet
void processPacket(void)
{
     500:	f8 94       	cli
	cli();
	//check CRC
	if (crc8Block(rxBuf,currentRXPacketLen-1)!=rxBuf[currentRXPacketLen-1])
     502:	40 91 69 01 	lds	r20, 0x0169
     506:	41 50       	subi	r20, 0x01	; 1
     508:	9f ef       	ldi	r25, 0xFF	; 255
     50a:	ef e7       	ldi	r30, 0x7F	; 127
     50c:	f1 e0       	ldi	r31, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     50e:	24 2f       	mov	r18, r20
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	4f 5f       	subi	r20, 0xFF	; 255
     514:	2e 0f       	add	r18, r30
     516:	3f 1f       	adc	r19, r31
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     518:	51 e3       	ldi	r21, 0x31	; 49
     51a:	0d c0       	rjmp	.+26     	; 0x536 <processPacket+0x36>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     51c:	80 81       	ld	r24, Z
     51e:	98 27       	eor	r25, r24
     520:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     522:	97 ff       	sbrs	r25, 7
     524:	03 c0       	rjmp	.+6      	; 0x52c <processPacket+0x2c>
     526:	99 0f       	add	r25, r25
     528:	95 27       	eor	r25, r21
     52a:	01 c0       	rjmp	.+2      	; 0x52e <processPacket+0x2e>
     52c:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     52e:	8f 5f       	subi	r24, 0xFF	; 255
     530:	88 30       	cpi	r24, 0x08	; 8
     532:	b9 f7       	brne	.-18     	; 0x522 <processPacket+0x22>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     534:	31 96       	adiw	r30, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     536:	e2 17       	cp	r30, r18
     538:	f3 07       	cpc	r31, r19
     53a:	81 f7       	brne	.-32     	; 0x51c <processPacket+0x1c>
//process received packet
void processPacket(void)
{
	cli();
	//check CRC
	if (crc8Block(rxBuf,currentRXPacketLen-1)!=rxBuf[currentRXPacketLen-1])
     53c:	e4 2f       	mov	r30, r20
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	e2 58       	subi	r30, 0x82	; 130
     542:	fe 4f       	sbci	r31, 0xFE	; 254
     544:	80 81       	ld	r24, Z
     546:	98 17       	cp	r25, r24
     548:	69 f0       	breq	.+26     	; 0x564 <processPacket+0x64>
	{
		packetReceived=0;
     54a:	10 92 68 01 	sts	0x0168, r1
     54e:	ef e7       	ldi	r30, 0x7F	; 127
     550:	f1 e0       	ldi	r31, 0x01	; 1
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     552:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     554:	41 e0       	ldi	r20, 0x01	; 1
     556:	ea 38       	cpi	r30, 0x8A	; 138
     558:	f4 07       	cpc	r31, r20
     55a:	d9 f7       	brne	.-10     	; 0x552 <processPacket+0x52>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     55c:	10 92 69 01 	sts	0x0169, r1
	//check CRC
	if (crc8Block(rxBuf,currentRXPacketLen-1)!=rxBuf[currentRXPacketLen-1])
	{
		packetReceived=0;
		clearRXBuf();
		sei();
     560:	78 94       	sei
     562:	08 95       	ret
		return;
	}
	//differentiate and process packet
	switch (rxBuf[0]) {
     564:	80 91 7f 01 	lds	r24, 0x017F
     568:	89 36       	cpi	r24, 0x69	; 105
     56a:	09 f4       	brne	.+2      	; 0x56e <processPacket+0x6e>
     56c:	3e c0       	rjmp	.+124    	; 0x5ea <processPacket+0xea>
     56e:	8a 36       	cpi	r24, 0x6A	; 106
     570:	20 f4       	brcc	.+8      	; 0x57a <processPacket+0x7a>
     572:	87 36       	cpi	r24, 0x67	; 103
     574:	09 f0       	breq	.+2      	; 0x578 <processPacket+0x78>
     576:	7e c0       	rjmp	.+252    	; 0x674 <processPacket+0x174>
     578:	07 c0       	rjmp	.+14     	; 0x588 <processPacket+0x88>
     57a:	80 37       	cpi	r24, 0x70	; 112
     57c:	09 f4       	brne	.+2      	; 0x580 <processPacket+0x80>
     57e:	66 c0       	rjmp	.+204    	; 0x64c <processPacket+0x14c>
     580:	83 37       	cpi	r24, 0x73	; 115
     582:	09 f0       	breq	.+2      	; 0x586 <processPacket+0x86>
     584:	77 c0       	rjmp	.+238    	; 0x674 <processPacket+0x174>
     586:	11 c0       	rjmp	.+34     	; 0x5aa <processPacket+0xaa>
		//if get command
		case 'g' : 	{
			if (currentRXPacketLen==2)
     588:	42 30       	cpi	r20, 0x02	; 2
     58a:	09 f0       	breq	.+2      	; 0x58e <processPacket+0x8e>
     58c:	73 c0       	rjmp	.+230    	; 0x674 <processPacket+0x174>
			{
				prepareSystemStatus();
     58e:	0e 94 07 01 	call	0x20e	; 0x20e <prepareSystemStatus>
     592:	ed e6       	ldi	r30, 0x6D	; 109
     594:	f1 e0       	ldi	r31, 0x01	; 1
//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
	uartTransmitByte(txBuf[i]);
     596:	80 81       	ld	r24, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     598:	5d 9b       	sbis	0x0b, 5	; 11
     59a:	fe cf       	rjmp	.-4      	; 0x598 <processPacket+0x98>
	UDR = data;
     59c:	8c b9       	out	0x0c, r24	; 12
     59e:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	e8 37       	cpi	r30, 0x78	; 120
     5a4:	f8 07       	cpc	r31, r24
     5a6:	b9 f7       	brne	.-18     	; 0x596 <processPacket+0x96>
     5a8:	65 c0       	rjmp	.+202    	; 0x674 <processPacket+0x174>
			}			
			break;
		}
		//if set command
		case 's' : 	{
			if (currentRXPacketLen==4)
     5aa:	44 30       	cpi	r20, 0x04	; 4
     5ac:	09 f0       	breq	.+2      	; 0x5b0 <processPacket+0xb0>
     5ae:	62 c0       	rjmp	.+196    	; 0x674 <processPacket+0x174>
			{
				uint16_t val;

				val=(rxBuf[1]<<8)|(rxBuf[2]);
     5b0:	90 91 80 01 	lds	r25, 0x0180
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	20 91 81 01 	lds	r18, 0x0181
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	28 2b       	or	r18, r24
     5be:	39 2b       	or	r19, r25
				if ((val<=1780)&&(val>=780)) setData[0]=val;
     5c0:	c9 01       	movw	r24, r18
     5c2:	8c 50       	subi	r24, 0x0C	; 12
     5c4:	93 40       	sbci	r25, 0x03	; 3
     5c6:	89 5e       	subi	r24, 0xE9	; 233
     5c8:	93 40       	sbci	r25, 0x03	; 3
     5ca:	20 f4       	brcc	.+8      	; 0x5d4 <processPacket+0xd4>
     5cc:	30 93 7a 01 	sts	0x017A, r19
     5d0:	20 93 79 01 	sts	0x0179, r18
/** \ingroup avr_eeprom
    Write a word \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_word (uint16_t *__p, uint16_t __value)
{
    __eewr_word (__p, __value, eeprom_write_byte);
     5d4:	60 91 79 01 	lds	r22, 0x0179
     5d8:	70 91 7a 01 	lds	r23, 0x017A
     5dc:	41 e5       	ldi	r20, 0x51	; 81
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 98 0b 	call	0x1730	; 0x1730 <__eewr_word>
     5e8:	45 c0       	rjmp	.+138    	; 0x674 <processPacket+0x174>
			
			break;
		}
		//if info command
		case 'i' :	{
			if (currentRXPacketLen==2)
     5ea:	42 30       	cpi	r20, 0x02	; 2
     5ec:	09 f0       	breq	.+2      	; 0x5f0 <processPacket+0xf0>
     5ee:	42 c0       	rjmp	.+132    	; 0x674 <processPacket+0x174>
			{
				txBuf[0]='v';
     5f0:	86 e7       	ldi	r24, 0x76	; 118
     5f2:	80 93 6d 01 	sts	0x016D, r24
				txBuf[1]=HW_REVISION;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	80 93 6e 01 	sts	0x016E, r24
				txBuf[2]=SW_REVISION;
     5fc:	80 93 6f 01 	sts	0x016F, r24
				txBuf[3]=SENSOR_COUNT;
     600:	40 93 70 01 	sts	0x0170, r20
				txBuf[4]=VALUE_COUNT;
     604:	80 93 71 01 	sts	0x0171, r24
     608:	9f ef       	ldi	r25, 0xFF	; 255
     60a:	ed e6       	ldi	r30, 0x6D	; 109
     60c:	f1 e0       	ldi	r31, 0x01	; 1
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     60e:	21 e3       	ldi	r18, 0x31	; 49
     610:	0d c0       	rjmp	.+26     	; 0x62c <processPacket+0x12c>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     612:	80 81       	ld	r24, Z
     614:	98 27       	eor	r25, r24
     616:	80 e0       	ldi	r24, 0x00	; 0
		
		for (i = 0; i < 8; i++)
		crc = crc & 0x80 ? (crc << 1) ^ CRC_POLY : crc << 1;
     618:	97 ff       	sbrs	r25, 7
     61a:	03 c0       	rjmp	.+6      	; 0x622 <processPacket+0x122>
     61c:	99 0f       	add	r25, r25
     61e:	92 27       	eor	r25, r18
     620:	01 c0       	rjmp	.+2      	; 0x624 <processPacket+0x124>
     622:	99 0f       	add	r25, r25
	
	while (len--)
	{
		crc ^= *pcBlock++;
		
		for (i = 0; i < 8; i++)
     624:	8f 5f       	subi	r24, 0xFF	; 255
     626:	88 30       	cpi	r24, 0x08	; 8
     628:	b9 f7       	brne	.-18     	; 0x618 <processPacket+0x118>
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
	{
		crc ^= *pcBlock++;
     62a:	31 96       	adiw	r30, 0x01	; 1
uint8_t crc8Block(uint8_t *pcBlock, uint8_t len)
{
	uint8_t crc = 0xFF;
	uint8_t i;
	
	while (len--)
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	e2 37       	cpi	r30, 0x72	; 114
     630:	f8 07       	cpc	r31, r24
     632:	79 f7       	brne	.-34     	; 0x612 <processPacket+0x112>
				txBuf[0]='v';
				txBuf[1]=HW_REVISION;
				txBuf[2]=SW_REVISION;
				txBuf[3]=SENSOR_COUNT;
				txBuf[4]=VALUE_COUNT;
				txBuf[5]=crc8Block(txBuf,5);
     634:	90 83       	st	Z, r25
     636:	35 97       	sbiw	r30, 0x05	; 5
//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
	uartTransmitByte(txBuf[i]);
     638:	80 81       	ld	r24, Z
}

//Send byte thought UART
void uartTransmitByte (uint8_t data)
{
	while ( !( UCSRA & (1<<UDRE)) );
     63a:	5d 9b       	sbis	0x0b, 5	; 11
     63c:	fe cf       	rjmp	.-4      	; 0x63a <processPacket+0x13a>
	UDR = data;
     63e:	8c b9       	out	0x0c, r24	; 12
     640:	31 96       	adiw	r30, 0x01	; 1

//send packet to host
void uartSendPacket(uint8_t *data, uint8_t length)
{
	uint8_t i;
	for (i=0;i<length;i++)
     642:	41 e0       	ldi	r20, 0x01	; 1
     644:	e3 37       	cpi	r30, 0x73	; 115
     646:	f4 07       	cpc	r31, r20
     648:	b9 f7       	brne	.-18     	; 0x638 <processPacket+0x138>
     64a:	14 c0       	rjmp	.+40     	; 0x674 <processPacket+0x174>

			break;
		}
		//if powern ON/OFF PWM
		case 'p' : 	{
		if (currentRXPacketLen==3)
     64c:	43 30       	cpi	r20, 0x03	; 3
     64e:	91 f4       	brne	.+36     	; 0x674 <processPacket+0x174>
		{
			if ((rxBuf[1]==COOLER_OFF)||(rxBuf[1]==COOLER_ON))
     650:	20 91 80 01 	lds	r18, 0x0180
     654:	22 30       	cpi	r18, 0x02	; 2
     656:	70 f4       	brcc	.+28     	; 0x674 <processPacket+0x174>
			{
				coolerState=rxBuf[1];
     658:	20 93 8b 01 	sts	0x018B, r18
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
     65c:	e1 99       	sbic	0x1c, 1	; 28
     65e:	fe cf       	rjmp	.-4      	; 0x65c <processPacket+0x15c>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
     660:	82 e0       	ldi	r24, 0x02	; 2
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	9f bb       	out	0x1f, r25	; 31
     666:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
     668:	2d bb       	out	0x1d, r18	; 29

    __asm__ __volatile__ (
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	e2 9a       	sbi	0x1c, 2	; 28
     670:	e1 9a       	sbi	0x1c, 1	; 28
     672:	0f be       	out	0x3f, r0	; 63
		default:
		{
			;
		}
	}
	packetReceived=0;
     674:	10 92 68 01 	sts	0x0168, r1
     678:	ef e7       	ldi	r30, 0x7F	; 127
     67a:	f1 e0       	ldi	r31, 0x01	; 1
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
	rxBuf[i]=0;
     67c:	11 92       	st	Z+, r1
//------------------------------------------------------------------------------------
//Packets
void clearRXBuf (void)
{
	uint8_t i;
	for (i=0;i<BUFF_SIZE;i++)
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	ea 38       	cpi	r30, 0x8A	; 138
     682:	f8 07       	cpc	r31, r24
     684:	d9 f7       	brne	.-10     	; 0x67c <processPacket+0x17c>
	rxBuf[i]=0;
	currentRXPacketLen=0;
     686:	10 92 69 01 	sts	0x0169, r1
			;
		}
	}
	packetReceived=0;
	clearRXBuf();
	sei();
     68a:	78 94       	sei
     68c:	08 95       	ret

0000068e <main>:
	sei();
}

//------------------------------------------------------------------------------------
int main(void)
{
     68e:	2f 92       	push	r2
     690:	3f 92       	push	r3
     692:	4f 92       	push	r4
     694:	5f 92       	push	r5
     696:	6f 92       	push	r6
     698:	7f 92       	push	r7
     69a:	8f 92       	push	r8
     69c:	9f 92       	push	r9
     69e:	af 92       	push	r10
     6a0:	bf 92       	push	r11
     6a2:	cf 92       	push	r12
     6a4:	df 92       	push	r13
     6a6:	ef 92       	push	r14
     6a8:	ff 92       	push	r15
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
		    if ( (errorCode == 0) && (coolerState == COOLER_ON) )
		    {
		        E=(double) sensorData[0]-setData[0];
			    U=U+KP*E;
			    if (U>CYCLE) 	U=CYCLE;
			    if (U<=0.0) 	U=0.0;		
     6b2:	0f 2e       	mov	r0, r31
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	2f 2e       	mov	r2, r31
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	3f 2e       	mov	r3, r31
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	4f 2e       	mov	r4, r31
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	5f 2e       	mov	r5, r31
     6c4:	f0 2d       	mov	r31, r0
	uint16_t val, fract;

	while (1)
	{
	    retryCount=0;
		cli();
     6c6:	f8 94       	cli
	    setup();
     6c8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <setup>
     6cc:	b1 c1       	rjmp	.+866    	; 0xa30 <main+0x3a2>
	    while (initializationErrorCode==0)
	    {
		    errorCode=0;
     6ce:	10 92 6a 01 	sts	0x016A, r1
		    //process packet
		    if (packetReceived!=0)
     6d2:	80 91 68 01 	lds	r24, 0x0168
     6d6:	88 23       	and	r24, r24
     6d8:	11 f0       	breq	.+4      	; 0x6de <main+0x50>
		    {
		        processPacket();
     6da:	0e 94 80 02 	call	0x500	; 0x500 <processPacket>
     6de:	10 e0       	ldi	r17, 0x00	; 0
	        }
		    //start measurement
		    for (i=0;i<SENSOR_COUNT;i++)
		    {
			    if (presentDS18b20(i)==1)
     6e0:	81 2f       	mov	r24, r17
     6e2:	0e 94 46 01 	call	0x28c	; 0x28c <presentDS18b20>
     6e6:	81 30       	cpi	r24, 0x01	; 1
     6e8:	49 f4       	brne	.+18     	; 0x6fc <main+0x6e>
			    {
				    sendDS18b20(SKIP_ROM,i);
     6ea:	61 2f       	mov	r22, r17
     6ec:	8c ec       	ldi	r24, 0xCC	; 204
     6ee:	0e 94 70 01 	call	0x2e0	; 0x2e0 <sendDS18b20>
				    sendDS18b20(START_CONVERSION,i);
     6f2:	61 2f       	mov	r22, r17
     6f4:	84 e4       	ldi	r24, 0x44	; 68
     6f6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <sendDS18b20>
     6fa:	07 c0       	rjmp	.+14     	; 0x70a <main+0x7c>
			    }
			    else
			    {
			        if (i==0) errorCode|=(1<<i);
     6fc:	11 23       	and	r17, r17
     6fe:	29 f4       	brne	.+10     	; 0x70a <main+0x7c>
     700:	80 91 6a 01 	lds	r24, 0x016A
     704:	81 60       	ori	r24, 0x01	; 1
     706:	80 93 6a 01 	sts	0x016A, r24
		    if (packetReceived!=0)
		    {
		        processPacket();
	        }
		    //start measurement
		    for (i=0;i<SENSOR_COUNT;i++)
     70a:	1f 5f       	subi	r17, 0xFF	; 255
     70c:	12 30       	cpi	r17, 0x02	; 2
     70e:	41 f7       	brne	.-48     	; 0x6e0 <main+0x52>
			    {
			        if (i==0) errorCode|=(1<<i);
			    }
		    }

            if (coolerState==COOLER_OFF) 
     710:	90 91 8b 01 	lds	r25, 0x018B
     714:	99 23       	and	r25, r25
     716:	99 f4       	brne	.+38     	; 0x73e <main+0xb0>
		    {
		        coolerPower=0x00;
     718:	10 92 6c 01 	sts	0x016C, r1
			    U=0.0;
     71c:	20 92 90 01 	sts	0x0190, r2
     720:	30 92 91 01 	sts	0x0191, r3
     724:	40 92 92 01 	sts	0x0192, r4
     728:	50 92 93 01 	sts	0x0193, r5
			    E=0.0;
     72c:	20 92 8c 01 	sts	0x018C, r2
     730:	30 92 8d 01 	sts	0x018D, r3
     734:	40 92 8e 01 	sts	0x018E, r4
     738:	50 92 8f 01 	sts	0x018F, r5
			    TEC_PORT&=~(1<<TEC_PIN);
     73c:	95 98       	cbi	0x12, 5	; 18
		    }
		
		    //P algo, do to put temperature reading to algo if error occured
		    if ( (errorCode == 0) && (coolerState == COOLER_ON) )
     73e:	80 91 6a 01 	lds	r24, 0x016A
     742:	88 23       	and	r24, r24
     744:	09 f0       	breq	.+2      	; 0x748 <main+0xba>
     746:	10 c1       	rjmp	.+544    	; 0x968 <main+0x2da>
     748:	91 30       	cpi	r25, 0x01	; 1
     74a:	09 f0       	breq	.+2      	; 0x74e <main+0xc0>
     74c:	0d c1       	rjmp	.+538    	; 0x968 <main+0x2da>
		    {
		        E=(double) sensorData[0]-setData[0];
     74e:	60 91 7b 01 	lds	r22, 0x017B
     752:	70 91 7c 01 	lds	r23, 0x017C
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 14 09 	call	0x1228	; 0x1228 <__floatunsisf>
     75e:	7b 01       	movw	r14, r22
     760:	8c 01       	movw	r16, r24
     762:	60 91 79 01 	lds	r22, 0x0179
     766:	70 91 7a 01 	lds	r23, 0x017A
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 14 09 	call	0x1228	; 0x1228 <__floatunsisf>
     772:	9b 01       	movw	r18, r22
     774:	ac 01       	movw	r20, r24
     776:	c8 01       	movw	r24, r16
     778:	b7 01       	movw	r22, r14
     77a:	0e 94 a8 06 	call	0xd50	; 0xd50 <__subsf3>
     77e:	60 93 8c 01 	sts	0x018C, r22
     782:	70 93 8d 01 	sts	0x018D, r23
     786:	80 93 8e 01 	sts	0x018E, r24
     78a:	90 93 8f 01 	sts	0x018F, r25
			    U=U+KP*E;
     78e:	2a e0       	ldi	r18, 0x0A	; 10
     790:	37 ed       	ldi	r19, 0xD7	; 215
     792:	43 e2       	ldi	r20, 0x23	; 35
     794:	5d e3       	ldi	r21, 0x3D	; 61
     796:	0e 94 06 07 	call	0xe0c	; 0xe0c <__mulsf3>
     79a:	20 91 90 01 	lds	r18, 0x0190
     79e:	30 91 91 01 	lds	r19, 0x0191
     7a2:	40 91 92 01 	lds	r20, 0x0192
     7a6:	50 91 93 01 	lds	r21, 0x0193
     7aa:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__addsf3>
     7ae:	60 93 90 01 	sts	0x0190, r22
     7b2:	70 93 91 01 	sts	0x0191, r23
     7b6:	80 93 92 01 	sts	0x0192, r24
     7ba:	90 93 93 01 	sts	0x0193, r25
			    if (U>CYCLE) 	U=CYCLE;
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	4f e7       	ldi	r20, 0x7F	; 127
     7c4:	54 e4       	ldi	r21, 0x44	; 68
     7c6:	0e 94 00 08 	call	0x1000	; 0x1000 <__gtsf2>
     7ca:	18 16       	cp	r1, r24
     7cc:	64 f4       	brge	.+24     	; 0x7e6 <main+0x158>
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	af e7       	ldi	r26, 0x7F	; 127
     7d4:	b4 e4       	ldi	r27, 0x44	; 68
     7d6:	80 93 90 01 	sts	0x0190, r24
     7da:	90 93 91 01 	sts	0x0191, r25
     7de:	a0 93 92 01 	sts	0x0192, r26
     7e2:	b0 93 93 01 	sts	0x0193, r27
			    if (U<=0.0) 	U=0.0;		
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	60 91 90 01 	lds	r22, 0x0190
     7f2:	70 91 91 01 	lds	r23, 0x0191
     7f6:	80 91 92 01 	lds	r24, 0x0192
     7fa:	90 91 93 01 	lds	r25, 0x0193
     7fe:	0e 94 90 08 	call	0x1120	; 0x1120 <__lesf2>
     802:	18 16       	cp	r1, r24
     804:	44 f0       	brlt	.+16     	; 0x816 <main+0x188>
     806:	20 92 90 01 	sts	0x0190, r2
     80a:	30 92 91 01 	sts	0x0191, r3
     80e:	40 92 92 01 	sts	0x0192, r4
     812:	50 92 93 01 	sts	0x0193, r5
			    if (U>0.0) TEC_PORT|=(1<<TEC_PIN);	
     816:	60 90 90 01 	lds	r6, 0x0190
     81a:	70 90 91 01 	lds	r7, 0x0191
     81e:	80 90 92 01 	lds	r8, 0x0192
     822:	90 90 93 01 	lds	r9, 0x0193
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	40 e0       	ldi	r20, 0x00	; 0
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	c4 01       	movw	r24, r8
     830:	b3 01       	movw	r22, r6
     832:	0e 94 00 08 	call	0x1000	; 0x1000 <__gtsf2>
     836:	18 16       	cp	r1, r24
     838:	0c f4       	brge	.+2      	; 0x83c <main+0x1ae>
     83a:	95 9a       	sbi	0x12, 5	; 18
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	4a ef       	ldi	r20, 0xFA	; 250
     842:	54 e4       	ldi	r21, 0x44	; 68
     844:	c4 01       	movw	r24, r8
     846:	b3 01       	movw	r22, r6
     848:	0e 94 06 07 	call	0xe0c	; 0xe0c <__mulsf3>
     84c:	7b 01       	movw	r14, r22
     84e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	40 e8       	ldi	r20, 0x80	; 128
     856:	5f e3       	ldi	r21, 0x3F	; 63
     858:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__ltsf2>
     85c:	88 23       	and	r24, r24
     85e:	1c f4       	brge	.+6      	; 0x866 <main+0x1d8>
     860:	61 e0       	ldi	r22, 0x01	; 1
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	23 c0       	rjmp	.+70     	; 0x8ac <main+0x21e>
		__ticks = 1;
	else if (__tmp > 65535)
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	3f ef       	ldi	r19, 0xFF	; 255
     86a:	4f e7       	ldi	r20, 0x7F	; 127
     86c:	57 e4       	ldi	r21, 0x47	; 71
     86e:	c8 01       	movw	r24, r16
     870:	b7 01       	movw	r22, r14
     872:	0e 94 00 08 	call	0x1000	; 0x1000 <__gtsf2>
     876:	18 16       	cp	r1, r24
     878:	ac f4       	brge	.+42     	; 0x8a4 <main+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	40 e2       	ldi	r20, 0x20	; 32
     880:	51 e4       	ldi	r21, 0x41	; 65
     882:	c4 01       	movw	r24, r8
     884:	b3 01       	movw	r22, r6
     886:	0e 94 06 07 	call	0xe0c	; 0xe0c <__mulsf3>
     88a:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixunssfsi>
     88e:	06 c0       	rjmp	.+12     	; 0x89c <main+0x20e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     890:	88 ec       	ldi	r24, 0xC8	; 200
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	f1 f7       	brne	.-4      	; 0x894 <main+0x206>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     898:	61 50       	subi	r22, 0x01	; 1
     89a:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     89c:	61 15       	cp	r22, r1
     89e:	71 05       	cpc	r23, r1
     8a0:	b9 f7       	brne	.-18     	; 0x890 <main+0x202>
     8a2:	07 c0       	rjmp	.+14     	; 0x8b2 <main+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8a4:	c8 01       	movw	r24, r16
     8a6:	b7 01       	movw	r22, r14
     8a8:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixunssfsi>
     8ac:	cb 01       	movw	r24, r22
     8ae:	01 97       	sbiw	r24, 0x01	; 1
     8b0:	f1 f7       	brne	.-4      	; 0x8ae <main+0x220>
			    _delay_ms(U);								
			    if (((uint16_t) U)!=CYCLE)TEC_PORT&=~(1<<TEC_PIN);
     8b2:	c4 01       	movw	r24, r8
     8b4:	b3 01       	movw	r22, r6
     8b6:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixunssfsi>
     8ba:	6c 5f       	subi	r22, 0xFC	; 252
     8bc:	73 40       	sbci	r23, 0x03	; 3
     8be:	09 f0       	breq	.+2      	; 0x8c2 <main+0x234>
     8c0:	95 98       	cbi	0x12, 5	; 18
			    _delay_ms(CYCLE-U);
     8c2:	a4 01       	movw	r20, r8
     8c4:	93 01       	movw	r18, r6
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	8f e7       	ldi	r24, 0x7F	; 127
     8cc:	94 e4       	ldi	r25, 0x44	; 68
     8ce:	0e 94 a8 06 	call	0xd50	; 0xd50 <__subsf3>
     8d2:	5b 01       	movw	r10, r22
     8d4:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	4a ef       	ldi	r20, 0xFA	; 250
     8dc:	54 e4       	ldi	r21, 0x44	; 68
     8de:	0e 94 06 07 	call	0xe0c	; 0xe0c <__mulsf3>
     8e2:	7b 01       	movw	r14, r22
     8e4:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	40 e8       	ldi	r20, 0x80	; 128
     8ec:	5f e3       	ldi	r21, 0x3F	; 63
     8ee:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__ltsf2>
     8f2:	88 23       	and	r24, r24
     8f4:	1c f4       	brge	.+6      	; 0x8fc <main+0x26e>
     8f6:	61 e0       	ldi	r22, 0x01	; 1
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	23 c0       	rjmp	.+70     	; 0x942 <main+0x2b4>
		__ticks = 1;
	else if (__tmp > 65535)
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	3f ef       	ldi	r19, 0xFF	; 255
     900:	4f e7       	ldi	r20, 0x7F	; 127
     902:	57 e4       	ldi	r21, 0x47	; 71
     904:	c8 01       	movw	r24, r16
     906:	b7 01       	movw	r22, r14
     908:	0e 94 00 08 	call	0x1000	; 0x1000 <__gtsf2>
     90c:	18 16       	cp	r1, r24
     90e:	ac f4       	brge	.+42     	; 0x93a <main+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	40 e2       	ldi	r20, 0x20	; 32
     916:	51 e4       	ldi	r21, 0x41	; 65
     918:	c6 01       	movw	r24, r12
     91a:	b5 01       	movw	r22, r10
     91c:	0e 94 06 07 	call	0xe0c	; 0xe0c <__mulsf3>
     920:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixunssfsi>
     924:	06 c0       	rjmp	.+12     	; 0x932 <main+0x2a4>
     926:	88 ec       	ldi	r24, 0xC8	; 200
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	01 97       	sbiw	r24, 0x01	; 1
     92c:	f1 f7       	brne	.-4      	; 0x92a <main+0x29c>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     92e:	61 50       	subi	r22, 0x01	; 1
     930:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     932:	61 15       	cp	r22, r1
     934:	71 05       	cpc	r23, r1
     936:	b9 f7       	brne	.-18     	; 0x926 <main+0x298>
     938:	07 c0       	rjmp	.+14     	; 0x948 <main+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     93a:	c8 01       	movw	r24, r16
     93c:	b7 01       	movw	r22, r14
     93e:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixunssfsi>
     942:	cb 01       	movw	r24, r22
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	f1 f7       	brne	.-4      	; 0x944 <main+0x2b6>
			
			    coolerPower=((uint8_t)(U/4));
     948:	20 e0       	ldi	r18, 0x00	; 0
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	40 e8       	ldi	r20, 0x80	; 128
     94e:	5e e3       	ldi	r21, 0x3E	; 62
     950:	c4 01       	movw	r24, r8
     952:	b3 01       	movw	r22, r6
     954:	0e 94 06 07 	call	0xe0c	; 0xe0c <__mulsf3>
     958:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixunssfsi>
     95c:	60 93 6c 01 	sts	0x016C, r22
     960:	cb e7       	ldi	r28, 0x7B	; 123
     962:	d1 e0       	ldi	r29, 0x01	; 1
     964:	10 e0       	ldi	r17, 0x00	; 0
     966:	09 c0       	rjmp	.+18     	; 0x97a <main+0x2ec>
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	98 e2       	ldi	r25, 0x28	; 40
     96c:	e8 ec       	ldi	r30, 0xC8	; 200
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	31 97       	sbiw	r30, 0x01	; 1
     972:	f1 f7       	brne	.-4      	; 0x970 <main+0x2e2>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     974:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     976:	d1 f7       	brne	.-12     	; 0x96c <main+0x2de>
     978:	f3 cf       	rjmp	.-26     	; 0x960 <main+0x2d2>
		    }

		    //receive measured data from sensors
		    for (i=0;i<SENSOR_COUNT;i++)
		    {
		        if (presentDS18b20(i)==1)
     97a:	81 2f       	mov	r24, r17
     97c:	0e 94 46 01 	call	0x28c	; 0x28c <presentDS18b20>
     980:	81 30       	cpi	r24, 0x01	; 1
     982:	09 f0       	breq	.+2      	; 0x986 <main+0x2f8>
     984:	49 c0       	rjmp	.+146    	; 0xa18 <main+0x38a>
			    {
				    sendDS18b20(SKIP_ROM,i);
     986:	61 2f       	mov	r22, r17
     988:	8c ec       	ldi	r24, 0xCC	; 204
     98a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <sendDS18b20>
				    sendDS18b20(GET_DATA,i);
     98e:	61 2f       	mov	r22, r17
     990:	8e eb       	ldi	r24, 0xBE	; 190
     992:	0e 94 70 01 	call	0x2e0	; 0x2e0 <sendDS18b20>
				    val=receiveDS18b20(i);
     996:	81 2f       	mov	r24, r17
     998:	0e 94 a4 01 	call	0x348	; 0x348 <receiveDS18b20>
				    if ((val&0x8000)!=0x00)
     99c:	97 fd       	sbrc	r25, 7
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <main+0x316>
     9a0:	e0 e0       	ldi	r30, 0x00	; 0
     9a2:	04 c0       	rjmp	.+8      	; 0x9ac <main+0x31e>
				    {
				        sign=1;
					    val=0xffff-val+1;
     9a4:	90 95       	com	r25
     9a6:	81 95       	neg	r24
     9a8:	9f 4f       	sbci	r25, 0xFF	; 255
     9aa:	e1 e0       	ldi	r30, 0x01	; 1
				    }
				    else sign=0;
				    fract=0;
				    if ((val&0x01)!=0x00) fract=fract+65;
     9ac:	80 fd       	sbrc	r24, 0
     9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <main+0x328>
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <main+0x32c>
     9b6:	41 e4       	ldi	r20, 0x41	; 65
     9b8:	50 e0       	ldi	r21, 0x00	; 0
				    if ((val&0x02)!=0x00) fract=fract+125;
     9ba:	81 ff       	sbrs	r24, 1
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <main+0x334>
     9be:	43 58       	subi	r20, 0x83	; 131
     9c0:	5f 4f       	sbci	r21, 0xFF	; 255
				    if ((val&0x04)!=0x00) fract=fract+250;
     9c2:	82 ff       	sbrs	r24, 2
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <main+0x33c>
     9c6:	46 50       	subi	r20, 0x06	; 6
     9c8:	5f 4f       	sbci	r21, 0xFF	; 255
				    if ((val&0x08)!=0x00) fract=fract+500;
     9ca:	83 ff       	sbrs	r24, 3
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <main+0x344>
     9ce:	4c 50       	subi	r20, 0x0C	; 12
     9d0:	5e 4f       	sbci	r21, 0xFE	; 254
				    val=(val>>4)*10+fract/100;
     9d2:	f4 e0       	ldi	r31, 0x04	; 4
     9d4:	96 95       	lsr	r25
     9d6:	87 95       	ror	r24
     9d8:	fa 95       	dec	r31
     9da:	e1 f7       	brne	.-8      	; 0x9d4 <main+0x346>
     9dc:	9c 01       	movw	r18, r24
     9de:	73 e0       	ldi	r23, 0x03	; 3
     9e0:	22 0f       	add	r18, r18
     9e2:	33 1f       	adc	r19, r19
     9e4:	7a 95       	dec	r23
     9e6:	e1 f7       	brne	.-8      	; 0x9e0 <main+0x352>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	28 0f       	add	r18, r24
     9ee:	39 1f       	adc	r19, r25
     9f0:	ca 01       	movw	r24, r20
     9f2:	64 e6       	ldi	r22, 0x64	; 100
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	0e 94 ad 0b 	call	0x175a	; 0x175a <__udivmodhi4>
     9fa:	62 0f       	add	r22, r18
     9fc:	73 1f       	adc	r23, r19
				    if (sign==1) val=OFFSET-val;
     9fe:	e1 30       	cpi	r30, 0x01	; 1
     a00:	31 f4       	brne	.+12     	; 0xa0e <main+0x380>
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	95 e0       	ldi	r25, 0x05	; 5
     a06:	86 1b       	sub	r24, r22
     a08:	97 0b       	sbc	r25, r23
     a0a:	bc 01       	movw	r22, r24
     a0c:	02 c0       	rjmp	.+4      	; 0xa12 <main+0x384>
				    else val=val+OFFSET;
     a0e:	60 50       	subi	r22, 0x00	; 0
     a10:	7b 4f       	sbci	r23, 0xFB	; 251
				    sensorData[i]=val;
     a12:	79 83       	std	Y+1, r23	; 0x01
     a14:	68 83       	st	Y, r22
     a16:	07 c0       	rjmp	.+14     	; 0xa26 <main+0x398>
			    }
			    else
			    {
			        if (i==0) errorCode|=(1<<i);
     a18:	11 23       	and	r17, r17
     a1a:	29 f4       	brne	.+10     	; 0xa26 <main+0x398>
     a1c:	80 91 6a 01 	lds	r24, 0x016A
     a20:	81 60       	ori	r24, 0x01	; 1
     a22:	80 93 6a 01 	sts	0x016A, r24
		    {
			    _delay_ms(1024);
		    }

		    //receive measured data from sensors
		    for (i=0;i<SENSOR_COUNT;i++)
     a26:	1f 5f       	subi	r17, 0xFF	; 255
     a28:	22 96       	adiw	r28, 0x02	; 2
     a2a:	12 30       	cpi	r17, 0x02	; 2
     a2c:	09 f0       	breq	.+2      	; 0xa30 <main+0x3a2>
     a2e:	a5 cf       	rjmp	.-182    	; 0x97a <main+0x2ec>
	while (1)
	{
	    retryCount=0;
		cli();
	    setup();
	    while (initializationErrorCode==0)
     a30:	80 91 6b 01 	lds	r24, 0x016B
     a34:	88 23       	and	r24, r24
     a36:	09 f4       	brne	.+2      	; 0xa3a <main+0x3ac>
     a38:	4a ce       	rjmp	.-876    	; 0x6ce <main+0x40>
     a3a:	10 e0       	ldi	r17, 0x00	; 0
			    }
		    }		
	    }
		while (retryCount<MAX_INIT_RETRY)
		{
		    retryCount++;
     a3c:	1f 5f       	subi	r17, 0xFF	; 255
     a3e:	88 ed       	ldi	r24, 0xD8	; 216
     a40:	97 e2       	ldi	r25, 0x27	; 39
     a42:	e8 ec       	ldi	r30, 0xC8	; 200
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	31 97       	sbiw	r30, 0x01	; 1
     a48:	f1 f7       	brne	.-4      	; 0xa46 <main+0x3b8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a4a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a4c:	d1 f7       	brne	.-12     	; 0xa42 <main+0x3b4>
		    _delay_ms(CYCLE);
		    //process packet
		    if (packetReceived!=0)
     a4e:	80 91 68 01 	lds	r24, 0x0168
     a52:	88 23       	and	r24, r24
     a54:	11 f0       	breq	.+4      	; 0xa5a <main+0x3cc>
		    {
		        processPacket();
     a56:	0e 94 80 02 	call	0x500	; 0x500 <processPacket>
			    {
			        if (i==0) errorCode|=(1<<i);
			    }
		    }		
	    }
		while (retryCount<MAX_INIT_RETRY)
     a5a:	1c 33       	cpi	r17, 0x3C	; 60
     a5c:	79 f7       	brne	.-34     	; 0xa3c <main+0x3ae>
     a5e:	33 ce       	rjmp	.-922    	; 0x6c6 <main+0x38>

00000a60 <__fixunssfsi>:
     a60:	ef 92       	push	r14
     a62:	ff 92       	push	r15
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	7b 01       	movw	r14, r22
     a6a:	8c 01       	movw	r16, r24
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	5f e4       	ldi	r21, 0x4F	; 79
     a74:	0e 94 30 08 	call	0x1060	; 0x1060 <__gesf2>
     a78:	88 23       	and	r24, r24
     a7a:	8c f0       	brlt	.+34     	; 0xa9e <__fixunssfsi+0x3e>
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	40 e0       	ldi	r20, 0x00	; 0
     a82:	5f e4       	ldi	r21, 0x4F	; 79
     a84:	c8 01       	movw	r24, r16
     a86:	b7 01       	movw	r22, r14
     a88:	0e 94 a8 06 	call	0xd50	; 0xd50 <__subsf3>
     a8c:	0e 94 c0 08 	call	0x1180	; 0x1180 <__fixsfsi>
     a90:	9b 01       	movw	r18, r22
     a92:	ac 01       	movw	r20, r24
     a94:	20 50       	subi	r18, 0x00	; 0
     a96:	30 40       	sbci	r19, 0x00	; 0
     a98:	40 40       	sbci	r20, 0x00	; 0
     a9a:	50 48       	sbci	r21, 0x80	; 128
     a9c:	06 c0       	rjmp	.+12     	; 0xaaa <__fixunssfsi+0x4a>
     a9e:	c8 01       	movw	r24, r16
     aa0:	b7 01       	movw	r22, r14
     aa2:	0e 94 c0 08 	call	0x1180	; 0x1180 <__fixsfsi>
     aa6:	9b 01       	movw	r18, r22
     aa8:	ac 01       	movw	r20, r24
     aaa:	b9 01       	movw	r22, r18
     aac:	ca 01       	movw	r24, r20
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	08 95       	ret

00000ab8 <_fpadd_parts>:
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	e2 e6       	ldi	r30, 0x62	; 98
     abe:	f5 e0       	ldi	r31, 0x05	; 5
     ac0:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__prologue_saves__>
     ac4:	dc 01       	movw	r26, r24
     ac6:	2b 01       	movw	r4, r22
     ac8:	fa 01       	movw	r30, r20
     aca:	9c 91       	ld	r25, X
     acc:	92 30       	cpi	r25, 0x02	; 2
     ace:	08 f4       	brcc	.+2      	; 0xad2 <_fpadd_parts+0x1a>
     ad0:	39 c1       	rjmp	.+626    	; 0xd44 <_fpadd_parts+0x28c>
     ad2:	eb 01       	movw	r28, r22
     ad4:	88 81       	ld	r24, Y
     ad6:	82 30       	cpi	r24, 0x02	; 2
     ad8:	08 f4       	brcc	.+2      	; 0xadc <_fpadd_parts+0x24>
     ada:	33 c1       	rjmp	.+614    	; 0xd42 <_fpadd_parts+0x28a>
     adc:	94 30       	cpi	r25, 0x04	; 4
     ade:	69 f4       	brne	.+26     	; 0xafa <_fpadd_parts+0x42>
     ae0:	84 30       	cpi	r24, 0x04	; 4
     ae2:	09 f0       	breq	.+2      	; 0xae6 <_fpadd_parts+0x2e>
     ae4:	2f c1       	rjmp	.+606    	; 0xd44 <_fpadd_parts+0x28c>
     ae6:	11 96       	adiw	r26, 0x01	; 1
     ae8:	9c 91       	ld	r25, X
     aea:	11 97       	sbiw	r26, 0x01	; 1
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	98 17       	cp	r25, r24
     af0:	09 f4       	brne	.+2      	; 0xaf4 <_fpadd_parts+0x3c>
     af2:	28 c1       	rjmp	.+592    	; 0xd44 <_fpadd_parts+0x28c>
     af4:	a0 e6       	ldi	r26, 0x60	; 96
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	25 c1       	rjmp	.+586    	; 0xd44 <_fpadd_parts+0x28c>
     afa:	84 30       	cpi	r24, 0x04	; 4
     afc:	09 f4       	brne	.+2      	; 0xb00 <_fpadd_parts+0x48>
     afe:	21 c1       	rjmp	.+578    	; 0xd42 <_fpadd_parts+0x28a>
     b00:	82 30       	cpi	r24, 0x02	; 2
     b02:	a9 f4       	brne	.+42     	; 0xb2e <_fpadd_parts+0x76>
     b04:	92 30       	cpi	r25, 0x02	; 2
     b06:	09 f0       	breq	.+2      	; 0xb0a <_fpadd_parts+0x52>
     b08:	1d c1       	rjmp	.+570    	; 0xd44 <_fpadd_parts+0x28c>
     b0a:	9a 01       	movw	r18, r20
     b0c:	ad 01       	movw	r20, r26
     b0e:	88 e0       	ldi	r24, 0x08	; 8
     b10:	ea 01       	movw	r28, r20
     b12:	09 90       	ld	r0, Y+
     b14:	ae 01       	movw	r20, r28
     b16:	e9 01       	movw	r28, r18
     b18:	09 92       	st	Y+, r0
     b1a:	9e 01       	movw	r18, r28
     b1c:	81 50       	subi	r24, 0x01	; 1
     b1e:	c1 f7       	brne	.-16     	; 0xb10 <_fpadd_parts+0x58>
     b20:	e2 01       	movw	r28, r4
     b22:	89 81       	ldd	r24, Y+1	; 0x01
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 91       	ld	r25, X
     b28:	89 23       	and	r24, r25
     b2a:	81 83       	std	Z+1, r24	; 0x01
     b2c:	08 c1       	rjmp	.+528    	; 0xd3e <_fpadd_parts+0x286>
     b2e:	92 30       	cpi	r25, 0x02	; 2
     b30:	09 f4       	brne	.+2      	; 0xb34 <_fpadd_parts+0x7c>
     b32:	07 c1       	rjmp	.+526    	; 0xd42 <_fpadd_parts+0x28a>
     b34:	12 96       	adiw	r26, 0x02	; 2
     b36:	2d 90       	ld	r2, X+
     b38:	3c 90       	ld	r3, X
     b3a:	13 97       	sbiw	r26, 0x03	; 3
     b3c:	eb 01       	movw	r28, r22
     b3e:	8a 81       	ldd	r24, Y+2	; 0x02
     b40:	9b 81       	ldd	r25, Y+3	; 0x03
     b42:	14 96       	adiw	r26, 0x04	; 4
     b44:	ad 90       	ld	r10, X+
     b46:	bd 90       	ld	r11, X+
     b48:	cd 90       	ld	r12, X+
     b4a:	dc 90       	ld	r13, X
     b4c:	17 97       	sbiw	r26, 0x07	; 7
     b4e:	ec 80       	ldd	r14, Y+4	; 0x04
     b50:	fd 80       	ldd	r15, Y+5	; 0x05
     b52:	0e 81       	ldd	r16, Y+6	; 0x06
     b54:	1f 81       	ldd	r17, Y+7	; 0x07
     b56:	91 01       	movw	r18, r2
     b58:	28 1b       	sub	r18, r24
     b5a:	39 0b       	sbc	r19, r25
     b5c:	b9 01       	movw	r22, r18
     b5e:	37 ff       	sbrs	r19, 7
     b60:	04 c0       	rjmp	.+8      	; 0xb6a <_fpadd_parts+0xb2>
     b62:	66 27       	eor	r22, r22
     b64:	77 27       	eor	r23, r23
     b66:	62 1b       	sub	r22, r18
     b68:	73 0b       	sbc	r23, r19
     b6a:	60 32       	cpi	r22, 0x20	; 32
     b6c:	71 05       	cpc	r23, r1
     b6e:	0c f0       	brlt	.+2      	; 0xb72 <_fpadd_parts+0xba>
     b70:	61 c0       	rjmp	.+194    	; 0xc34 <_fpadd_parts+0x17c>
     b72:	12 16       	cp	r1, r18
     b74:	13 06       	cpc	r1, r19
     b76:	6c f5       	brge	.+90     	; 0xbd2 <_fpadd_parts+0x11a>
     b78:	37 01       	movw	r6, r14
     b7a:	48 01       	movw	r8, r16
     b7c:	06 2e       	mov	r0, r22
     b7e:	04 c0       	rjmp	.+8      	; 0xb88 <_fpadd_parts+0xd0>
     b80:	96 94       	lsr	r9
     b82:	87 94       	ror	r8
     b84:	77 94       	ror	r7
     b86:	67 94       	ror	r6
     b88:	0a 94       	dec	r0
     b8a:	d2 f7       	brpl	.-12     	; 0xb80 <_fpadd_parts+0xc8>
     b8c:	21 e0       	ldi	r18, 0x01	; 1
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	50 e0       	ldi	r21, 0x00	; 0
     b94:	04 c0       	rjmp	.+8      	; 0xb9e <_fpadd_parts+0xe6>
     b96:	22 0f       	add	r18, r18
     b98:	33 1f       	adc	r19, r19
     b9a:	44 1f       	adc	r20, r20
     b9c:	55 1f       	adc	r21, r21
     b9e:	6a 95       	dec	r22
     ba0:	d2 f7       	brpl	.-12     	; 0xb96 <_fpadd_parts+0xde>
     ba2:	21 50       	subi	r18, 0x01	; 1
     ba4:	30 40       	sbci	r19, 0x00	; 0
     ba6:	40 40       	sbci	r20, 0x00	; 0
     ba8:	50 40       	sbci	r21, 0x00	; 0
     baa:	2e 21       	and	r18, r14
     bac:	3f 21       	and	r19, r15
     bae:	40 23       	and	r20, r16
     bb0:	51 23       	and	r21, r17
     bb2:	21 15       	cp	r18, r1
     bb4:	31 05       	cpc	r19, r1
     bb6:	41 05       	cpc	r20, r1
     bb8:	51 05       	cpc	r21, r1
     bba:	21 f0       	breq	.+8      	; 0xbc4 <_fpadd_parts+0x10c>
     bbc:	21 e0       	ldi	r18, 0x01	; 1
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	50 e0       	ldi	r21, 0x00	; 0
     bc4:	79 01       	movw	r14, r18
     bc6:	8a 01       	movw	r16, r20
     bc8:	e6 28       	or	r14, r6
     bca:	f7 28       	or	r15, r7
     bcc:	08 29       	or	r16, r8
     bce:	19 29       	or	r17, r9
     bd0:	3c c0       	rjmp	.+120    	; 0xc4a <_fpadd_parts+0x192>
     bd2:	23 2b       	or	r18, r19
     bd4:	d1 f1       	breq	.+116    	; 0xc4a <_fpadd_parts+0x192>
     bd6:	26 0e       	add	r2, r22
     bd8:	37 1e       	adc	r3, r23
     bda:	35 01       	movw	r6, r10
     bdc:	46 01       	movw	r8, r12
     bde:	06 2e       	mov	r0, r22
     be0:	04 c0       	rjmp	.+8      	; 0xbea <_fpadd_parts+0x132>
     be2:	96 94       	lsr	r9
     be4:	87 94       	ror	r8
     be6:	77 94       	ror	r7
     be8:	67 94       	ror	r6
     bea:	0a 94       	dec	r0
     bec:	d2 f7       	brpl	.-12     	; 0xbe2 <_fpadd_parts+0x12a>
     bee:	21 e0       	ldi	r18, 0x01	; 1
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	40 e0       	ldi	r20, 0x00	; 0
     bf4:	50 e0       	ldi	r21, 0x00	; 0
     bf6:	04 c0       	rjmp	.+8      	; 0xc00 <_fpadd_parts+0x148>
     bf8:	22 0f       	add	r18, r18
     bfa:	33 1f       	adc	r19, r19
     bfc:	44 1f       	adc	r20, r20
     bfe:	55 1f       	adc	r21, r21
     c00:	6a 95       	dec	r22
     c02:	d2 f7       	brpl	.-12     	; 0xbf8 <_fpadd_parts+0x140>
     c04:	21 50       	subi	r18, 0x01	; 1
     c06:	30 40       	sbci	r19, 0x00	; 0
     c08:	40 40       	sbci	r20, 0x00	; 0
     c0a:	50 40       	sbci	r21, 0x00	; 0
     c0c:	2a 21       	and	r18, r10
     c0e:	3b 21       	and	r19, r11
     c10:	4c 21       	and	r20, r12
     c12:	5d 21       	and	r21, r13
     c14:	21 15       	cp	r18, r1
     c16:	31 05       	cpc	r19, r1
     c18:	41 05       	cpc	r20, r1
     c1a:	51 05       	cpc	r21, r1
     c1c:	21 f0       	breq	.+8      	; 0xc26 <_fpadd_parts+0x16e>
     c1e:	21 e0       	ldi	r18, 0x01	; 1
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	59 01       	movw	r10, r18
     c28:	6a 01       	movw	r12, r20
     c2a:	a6 28       	or	r10, r6
     c2c:	b7 28       	or	r11, r7
     c2e:	c8 28       	or	r12, r8
     c30:	d9 28       	or	r13, r9
     c32:	0b c0       	rjmp	.+22     	; 0xc4a <_fpadd_parts+0x192>
     c34:	82 15       	cp	r24, r2
     c36:	93 05       	cpc	r25, r3
     c38:	2c f0       	brlt	.+10     	; 0xc44 <_fpadd_parts+0x18c>
     c3a:	1c 01       	movw	r2, r24
     c3c:	aa 24       	eor	r10, r10
     c3e:	bb 24       	eor	r11, r11
     c40:	65 01       	movw	r12, r10
     c42:	03 c0       	rjmp	.+6      	; 0xc4a <_fpadd_parts+0x192>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	11 96       	adiw	r26, 0x01	; 1
     c4c:	9c 91       	ld	r25, X
     c4e:	d2 01       	movw	r26, r4
     c50:	11 96       	adiw	r26, 0x01	; 1
     c52:	8c 91       	ld	r24, X
     c54:	98 17       	cp	r25, r24
     c56:	09 f4       	brne	.+2      	; 0xc5a <_fpadd_parts+0x1a2>
     c58:	45 c0       	rjmp	.+138    	; 0xce4 <_fpadd_parts+0x22c>
     c5a:	99 23       	and	r25, r25
     c5c:	39 f0       	breq	.+14     	; 0xc6c <_fpadd_parts+0x1b4>
     c5e:	a8 01       	movw	r20, r16
     c60:	97 01       	movw	r18, r14
     c62:	2a 19       	sub	r18, r10
     c64:	3b 09       	sbc	r19, r11
     c66:	4c 09       	sbc	r20, r12
     c68:	5d 09       	sbc	r21, r13
     c6a:	06 c0       	rjmp	.+12     	; 0xc78 <_fpadd_parts+0x1c0>
     c6c:	a6 01       	movw	r20, r12
     c6e:	95 01       	movw	r18, r10
     c70:	2e 19       	sub	r18, r14
     c72:	3f 09       	sbc	r19, r15
     c74:	40 0b       	sbc	r20, r16
     c76:	51 0b       	sbc	r21, r17
     c78:	57 fd       	sbrc	r21, 7
     c7a:	08 c0       	rjmp	.+16     	; 0xc8c <_fpadd_parts+0x1d4>
     c7c:	11 82       	std	Z+1, r1	; 0x01
     c7e:	33 82       	std	Z+3, r3	; 0x03
     c80:	22 82       	std	Z+2, r2	; 0x02
     c82:	24 83       	std	Z+4, r18	; 0x04
     c84:	35 83       	std	Z+5, r19	; 0x05
     c86:	46 83       	std	Z+6, r20	; 0x06
     c88:	57 83       	std	Z+7, r21	; 0x07
     c8a:	1d c0       	rjmp	.+58     	; 0xcc6 <_fpadd_parts+0x20e>
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	81 83       	std	Z+1, r24	; 0x01
     c90:	33 82       	std	Z+3, r3	; 0x03
     c92:	22 82       	std	Z+2, r2	; 0x02
     c94:	88 27       	eor	r24, r24
     c96:	99 27       	eor	r25, r25
     c98:	dc 01       	movw	r26, r24
     c9a:	82 1b       	sub	r24, r18
     c9c:	93 0b       	sbc	r25, r19
     c9e:	a4 0b       	sbc	r26, r20
     ca0:	b5 0b       	sbc	r27, r21
     ca2:	84 83       	std	Z+4, r24	; 0x04
     ca4:	95 83       	std	Z+5, r25	; 0x05
     ca6:	a6 83       	std	Z+6, r26	; 0x06
     ca8:	b7 83       	std	Z+7, r27	; 0x07
     caa:	0d c0       	rjmp	.+26     	; 0xcc6 <_fpadd_parts+0x20e>
     cac:	22 0f       	add	r18, r18
     cae:	33 1f       	adc	r19, r19
     cb0:	44 1f       	adc	r20, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	24 83       	std	Z+4, r18	; 0x04
     cb6:	35 83       	std	Z+5, r19	; 0x05
     cb8:	46 83       	std	Z+6, r20	; 0x06
     cba:	57 83       	std	Z+7, r21	; 0x07
     cbc:	82 81       	ldd	r24, Z+2	; 0x02
     cbe:	93 81       	ldd	r25, Z+3	; 0x03
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	93 83       	std	Z+3, r25	; 0x03
     cc4:	82 83       	std	Z+2, r24	; 0x02
     cc6:	24 81       	ldd	r18, Z+4	; 0x04
     cc8:	35 81       	ldd	r19, Z+5	; 0x05
     cca:	46 81       	ldd	r20, Z+6	; 0x06
     ccc:	57 81       	ldd	r21, Z+7	; 0x07
     cce:	da 01       	movw	r26, r20
     cd0:	c9 01       	movw	r24, r18
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	a1 09       	sbc	r26, r1
     cd6:	b1 09       	sbc	r27, r1
     cd8:	8f 5f       	subi	r24, 0xFF	; 255
     cda:	9f 4f       	sbci	r25, 0xFF	; 255
     cdc:	af 4f       	sbci	r26, 0xFF	; 255
     cde:	bf 43       	sbci	r27, 0x3F	; 63
     ce0:	28 f3       	brcs	.-54     	; 0xcac <_fpadd_parts+0x1f4>
     ce2:	0b c0       	rjmp	.+22     	; 0xcfa <_fpadd_parts+0x242>
     ce4:	91 83       	std	Z+1, r25	; 0x01
     ce6:	33 82       	std	Z+3, r3	; 0x03
     ce8:	22 82       	std	Z+2, r2	; 0x02
     cea:	ea 0c       	add	r14, r10
     cec:	fb 1c       	adc	r15, r11
     cee:	0c 1d       	adc	r16, r12
     cf0:	1d 1d       	adc	r17, r13
     cf2:	e4 82       	std	Z+4, r14	; 0x04
     cf4:	f5 82       	std	Z+5, r15	; 0x05
     cf6:	06 83       	std	Z+6, r16	; 0x06
     cf8:	17 83       	std	Z+7, r17	; 0x07
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	80 83       	st	Z, r24
     cfe:	24 81       	ldd	r18, Z+4	; 0x04
     d00:	35 81       	ldd	r19, Z+5	; 0x05
     d02:	46 81       	ldd	r20, Z+6	; 0x06
     d04:	57 81       	ldd	r21, Z+7	; 0x07
     d06:	57 ff       	sbrs	r21, 7
     d08:	1a c0       	rjmp	.+52     	; 0xd3e <_fpadd_parts+0x286>
     d0a:	c9 01       	movw	r24, r18
     d0c:	aa 27       	eor	r26, r26
     d0e:	97 fd       	sbrc	r25, 7
     d10:	a0 95       	com	r26
     d12:	ba 2f       	mov	r27, r26
     d14:	81 70       	andi	r24, 0x01	; 1
     d16:	90 70       	andi	r25, 0x00	; 0
     d18:	a0 70       	andi	r26, 0x00	; 0
     d1a:	b0 70       	andi	r27, 0x00	; 0
     d1c:	56 95       	lsr	r21
     d1e:	47 95       	ror	r20
     d20:	37 95       	ror	r19
     d22:	27 95       	ror	r18
     d24:	82 2b       	or	r24, r18
     d26:	93 2b       	or	r25, r19
     d28:	a4 2b       	or	r26, r20
     d2a:	b5 2b       	or	r27, r21
     d2c:	84 83       	std	Z+4, r24	; 0x04
     d2e:	95 83       	std	Z+5, r25	; 0x05
     d30:	a6 83       	std	Z+6, r26	; 0x06
     d32:	b7 83       	std	Z+7, r27	; 0x07
     d34:	82 81       	ldd	r24, Z+2	; 0x02
     d36:	93 81       	ldd	r25, Z+3	; 0x03
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	93 83       	std	Z+3, r25	; 0x03
     d3c:	82 83       	std	Z+2, r24	; 0x02
     d3e:	df 01       	movw	r26, r30
     d40:	01 c0       	rjmp	.+2      	; 0xd44 <_fpadd_parts+0x28c>
     d42:	d2 01       	movw	r26, r4
     d44:	cd 01       	movw	r24, r26
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	e2 e1       	ldi	r30, 0x12	; 18
     d4c:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__epilogue_restores__>

00000d50 <__subsf3>:
     d50:	a0 e2       	ldi	r26, 0x20	; 32
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	ee ea       	ldi	r30, 0xAE	; 174
     d56:	f6 e0       	ldi	r31, 0x06	; 6
     d58:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__prologue_saves__+0x18>
     d5c:	69 83       	std	Y+1, r22	; 0x01
     d5e:	7a 83       	std	Y+2, r23	; 0x02
     d60:	8b 83       	std	Y+3, r24	; 0x03
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	2d 83       	std	Y+5, r18	; 0x05
     d66:	3e 83       	std	Y+6, r19	; 0x06
     d68:	4f 83       	std	Y+7, r20	; 0x07
     d6a:	58 87       	std	Y+8, r21	; 0x08
     d6c:	e9 e0       	ldi	r30, 0x09	; 9
     d6e:	ee 2e       	mov	r14, r30
     d70:	f1 2c       	mov	r15, r1
     d72:	ec 0e       	add	r14, r28
     d74:	fd 1e       	adc	r15, r29
     d76:	b7 01       	movw	r22, r14
     d78:	ce 01       	movw	r24, r28
     d7a:	01 96       	adiw	r24, 0x01	; 1
     d7c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__unpack_f>
     d80:	8e 01       	movw	r16, r28
     d82:	0f 5e       	subi	r16, 0xEF	; 239
     d84:	1f 4f       	sbci	r17, 0xFF	; 255
     d86:	b8 01       	movw	r22, r16
     d88:	ce 01       	movw	r24, r28
     d8a:	05 96       	adiw	r24, 0x05	; 5
     d8c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__unpack_f>
     d90:	8a 89       	ldd	r24, Y+18	; 0x12
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	89 27       	eor	r24, r25
     d96:	8a 8b       	std	Y+18, r24	; 0x12
     d98:	ae 01       	movw	r20, r28
     d9a:	47 5e       	subi	r20, 0xE7	; 231
     d9c:	5f 4f       	sbci	r21, 0xFF	; 255
     d9e:	b8 01       	movw	r22, r16
     da0:	c7 01       	movw	r24, r14
     da2:	0e 94 5c 05 	call	0xab8	; 0xab8 <_fpadd_parts>
     da6:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__pack_f>
     daa:	a0 96       	adiw	r28, 0x20	; 32
     dac:	e6 e0       	ldi	r30, 0x06	; 6
     dae:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__epilogue_restores__+0x18>

00000db2 <__addsf3>:
     db2:	a0 e2       	ldi	r26, 0x20	; 32
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	ef ed       	ldi	r30, 0xDF	; 223
     db8:	f6 e0       	ldi	r31, 0x06	; 6
     dba:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__prologue_saves__+0x18>
     dbe:	69 83       	std	Y+1, r22	; 0x01
     dc0:	7a 83       	std	Y+2, r23	; 0x02
     dc2:	8b 83       	std	Y+3, r24	; 0x03
     dc4:	9c 83       	std	Y+4, r25	; 0x04
     dc6:	2d 83       	std	Y+5, r18	; 0x05
     dc8:	3e 83       	std	Y+6, r19	; 0x06
     dca:	4f 83       	std	Y+7, r20	; 0x07
     dcc:	58 87       	std	Y+8, r21	; 0x08
     dce:	f9 e0       	ldi	r31, 0x09	; 9
     dd0:	ef 2e       	mov	r14, r31
     dd2:	f1 2c       	mov	r15, r1
     dd4:	ec 0e       	add	r14, r28
     dd6:	fd 1e       	adc	r15, r29
     dd8:	b7 01       	movw	r22, r14
     dda:	ce 01       	movw	r24, r28
     ddc:	01 96       	adiw	r24, 0x01	; 1
     dde:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__unpack_f>
     de2:	8e 01       	movw	r16, r28
     de4:	0f 5e       	subi	r16, 0xEF	; 239
     de6:	1f 4f       	sbci	r17, 0xFF	; 255
     de8:	b8 01       	movw	r22, r16
     dea:	ce 01       	movw	r24, r28
     dec:	05 96       	adiw	r24, 0x05	; 5
     dee:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__unpack_f>
     df2:	ae 01       	movw	r20, r28
     df4:	47 5e       	subi	r20, 0xE7	; 231
     df6:	5f 4f       	sbci	r21, 0xFF	; 255
     df8:	b8 01       	movw	r22, r16
     dfa:	c7 01       	movw	r24, r14
     dfc:	0e 94 5c 05 	call	0xab8	; 0xab8 <_fpadd_parts>
     e00:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__pack_f>
     e04:	a0 96       	adiw	r28, 0x20	; 32
     e06:	e6 e0       	ldi	r30, 0x06	; 6
     e08:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__epilogue_restores__+0x18>

00000e0c <__mulsf3>:
     e0c:	a0 e2       	ldi	r26, 0x20	; 32
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	ec e0       	ldi	r30, 0x0C	; 12
     e12:	f7 e0       	ldi	r31, 0x07	; 7
     e14:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__prologue_saves__>
     e18:	69 83       	std	Y+1, r22	; 0x01
     e1a:	7a 83       	std	Y+2, r23	; 0x02
     e1c:	8b 83       	std	Y+3, r24	; 0x03
     e1e:	9c 83       	std	Y+4, r25	; 0x04
     e20:	2d 83       	std	Y+5, r18	; 0x05
     e22:	3e 83       	std	Y+6, r19	; 0x06
     e24:	4f 83       	std	Y+7, r20	; 0x07
     e26:	58 87       	std	Y+8, r21	; 0x08
     e28:	be 01       	movw	r22, r28
     e2a:	67 5f       	subi	r22, 0xF7	; 247
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	ce 01       	movw	r24, r28
     e30:	01 96       	adiw	r24, 0x01	; 1
     e32:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__unpack_f>
     e36:	be 01       	movw	r22, r28
     e38:	6f 5e       	subi	r22, 0xEF	; 239
     e3a:	7f 4f       	sbci	r23, 0xFF	; 255
     e3c:	ce 01       	movw	r24, r28
     e3e:	05 96       	adiw	r24, 0x05	; 5
     e40:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__unpack_f>
     e44:	99 85       	ldd	r25, Y+9	; 0x09
     e46:	92 30       	cpi	r25, 0x02	; 2
     e48:	88 f0       	brcs	.+34     	; 0xe6c <__mulsf3+0x60>
     e4a:	89 89       	ldd	r24, Y+17	; 0x11
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	c8 f0       	brcs	.+50     	; 0xe82 <__mulsf3+0x76>
     e50:	94 30       	cpi	r25, 0x04	; 4
     e52:	19 f4       	brne	.+6      	; 0xe5a <__mulsf3+0x4e>
     e54:	82 30       	cpi	r24, 0x02	; 2
     e56:	51 f4       	brne	.+20     	; 0xe6c <__mulsf3+0x60>
     e58:	04 c0       	rjmp	.+8      	; 0xe62 <__mulsf3+0x56>
     e5a:	84 30       	cpi	r24, 0x04	; 4
     e5c:	29 f4       	brne	.+10     	; 0xe68 <__mulsf3+0x5c>
     e5e:	92 30       	cpi	r25, 0x02	; 2
     e60:	81 f4       	brne	.+32     	; 0xe82 <__mulsf3+0x76>
     e62:	80 e6       	ldi	r24, 0x60	; 96
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	c6 c0       	rjmp	.+396    	; 0xff4 <__mulsf3+0x1e8>
     e68:	92 30       	cpi	r25, 0x02	; 2
     e6a:	49 f4       	brne	.+18     	; 0xe7e <__mulsf3+0x72>
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e70:	8a 89       	ldd	r24, Y+18	; 0x12
     e72:	98 13       	cpse	r25, r24
     e74:	21 e0       	ldi	r18, 0x01	; 1
     e76:	2a 87       	std	Y+10, r18	; 0x0a
     e78:	ce 01       	movw	r24, r28
     e7a:	09 96       	adiw	r24, 0x09	; 9
     e7c:	bb c0       	rjmp	.+374    	; 0xff4 <__mulsf3+0x1e8>
     e7e:	82 30       	cpi	r24, 0x02	; 2
     e80:	49 f4       	brne	.+18     	; 0xe94 <__mulsf3+0x88>
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	9a 85       	ldd	r25, Y+10	; 0x0a
     e86:	8a 89       	ldd	r24, Y+18	; 0x12
     e88:	98 13       	cpse	r25, r24
     e8a:	21 e0       	ldi	r18, 0x01	; 1
     e8c:	2a 8b       	std	Y+18, r18	; 0x12
     e8e:	ce 01       	movw	r24, r28
     e90:	41 96       	adiw	r24, 0x11	; 17
     e92:	b0 c0       	rjmp	.+352    	; 0xff4 <__mulsf3+0x1e8>
     e94:	2d 84       	ldd	r2, Y+13	; 0x0d
     e96:	3e 84       	ldd	r3, Y+14	; 0x0e
     e98:	4f 84       	ldd	r4, Y+15	; 0x0f
     e9a:	58 88       	ldd	r5, Y+16	; 0x10
     e9c:	6d 88       	ldd	r6, Y+21	; 0x15
     e9e:	7e 88       	ldd	r7, Y+22	; 0x16
     ea0:	8f 88       	ldd	r8, Y+23	; 0x17
     ea2:	98 8c       	ldd	r9, Y+24	; 0x18
     ea4:	ee 24       	eor	r14, r14
     ea6:	ff 24       	eor	r15, r15
     ea8:	87 01       	movw	r16, r14
     eaa:	aa 24       	eor	r10, r10
     eac:	bb 24       	eor	r11, r11
     eae:	65 01       	movw	r12, r10
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	e0 e0       	ldi	r30, 0x00	; 0
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	c1 01       	movw	r24, r2
     ebe:	81 70       	andi	r24, 0x01	; 1
     ec0:	90 70       	andi	r25, 0x00	; 0
     ec2:	89 2b       	or	r24, r25
     ec4:	e9 f0       	breq	.+58     	; 0xf00 <__mulsf3+0xf4>
     ec6:	e6 0c       	add	r14, r6
     ec8:	f7 1c       	adc	r15, r7
     eca:	08 1d       	adc	r16, r8
     ecc:	19 1d       	adc	r17, r9
     ece:	9a 01       	movw	r18, r20
     ed0:	ab 01       	movw	r20, r22
     ed2:	2a 0d       	add	r18, r10
     ed4:	3b 1d       	adc	r19, r11
     ed6:	4c 1d       	adc	r20, r12
     ed8:	5d 1d       	adc	r21, r13
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	a0 e0       	ldi	r26, 0x00	; 0
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e6 14       	cp	r14, r6
     ee4:	f7 04       	cpc	r15, r7
     ee6:	08 05       	cpc	r16, r8
     ee8:	19 05       	cpc	r17, r9
     eea:	20 f4       	brcc	.+8      	; 0xef4 <__mulsf3+0xe8>
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	a0 e0       	ldi	r26, 0x00	; 0
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	ba 01       	movw	r22, r20
     ef6:	a9 01       	movw	r20, r18
     ef8:	48 0f       	add	r20, r24
     efa:	59 1f       	adc	r21, r25
     efc:	6a 1f       	adc	r22, r26
     efe:	7b 1f       	adc	r23, r27
     f00:	aa 0c       	add	r10, r10
     f02:	bb 1c       	adc	r11, r11
     f04:	cc 1c       	adc	r12, r12
     f06:	dd 1c       	adc	r13, r13
     f08:	97 fe       	sbrs	r9, 7
     f0a:	08 c0       	rjmp	.+16     	; 0xf1c <__mulsf3+0x110>
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	a0 e0       	ldi	r26, 0x00	; 0
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	a8 2a       	or	r10, r24
     f16:	b9 2a       	or	r11, r25
     f18:	ca 2a       	or	r12, r26
     f1a:	db 2a       	or	r13, r27
     f1c:	31 96       	adiw	r30, 0x01	; 1
     f1e:	e0 32       	cpi	r30, 0x20	; 32
     f20:	f1 05       	cpc	r31, r1
     f22:	49 f0       	breq	.+18     	; 0xf36 <__mulsf3+0x12a>
     f24:	66 0c       	add	r6, r6
     f26:	77 1c       	adc	r7, r7
     f28:	88 1c       	adc	r8, r8
     f2a:	99 1c       	adc	r9, r9
     f2c:	56 94       	lsr	r5
     f2e:	47 94       	ror	r4
     f30:	37 94       	ror	r3
     f32:	27 94       	ror	r2
     f34:	c3 cf       	rjmp	.-122    	; 0xebc <__mulsf3+0xb0>
     f36:	fa 85       	ldd	r31, Y+10	; 0x0a
     f38:	ea 89       	ldd	r30, Y+18	; 0x12
     f3a:	2b 89       	ldd	r18, Y+19	; 0x13
     f3c:	3c 89       	ldd	r19, Y+20	; 0x14
     f3e:	8b 85       	ldd	r24, Y+11	; 0x0b
     f40:	9c 85       	ldd	r25, Y+12	; 0x0c
     f42:	28 0f       	add	r18, r24
     f44:	39 1f       	adc	r19, r25
     f46:	2e 5f       	subi	r18, 0xFE	; 254
     f48:	3f 4f       	sbci	r19, 0xFF	; 255
     f4a:	17 c0       	rjmp	.+46     	; 0xf7a <__mulsf3+0x16e>
     f4c:	ca 01       	movw	r24, r20
     f4e:	81 70       	andi	r24, 0x01	; 1
     f50:	90 70       	andi	r25, 0x00	; 0
     f52:	89 2b       	or	r24, r25
     f54:	61 f0       	breq	.+24     	; 0xf6e <__mulsf3+0x162>
     f56:	16 95       	lsr	r17
     f58:	07 95       	ror	r16
     f5a:	f7 94       	ror	r15
     f5c:	e7 94       	ror	r14
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a0 e0       	ldi	r26, 0x00	; 0
     f64:	b0 e8       	ldi	r27, 0x80	; 128
     f66:	e8 2a       	or	r14, r24
     f68:	f9 2a       	or	r15, r25
     f6a:	0a 2b       	or	r16, r26
     f6c:	1b 2b       	or	r17, r27
     f6e:	76 95       	lsr	r23
     f70:	67 95       	ror	r22
     f72:	57 95       	ror	r21
     f74:	47 95       	ror	r20
     f76:	2f 5f       	subi	r18, 0xFF	; 255
     f78:	3f 4f       	sbci	r19, 0xFF	; 255
     f7a:	77 fd       	sbrc	r23, 7
     f7c:	e7 cf       	rjmp	.-50     	; 0xf4c <__mulsf3+0x140>
     f7e:	0c c0       	rjmp	.+24     	; 0xf98 <__mulsf3+0x18c>
     f80:	44 0f       	add	r20, r20
     f82:	55 1f       	adc	r21, r21
     f84:	66 1f       	adc	r22, r22
     f86:	77 1f       	adc	r23, r23
     f88:	17 fd       	sbrc	r17, 7
     f8a:	41 60       	ori	r20, 0x01	; 1
     f8c:	ee 0c       	add	r14, r14
     f8e:	ff 1c       	adc	r15, r15
     f90:	00 1f       	adc	r16, r16
     f92:	11 1f       	adc	r17, r17
     f94:	21 50       	subi	r18, 0x01	; 1
     f96:	30 40       	sbci	r19, 0x00	; 0
     f98:	40 30       	cpi	r20, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	59 07       	cpc	r21, r25
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	69 07       	cpc	r22, r25
     fa2:	90 e4       	ldi	r25, 0x40	; 64
     fa4:	79 07       	cpc	r23, r25
     fa6:	60 f3       	brcs	.-40     	; 0xf80 <__mulsf3+0x174>
     fa8:	2b 8f       	std	Y+27, r18	; 0x1b
     faa:	3c 8f       	std	Y+28, r19	; 0x1c
     fac:	db 01       	movw	r26, r22
     fae:	ca 01       	movw	r24, r20
     fb0:	8f 77       	andi	r24, 0x7F	; 127
     fb2:	90 70       	andi	r25, 0x00	; 0
     fb4:	a0 70       	andi	r26, 0x00	; 0
     fb6:	b0 70       	andi	r27, 0x00	; 0
     fb8:	80 34       	cpi	r24, 0x40	; 64
     fba:	91 05       	cpc	r25, r1
     fbc:	a1 05       	cpc	r26, r1
     fbe:	b1 05       	cpc	r27, r1
     fc0:	61 f4       	brne	.+24     	; 0xfda <__mulsf3+0x1ce>
     fc2:	47 fd       	sbrc	r20, 7
     fc4:	0a c0       	rjmp	.+20     	; 0xfda <__mulsf3+0x1ce>
     fc6:	e1 14       	cp	r14, r1
     fc8:	f1 04       	cpc	r15, r1
     fca:	01 05       	cpc	r16, r1
     fcc:	11 05       	cpc	r17, r1
     fce:	29 f0       	breq	.+10     	; 0xfda <__mulsf3+0x1ce>
     fd0:	40 5c       	subi	r20, 0xC0	; 192
     fd2:	5f 4f       	sbci	r21, 0xFF	; 255
     fd4:	6f 4f       	sbci	r22, 0xFF	; 255
     fd6:	7f 4f       	sbci	r23, 0xFF	; 255
     fd8:	40 78       	andi	r20, 0x80	; 128
     fda:	1a 8e       	std	Y+26, r1	; 0x1a
     fdc:	fe 17       	cp	r31, r30
     fde:	11 f0       	breq	.+4      	; 0xfe4 <__mulsf3+0x1d8>
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	8a 8f       	std	Y+26, r24	; 0x1a
     fe4:	4d 8f       	std	Y+29, r20	; 0x1d
     fe6:	5e 8f       	std	Y+30, r21	; 0x1e
     fe8:	6f 8f       	std	Y+31, r22	; 0x1f
     fea:	78 a3       	std	Y+32, r23	; 0x20
     fec:	83 e0       	ldi	r24, 0x03	; 3
     fee:	89 8f       	std	Y+25, r24	; 0x19
     ff0:	ce 01       	movw	r24, r28
     ff2:	49 96       	adiw	r24, 0x19	; 25
     ff4:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__pack_f>
     ff8:	a0 96       	adiw	r28, 0x20	; 32
     ffa:	e2 e1       	ldi	r30, 0x12	; 18
     ffc:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__epilogue_restores__>

00001000 <__gtsf2>:
    1000:	a8 e1       	ldi	r26, 0x18	; 24
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e6 e0       	ldi	r30, 0x06	; 6
    1006:	f8 e0       	ldi	r31, 0x08	; 8
    1008:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__prologue_saves__+0x18>
    100c:	69 83       	std	Y+1, r22	; 0x01
    100e:	7a 83       	std	Y+2, r23	; 0x02
    1010:	8b 83       	std	Y+3, r24	; 0x03
    1012:	9c 83       	std	Y+4, r25	; 0x04
    1014:	2d 83       	std	Y+5, r18	; 0x05
    1016:	3e 83       	std	Y+6, r19	; 0x06
    1018:	4f 83       	std	Y+7, r20	; 0x07
    101a:	58 87       	std	Y+8, r21	; 0x08
    101c:	89 e0       	ldi	r24, 0x09	; 9
    101e:	e8 2e       	mov	r14, r24
    1020:	f1 2c       	mov	r15, r1
    1022:	ec 0e       	add	r14, r28
    1024:	fd 1e       	adc	r15, r29
    1026:	b7 01       	movw	r22, r14
    1028:	ce 01       	movw	r24, r28
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__unpack_f>
    1030:	8e 01       	movw	r16, r28
    1032:	0f 5e       	subi	r16, 0xEF	; 239
    1034:	1f 4f       	sbci	r17, 0xFF	; 255
    1036:	b8 01       	movw	r22, r16
    1038:	ce 01       	movw	r24, r28
    103a:	05 96       	adiw	r24, 0x05	; 5
    103c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__unpack_f>
    1040:	89 85       	ldd	r24, Y+9	; 0x09
    1042:	82 30       	cpi	r24, 0x02	; 2
    1044:	40 f0       	brcs	.+16     	; 0x1056 <__gtsf2+0x56>
    1046:	89 89       	ldd	r24, Y+17	; 0x11
    1048:	82 30       	cpi	r24, 0x02	; 2
    104a:	28 f0       	brcs	.+10     	; 0x1056 <__gtsf2+0x56>
    104c:	b8 01       	movw	r22, r16
    104e:	c7 01       	movw	r24, r14
    1050:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fpcmp_parts_f>
    1054:	01 c0       	rjmp	.+2      	; 0x1058 <__gtsf2+0x58>
    1056:	8f ef       	ldi	r24, 0xFF	; 255
    1058:	68 96       	adiw	r28, 0x18	; 24
    105a:	e6 e0       	ldi	r30, 0x06	; 6
    105c:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__epilogue_restores__+0x18>

00001060 <__gesf2>:
    1060:	a8 e1       	ldi	r26, 0x18	; 24
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e6 e3       	ldi	r30, 0x36	; 54
    1066:	f8 e0       	ldi	r31, 0x08	; 8
    1068:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__prologue_saves__+0x18>
    106c:	69 83       	std	Y+1, r22	; 0x01
    106e:	7a 83       	std	Y+2, r23	; 0x02
    1070:	8b 83       	std	Y+3, r24	; 0x03
    1072:	9c 83       	std	Y+4, r25	; 0x04
    1074:	2d 83       	std	Y+5, r18	; 0x05
    1076:	3e 83       	std	Y+6, r19	; 0x06
    1078:	4f 83       	std	Y+7, r20	; 0x07
    107a:	58 87       	std	Y+8, r21	; 0x08
    107c:	89 e0       	ldi	r24, 0x09	; 9
    107e:	e8 2e       	mov	r14, r24
    1080:	f1 2c       	mov	r15, r1
    1082:	ec 0e       	add	r14, r28
    1084:	fd 1e       	adc	r15, r29
    1086:	b7 01       	movw	r22, r14
    1088:	ce 01       	movw	r24, r28
    108a:	01 96       	adiw	r24, 0x01	; 1
    108c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__unpack_f>
    1090:	8e 01       	movw	r16, r28
    1092:	0f 5e       	subi	r16, 0xEF	; 239
    1094:	1f 4f       	sbci	r17, 0xFF	; 255
    1096:	b8 01       	movw	r22, r16
    1098:	ce 01       	movw	r24, r28
    109a:	05 96       	adiw	r24, 0x05	; 5
    109c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__unpack_f>
    10a0:	89 85       	ldd	r24, Y+9	; 0x09
    10a2:	82 30       	cpi	r24, 0x02	; 2
    10a4:	40 f0       	brcs	.+16     	; 0x10b6 <__gesf2+0x56>
    10a6:	89 89       	ldd	r24, Y+17	; 0x11
    10a8:	82 30       	cpi	r24, 0x02	; 2
    10aa:	28 f0       	brcs	.+10     	; 0x10b6 <__gesf2+0x56>
    10ac:	b8 01       	movw	r22, r16
    10ae:	c7 01       	movw	r24, r14
    10b0:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fpcmp_parts_f>
    10b4:	01 c0       	rjmp	.+2      	; 0x10b8 <__gesf2+0x58>
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	68 96       	adiw	r28, 0x18	; 24
    10ba:	e6 e0       	ldi	r30, 0x06	; 6
    10bc:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__epilogue_restores__+0x18>

000010c0 <__ltsf2>:
    10c0:	a8 e1       	ldi	r26, 0x18	; 24
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e6 e6       	ldi	r30, 0x66	; 102
    10c6:	f8 e0       	ldi	r31, 0x08	; 8
    10c8:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__prologue_saves__+0x18>
    10cc:	69 83       	std	Y+1, r22	; 0x01
    10ce:	7a 83       	std	Y+2, r23	; 0x02
    10d0:	8b 83       	std	Y+3, r24	; 0x03
    10d2:	9c 83       	std	Y+4, r25	; 0x04
    10d4:	2d 83       	std	Y+5, r18	; 0x05
    10d6:	3e 83       	std	Y+6, r19	; 0x06
    10d8:	4f 83       	std	Y+7, r20	; 0x07
    10da:	58 87       	std	Y+8, r21	; 0x08
    10dc:	89 e0       	ldi	r24, 0x09	; 9
    10de:	e8 2e       	mov	r14, r24
    10e0:	f1 2c       	mov	r15, r1
    10e2:	ec 0e       	add	r14, r28
    10e4:	fd 1e       	adc	r15, r29
    10e6:	b7 01       	movw	r22, r14
    10e8:	ce 01       	movw	r24, r28
    10ea:	01 96       	adiw	r24, 0x01	; 1
    10ec:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__unpack_f>
    10f0:	8e 01       	movw	r16, r28
    10f2:	0f 5e       	subi	r16, 0xEF	; 239
    10f4:	1f 4f       	sbci	r17, 0xFF	; 255
    10f6:	b8 01       	movw	r22, r16
    10f8:	ce 01       	movw	r24, r28
    10fa:	05 96       	adiw	r24, 0x05	; 5
    10fc:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__unpack_f>
    1100:	89 85       	ldd	r24, Y+9	; 0x09
    1102:	82 30       	cpi	r24, 0x02	; 2
    1104:	40 f0       	brcs	.+16     	; 0x1116 <__ltsf2+0x56>
    1106:	89 89       	ldd	r24, Y+17	; 0x11
    1108:	82 30       	cpi	r24, 0x02	; 2
    110a:	28 f0       	brcs	.+10     	; 0x1116 <__ltsf2+0x56>
    110c:	b8 01       	movw	r22, r16
    110e:	c7 01       	movw	r24, r14
    1110:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fpcmp_parts_f>
    1114:	01 c0       	rjmp	.+2      	; 0x1118 <__ltsf2+0x58>
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	68 96       	adiw	r28, 0x18	; 24
    111a:	e6 e0       	ldi	r30, 0x06	; 6
    111c:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__epilogue_restores__+0x18>

00001120 <__lesf2>:
    1120:	a8 e1       	ldi	r26, 0x18	; 24
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e6 e9       	ldi	r30, 0x96	; 150
    1126:	f8 e0       	ldi	r31, 0x08	; 8
    1128:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__prologue_saves__+0x18>
    112c:	69 83       	std	Y+1, r22	; 0x01
    112e:	7a 83       	std	Y+2, r23	; 0x02
    1130:	8b 83       	std	Y+3, r24	; 0x03
    1132:	9c 83       	std	Y+4, r25	; 0x04
    1134:	2d 83       	std	Y+5, r18	; 0x05
    1136:	3e 83       	std	Y+6, r19	; 0x06
    1138:	4f 83       	std	Y+7, r20	; 0x07
    113a:	58 87       	std	Y+8, r21	; 0x08
    113c:	89 e0       	ldi	r24, 0x09	; 9
    113e:	e8 2e       	mov	r14, r24
    1140:	f1 2c       	mov	r15, r1
    1142:	ec 0e       	add	r14, r28
    1144:	fd 1e       	adc	r15, r29
    1146:	b7 01       	movw	r22, r14
    1148:	ce 01       	movw	r24, r28
    114a:	01 96       	adiw	r24, 0x01	; 1
    114c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__unpack_f>
    1150:	8e 01       	movw	r16, r28
    1152:	0f 5e       	subi	r16, 0xEF	; 239
    1154:	1f 4f       	sbci	r17, 0xFF	; 255
    1156:	b8 01       	movw	r22, r16
    1158:	ce 01       	movw	r24, r28
    115a:	05 96       	adiw	r24, 0x05	; 5
    115c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__unpack_f>
    1160:	89 85       	ldd	r24, Y+9	; 0x09
    1162:	82 30       	cpi	r24, 0x02	; 2
    1164:	40 f0       	brcs	.+16     	; 0x1176 <__lesf2+0x56>
    1166:	89 89       	ldd	r24, Y+17	; 0x11
    1168:	82 30       	cpi	r24, 0x02	; 2
    116a:	28 f0       	brcs	.+10     	; 0x1176 <__lesf2+0x56>
    116c:	b8 01       	movw	r22, r16
    116e:	c7 01       	movw	r24, r14
    1170:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fpcmp_parts_f>
    1174:	01 c0       	rjmp	.+2      	; 0x1178 <__lesf2+0x58>
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	68 96       	adiw	r28, 0x18	; 24
    117a:	e6 e0       	ldi	r30, 0x06	; 6
    117c:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__epilogue_restores__+0x18>

00001180 <__fixsfsi>:
    1180:	ac e0       	ldi	r26, 0x0C	; 12
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e6 ec       	ldi	r30, 0xC6	; 198
    1186:	f8 e0       	ldi	r31, 0x08	; 8
    1188:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__prologue_saves__+0x20>
    118c:	69 83       	std	Y+1, r22	; 0x01
    118e:	7a 83       	std	Y+2, r23	; 0x02
    1190:	8b 83       	std	Y+3, r24	; 0x03
    1192:	9c 83       	std	Y+4, r25	; 0x04
    1194:	be 01       	movw	r22, r28
    1196:	6b 5f       	subi	r22, 0xFB	; 251
    1198:	7f 4f       	sbci	r23, 0xFF	; 255
    119a:	ce 01       	movw	r24, r28
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__unpack_f>
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	61 f1       	breq	.+88     	; 0x1200 <__fixsfsi+0x80>
    11a8:	82 30       	cpi	r24, 0x02	; 2
    11aa:	50 f1       	brcs	.+84     	; 0x1200 <__fixsfsi+0x80>
    11ac:	84 30       	cpi	r24, 0x04	; 4
    11ae:	21 f4       	brne	.+8      	; 0x11b8 <__fixsfsi+0x38>
    11b0:	8e 81       	ldd	r24, Y+6	; 0x06
    11b2:	88 23       	and	r24, r24
    11b4:	51 f1       	breq	.+84     	; 0x120a <__fixsfsi+0x8a>
    11b6:	2e c0       	rjmp	.+92     	; 0x1214 <__fixsfsi+0x94>
    11b8:	2f 81       	ldd	r18, Y+7	; 0x07
    11ba:	38 85       	ldd	r19, Y+8	; 0x08
    11bc:	37 fd       	sbrc	r19, 7
    11be:	20 c0       	rjmp	.+64     	; 0x1200 <__fixsfsi+0x80>
    11c0:	6e 81       	ldd	r22, Y+6	; 0x06
    11c2:	2f 31       	cpi	r18, 0x1F	; 31
    11c4:	31 05       	cpc	r19, r1
    11c6:	1c f0       	brlt	.+6      	; 0x11ce <__fixsfsi+0x4e>
    11c8:	66 23       	and	r22, r22
    11ca:	f9 f0       	breq	.+62     	; 0x120a <__fixsfsi+0x8a>
    11cc:	23 c0       	rjmp	.+70     	; 0x1214 <__fixsfsi+0x94>
    11ce:	8e e1       	ldi	r24, 0x1E	; 30
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	82 1b       	sub	r24, r18
    11d4:	93 0b       	sbc	r25, r19
    11d6:	29 85       	ldd	r18, Y+9	; 0x09
    11d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    11da:	4b 85       	ldd	r20, Y+11	; 0x0b
    11dc:	5c 85       	ldd	r21, Y+12	; 0x0c
    11de:	04 c0       	rjmp	.+8      	; 0x11e8 <__fixsfsi+0x68>
    11e0:	56 95       	lsr	r21
    11e2:	47 95       	ror	r20
    11e4:	37 95       	ror	r19
    11e6:	27 95       	ror	r18
    11e8:	8a 95       	dec	r24
    11ea:	d2 f7       	brpl	.-12     	; 0x11e0 <__fixsfsi+0x60>
    11ec:	66 23       	and	r22, r22
    11ee:	b1 f0       	breq	.+44     	; 0x121c <__fixsfsi+0x9c>
    11f0:	50 95       	com	r21
    11f2:	40 95       	com	r20
    11f4:	30 95       	com	r19
    11f6:	21 95       	neg	r18
    11f8:	3f 4f       	sbci	r19, 0xFF	; 255
    11fa:	4f 4f       	sbci	r20, 0xFF	; 255
    11fc:	5f 4f       	sbci	r21, 0xFF	; 255
    11fe:	0e c0       	rjmp	.+28     	; 0x121c <__fixsfsi+0x9c>
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	40 e0       	ldi	r20, 0x00	; 0
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	09 c0       	rjmp	.+18     	; 0x121c <__fixsfsi+0x9c>
    120a:	2f ef       	ldi	r18, 0xFF	; 255
    120c:	3f ef       	ldi	r19, 0xFF	; 255
    120e:	4f ef       	ldi	r20, 0xFF	; 255
    1210:	5f e7       	ldi	r21, 0x7F	; 127
    1212:	04 c0       	rjmp	.+8      	; 0x121c <__fixsfsi+0x9c>
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e0       	ldi	r20, 0x00	; 0
    121a:	50 e8       	ldi	r21, 0x80	; 128
    121c:	b9 01       	movw	r22, r18
    121e:	ca 01       	movw	r24, r20
    1220:	2c 96       	adiw	r28, 0x0c	; 12
    1222:	e2 e0       	ldi	r30, 0x02	; 2
    1224:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__epilogue_restores__+0x20>

00001228 <__floatunsisf>:
    1228:	a8 e0       	ldi	r26, 0x08	; 8
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	ea e1       	ldi	r30, 0x1A	; 26
    122e:	f9 e0       	ldi	r31, 0x09	; 9
    1230:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__prologue_saves__+0x14>
    1234:	7b 01       	movw	r14, r22
    1236:	8c 01       	movw	r16, r24
    1238:	61 15       	cp	r22, r1
    123a:	71 05       	cpc	r23, r1
    123c:	81 05       	cpc	r24, r1
    123e:	91 05       	cpc	r25, r1
    1240:	19 f4       	brne	.+6      	; 0x1248 <__floatunsisf+0x20>
    1242:	82 e0       	ldi	r24, 0x02	; 2
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	60 c0       	rjmp	.+192    	; 0x1308 <__floatunsisf+0xe0>
    1248:	83 e0       	ldi	r24, 0x03	; 3
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	8e e1       	ldi	r24, 0x1E	; 30
    124e:	c8 2e       	mov	r12, r24
    1250:	d1 2c       	mov	r13, r1
    1252:	dc 82       	std	Y+4, r13	; 0x04
    1254:	cb 82       	std	Y+3, r12	; 0x03
    1256:	ed 82       	std	Y+5, r14	; 0x05
    1258:	fe 82       	std	Y+6, r15	; 0x06
    125a:	0f 83       	std	Y+7, r16	; 0x07
    125c:	18 87       	std	Y+8, r17	; 0x08
    125e:	c8 01       	movw	r24, r16
    1260:	b7 01       	movw	r22, r14
    1262:	0e 94 8d 09 	call	0x131a	; 0x131a <__clzsi2>
    1266:	bc 01       	movw	r22, r24
    1268:	61 50       	subi	r22, 0x01	; 1
    126a:	70 40       	sbci	r23, 0x00	; 0
    126c:	77 ff       	sbrs	r23, 7
    126e:	39 c0       	rjmp	.+114    	; 0x12e2 <__floatunsisf+0xba>
    1270:	ee 27       	eor	r30, r30
    1272:	ff 27       	eor	r31, r31
    1274:	e6 1b       	sub	r30, r22
    1276:	f7 0b       	sbc	r31, r23
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	a0 e0       	ldi	r26, 0x00	; 0
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	0e 2e       	mov	r0, r30
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <__floatunsisf+0x6c>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	aa 1f       	adc	r26, r26
    1292:	bb 1f       	adc	r27, r27
    1294:	0a 94       	dec	r0
    1296:	d2 f7       	brpl	.-12     	; 0x128c <__floatunsisf+0x64>
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	a1 09       	sbc	r26, r1
    129c:	b1 09       	sbc	r27, r1
    129e:	8e 21       	and	r24, r14
    12a0:	9f 21       	and	r25, r15
    12a2:	a0 23       	and	r26, r16
    12a4:	b1 23       	and	r27, r17
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	a1 05       	cpc	r26, r1
    12aa:	b1 05       	cpc	r27, r1
    12ac:	21 f0       	breq	.+8      	; 0x12b6 <__floatunsisf+0x8e>
    12ae:	21 e0       	ldi	r18, 0x01	; 1
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e0       	ldi	r20, 0x00	; 0
    12b4:	50 e0       	ldi	r21, 0x00	; 0
    12b6:	04 c0       	rjmp	.+8      	; 0x12c0 <__floatunsisf+0x98>
    12b8:	16 95       	lsr	r17
    12ba:	07 95       	ror	r16
    12bc:	f7 94       	ror	r15
    12be:	e7 94       	ror	r14
    12c0:	ea 95       	dec	r30
    12c2:	d2 f7       	brpl	.-12     	; 0x12b8 <__floatunsisf+0x90>
    12c4:	2e 29       	or	r18, r14
    12c6:	3f 29       	or	r19, r15
    12c8:	40 2b       	or	r20, r16
    12ca:	51 2b       	or	r21, r17
    12cc:	2d 83       	std	Y+5, r18	; 0x05
    12ce:	3e 83       	std	Y+6, r19	; 0x06
    12d0:	4f 83       	std	Y+7, r20	; 0x07
    12d2:	58 87       	std	Y+8, r21	; 0x08
    12d4:	8e e1       	ldi	r24, 0x1E	; 30
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	86 1b       	sub	r24, r22
    12da:	97 0b       	sbc	r25, r23
    12dc:	9c 83       	std	Y+4, r25	; 0x04
    12de:	8b 83       	std	Y+3, r24	; 0x03
    12e0:	13 c0       	rjmp	.+38     	; 0x1308 <__floatunsisf+0xe0>
    12e2:	61 15       	cp	r22, r1
    12e4:	71 05       	cpc	r23, r1
    12e6:	81 f0       	breq	.+32     	; 0x1308 <__floatunsisf+0xe0>
    12e8:	06 2e       	mov	r0, r22
    12ea:	04 c0       	rjmp	.+8      	; 0x12f4 <__floatunsisf+0xcc>
    12ec:	ee 0c       	add	r14, r14
    12ee:	ff 1c       	adc	r15, r15
    12f0:	00 1f       	adc	r16, r16
    12f2:	11 1f       	adc	r17, r17
    12f4:	0a 94       	dec	r0
    12f6:	d2 f7       	brpl	.-12     	; 0x12ec <__floatunsisf+0xc4>
    12f8:	ed 82       	std	Y+5, r14	; 0x05
    12fa:	fe 82       	std	Y+6, r15	; 0x06
    12fc:	0f 83       	std	Y+7, r16	; 0x07
    12fe:	18 87       	std	Y+8, r17	; 0x08
    1300:	c6 1a       	sub	r12, r22
    1302:	d7 0a       	sbc	r13, r23
    1304:	dc 82       	std	Y+4, r13	; 0x04
    1306:	cb 82       	std	Y+3, r12	; 0x03
    1308:	1a 82       	std	Y+2, r1	; 0x02
    130a:	ce 01       	movw	r24, r28
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__pack_f>
    1312:	28 96       	adiw	r28, 0x08	; 8
    1314:	e8 e0       	ldi	r30, 0x08	; 8
    1316:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__epilogue_restores__+0x14>

0000131a <__clzsi2>:
    131a:	ef 92       	push	r14
    131c:	ff 92       	push	r15
    131e:	0f 93       	push	r16
    1320:	1f 93       	push	r17
    1322:	7b 01       	movw	r14, r22
    1324:	8c 01       	movw	r16, r24
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	e8 16       	cp	r14, r24
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	f8 06       	cpc	r15, r24
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	08 07       	cpc	r16, r24
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	18 07       	cpc	r17, r24
    1336:	88 f4       	brcc	.+34     	; 0x135a <__clzsi2+0x40>
    1338:	8f ef       	ldi	r24, 0xFF	; 255
    133a:	e8 16       	cp	r14, r24
    133c:	f1 04       	cpc	r15, r1
    133e:	01 05       	cpc	r16, r1
    1340:	11 05       	cpc	r17, r1
    1342:	31 f0       	breq	.+12     	; 0x1350 <__clzsi2+0x36>
    1344:	28 f0       	brcs	.+10     	; 0x1350 <__clzsi2+0x36>
    1346:	88 e0       	ldi	r24, 0x08	; 8
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	a0 e0       	ldi	r26, 0x00	; 0
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	17 c0       	rjmp	.+46     	; 0x137e <__clzsi2+0x64>
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	a0 e0       	ldi	r26, 0x00	; 0
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	12 c0       	rjmp	.+36     	; 0x137e <__clzsi2+0x64>
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	e8 16       	cp	r14, r24
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	f8 06       	cpc	r15, r24
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	08 07       	cpc	r16, r24
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	18 07       	cpc	r17, r24
    136a:	28 f0       	brcs	.+10     	; 0x1376 <__clzsi2+0x5c>
    136c:	88 e1       	ldi	r24, 0x18	; 24
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	a0 e0       	ldi	r26, 0x00	; 0
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	04 c0       	rjmp	.+8      	; 0x137e <__clzsi2+0x64>
    1376:	80 e1       	ldi	r24, 0x10	; 16
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	a0 e0       	ldi	r26, 0x00	; 0
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	20 e2       	ldi	r18, 0x20	; 32
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	40 e0       	ldi	r20, 0x00	; 0
    1384:	50 e0       	ldi	r21, 0x00	; 0
    1386:	28 1b       	sub	r18, r24
    1388:	39 0b       	sbc	r19, r25
    138a:	4a 0b       	sbc	r20, r26
    138c:	5b 0b       	sbc	r21, r27
    138e:	04 c0       	rjmp	.+8      	; 0x1398 <__clzsi2+0x7e>
    1390:	16 95       	lsr	r17
    1392:	07 95       	ror	r16
    1394:	f7 94       	ror	r15
    1396:	e7 94       	ror	r14
    1398:	8a 95       	dec	r24
    139a:	d2 f7       	brpl	.-12     	; 0x1390 <__clzsi2+0x76>
    139c:	f7 01       	movw	r30, r14
    139e:	e8 59       	subi	r30, 0x98	; 152
    13a0:	ff 4f       	sbci	r31, 0xFF	; 255
    13a2:	80 81       	ld	r24, Z
    13a4:	28 1b       	sub	r18, r24
    13a6:	31 09       	sbc	r19, r1
    13a8:	41 09       	sbc	r20, r1
    13aa:	51 09       	sbc	r21, r1
    13ac:	c9 01       	movw	r24, r18
    13ae:	1f 91       	pop	r17
    13b0:	0f 91       	pop	r16
    13b2:	ff 90       	pop	r15
    13b4:	ef 90       	pop	r14
    13b6:	08 95       	ret

000013b8 <__pack_f>:
    13b8:	df 92       	push	r13
    13ba:	ef 92       	push	r14
    13bc:	ff 92       	push	r15
    13be:	0f 93       	push	r16
    13c0:	1f 93       	push	r17
    13c2:	fc 01       	movw	r30, r24
    13c4:	e4 80       	ldd	r14, Z+4	; 0x04
    13c6:	f5 80       	ldd	r15, Z+5	; 0x05
    13c8:	06 81       	ldd	r16, Z+6	; 0x06
    13ca:	17 81       	ldd	r17, Z+7	; 0x07
    13cc:	d1 80       	ldd	r13, Z+1	; 0x01
    13ce:	80 81       	ld	r24, Z
    13d0:	82 30       	cpi	r24, 0x02	; 2
    13d2:	48 f4       	brcc	.+18     	; 0x13e6 <__pack_f+0x2e>
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	a0 e1       	ldi	r26, 0x10	; 16
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e8 2a       	or	r14, r24
    13de:	f9 2a       	or	r15, r25
    13e0:	0a 2b       	or	r16, r26
    13e2:	1b 2b       	or	r17, r27
    13e4:	a5 c0       	rjmp	.+330    	; 0x1530 <__pack_f+0x178>
    13e6:	84 30       	cpi	r24, 0x04	; 4
    13e8:	09 f4       	brne	.+2      	; 0x13ec <__pack_f+0x34>
    13ea:	9f c0       	rjmp	.+318    	; 0x152a <__pack_f+0x172>
    13ec:	82 30       	cpi	r24, 0x02	; 2
    13ee:	21 f4       	brne	.+8      	; 0x13f8 <__pack_f+0x40>
    13f0:	ee 24       	eor	r14, r14
    13f2:	ff 24       	eor	r15, r15
    13f4:	87 01       	movw	r16, r14
    13f6:	05 c0       	rjmp	.+10     	; 0x1402 <__pack_f+0x4a>
    13f8:	e1 14       	cp	r14, r1
    13fa:	f1 04       	cpc	r15, r1
    13fc:	01 05       	cpc	r16, r1
    13fe:	11 05       	cpc	r17, r1
    1400:	19 f4       	brne	.+6      	; 0x1408 <__pack_f+0x50>
    1402:	e0 e0       	ldi	r30, 0x00	; 0
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	96 c0       	rjmp	.+300    	; 0x1534 <__pack_f+0x17c>
    1408:	62 81       	ldd	r22, Z+2	; 0x02
    140a:	73 81       	ldd	r23, Z+3	; 0x03
    140c:	9f ef       	ldi	r25, 0xFF	; 255
    140e:	62 38       	cpi	r22, 0x82	; 130
    1410:	79 07       	cpc	r23, r25
    1412:	0c f0       	brlt	.+2      	; 0x1416 <__pack_f+0x5e>
    1414:	5b c0       	rjmp	.+182    	; 0x14cc <__pack_f+0x114>
    1416:	22 e8       	ldi	r18, 0x82	; 130
    1418:	3f ef       	ldi	r19, 0xFF	; 255
    141a:	26 1b       	sub	r18, r22
    141c:	37 0b       	sbc	r19, r23
    141e:	2a 31       	cpi	r18, 0x1A	; 26
    1420:	31 05       	cpc	r19, r1
    1422:	2c f0       	brlt	.+10     	; 0x142e <__pack_f+0x76>
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e0       	ldi	r20, 0x00	; 0
    142a:	50 e0       	ldi	r21, 0x00	; 0
    142c:	2a c0       	rjmp	.+84     	; 0x1482 <__pack_f+0xca>
    142e:	b8 01       	movw	r22, r16
    1430:	a7 01       	movw	r20, r14
    1432:	02 2e       	mov	r0, r18
    1434:	04 c0       	rjmp	.+8      	; 0x143e <__pack_f+0x86>
    1436:	76 95       	lsr	r23
    1438:	67 95       	ror	r22
    143a:	57 95       	ror	r21
    143c:	47 95       	ror	r20
    143e:	0a 94       	dec	r0
    1440:	d2 f7       	brpl	.-12     	; 0x1436 <__pack_f+0x7e>
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	a0 e0       	ldi	r26, 0x00	; 0
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	04 c0       	rjmp	.+8      	; 0x1454 <__pack_f+0x9c>
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	aa 1f       	adc	r26, r26
    1452:	bb 1f       	adc	r27, r27
    1454:	2a 95       	dec	r18
    1456:	d2 f7       	brpl	.-12     	; 0x144c <__pack_f+0x94>
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	a1 09       	sbc	r26, r1
    145c:	b1 09       	sbc	r27, r1
    145e:	8e 21       	and	r24, r14
    1460:	9f 21       	and	r25, r15
    1462:	a0 23       	and	r26, r16
    1464:	b1 23       	and	r27, r17
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	a1 05       	cpc	r26, r1
    146a:	b1 05       	cpc	r27, r1
    146c:	21 f0       	breq	.+8      	; 0x1476 <__pack_f+0xbe>
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	a0 e0       	ldi	r26, 0x00	; 0
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	9a 01       	movw	r18, r20
    1478:	ab 01       	movw	r20, r22
    147a:	28 2b       	or	r18, r24
    147c:	39 2b       	or	r19, r25
    147e:	4a 2b       	or	r20, r26
    1480:	5b 2b       	or	r21, r27
    1482:	da 01       	movw	r26, r20
    1484:	c9 01       	movw	r24, r18
    1486:	8f 77       	andi	r24, 0x7F	; 127
    1488:	90 70       	andi	r25, 0x00	; 0
    148a:	a0 70       	andi	r26, 0x00	; 0
    148c:	b0 70       	andi	r27, 0x00	; 0
    148e:	80 34       	cpi	r24, 0x40	; 64
    1490:	91 05       	cpc	r25, r1
    1492:	a1 05       	cpc	r26, r1
    1494:	b1 05       	cpc	r27, r1
    1496:	39 f4       	brne	.+14     	; 0x14a6 <__pack_f+0xee>
    1498:	27 ff       	sbrs	r18, 7
    149a:	09 c0       	rjmp	.+18     	; 0x14ae <__pack_f+0xf6>
    149c:	20 5c       	subi	r18, 0xC0	; 192
    149e:	3f 4f       	sbci	r19, 0xFF	; 255
    14a0:	4f 4f       	sbci	r20, 0xFF	; 255
    14a2:	5f 4f       	sbci	r21, 0xFF	; 255
    14a4:	04 c0       	rjmp	.+8      	; 0x14ae <__pack_f+0xf6>
    14a6:	21 5c       	subi	r18, 0xC1	; 193
    14a8:	3f 4f       	sbci	r19, 0xFF	; 255
    14aa:	4f 4f       	sbci	r20, 0xFF	; 255
    14ac:	5f 4f       	sbci	r21, 0xFF	; 255
    14ae:	e0 e0       	ldi	r30, 0x00	; 0
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	20 30       	cpi	r18, 0x00	; 0
    14b4:	a0 e0       	ldi	r26, 0x00	; 0
    14b6:	3a 07       	cpc	r19, r26
    14b8:	a0 e0       	ldi	r26, 0x00	; 0
    14ba:	4a 07       	cpc	r20, r26
    14bc:	a0 e4       	ldi	r26, 0x40	; 64
    14be:	5a 07       	cpc	r21, r26
    14c0:	10 f0       	brcs	.+4      	; 0x14c6 <__pack_f+0x10e>
    14c2:	e1 e0       	ldi	r30, 0x01	; 1
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	79 01       	movw	r14, r18
    14c8:	8a 01       	movw	r16, r20
    14ca:	27 c0       	rjmp	.+78     	; 0x151a <__pack_f+0x162>
    14cc:	60 38       	cpi	r22, 0x80	; 128
    14ce:	71 05       	cpc	r23, r1
    14d0:	64 f5       	brge	.+88     	; 0x152a <__pack_f+0x172>
    14d2:	fb 01       	movw	r30, r22
    14d4:	e1 58       	subi	r30, 0x81	; 129
    14d6:	ff 4f       	sbci	r31, 0xFF	; 255
    14d8:	d8 01       	movw	r26, r16
    14da:	c7 01       	movw	r24, r14
    14dc:	8f 77       	andi	r24, 0x7F	; 127
    14de:	90 70       	andi	r25, 0x00	; 0
    14e0:	a0 70       	andi	r26, 0x00	; 0
    14e2:	b0 70       	andi	r27, 0x00	; 0
    14e4:	80 34       	cpi	r24, 0x40	; 64
    14e6:	91 05       	cpc	r25, r1
    14e8:	a1 05       	cpc	r26, r1
    14ea:	b1 05       	cpc	r27, r1
    14ec:	39 f4       	brne	.+14     	; 0x14fc <__pack_f+0x144>
    14ee:	e7 fe       	sbrs	r14, 7
    14f0:	0d c0       	rjmp	.+26     	; 0x150c <__pack_f+0x154>
    14f2:	80 e4       	ldi	r24, 0x40	; 64
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	a0 e0       	ldi	r26, 0x00	; 0
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	04 c0       	rjmp	.+8      	; 0x1504 <__pack_f+0x14c>
    14fc:	8f e3       	ldi	r24, 0x3F	; 63
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	a0 e0       	ldi	r26, 0x00	; 0
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e8 0e       	add	r14, r24
    1506:	f9 1e       	adc	r15, r25
    1508:	0a 1f       	adc	r16, r26
    150a:	1b 1f       	adc	r17, r27
    150c:	17 ff       	sbrs	r17, 7
    150e:	05 c0       	rjmp	.+10     	; 0x151a <__pack_f+0x162>
    1510:	16 95       	lsr	r17
    1512:	07 95       	ror	r16
    1514:	f7 94       	ror	r15
    1516:	e7 94       	ror	r14
    1518:	31 96       	adiw	r30, 0x01	; 1
    151a:	87 e0       	ldi	r24, 0x07	; 7
    151c:	16 95       	lsr	r17
    151e:	07 95       	ror	r16
    1520:	f7 94       	ror	r15
    1522:	e7 94       	ror	r14
    1524:	8a 95       	dec	r24
    1526:	d1 f7       	brne	.-12     	; 0x151c <__pack_f+0x164>
    1528:	05 c0       	rjmp	.+10     	; 0x1534 <__pack_f+0x17c>
    152a:	ee 24       	eor	r14, r14
    152c:	ff 24       	eor	r15, r15
    152e:	87 01       	movw	r16, r14
    1530:	ef ef       	ldi	r30, 0xFF	; 255
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	6e 2f       	mov	r22, r30
    1536:	67 95       	ror	r22
    1538:	66 27       	eor	r22, r22
    153a:	67 95       	ror	r22
    153c:	90 2f       	mov	r25, r16
    153e:	9f 77       	andi	r25, 0x7F	; 127
    1540:	d7 94       	ror	r13
    1542:	dd 24       	eor	r13, r13
    1544:	d7 94       	ror	r13
    1546:	8e 2f       	mov	r24, r30
    1548:	86 95       	lsr	r24
    154a:	49 2f       	mov	r20, r25
    154c:	46 2b       	or	r20, r22
    154e:	58 2f       	mov	r21, r24
    1550:	5d 29       	or	r21, r13
    1552:	b7 01       	movw	r22, r14
    1554:	ca 01       	movw	r24, r20
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	ff 90       	pop	r15
    155c:	ef 90       	pop	r14
    155e:	df 90       	pop	r13
    1560:	08 95       	ret

00001562 <__unpack_f>:
    1562:	fc 01       	movw	r30, r24
    1564:	db 01       	movw	r26, r22
    1566:	40 81       	ld	r20, Z
    1568:	51 81       	ldd	r21, Z+1	; 0x01
    156a:	22 81       	ldd	r18, Z+2	; 0x02
    156c:	62 2f       	mov	r22, r18
    156e:	6f 77       	andi	r22, 0x7F	; 127
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	22 1f       	adc	r18, r18
    1574:	22 27       	eor	r18, r18
    1576:	22 1f       	adc	r18, r18
    1578:	93 81       	ldd	r25, Z+3	; 0x03
    157a:	89 2f       	mov	r24, r25
    157c:	88 0f       	add	r24, r24
    157e:	82 2b       	or	r24, r18
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	99 1f       	adc	r25, r25
    1586:	99 27       	eor	r25, r25
    1588:	99 1f       	adc	r25, r25
    158a:	11 96       	adiw	r26, 0x01	; 1
    158c:	9c 93       	st	X, r25
    158e:	11 97       	sbiw	r26, 0x01	; 1
    1590:	21 15       	cp	r18, r1
    1592:	31 05       	cpc	r19, r1
    1594:	a9 f5       	brne	.+106    	; 0x1600 <__unpack_f+0x9e>
    1596:	41 15       	cp	r20, r1
    1598:	51 05       	cpc	r21, r1
    159a:	61 05       	cpc	r22, r1
    159c:	71 05       	cpc	r23, r1
    159e:	11 f4       	brne	.+4      	; 0x15a4 <__unpack_f+0x42>
    15a0:	82 e0       	ldi	r24, 0x02	; 2
    15a2:	37 c0       	rjmp	.+110    	; 0x1612 <__unpack_f+0xb0>
    15a4:	82 e8       	ldi	r24, 0x82	; 130
    15a6:	9f ef       	ldi	r25, 0xFF	; 255
    15a8:	13 96       	adiw	r26, 0x03	; 3
    15aa:	9c 93       	st	X, r25
    15ac:	8e 93       	st	-X, r24
    15ae:	12 97       	sbiw	r26, 0x02	; 2
    15b0:	9a 01       	movw	r18, r20
    15b2:	ab 01       	movw	r20, r22
    15b4:	67 e0       	ldi	r22, 0x07	; 7
    15b6:	22 0f       	add	r18, r18
    15b8:	33 1f       	adc	r19, r19
    15ba:	44 1f       	adc	r20, r20
    15bc:	55 1f       	adc	r21, r21
    15be:	6a 95       	dec	r22
    15c0:	d1 f7       	brne	.-12     	; 0x15b6 <__unpack_f+0x54>
    15c2:	83 e0       	ldi	r24, 0x03	; 3
    15c4:	8c 93       	st	X, r24
    15c6:	0d c0       	rjmp	.+26     	; 0x15e2 <__unpack_f+0x80>
    15c8:	22 0f       	add	r18, r18
    15ca:	33 1f       	adc	r19, r19
    15cc:	44 1f       	adc	r20, r20
    15ce:	55 1f       	adc	r21, r21
    15d0:	12 96       	adiw	r26, 0x02	; 2
    15d2:	8d 91       	ld	r24, X+
    15d4:	9c 91       	ld	r25, X
    15d6:	13 97       	sbiw	r26, 0x03	; 3
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	13 96       	adiw	r26, 0x03	; 3
    15dc:	9c 93       	st	X, r25
    15de:	8e 93       	st	-X, r24
    15e0:	12 97       	sbiw	r26, 0x02	; 2
    15e2:	20 30       	cpi	r18, 0x00	; 0
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	38 07       	cpc	r19, r24
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	48 07       	cpc	r20, r24
    15ec:	80 e4       	ldi	r24, 0x40	; 64
    15ee:	58 07       	cpc	r21, r24
    15f0:	58 f3       	brcs	.-42     	; 0x15c8 <__unpack_f+0x66>
    15f2:	14 96       	adiw	r26, 0x04	; 4
    15f4:	2d 93       	st	X+, r18
    15f6:	3d 93       	st	X+, r19
    15f8:	4d 93       	st	X+, r20
    15fa:	5c 93       	st	X, r21
    15fc:	17 97       	sbiw	r26, 0x07	; 7
    15fe:	08 95       	ret
    1600:	2f 3f       	cpi	r18, 0xFF	; 255
    1602:	31 05       	cpc	r19, r1
    1604:	79 f4       	brne	.+30     	; 0x1624 <__unpack_f+0xc2>
    1606:	41 15       	cp	r20, r1
    1608:	51 05       	cpc	r21, r1
    160a:	61 05       	cpc	r22, r1
    160c:	71 05       	cpc	r23, r1
    160e:	19 f4       	brne	.+6      	; 0x1616 <__unpack_f+0xb4>
    1610:	84 e0       	ldi	r24, 0x04	; 4
    1612:	8c 93       	st	X, r24
    1614:	08 95       	ret
    1616:	64 ff       	sbrs	r22, 4
    1618:	03 c0       	rjmp	.+6      	; 0x1620 <__unpack_f+0xbe>
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	8c 93       	st	X, r24
    161e:	12 c0       	rjmp	.+36     	; 0x1644 <__unpack_f+0xe2>
    1620:	1c 92       	st	X, r1
    1622:	10 c0       	rjmp	.+32     	; 0x1644 <__unpack_f+0xe2>
    1624:	2f 57       	subi	r18, 0x7F	; 127
    1626:	30 40       	sbci	r19, 0x00	; 0
    1628:	13 96       	adiw	r26, 0x03	; 3
    162a:	3c 93       	st	X, r19
    162c:	2e 93       	st	-X, r18
    162e:	12 97       	sbiw	r26, 0x02	; 2
    1630:	83 e0       	ldi	r24, 0x03	; 3
    1632:	8c 93       	st	X, r24
    1634:	87 e0       	ldi	r24, 0x07	; 7
    1636:	44 0f       	add	r20, r20
    1638:	55 1f       	adc	r21, r21
    163a:	66 1f       	adc	r22, r22
    163c:	77 1f       	adc	r23, r23
    163e:	8a 95       	dec	r24
    1640:	d1 f7       	brne	.-12     	; 0x1636 <__unpack_f+0xd4>
    1642:	70 64       	ori	r23, 0x40	; 64
    1644:	14 96       	adiw	r26, 0x04	; 4
    1646:	4d 93       	st	X+, r20
    1648:	5d 93       	st	X+, r21
    164a:	6d 93       	st	X+, r22
    164c:	7c 93       	st	X, r23
    164e:	17 97       	sbiw	r26, 0x07	; 7
    1650:	08 95       	ret

00001652 <__fpcmp_parts_f>:
    1652:	1f 93       	push	r17
    1654:	dc 01       	movw	r26, r24
    1656:	fb 01       	movw	r30, r22
    1658:	9c 91       	ld	r25, X
    165a:	92 30       	cpi	r25, 0x02	; 2
    165c:	08 f4       	brcc	.+2      	; 0x1660 <__fpcmp_parts_f+0xe>
    165e:	47 c0       	rjmp	.+142    	; 0x16ee <__fpcmp_parts_f+0x9c>
    1660:	80 81       	ld	r24, Z
    1662:	82 30       	cpi	r24, 0x02	; 2
    1664:	08 f4       	brcc	.+2      	; 0x1668 <__fpcmp_parts_f+0x16>
    1666:	43 c0       	rjmp	.+134    	; 0x16ee <__fpcmp_parts_f+0x9c>
    1668:	94 30       	cpi	r25, 0x04	; 4
    166a:	51 f4       	brne	.+20     	; 0x1680 <__fpcmp_parts_f+0x2e>
    166c:	11 96       	adiw	r26, 0x01	; 1
    166e:	1c 91       	ld	r17, X
    1670:	84 30       	cpi	r24, 0x04	; 4
    1672:	99 f5       	brne	.+102    	; 0x16da <__fpcmp_parts_f+0x88>
    1674:	81 81       	ldd	r24, Z+1	; 0x01
    1676:	68 2f       	mov	r22, r24
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	61 1b       	sub	r22, r17
    167c:	71 09       	sbc	r23, r1
    167e:	3f c0       	rjmp	.+126    	; 0x16fe <__fpcmp_parts_f+0xac>
    1680:	84 30       	cpi	r24, 0x04	; 4
    1682:	21 f0       	breq	.+8      	; 0x168c <__fpcmp_parts_f+0x3a>
    1684:	92 30       	cpi	r25, 0x02	; 2
    1686:	31 f4       	brne	.+12     	; 0x1694 <__fpcmp_parts_f+0x42>
    1688:	82 30       	cpi	r24, 0x02	; 2
    168a:	b9 f1       	breq	.+110    	; 0x16fa <__fpcmp_parts_f+0xa8>
    168c:	81 81       	ldd	r24, Z+1	; 0x01
    168e:	88 23       	and	r24, r24
    1690:	89 f1       	breq	.+98     	; 0x16f4 <__fpcmp_parts_f+0xa2>
    1692:	2d c0       	rjmp	.+90     	; 0x16ee <__fpcmp_parts_f+0x9c>
    1694:	11 96       	adiw	r26, 0x01	; 1
    1696:	1c 91       	ld	r17, X
    1698:	11 97       	sbiw	r26, 0x01	; 1
    169a:	82 30       	cpi	r24, 0x02	; 2
    169c:	f1 f0       	breq	.+60     	; 0x16da <__fpcmp_parts_f+0x88>
    169e:	81 81       	ldd	r24, Z+1	; 0x01
    16a0:	18 17       	cp	r17, r24
    16a2:	d9 f4       	brne	.+54     	; 0x16da <__fpcmp_parts_f+0x88>
    16a4:	12 96       	adiw	r26, 0x02	; 2
    16a6:	2d 91       	ld	r18, X+
    16a8:	3c 91       	ld	r19, X
    16aa:	13 97       	sbiw	r26, 0x03	; 3
    16ac:	82 81       	ldd	r24, Z+2	; 0x02
    16ae:	93 81       	ldd	r25, Z+3	; 0x03
    16b0:	82 17       	cp	r24, r18
    16b2:	93 07       	cpc	r25, r19
    16b4:	94 f0       	brlt	.+36     	; 0x16da <__fpcmp_parts_f+0x88>
    16b6:	28 17       	cp	r18, r24
    16b8:	39 07       	cpc	r19, r25
    16ba:	bc f0       	brlt	.+46     	; 0x16ea <__fpcmp_parts_f+0x98>
    16bc:	14 96       	adiw	r26, 0x04	; 4
    16be:	8d 91       	ld	r24, X+
    16c0:	9d 91       	ld	r25, X+
    16c2:	0d 90       	ld	r0, X+
    16c4:	bc 91       	ld	r27, X
    16c6:	a0 2d       	mov	r26, r0
    16c8:	24 81       	ldd	r18, Z+4	; 0x04
    16ca:	35 81       	ldd	r19, Z+5	; 0x05
    16cc:	46 81       	ldd	r20, Z+6	; 0x06
    16ce:	57 81       	ldd	r21, Z+7	; 0x07
    16d0:	28 17       	cp	r18, r24
    16d2:	39 07       	cpc	r19, r25
    16d4:	4a 07       	cpc	r20, r26
    16d6:	5b 07       	cpc	r21, r27
    16d8:	18 f4       	brcc	.+6      	; 0x16e0 <__fpcmp_parts_f+0x8e>
    16da:	11 23       	and	r17, r17
    16dc:	41 f0       	breq	.+16     	; 0x16ee <__fpcmp_parts_f+0x9c>
    16de:	0a c0       	rjmp	.+20     	; 0x16f4 <__fpcmp_parts_f+0xa2>
    16e0:	82 17       	cp	r24, r18
    16e2:	93 07       	cpc	r25, r19
    16e4:	a4 07       	cpc	r26, r20
    16e6:	b5 07       	cpc	r27, r21
    16e8:	40 f4       	brcc	.+16     	; 0x16fa <__fpcmp_parts_f+0xa8>
    16ea:	11 23       	and	r17, r17
    16ec:	19 f0       	breq	.+6      	; 0x16f4 <__fpcmp_parts_f+0xa2>
    16ee:	61 e0       	ldi	r22, 0x01	; 1
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	05 c0       	rjmp	.+10     	; 0x16fe <__fpcmp_parts_f+0xac>
    16f4:	6f ef       	ldi	r22, 0xFF	; 255
    16f6:	7f ef       	ldi	r23, 0xFF	; 255
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <__fpcmp_parts_f+0xac>
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	cb 01       	movw	r24, r22
    1700:	1f 91       	pop	r17
    1702:	08 95       	ret

00001704 <__eerd_word>:
    1704:	df 92       	push	r13
    1706:	ef 92       	push	r14
    1708:	ff 92       	push	r15
    170a:	0f 93       	push	r16
    170c:	1f 93       	push	r17
    170e:	7b 01       	movw	r14, r22
    1710:	8c 01       	movw	r16, r24
    1712:	fb 01       	movw	r30, r22
    1714:	09 95       	icall
    1716:	d8 2e       	mov	r13, r24
    1718:	c8 01       	movw	r24, r16
    171a:	01 96       	adiw	r24, 0x01	; 1
    171c:	f7 01       	movw	r30, r14
    171e:	09 95       	icall
    1720:	98 2f       	mov	r25, r24
    1722:	8d 2d       	mov	r24, r13
    1724:	1f 91       	pop	r17
    1726:	0f 91       	pop	r16
    1728:	ff 90       	pop	r15
    172a:	ef 90       	pop	r14
    172c:	df 90       	pop	r13
    172e:	08 95       	ret

00001730 <__eewr_word>:
    1730:	df 92       	push	r13
    1732:	ef 92       	push	r14
    1734:	ff 92       	push	r15
    1736:	0f 93       	push	r16
    1738:	1f 93       	push	r17
    173a:	d7 2e       	mov	r13, r23
    173c:	7a 01       	movw	r14, r20
    173e:	8c 01       	movw	r16, r24
    1740:	fa 01       	movw	r30, r20
    1742:	09 95       	icall
    1744:	6d 2d       	mov	r22, r13
    1746:	c8 01       	movw	r24, r16
    1748:	01 96       	adiw	r24, 0x01	; 1
    174a:	f7 01       	movw	r30, r14
    174c:	09 95       	icall
    174e:	1f 91       	pop	r17
    1750:	0f 91       	pop	r16
    1752:	ff 90       	pop	r15
    1754:	ef 90       	pop	r14
    1756:	df 90       	pop	r13
    1758:	08 95       	ret

0000175a <__udivmodhi4>:
    175a:	aa 1b       	sub	r26, r26
    175c:	bb 1b       	sub	r27, r27
    175e:	51 e1       	ldi	r21, 0x11	; 17
    1760:	07 c0       	rjmp	.+14     	; 0x1770 <__udivmodhi4_ep>

00001762 <__udivmodhi4_loop>:
    1762:	aa 1f       	adc	r26, r26
    1764:	bb 1f       	adc	r27, r27
    1766:	a6 17       	cp	r26, r22
    1768:	b7 07       	cpc	r27, r23
    176a:	10 f0       	brcs	.+4      	; 0x1770 <__udivmodhi4_ep>
    176c:	a6 1b       	sub	r26, r22
    176e:	b7 0b       	sbc	r27, r23

00001770 <__udivmodhi4_ep>:
    1770:	88 1f       	adc	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	5a 95       	dec	r21
    1776:	a9 f7       	brne	.-22     	; 0x1762 <__udivmodhi4_loop>
    1778:	80 95       	com	r24
    177a:	90 95       	com	r25
    177c:	bc 01       	movw	r22, r24
    177e:	cd 01       	movw	r24, r26
    1780:	08 95       	ret

00001782 <__prologue_saves__>:
    1782:	2f 92       	push	r2
    1784:	3f 92       	push	r3
    1786:	4f 92       	push	r4
    1788:	5f 92       	push	r5
    178a:	6f 92       	push	r6
    178c:	7f 92       	push	r7
    178e:	8f 92       	push	r8
    1790:	9f 92       	push	r9
    1792:	af 92       	push	r10
    1794:	bf 92       	push	r11
    1796:	cf 92       	push	r12
    1798:	df 92       	push	r13
    179a:	ef 92       	push	r14
    179c:	ff 92       	push	r15
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	ca 1b       	sub	r28, r26
    17ac:	db 0b       	sbc	r29, r27
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	09 94       	ijmp

000017ba <__epilogue_restores__>:
    17ba:	2a 88       	ldd	r2, Y+18	; 0x12
    17bc:	39 88       	ldd	r3, Y+17	; 0x11
    17be:	48 88       	ldd	r4, Y+16	; 0x10
    17c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    17c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    17c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    17c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    17c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    17ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    17cc:	b9 84       	ldd	r11, Y+9	; 0x09
    17ce:	c8 84       	ldd	r12, Y+8	; 0x08
    17d0:	df 80       	ldd	r13, Y+7	; 0x07
    17d2:	ee 80       	ldd	r14, Y+6	; 0x06
    17d4:	fd 80       	ldd	r15, Y+5	; 0x05
    17d6:	0c 81       	ldd	r16, Y+4	; 0x04
    17d8:	1b 81       	ldd	r17, Y+3	; 0x03
    17da:	aa 81       	ldd	r26, Y+2	; 0x02
    17dc:	b9 81       	ldd	r27, Y+1	; 0x01
    17de:	ce 0f       	add	r28, r30
    17e0:	d1 1d       	adc	r29, r1
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	ed 01       	movw	r28, r26
    17ee:	08 95       	ret

000017f0 <_exit>:
    17f0:	f8 94       	cli

000017f2 <__stop_program>:
    17f2:	ff cf       	rjmp	.-2      	; 0x17f2 <__stop_program>
